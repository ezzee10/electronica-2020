

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 25 15:31:57 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	idataBANK0
    43  00E666                     __pidataBANK0:
    44                           	opt stack 0
    45                           
    46                           ;initializer for _posicionesLeft
    47  00E666  000A               	dw	10
    48  00E668  0014               	dw	20
    49  00E66A  0017               	dw	23
    50  00E66C  0019               	dw	25
    51  00E66E  001E               	dw	30
    52  00E670  0021               	dw	33
    53                           
    54                           ;initializer for _Grados
    55  00E672  00                 	db	0
    56  00E673  A0                 	db	160
    57  00E674  41                 	db	65
    58                           
    59                           ;initializer for _Temp_prog
    60  00E675  00                 	db	0
    61  00E676  B4                 	db	180
    62  00E677  41                 	db	65
    63                           
    64                           ;initializer for _anio
    65  00E678  0014               	dw	20
    66                           
    67                           ;initializer for _dia
    68  00E67A  0010               	dw	16
    69                           
    70                           ;initializer for _diasem
    71  00E67C  0002               	dw	2
    72                           
    73                           ;initializer for _hora
    74  00E67E  0012               	dw	18
    75                           
    76                           ;initializer for _mes
    77  00E680  000B               	dw	11
    78                           
    79                           ;initializer for _minuto
    80  00E682  0037               	dw	55
    81                           
    82                           	psect	mediumconst
    83  00FECC                     __pmediumconst:
    84                           	opt stack 0
    85  00FECC  00                 	db	0
    86  00FECD                     _dpowers:
    87                           	opt stack 0
    88  00FECD  0001               	dw	1
    89  00FECF  000A               	dw	10
    90  00FED1  0064               	dw	100
    91  00FED3  03E8               	dw	1000
    92  00FED5  2710               	dw	10000
    93  00FED7                     __end_of_dpowers:
    94                           	opt stack 0
    95  00FED7                     STR_6:
    96  00FED7  20                 	db	32
    97  00FED8  20                 	db	32
    98  00FED9  20                 	db	32
    99  00FEDA  20                 	db	32
   100  00FEDB  20                 	db	32
   101  00FEDC  20                 	db	32
   102  00FEDD  20                 	db	32
   103  00FEDE  20                 	db	32
   104  00FEDF  20                 	db	32
   105  00FEE0  20                 	db	32
   106  00FEE1  20                 	db	32
   107  00FEE2  20                 	db	32
   108  00FEE3  20                 	db	32
   109  00FEE4  20                 	db	32
   110  00FEE5  20                 	db	32
   111  00FEE6  20                 	db	32
   112  00FEE7  20                 	db	32
   113  00FEE8  20                 	db	32
   114  00FEE9  20                 	db	32
   115  00FEEA  20                 	db	32
   116  00FEEB  00                 	db	0
   117  00FEEC                     STR_12:
   118  00FEEC  4C                 	db	76	;'L'
   119  00FEED  75                 	db	117	;'u'
   120  00FEEE  6E                 	db	110	;'n'
   121  00FEEF  65                 	db	101	;'e'
   122  00FEF0  73                 	db	115	;'s'
   123  00FEF1  20                 	db	32
   124  00FEF2  20                 	db	32
   125  00FEF3  20                 	db	32
   126  00FEF4  20                 	db	32
   127  00FEF5  20                 	db	32
   128  00FEF6  20                 	db	32
   129  00FEF7  20                 	db	32
   130  00FEF8  20                 	db	32
   131  00FEF9  20                 	db	32
   132  00FEFA  20                 	db	32
   133  00FEFB  20                 	db	32
   134  00FEFC  20                 	db	32
   135  00FEFD  20                 	db	32
   136  00FEFE  20                 	db	32
   137  00FEFF  20                 	db	32
   138  00FF00  00                 	db	0
   139  00FF01                     STR_22:
   140  00FF01  53                 	db	83	;'S'
   141  00FF02  61                 	db	97	;'a'
   142  00FF03  62                 	db	98	;'b'
   143  00FF04  61                 	db	97	;'a'
   144  00FF05  64                 	db	100	;'d'
   145  00FF06  6F                 	db	111	;'o'
   146  00FF07  20                 	db	32
   147  00FF08  20                 	db	32
   148  00FF09  20                 	db	32
   149  00FF0A  20                 	db	32
   150  00FF0B  20                 	db	32
   151  00FF0C  20                 	db	32
   152  00FF0D  20                 	db	32
   153  00FF0E  20                 	db	32
   154  00FF0F  20                 	db	32
   155  00FF10  20                 	db	32
   156  00FF11  20                 	db	32
   157  00FF12  20                 	db	32
   158  00FF13  20                 	db	32
   159  00FF14  20                 	db	32
   160  00FF15  00                 	db	0
   161  00FF16                     STR_14:
   162  00FF16  4D                 	db	77	;'M'
   163  00FF17  61                 	db	97	;'a'
   164  00FF18  72                 	db	114	;'r'
   165  00FF19  74                 	db	116	;'t'
   166  00FF1A  65                 	db	101	;'e'
   167  00FF1B  73                 	db	115	;'s'
   168  00FF1C  20                 	db	32
   169  00FF1D  20                 	db	32
   170  00FF1E  20                 	db	32
   171  00FF1F  20                 	db	32
   172  00FF20  20                 	db	32
   173  00FF21  20                 	db	32
   174  00FF22  20                 	db	32
   175  00FF23  20                 	db	32
   176  00FF24  20                 	db	32
   177  00FF25  20                 	db	32
   178  00FF26  20                 	db	32
   179  00FF27  20                 	db	32
   180  00FF28  20                 	db	32
   181  00FF29  20                 	db	32
   182  00FF2A  00                 	db	0
   183  00FF2B                     STR_18:
   184  00FF2B  4A                 	db	74	;'J'
   185  00FF2C  75                 	db	117	;'u'
   186  00FF2D  65                 	db	101	;'e'
   187  00FF2E  76                 	db	118	;'v'
   188  00FF2F  65                 	db	101	;'e'
   189  00FF30  73                 	db	115	;'s'
   190  00FF31  20                 	db	32
   191  00FF32  20                 	db	32
   192  00FF33  20                 	db	32
   193  00FF34  20                 	db	32
   194  00FF35  20                 	db	32
   195  00FF36  20                 	db	32
   196  00FF37  20                 	db	32
   197  00FF38  20                 	db	32
   198  00FF39  20                 	db	32
   199  00FF3A  20                 	db	32
   200  00FF3B  20                 	db	32
   201  00FF3C  20                 	db	32
   202  00FF3D  20                 	db	32
   203  00FF3E  20                 	db	32
   204  00FF3F  00                 	db	0
   205  00FF40                     STR_10:
   206  00FF40  44                 	db	68	;'D'
   207  00FF41  6F                 	db	111	;'o'
   208  00FF42  6D                 	db	109	;'m'
   209  00FF43  69                 	db	105	;'i'
   210  00FF44  6E                 	db	110	;'n'
   211  00FF45  67                 	db	103	;'g'
   212  00FF46  6F                 	db	111	;'o'
   213  00FF47  20                 	db	32
   214  00FF48  20                 	db	32
   215  00FF49  20                 	db	32
   216  00FF4A  20                 	db	32
   217  00FF4B  20                 	db	32
   218  00FF4C  20                 	db	32
   219  00FF4D  20                 	db	32
   220  00FF4E  20                 	db	32
   221  00FF4F  20                 	db	32
   222  00FF50  20                 	db	32
   223  00FF51  20                 	db	32
   224  00FF52  20                 	db	32
   225  00FF53  20                 	db	32
   226  00FF54  00                 	db	0
   227  00FF55                     STR_20:
   228  00FF55  56                 	db	86	;'V'
   229  00FF56  69                 	db	105	;'i'
   230  00FF57  65                 	db	101	;'e'
   231  00FF58  72                 	db	114	;'r'
   232  00FF59  6E                 	db	110	;'n'
   233  00FF5A  65                 	db	101	;'e'
   234  00FF5B  73                 	db	115	;'s'
   235  00FF5C  20                 	db	32
   236  00FF5D  20                 	db	32
   237  00FF5E  20                 	db	32
   238  00FF5F  20                 	db	32
   239  00FF60  20                 	db	32
   240  00FF61  20                 	db	32
   241  00FF62  20                 	db	32
   242  00FF63  20                 	db	32
   243  00FF64  20                 	db	32
   244  00FF65  20                 	db	32
   245  00FF66  20                 	db	32
   246  00FF67  20                 	db	32
   247  00FF68  20                 	db	32
   248  00FF69  00                 	db	0
   249  00FF6A                     STR_16:
   250  00FF6A  4D                 	db	77	;'M'
   251  00FF6B  69                 	db	105	;'i'
   252  00FF6C  65                 	db	101	;'e'
   253  00FF6D  72                 	db	114	;'r'
   254  00FF6E  63                 	db	99	;'c'
   255  00FF6F  6F                 	db	111	;'o'
   256  00FF70  6C                 	db	108	;'l'
   257  00FF71  65                 	db	101	;'e'
   258  00FF72  73                 	db	115	;'s'
   259  00FF73  20                 	db	32
   260  00FF74  20                 	db	32
   261  00FF75  20                 	db	32
   262  00FF76  20                 	db	32
   263  00FF77  20                 	db	32
   264  00FF78  20                 	db	32
   265  00FF79  20                 	db	32
   266  00FF7A  20                 	db	32
   267  00FF7B  20                 	db	32
   268  00FF7C  20                 	db	32
   269  00FF7D  20                 	db	32
   270  00FF7E  00                 	db	0
   271  00FF7F                     STR_5:
   272  00FF7F  43                 	db	67	;'C'
   273  00FF80  45                 	db	69	;'E'
   274  00FF81  4E                 	db	78	;'N'
   275  00FF82  54                 	db	84	;'T'
   276  00FF83  45                 	db	69	;'E'
   277  00FF84  52                 	db	82	;'R'
   278  00FF85  20                 	db	32
   279  00FF86  20                 	db	32
   280  00FF87  20                 	db	32
   281  00FF88  20                 	db	32
   282  00FF89  20                 	db	32
   283  00FF8A  20                 	db	32
   284  00FF8B  20                 	db	32
   285  00FF8C  20                 	db	32
   286  00FF8D  20                 	db	32
   287  00FF8E  20                 	db	32
   288  00FF8F  20                 	db	32
   289  00FF90  20                 	db	32
   290  00FF91  20                 	db	32
   291  00FF92  00                 	db	0
   292  00FF93                     STR_3:
   293  00FF93  52                 	db	82	;'R'
   294  00FF94  49                 	db	73	;'I'
   295  00FF95  47                 	db	71	;'G'
   296  00FF96  48                 	db	72	;'H'
   297  00FF97  54                 	db	84	;'T'
   298  00FF98  20                 	db	32
   299  00FF99  20                 	db	32
   300  00FF9A  20                 	db	32
   301  00FF9B  20                 	db	32
   302  00FF9C  20                 	db	32
   303  00FF9D  20                 	db	32
   304  00FF9E  20                 	db	32
   305  00FF9F  20                 	db	32
   306  00FFA0  20                 	db	32
   307  00FFA1  20                 	db	32
   308  00FFA2  20                 	db	32
   309  00FFA3  20                 	db	32
   310  00FFA4  20                 	db	32
   311  00FFA5  00                 	db	0
   312  00FFA6                     STR_4:
   313  00FFA6  55                 	db	85	;'U'
   314  00FFA7  50                 	db	80	;'P'
   315  00FFA8  20                 	db	32
   316  00FFA9  20                 	db	32
   317  00FFAA  20                 	db	32
   318  00FFAB  20                 	db	32
   319  00FFAC  20                 	db	32
   320  00FFAD  20                 	db	32
   321  00FFAE  20                 	db	32
   322  00FFAF  20                 	db	32
   323  00FFB0  20                 	db	32
   324  00FFB1  20                 	db	32
   325  00FFB2  20                 	db	32
   326  00FFB3  20                 	db	32
   327  00FFB4  20                 	db	32
   328  00FFB5  20                 	db	32
   329  00FFB6  20                 	db	32
   330  00FFB7  00                 	db	0
   331  00FFB8                     STR_1:
   332  00FFB8  50                 	db	80	;'P'
   333  00FFB9  72                 	db	114	;'r'
   334  00FFBA  6F                 	db	111	;'o'
   335  00FFBB  67                 	db	103	;'g'
   336  00FFBC  72                 	db	114	;'r'
   337  00FFBD  61                 	db	97	;'a'
   338  00FFBE  6D                 	db	109	;'m'
   339  00FFBF  20                 	db	32
   340  00FFC0  64                 	db	100	;'d'
   341  00FFC1  65                 	db	101	;'e'
   342  00FFC2  6C                 	db	108	;'l'
   343  00FFC3  20                 	db	32
   344  00FFC4  72                 	db	114	;'r'
   345  00FFC5  65                 	db	101	;'e'
   346  00FFC6  6C                 	db	108	;'l'
   347  00FFC7  6F                 	db	111	;'o'
   348  00FFC8  6A                 	db	106	;'j'
   349  00FFC9  00                 	db	0
   350  00FFCA                     STR_7:
   351  00FFCA  25                 	db	37
   352  00FFCB  30                 	db	48	;'0'
   353  00FFCC  32                 	db	50	;'2'
   354  00FFCD  75                 	db	117	;'u'
   355  00FFCE  2F                 	db	47
   356  00FFCF  25                 	db	37
   357  00FFD0  30                 	db	48	;'0'
   358  00FFD1  32                 	db	50	;'2'
   359  00FFD2  75                 	db	117	;'u'
   360  00FFD3  2F                 	db	47
   361  00FFD4  25                 	db	37
   362  00FFD5  30                 	db	48	;'0'
   363  00FFD6  32                 	db	50	;'2'
   364  00FFD7  75                 	db	117	;'u'
   365  00FFD8  00                 	db	0
   366  00FFD9                     STR_8:
   367  00FFD9  25                 	db	37
   368  00FFDA  30                 	db	48	;'0'
   369  00FFDB  32                 	db	50	;'2'
   370  00FFDC  75                 	db	117	;'u'
   371  00FFDD  3A                 	db	58	;':'
   372  00FFDE  25                 	db	37
   373  00FFDF  30                 	db	48	;'0'
   374  00FFE0  32                 	db	50	;'2'
   375  00FFE1  75                 	db	117	;'u'
   376  00FFE2  3A                 	db	58	;':'
   377  00FFE3  25                 	db	37
   378  00FFE4  30                 	db	48	;'0'
   379  00FFE5  32                 	db	50	;'2'
   380  00FFE6  75                 	db	117	;'u'
   381  00FFE7  00                 	db	0
   382  00FFE8                     STR_23:
   383  00FFE8  28                 	db	40
   384  00FFE9  6E                 	db	110	;'n'
   385  00FFEA  75                 	db	117	;'u'
   386  00FFEB  6C                 	db	108	;'l'
   387  00FFEC  6C                 	db	108	;'l'
   388  00FFED  29                 	db	41
   389  00FFEE  00                 	db	0
   390  00FFEF                     STR_2:
   391  00FFEF  25                 	db	37
   392  00FFF0  30                 	db	48	;'0'
   393  00FFF1  33                 	db	51	;'3'
   394  00FFF2  75                 	db	117	;'u'
   395  00FFF3  00                 	db	0
   396  00FFF4                     STR_9:
   397  00FFF4  25                 	db	37
   398  00FFF5  73                 	db	115	;'s'
   399  00FFF6  00                 	db	0
   400  0000                     
   401                           ; #config settings
   402  00FFF7  00                 	db	0	; dummy byte at the end
   403  0000                     
   404                           	psect	nvBANK0
   405  0000BD                     __pnvBANK0:
   406                           	opt stack 0
   407  0000BD                     _anio_d:
   408                           	opt stack 0
   409  0000BD                     	ds	1
   410  0000BE                     _anio_u:
   411                           	opt stack 0
   412  0000BE                     	ds	1
   413  0000BF                     _dia_semana:
   414                           	opt stack 0
   415  0000BF                     	ds	1
   416  0000C0                     _fecha_d:
   417                           	opt stack 0
   418  0000C0                     	ds	1
   419  0000C1                     _fecha_u:
   420                           	opt stack 0
   421  0000C1                     	ds	1
   422  0000C2                     _hora_d:
   423                           	opt stack 0
   424  0000C2                     	ds	1
   425  0000C3                     _hora_u:
   426                           	opt stack 0
   427  0000C3                     	ds	1
   428  0000C4                     _mes_d:
   429                           	opt stack 0
   430  0000C4                     	ds	1
   431  0000C5                     _mes_u:
   432                           	opt stack 0
   433  0000C5                     	ds	1
   434  0000C6                     _minuto_d:
   435                           	opt stack 0
   436  0000C6                     	ds	1
   437  0000C7                     _minuto_u:
   438                           	opt stack 0
   439  0000C7                     	ds	1
   440  0000C8                     _segundo_d:
   441                           	opt stack 0
   442  0000C8                     	ds	1
   443  0000C9                     _segundo_u:
   444                           	opt stack 0
   445  0000C9                     	ds	1
   446  0000                     _ANCON0	set	3912
   447  0000                     _ANCON1	set	3913
   448  0000                     _RTCCFG	set	3903
   449  0000                     _RTCCFGbits	set	3903
   450  0000                     _ADCON0	set	4034
   451  0000                     _ADCON0bits	set	4034
   452  0000                     _ADCON1	set	4033
   453  0000                     _ADRESH	set	4036
   454  0000                     _ALRMCFGbits	set	3985
   455  0000                     _EECON2	set	4007
   456  0000                     _INTCONbits	set	4082
   457  0000                     _LATAbits	set	3977
   458  0000                     _LATBbits	set	3978
   459  0000                     _OSCCONbits	set	4051
   460  0000                     _OSCTUNEbits	set	3995
   461  0000                     _PIE3bits	set	4003
   462  0000                     _PORTAbits	set	3968
   463  0000                     _PORTCbits	set	3970
   464  0000                     _RTCVALH	set	3993
   465  0000                     _RTCVALL	set	3992
   466  0000                     _T1CONbits	set	4045
   467  0000                     _TRISA	set	3986
   468  0000                     _TRISB	set	3987
   469  0000                     _TRISBbits	set	3987
   470  0000                     _TRISC	set	3988
   471                           
   472                           	psect	cinit
   473  00E72A                     __pcinit:
   474                           	opt stack 0
   475  00E72A                     start_initialization:
   476                           	opt stack 0
   477  00E72A                     __initialization:
   478                           	opt stack 0
   479                           
   480                           ; Clear objects allocated to BANK0 (63 bytes)
   481  00E72A  EE00  F060         	lfsr	0,__pbssBANK0
   482  00E72E  0E3F               	movlw	63
   483  00E730                     clear_0:
   484  00E730  6AEE               	clrf	postinc0,c
   485  00E732  06E8               	decf	wreg,f,c
   486  00E734  E1FD               	bnz	clear_0
   487                           
   488                           ; Clear objects allocated to COMRAM (5 bytes)
   489  00E736  6A5F               	clrf	(__pbssCOMRAM+4)& (0+255),c
   490  00E738  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   491  00E73A  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   492  00E73C  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   493  00E73E  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   494                           
   495                           ; Initialize objects allocated to BANK0 (30 bytes)
   496                           ; load TBLPTR registers with __pidataBANK0
   497  00E740  0E66               	movlw	low __pidataBANK0
   498  00E742  6EF6               	movwf	tblptrl,c
   499  00E744  0EE6               	movlw	high __pidataBANK0
   500  00E746  6EF7               	movwf	tblptrh,c
   501  00E748  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   502  00E74A  6EF8               	movwf	tblptru,c
   503  00E74C  EE00  F09F         	lfsr	0,__pdataBANK0
   504  00E750  EE10 F01E          	lfsr	1,30
   505  00E754                     copy_data0:
   506  00E754  0009               	tblrd		*+
   507  00E756  CFF5 FFEE          	movff	tablat,postinc0
   508  00E75A  50E5               	movf	postdec1,w,c
   509  00E75C  50E1               	movf	fsr1l,w,c
   510  00E75E  E1FA               	bnz	copy_data0
   511  00E760                     end_of_initialization:
   512                           	opt stack 0
   513  00E760                     __end_of__initialization:
   514                           	opt stack 0
   515  00E760  0100               	movlb	0
   516  00E762  EF35  F07B         	goto	_main	;jump to C main() function
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	bssCOMRAM
   527  00005B                     __pbssCOMRAM:
   528                           	opt stack 0
   529  00005B                     _lectura:
   530                           	opt stack 0
   531  00005B                     	ds	1
   532  00005C                     _RtccDate:
   533                           	opt stack 0
   534  00005C                     	ds	4
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	bssBANK0
   545  000060                     __pbssBANK0:
   546                           	opt stack 0
   547  000060                     _RtccAlrmTimeDate:
   548                           	opt stack 0
   549  000060                     	ds	8
   550  000068                     _RtccTimeDate:
   551                           	opt stack 0
   552  000068                     	ds	8
   553  000070                     _Rtcc_read_TimeDate:
   554                           	opt stack 0
   555  000070                     	ds	8
   556  000078                     _RtccTimeVal:
   557                           	opt stack 0
   558  000078                     	ds	4
   559  00007C                     _i:
   560                           	opt stack 0
   561  00007C                     	ds	2
   562  00007E                     _segundo:
   563                           	opt stack 0
   564  00007E                     	ds	2
   565  000080                     _CuentamSeg:
   566                           	opt stack 0
   567  000080                     	ds	1
   568  000081                     _Flag_1:
   569                           	opt stack 0
   570  000081                     	ds	1
   571  000082                     _Sw_Center:
   572                           	opt stack 0
   573  000082                     	ds	1
   574  000083                     _Sw_Down:
   575                           	opt stack 0
   576  000083                     	ds	1
   577  000084                     _Sw_Left:
   578                           	opt stack 0
   579  000084                     	ds	1
   580  000085                     _Sw_Right:
   581                           	opt stack 0
   582  000085                     	ds	1
   583  000086                     _Sw_Up:
   584                           	opt stack 0
   585  000086                     	ds	1
   586  000087                     _buffer1:
   587                           	opt stack 0
   588  000087                     	ds	20
   589  00009B                     _RtccTime:
   590                           	opt stack 0
   591  00009B                     	ds	4
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           postinc0	equ	0xFEE
   597                           wreg	equ	0xFE8
   598                           postdec1	equ	0xFE5
   599                           fsr1l	equ	0xFE1
   600                           
   601                           	psect	dataBANK0
   602  00009F                     __pdataBANK0:
   603                           	opt stack 0
   604  00009F                     _posicionesLeft:
   605                           	opt stack 0
   606  00009F                     	ds	12
   607  0000AB                     _Grados:
   608                           	opt stack 0
   609  0000AB                     	ds	3
   610  0000AE                     _Temp_prog:
   611                           	opt stack 0
   612  0000AE                     	ds	3
   613  0000B1                     _anio:
   614                           	opt stack 0
   615  0000B1                     	ds	2
   616  0000B3                     _dia:
   617                           	opt stack 0
   618  0000B3                     	ds	2
   619  0000B5                     _diasem:
   620                           	opt stack 0
   621  0000B5                     	ds	2
   622  0000B7                     _hora:
   623                           	opt stack 0
   624  0000B7                     	ds	2
   625  0000B9                     _mes:
   626                           	opt stack 0
   627  0000B9                     	ds	2
   628  0000BB                     _minuto:
   629                           	opt stack 0
   630  0000BB                     	ds	2
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640                           	psect	cstackCOMRAM
   641  000001                     __pcstackCOMRAM:
   642                           	opt stack 0
   643  000001                     ??_Lcd_Cmd:
   644  000001                     ??_Lcd_Chr_CP:
   645  000001                     ??_lee_temperatura:
   646  000001                     ??_isdigit:
   647  000001                     ?___wmul:
   648                           	opt stack 0
   649  000001                     ?___awdiv:
   650                           	opt stack 0
   651  000001                     ?___lwdiv:
   652                           	opt stack 0
   653  000001                     RtccReadDate@pDt:
   654                           	opt stack 0
   655  000001                     RtccReadTime@pTm:
   656                           	opt stack 0
   657  000001                     RtccWriteDate@pDt:
   658                           	opt stack 0
   659  000001                     RtccWriteTime@pTm:
   660                           	opt stack 0
   661  000001                     ___wmul@multiplier:
   662                           	opt stack 0
   663  000001                     ___awdiv@dividend:
   664                           	opt stack 0
   665  000001                     ___lwdiv@dividend:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0x0
   669  000001                     	ds	1
   670  000002                     _isdigit$2087:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x1
   674  000002                     	ds	1
   675  000003                     Lcd_Chr_CP@data:
   676                           	opt stack 0
   677  000003                     Lcd_Cmd@data:
   678                           	opt stack 0
   679  000003                     RtccWriteDate@di:
   680                           	opt stack 0
   681  000003                     RtccWriteTime@di:
   682                           	opt stack 0
   683  000003                     isdigit@c:
   684                           	opt stack 0
   685  000003                     ___wmul@multiplicand:
   686                           	opt stack 0
   687  000003                     ___awdiv@divisor:
   688                           	opt stack 0
   689  000003                     ___lwdiv@divisor:
   690                           	opt stack 0
   691  000003                     RtccReadDate@rTD1:
   692                           	opt stack 0
   693  000003                     RtccReadTime@rTD1:
   694                           	opt stack 0
   695                           
   696                           ; 8 bytes @ 0x2
   697  000003                     	ds	1
   698  000004                     ??_Lcd_Init:
   699                           
   700                           ; 0 bytes @ 0x3
   701  000004                     	ds	1
   702  000005                     Lcd_Init@data:
   703                           	opt stack 0
   704  000005                     RtccWriteDate@wasOn:
   705                           	opt stack 0
   706  000005                     RtccWriteTime@wasOn:
   707                           	opt stack 0
   708  000005                     ___awdiv@counter:
   709                           	opt stack 0
   710  000005                     ___wmul@product:
   711                           	opt stack 0
   712  000005                     ___lwdiv@quotient:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x4
   716  000005                     	ds	1
   717  000006                     RtccWriteDate@wasAlrm:
   718                           	opt stack 0
   719  000006                     RtccWriteTime@wasAlrm:
   720                           	opt stack 0
   721  000006                     ___awdiv@sign:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x5
   725  000006                     	ds	1
   726  000007                     RtccWriteTime@wasWrEn:
   727                           	opt stack 0
   728  000007                     ___lwdiv@counter:
   729                           	opt stack 0
   730  000007                     RtccWriteDate@tempYear:
   731                           	opt stack 0
   732  000007                     ___awdiv@quotient:
   733                           	opt stack 0
   734                           
   735                           ; 2 bytes @ 0x6
   736  000007                     	ds	1
   737  000008                     ?___lwmod:
   738                           	opt stack 0
   739  000008                     RtccWriteTime@tempMinSec:
   740                           	opt stack 0
   741  000008                     ___lwmod@dividend:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0x7
   745  000008                     	ds	1
   746  000009                     RtccWriteDate@wasWrEn:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x8
   750  000009                     	ds	1
   751  00000A                     RtccWriteDate@tempDayMonth:
   752                           	opt stack 0
   753  00000A                     RtccWriteTime@tempHourWDay:
   754                           	opt stack 0
   755  00000A                     ___lwmod@divisor:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x9
   759  00000A                     	ds	1
   760  00000B                     RtccReadDate@rTD0:
   761                           	opt stack 0
   762  00000B                     RtccReadTime@rTD0:
   763                           	opt stack 0
   764                           
   765                           ; 8 bytes @ 0xA
   766  00000B                     	ds	1
   767  00000C                     ___lwmod@counter:
   768                           	opt stack 0
   769  00000C                     RtccWriteDate@tempHourWDay:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0xB
   773  00000C                     	ds	1
   774  00000D                     ?__doprnt:
   775                           	opt stack 0
   776  00000D                     __doprnt@pb:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0xC
   780  00000D                     	ds	1
   781  00000E                     
   782                           ; 0 bytes @ 0xD
   783  00000E                     	ds	1
   784  00000F                     __doprnt@f:
   785                           	opt stack 0
   786                           
   787                           ; 3 bytes @ 0xE
   788  00000F                     	ds	3
   789  000012                     __doprnt@ap:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x11
   793  000012                     	ds	1
   794  000013                     
   795                           ; 0 bytes @ 0x12
   796  000013                     	ds	1
   797  000014                     ??__doprnt:
   798                           
   799                           ; 0 bytes @ 0x13
   800  000014                     	ds	4
   801  000018                     __doprnt@flag:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x17
   805  000018                     	ds	1
   806  000019                     __doprnt@val:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x18
   810  000019                     	ds	2
   811  00001B                     __doprnt@prec:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x1A
   815  00001B                     	ds	1
   816  00001C                     __doprnt@len:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x1B
   820  00001C                     	ds	2
   821  00001E                     __doprnt@cp:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x1D
   825  00001E                     	ds	2
   826  000020                     __doprnt@width:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x1F
   830  000020                     	ds	2
   831  000022                     __doprnt@c:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x21
   835  000022                     	ds	1
   836  000023                     ?_sprintf:
   837                           	opt stack 0
   838  000023                     ?_printf:
   839                           	opt stack 0
   840  000023                     sprintf@wh:
   841                           	opt stack 0
   842  000023                     printf@f:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x22
   846  000023                     	ds	2
   847  000025                     sprintf@f:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x24
   851  000025                     	ds	1
   852  000026                     printf@ap:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x25
   856  000026                     	ds	2
   857  000028                     printf@pb:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x27
   861  000028                     	ds	5
   862  00002D                     sprintf@ap:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0x2C
   866  00002D                     	ds	2
   867  00002F                     sprintf@pb:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x2E
   871  00002F                     	ds	4
   872  000033                     ?_Convert_diasem:
   873                           	opt stack 0
   874  000033                     Convert_diasem@dia:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0x32
   878  000033                     	ds	2
   879  000035                     ??_Convert_diasem:
   880                           
   881                           ; 0 bytes @ 0x34
   882  000035                     	ds	2
   883  000037                     Convert_diasem@buffer_dia:
   884                           	opt stack 0
   885                           
   886                           ; 20 bytes @ 0x36
   887  000037                     	ds	20
   888  00004B                     Lcd_Out@x:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x4A
   892  00004B                     	ds	1
   893  00004C                     Lcd_Out@buffer:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x4B
   897  00004C                     	ds	3
   898  00004F                     Lcd_Out@y:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x4E
   902  00004F                     	ds	1
   903  000050                     Lcd_Out@data:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x4F
   907  000050                     	ds	1
   908  000051                     ??_ManejaMovimientos:
   909  000051                     V_Principal@cte:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x50
   913  000051                     	ds	3
   914  000054                     ManejaMovimientos@anio_tr:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x53
   918  000054                     	ds	1
   919  000055                     ManejaMovimientos@dia_tr:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x54
   923  000055                     	ds	1
   924  000056                     ManejaMovimientos@diasem_tr:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x55
   928  000056                     	ds	1
   929  000057                     ManejaMovimientos@mes_tr:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x56
   933  000057                     	ds	1
   934  000058                     ManejaMovimientos@posicion:
   935                           	opt stack 0
   936                           
   937                           ; 2 bytes @ 0x57
   938  000058                     	ds	2
   939  00005A                     ??_main:
   940                           
   941                           ; 0 bytes @ 0x59
   942  00005A                     	ds	1
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952 ;;
   953 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   954 ;;
   955 ;; *************** function _main *****************
   956 ;; Defined at:
   957 ;;		line 129 in file "../main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;		None
   960 ;; Auto vars:     Size  Location     Type
   961 ;;		None
   962 ;; Return value:  Size  Location     Type
   963 ;;		None               void
   964 ;; Registers used:
   965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   974 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels required when called:    5
   977 ;; This function calls:
   978 ;;		_Lcd_Cmd
   979 ;;		_Lcd_Init
   980 ;;		_Lcd_Out
   981 ;;		_ManejaMovimientos
   982 ;;		_V_Principal
   983 ;;		_Write_RTC
   984 ;;		_sprintf
   985 ;; This function is called by:
   986 ;;		Startup code after reset
   987 ;; This function uses a non-reentrant model
   988 ;;
   989                           
   990                           	psect	text0
   991  00F66A                     __ptext0:
   992                           	opt stack 0
   993  00F66A                     _main:
   994                           	opt stack 26
   995                           
   996                           ;main.c: 131: OSCTUNEbits.INTSRC=1;
   997                           
   998                           ;incstack = 0
   999  00F66A  8E9B               	bsf	3995,7,c	;volatile
  1000                           
  1001                           ;main.c: 132: OSCTUNEbits.PLLEN=0;
  1002  00F66C  9C9B               	bcf	3995,6,c	;volatile
  1003                           
  1004                           ;main.c: 133: OSCCONbits.IRCF0=1;
  1005  00F66E  88D3               	bsf	4051,4,c	;volatile
  1006                           
  1007                           ;main.c: 134: OSCCONbits.IRCF1=1;
  1008  00F670  8AD3               	bsf	4051,5,c	;volatile
  1009                           
  1010                           ;main.c: 135: OSCCONbits.IRCF2=1;
  1011  00F672  8CD3               	bsf	4051,6,c	;volatile
  1012                           
  1013                           ;main.c: 136: OSCCONbits.SCS0=0;
  1014  00F674  90D3               	bcf	4051,0,c	;volatile
  1015                           
  1016                           ;main.c: 137: OSCCONbits.SCS1=0;
  1017  00F676  92D3               	bcf	4051,1,c	;volatile
  1018                           
  1019                           ;main.c: 139: RTCCFGbits.RTCEN=1;
  1020  00F678  010F               	movlb	15	; () banked
  1021  00F67A  8F3F               	bsf	63,7,b	;volatile
  1022                           
  1023                           ;main.c: 140: RTCCFGbits.RTCWREN=1;
  1024  00F67C  010F               	movlb	15	; () banked
  1025  00F67E  8B3F               	bsf	63,5,b	;volatile
  1026                           
  1027                           ;main.c: 141: T1CONbits.T1OSCEN=1;
  1028  00F680  86CD               	bsf	4045,3,c	;volatile
  1029                           
  1030                           ; BSR set to: 15
  1031                           ;main.c: 143: TRISA = 0b11111101;
  1032  00F682  0EFD               	movlw	253
  1033  00F684  6E92               	movwf	3986,c	;volatile
  1034                           
  1035                           ;main.c: 144: TRISB = 0;
  1036  00F686  0E00               	movlw	0
  1037  00F688  6E93               	movwf	3987,c	;volatile
  1038                           
  1039                           ; BSR set to: 15
  1040                           ;main.c: 145: TRISC = 0b11111111;
  1041  00F68A  6894               	setf	3988,c	;volatile
  1042                           
  1043                           ; BSR set to: 15
  1044                           ;main.c: 146: ANCON0 = 0b11111111;
  1045  00F68C  010F               	movlb	15	; () banked
  1046  00F68E  6948               	setf	72,b	;volatile
  1047                           
  1048                           ;main.c: 147: ANCON1 = 0b11110111;
  1049  00F690  0EF7               	movlw	247
  1050  00F692  010F               	movlb	15	; () banked
  1051  00F694  6F49               	movwf	73,b	;volatile
  1052                           
  1053                           ;main.c: 148: ADCON0 = 0b00101111;
  1054  00F696  0E2F               	movlw	47
  1055  00F698  6EC2               	movwf	4034,c	;volatile
  1056                           
  1057                           ;main.c: 149: ADCON1 = 0b00111001;
  1058  00F69A  0E39               	movlw	57
  1059  00F69C  6EC1               	movwf	4033,c	;volatile
  1060                           
  1061                           ; BSR set to: 15
  1062                           ;main.c: 151: Write_RTC();
  1063  00F69E  EC6A  F07A         	call	_Write_RTC	;wreg free
  1064                           
  1065                           ;main.c: 152: Lcd_Init();
  1066  00F6A2  EC3E  F076         	call	_Lcd_Init	;wreg free
  1067                           
  1068                           ;main.c: 153: Lcd_Cmd(1);
  1069  00F6A6  0E01               	movlw	1
  1070  00F6A8  EC5A  F077         	call	_Lcd_Cmd
  1071                           
  1072                           ;main.c: 154: Lcd_Cmd(12);
  1073  00F6AC  0E0C               	movlw	12
  1074  00F6AE  EC5A  F077         	call	_Lcd_Cmd
  1075                           
  1076                           ;main.c: 156: _delay((unsigned long)((98)*(8000000/4000.0)));
  1077  00F6B2  0EFF               	movlw	255
  1078  00F6B4  6E5A               	movwf	??_main& (0+255),c
  1079  00F6B6  0E8A               	movlw	138
  1080  00F6B8                     u2357:
  1081  00F6B8  2EE8               	decfsz	wreg,f,c
  1082  00F6BA  D7FE               	goto	u2357
  1083  00F6BC  2E5A               	decfsz	??_main& (0+255),f,c
  1084  00F6BE  D7FC               	goto	u2357
  1085  00F6C0  D000               	nop2	
  1086                           
  1087                           ;main.c: 163: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1088  00F6C2  0EFF               	movlw	255
  1089  00F6C4  6E5A               	movwf	??_main& (0+255),c
  1090  00F6C6  0E8A               	movlw	138
  1091  00F6C8                     u2367:
  1092  00F6C8  2EE8               	decfsz	wreg,f,c
  1093  00F6CA  D7FE               	goto	u2367
  1094  00F6CC  2E5A               	decfsz	??_main& (0+255),f,c
  1095  00F6CE  D7FC               	goto	u2367
  1096  00F6D0  D000               	nop2	
  1097  00F6D2  0EFF               	movlw	255
  1098  00F6D4  6E5A               	movwf	??_main& (0+255),c
  1099  00F6D6  0E8A               	movlw	138
  1100  00F6D8                     u2377:
  1101  00F6D8  2EE8               	decfsz	wreg,f,c
  1102  00F6DA  D7FE               	goto	u2377
  1103  00F6DC  2E5A               	decfsz	??_main& (0+255),f,c
  1104  00F6DE  D7FC               	goto	u2377
  1105  00F6E0  D000               	nop2	
  1106  00F6E2  0EFF               	movlw	255
  1107  00F6E4  6E5A               	movwf	??_main& (0+255),c
  1108  00F6E6  0E8A               	movlw	138
  1109  00F6E8                     u2387:
  1110  00F6E8  2EE8               	decfsz	wreg,f,c
  1111  00F6EA  D7FE               	goto	u2387
  1112  00F6EC  2E5A               	decfsz	??_main& (0+255),f,c
  1113  00F6EE  D7FC               	goto	u2387
  1114  00F6F0  D000               	nop2	
  1115  00F6F2  0EFF               	movlw	255
  1116  00F6F4  6E5A               	movwf	??_main& (0+255),c
  1117  00F6F6  0E8A               	movlw	138
  1118  00F6F8                     u2397:
  1119  00F6F8  2EE8               	decfsz	wreg,f,c
  1120  00F6FA  D7FE               	goto	u2397
  1121  00F6FC  2E5A               	decfsz	??_main& (0+255),f,c
  1122  00F6FE  D7FC               	goto	u2397
  1123  00F700  D000               	nop2	
  1124  00F702  0EFF               	movlw	255
  1125  00F704  6E5A               	movwf	??_main& (0+255),c
  1126  00F706  0E8A               	movlw	138
  1127  00F708                     u2407:
  1128  00F708  2EE8               	decfsz	wreg,f,c
  1129  00F70A  D7FE               	goto	u2407
  1130  00F70C  2E5A               	decfsz	??_main& (0+255),f,c
  1131  00F70E  D7FC               	goto	u2407
  1132  00F710  D000               	nop2	
  1133  00F712  0EFF               	movlw	255
  1134  00F714  6E5A               	movwf	??_main& (0+255),c
  1135  00F716  0E8A               	movlw	138
  1136  00F718                     u2417:
  1137  00F718  2EE8               	decfsz	wreg,f,c
  1138  00F71A  D7FE               	goto	u2417
  1139  00F71C  2E5A               	decfsz	??_main& (0+255),f,c
  1140  00F71E  D7FC               	goto	u2417
  1141  00F720  D000               	nop2	
  1142  00F722  0EFF               	movlw	255
  1143  00F724  6E5A               	movwf	??_main& (0+255),c
  1144  00F726  0E8A               	movlw	138
  1145  00F728                     u2427:
  1146  00F728  2EE8               	decfsz	wreg,f,c
  1147  00F72A  D7FE               	goto	u2427
  1148  00F72C  2E5A               	decfsz	??_main& (0+255),f,c
  1149  00F72E  D7FC               	goto	u2427
  1150  00F730  D000               	nop2	
  1151  00F732  0EFF               	movlw	255
  1152  00F734  6E5A               	movwf	??_main& (0+255),c
  1153  00F736  0E8A               	movlw	138
  1154  00F738                     u2437:
  1155  00F738  2EE8               	decfsz	wreg,f,c
  1156  00F73A  D7FE               	goto	u2437
  1157  00F73C  2E5A               	decfsz	??_main& (0+255),f,c
  1158  00F73E  D7FC               	goto	u2437
  1159  00F740  D000               	nop2	
  1160                           
  1161                           ;main.c: 164: Lcd_Cmd(1);
  1162  00F742  0E01               	movlw	1
  1163  00F744  EC5A  F077         	call	_Lcd_Cmd
  1164  00F748  D000               	goto	l2793
  1165  00F74A                     l2793:
  1166                           
  1167                           ;main.c: 170: V_Principal();
  1168  00F74A  EC45  F075         	call	_V_Principal	;wreg free
  1169                           
  1170                           ;main.c: 171: if(Sw_Left = PORTAbits.RA0 == 0){
  1171  00F74E  B080               	btfsc	3968,0,c	;volatile
  1172  00F750  D002               	goto	u2180
  1173  00F752  0E01               	movlw	1
  1174  00F754  D001               	goto	u2190
  1175  00F756                     u2180:
  1176  00F756  0E00               	movlw	0
  1177  00F758                     u2190:
  1178  00F758  0100               	movlb	0	; () banked
  1179  00F75A  6F84               	movwf	_Sw_Left& (0+255),b
  1180  00F75C  0100               	movlb	0	; () banked
  1181  00F75E  5184               	movf	_Sw_Left& (0+255),w,b
  1182  00F760  B4D8               	btfsc	status,2,c
  1183  00F762  D011               	goto	l2801
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;main.c: 175: Lcd_Out(1, 0, "Program del reloj");
  1187  00F764  0E00               	movlw	0
  1188  00F766  6E4B               	movwf	Lcd_Out@x,c
  1189  00F768  0EB8               	movlw	low STR_1
  1190  00F76A  6E4C               	movwf	Lcd_Out@buffer,c
  1191  00F76C  0EFF               	movlw	high STR_1
  1192  00F76E  6E4D               	movwf	Lcd_Out@buffer+1,c
  1193  00F770  504C               	movf	Lcd_Out@buffer,w,c
  1194  00F772  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1195  00F774  A4D8               	btfss	status,2,c
  1196  00F776  0E00               	movlw	low (__mediumconst shr (0+16))
  1197  00F778  6E4E               	movwf	Lcd_Out@buffer+2,c
  1198  00F77A  0E01               	movlw	1
  1199  00F77C  ECF7  F074         	call	_Lcd_Out
  1200                           
  1201                           ;main.c: 179: ManejaMovimientos();
  1202  00F780  ECBE  F079         	call	_ManejaMovimientos	;wreg free
  1203  00F784  D000               	goto	l2801
  1204  00F786                     l2801:
  1205                           
  1206                           ;main.c: 183: }
  1207                           ;main.c: 185: if(Sw_Down = PORTCbits.RC4 == 0){
  1208  00F786  B882               	btfsc	3970,4,c	;volatile
  1209  00F788  D002               	goto	u2210
  1210  00F78A  0E01               	movlw	1
  1211  00F78C  D001               	goto	u2220
  1212  00F78E                     u2210:
  1213  00F78E  0E00               	movlw	0
  1214  00F790                     u2220:
  1215  00F790  0100               	movlb	0	; () banked
  1216  00F792  6F83               	movwf	_Sw_Down& (0+255),b
  1217  00F794  0100               	movlb	0	; () banked
  1218  00F796  5183               	movf	_Sw_Down& (0+255),w,b
  1219  00F798  B4D8               	btfsc	status,2,c
  1220  00F79A  D01C               	goto	l2807
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 187: sprintf(buffer1,"%03u",lectura);
  1224  00F79C  0E87               	movlw	low _buffer1
  1225  00F79E  6E23               	movwf	sprintf@wh,c
  1226  00F7A0  0E00               	movlw	high _buffer1
  1227  00F7A2  6E24               	movwf	sprintf@wh+1,c
  1228  00F7A4  0EEF               	movlw	low STR_2
  1229  00F7A6  6E25               	movwf	sprintf@f,c
  1230  00F7A8  0EFF               	movlw	high STR_2
  1231  00F7AA  6E26               	movwf	sprintf@f+1,c
  1232  00F7AC  C05B  F027         	movff	_lectura,?_sprintf+4
  1233  00F7B0  6A28               	clrf	?_sprintf+5,c
  1234  00F7B2  ECD9  F073         	call	_sprintf	;wreg free
  1235                           
  1236                           ;main.c: 188: Lcd_Out(4,0,buffer1);
  1237  00F7B6  0E00               	movlw	0
  1238  00F7B8  6E4B               	movwf	Lcd_Out@x,c
  1239  00F7BA  0E87               	movlw	low _buffer1
  1240  00F7BC  6E4C               	movwf	Lcd_Out@buffer,c
  1241  00F7BE  0E00               	movlw	high _buffer1
  1242  00F7C0  6E4D               	movwf	Lcd_Out@buffer+1,c
  1243  00F7C2  504C               	movf	Lcd_Out@buffer,w,c
  1244  00F7C4  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1245  00F7C6  A4D8               	btfss	status,2,c
  1246  00F7C8  0E20               	movlw	32
  1247  00F7CA  6E4E               	movwf	Lcd_Out@buffer+2,c
  1248  00F7CC  0E04               	movlw	4
  1249  00F7CE  ECF7  F074         	call	_Lcd_Out
  1250  00F7D2  D000               	goto	l2807
  1251  00F7D4                     l2807:
  1252                           
  1253                           ;main.c: 189: }
  1254                           ;main.c: 191: if(Sw_Right = PORTAbits.RA2 == 0){
  1255  00F7D4  B480               	btfsc	3968,2,c	;volatile
  1256  00F7D6  D002               	goto	u2240
  1257  00F7D8  0E01               	movlw	1
  1258  00F7DA  D001               	goto	u2250
  1259  00F7DC                     u2240:
  1260  00F7DC  0E00               	movlw	0
  1261  00F7DE                     u2250:
  1262  00F7DE  0100               	movlb	0	; () banked
  1263  00F7E0  6F85               	movwf	_Sw_Right& (0+255),b
  1264  00F7E2  0100               	movlb	0	; () banked
  1265  00F7E4  5185               	movf	_Sw_Right& (0+255),w,b
  1266  00F7E6  B4D8               	btfsc	status,2,c
  1267  00F7E8  D00F               	goto	l2811
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 192: Lcd_Out(3, 0, "RIGHT             ");
  1271  00F7EA  0E00               	movlw	0
  1272  00F7EC  6E4B               	movwf	Lcd_Out@x,c
  1273  00F7EE  0E93               	movlw	low STR_3
  1274  00F7F0  6E4C               	movwf	Lcd_Out@buffer,c
  1275  00F7F2  0EFF               	movlw	high STR_3
  1276  00F7F4  6E4D               	movwf	Lcd_Out@buffer+1,c
  1277  00F7F6  504C               	movf	Lcd_Out@buffer,w,c
  1278  00F7F8  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1279  00F7FA  A4D8               	btfss	status,2,c
  1280  00F7FC  0E00               	movlw	low (__mediumconst shr (0+16))
  1281  00F7FE  6E4E               	movwf	Lcd_Out@buffer+2,c
  1282  00F800  0E03               	movlw	3
  1283  00F802  ECF7  F074         	call	_Lcd_Out
  1284  00F806  D000               	goto	l2811
  1285  00F808                     l2811:
  1286                           
  1287                           ;main.c: 193: }
  1288                           ;main.c: 195: if(Sw_Up = PORTAbits.RA3 == 0){
  1289  00F808  B680               	btfsc	3968,3,c	;volatile
  1290  00F80A  D002               	goto	u2270
  1291  00F80C  0E01               	movlw	1
  1292  00F80E  D001               	goto	u2280
  1293  00F810                     u2270:
  1294  00F810  0E00               	movlw	0
  1295  00F812                     u2280:
  1296  00F812  0100               	movlb	0	; () banked
  1297  00F814  6F86               	movwf	_Sw_Up& (0+255),b
  1298  00F816  0100               	movlb	0	; () banked
  1299  00F818  5186               	movf	_Sw_Up& (0+255),w,b
  1300  00F81A  B4D8               	btfsc	status,2,c
  1301  00F81C  D00F               	goto	l2815
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;main.c: 196: Lcd_Out(4, 0, "UP               ");
  1305  00F81E  0E00               	movlw	0
  1306  00F820  6E4B               	movwf	Lcd_Out@x,c
  1307  00F822  0EA6               	movlw	low STR_4
  1308  00F824  6E4C               	movwf	Lcd_Out@buffer,c
  1309  00F826  0EFF               	movlw	high STR_4
  1310  00F828  6E4D               	movwf	Lcd_Out@buffer+1,c
  1311  00F82A  504C               	movf	Lcd_Out@buffer,w,c
  1312  00F82C  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1313  00F82E  A4D8               	btfss	status,2,c
  1314  00F830  0E00               	movlw	low (__mediumconst shr (0+16))
  1315  00F832  6E4E               	movwf	Lcd_Out@buffer+2,c
  1316  00F834  0E04               	movlw	4
  1317  00F836  ECF7  F074         	call	_Lcd_Out
  1318  00F83A  D000               	goto	l2815
  1319  00F83C                     l2815:
  1320                           
  1321                           ;main.c: 197: }
  1322                           ;main.c: 199: if(Sw_Center = PORTAbits.RA5 == 0){
  1323  00F83C  BA80               	btfsc	3968,5,c	;volatile
  1324  00F83E  D002               	goto	u2300
  1325  00F840  0E01               	movlw	1
  1326  00F842  D001               	goto	u2310
  1327  00F844                     u2300:
  1328  00F844  0E00               	movlw	0
  1329  00F846                     u2310:
  1330  00F846  0100               	movlb	0	; () banked
  1331  00F848  6F82               	movwf	_Sw_Center& (0+255),b
  1332  00F84A  0100               	movlb	0	; () banked
  1333  00F84C  5182               	movf	_Sw_Center& (0+255),w,b
  1334  00F84E  B4D8               	btfsc	status,2,c
  1335  00F850  D012               	goto	l2821
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 200: Lcd_Cmd(1);
  1339  00F852  0E01               	movlw	1
  1340  00F854  EC5A  F077         	call	_Lcd_Cmd
  1341                           
  1342                           ;main.c: 201: Lcd_Out(2, 0, "CENTER             ");
  1343  00F858  0E00               	movlw	0
  1344  00F85A  6E4B               	movwf	Lcd_Out@x,c
  1345  00F85C  0E7F               	movlw	low STR_5
  1346  00F85E  6E4C               	movwf	Lcd_Out@buffer,c
  1347  00F860  0EFF               	movlw	high STR_5
  1348  00F862  6E4D               	movwf	Lcd_Out@buffer+1,c
  1349  00F864  504C               	movf	Lcd_Out@buffer,w,c
  1350  00F866  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1351  00F868  A4D8               	btfss	status,2,c
  1352  00F86A  0E00               	movlw	low (__mediumconst shr (0+16))
  1353  00F86C  6E4E               	movwf	Lcd_Out@buffer+2,c
  1354  00F86E  0E02               	movlw	2
  1355  00F870  ECF7  F074         	call	_Lcd_Out
  1356  00F874  D000               	goto	l2821
  1357  00F876                     l2821:
  1358                           
  1359                           ;main.c: 202: }
  1360                           ;main.c: 204: LATBbits.LATB7 = 1;
  1361  00F876  8E8A               	bsf	3978,7,c	;volatile
  1362                           
  1363                           ;main.c: 205: LATBbits.LATB6 = 1;
  1364  00F878  8C8A               	bsf	3978,6,c	;volatile
  1365                           
  1366                           ;main.c: 206: LATAbits.LA1 = 1;
  1367  00F87A  8289               	bsf	3977,1,c	;volatile
  1368                           
  1369                           ;main.c: 207: _delay((unsigned long)((10)*(8000000/4000.0)));
  1370  00F87C  0E1A               	movlw	26
  1371  00F87E  6E5A               	movwf	??_main& (0+255),c
  1372  00F880  0EF8               	movlw	248
  1373  00F882                     u2447:
  1374  00F882  2EE8               	decfsz	wreg,f,c
  1375  00F884  D7FE               	goto	u2447
  1376  00F886  2E5A               	decfsz	??_main& (0+255),f,c
  1377  00F888  D7FC               	goto	u2447
  1378  00F88A  D000               	nop2	
  1379                           
  1380                           ;main.c: 208: LATBbits.LATB7 = 0;
  1381  00F88C  9E8A               	bcf	3978,7,c	;volatile
  1382                           
  1383                           ;main.c: 209: LATBbits.LATB6 = 0;
  1384  00F88E  9C8A               	bcf	3978,6,c	;volatile
  1385                           
  1386                           ;main.c: 210: LATAbits.LA1 = 0;
  1387  00F890  9289               	bcf	3977,1,c	;volatile
  1388                           
  1389                           ;main.c: 211: _delay((unsigned long)((10)*(8000000/4000.0)));
  1390  00F892  0E1A               	movlw	26
  1391  00F894  6E5A               	movwf	??_main& (0+255),c
  1392  00F896  0EF8               	movlw	248
  1393  00F898                     u2457:
  1394  00F898  2EE8               	decfsz	wreg,f,c
  1395  00F89A  D7FE               	goto	u2457
  1396  00F89C  2E5A               	decfsz	??_main& (0+255),f,c
  1397  00F89E  D7FC               	goto	u2457
  1398  00F8A0  D000               	nop2	
  1399  00F8A2  D753               	goto	l2793
  1400  00F8A4  EF00  F000         	goto	start
  1401  00F8A8                     __end_of_main:
  1402                           	opt stack 0
  1403                           tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1l	equ	0xFE1
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _V_Principal *****************
  1414 ;; Defined at:
  1415 ;;		line 219 in file "../main.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;		None
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  cte             2   80[COMRAM] PTR unsigned char 
  1420 ;;		 -> Convert_diasem@buffer_dia(20), 
  1421 ;; Return value:  Size  Location     Type
  1422 ;;		None               void
  1423 ;; Registers used:
  1424 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1434 ;;Total ram usage:        2 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    4
  1437 ;; This function calls:
  1438 ;;		_Convert_diasem
  1439 ;;		_Lcd_Out
  1440 ;;		_Read_RTC
  1441 ;;		_lee_temperatura
  1442 ;;		_sprintf
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           	psect	text1
  1449  00EA8A                     __ptext1:
  1450                           	opt stack 0
  1451  00EA8A                     _V_Principal:
  1452                           	opt stack 26
  1453                           
  1454                           ;main.c: 221: Read_RTC();
  1455                           
  1456                           ;incstack = 0
  1457  00EA8A  EC7E  F078         	call	_Read_RTC	;wreg free
  1458                           
  1459                           ;main.c: 222: lee_temperatura();
  1460  00EA8E  EC42  F073         	call	_lee_temperatura	;wreg free
  1461                           
  1462                           ;main.c: 223: Lcd_Out(1, 0, "                    ");
  1463  00EA92  0E00               	movlw	0
  1464  00EA94  6E4B               	movwf	Lcd_Out@x,c
  1465  00EA96  0ED7               	movlw	low STR_6
  1466  00EA98  6E4C               	movwf	Lcd_Out@buffer,c
  1467  00EA9A  0EFE               	movlw	high STR_6
  1468  00EA9C  6E4D               	movwf	Lcd_Out@buffer+1,c
  1469  00EA9E  504C               	movf	Lcd_Out@buffer,w,c
  1470  00EAA0  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1471  00EAA2  A4D8               	btfss	status,2,c
  1472  00EAA4  0E00               	movlw	low (__mediumconst shr (0+16))
  1473  00EAA6  6E4E               	movwf	Lcd_Out@buffer+2,c
  1474  00EAA8  0E01               	movlw	1
  1475  00EAAA  ECF7  F074         	call	_Lcd_Out
  1476                           
  1477                           ;main.c: 224: char* cte = Convert_diasem(diasem);
  1478  00EAAE  C0B5  F033         	movff	_diasem,Convert_diasem@dia
  1479  00EAB2  C0B6  F034         	movff	_diasem+1,Convert_diasem@dia+1
  1480  00EAB6  ECCB  F076         	call	_Convert_diasem	;wreg free
  1481  00EABA  C033  F051         	movff	?_Convert_diasem,V_Principal@cte
  1482  00EABE  C034  F052         	movff	?_Convert_diasem+1,V_Principal@cte+1
  1483                           
  1484                           ;main.c: 226: Lcd_Out(2, 0, cte);
  1485  00EAC2  0E00               	movlw	0
  1486  00EAC4  6E4B               	movwf	Lcd_Out@x,c
  1487  00EAC6  C051  F04C         	movff	V_Principal@cte,Lcd_Out@buffer
  1488  00EACA  C052  F04D         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  1489  00EACE  504C               	movf	Lcd_Out@buffer,w,c
  1490  00EAD0  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1491  00EAD2  A4D8               	btfss	status,2,c
  1492  00EAD4  0E20               	movlw	32
  1493  00EAD6  6E4E               	movwf	Lcd_Out@buffer+2,c
  1494  00EAD8  0E02               	movlw	2
  1495  00EADA  ECF7  F074         	call	_Lcd_Out
  1496                           
  1497                           ;main.c: 229: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  1498  00EADE  0E87               	movlw	low _buffer1
  1499  00EAE0  6E23               	movwf	sprintf@wh,c
  1500  00EAE2  0E00               	movlw	high _buffer1
  1501  00EAE4  6E24               	movwf	sprintf@wh+1,c
  1502  00EAE6  0ECA               	movlw	low STR_7
  1503  00EAE8  6E25               	movwf	sprintf@f,c
  1504  00EAEA  0EFF               	movlw	high STR_7
  1505  00EAEC  6E26               	movwf	sprintf@f+1,c
  1506  00EAEE  C0B3  F027         	movff	_dia,?_sprintf+4
  1507  00EAF2  C0B4  F028         	movff	_dia+1,?_sprintf+5
  1508  00EAF6  C0B9  F029         	movff	_mes,?_sprintf+6
  1509  00EAFA  C0BA  F02A         	movff	_mes+1,?_sprintf+7
  1510  00EAFE  C0B1  F02B         	movff	_anio,?_sprintf+8
  1511  00EB02  C0B2  F02C         	movff	_anio+1,?_sprintf+9
  1512  00EB06  ECD9  F073         	call	_sprintf	;wreg free
  1513                           
  1514                           ;main.c: 230: Lcd_Out(3,0,buffer1);
  1515  00EB0A  0E00               	movlw	0
  1516  00EB0C  6E4B               	movwf	Lcd_Out@x,c
  1517  00EB0E  0E87               	movlw	low _buffer1
  1518  00EB10  6E4C               	movwf	Lcd_Out@buffer,c
  1519  00EB12  0E00               	movlw	high _buffer1
  1520  00EB14  6E4D               	movwf	Lcd_Out@buffer+1,c
  1521  00EB16  504C               	movf	Lcd_Out@buffer,w,c
  1522  00EB18  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1523  00EB1A  A4D8               	btfss	status,2,c
  1524  00EB1C  0E20               	movlw	32
  1525  00EB1E  6E4E               	movwf	Lcd_Out@buffer+2,c
  1526  00EB20  0E03               	movlw	3
  1527  00EB22  ECF7  F074         	call	_Lcd_Out
  1528                           
  1529                           ;main.c: 231: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  1530  00EB26  0E87               	movlw	low _buffer1
  1531  00EB28  6E23               	movwf	sprintf@wh,c
  1532  00EB2A  0E00               	movlw	high _buffer1
  1533  00EB2C  6E24               	movwf	sprintf@wh+1,c
  1534  00EB2E  0ED9               	movlw	low STR_8
  1535  00EB30  6E25               	movwf	sprintf@f,c
  1536  00EB32  0EFF               	movlw	high STR_8
  1537  00EB34  6E26               	movwf	sprintf@f+1,c
  1538  00EB36  C0B7  F027         	movff	_hora,?_sprintf+4
  1539  00EB3A  C0B8  F028         	movff	_hora+1,?_sprintf+5
  1540  00EB3E  C0BB  F029         	movff	_minuto,?_sprintf+6
  1541  00EB42  C0BC  F02A         	movff	_minuto+1,?_sprintf+7
  1542  00EB46  C07E  F02B         	movff	_segundo,?_sprintf+8
  1543  00EB4A  C07F  F02C         	movff	_segundo+1,?_sprintf+9
  1544  00EB4E  ECD9  F073         	call	_sprintf	;wreg free
  1545                           
  1546                           ;main.c: 232: Lcd_Out(4,0,buffer1);
  1547  00EB52  0E00               	movlw	0
  1548  00EB54  6E4B               	movwf	Lcd_Out@x,c
  1549  00EB56  0E87               	movlw	low _buffer1
  1550  00EB58  6E4C               	movwf	Lcd_Out@buffer,c
  1551  00EB5A  0E00               	movlw	high _buffer1
  1552  00EB5C  6E4D               	movwf	Lcd_Out@buffer+1,c
  1553  00EB5E  504C               	movf	Lcd_Out@buffer,w,c
  1554  00EB60  104D               	iorwf	Lcd_Out@buffer+1,w,c
  1555  00EB62  A4D8               	btfss	status,2,c
  1556  00EB64  0E20               	movlw	32
  1557  00EB66  6E4E               	movwf	Lcd_Out@buffer+2,c
  1558  00EB68  0E04               	movlw	4
  1559  00EB6A  ECF7  F074         	call	_Lcd_Out
  1560  00EB6E  0012               	return		;funcret
  1561  00EB70                     __end_of_V_Principal:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           postinc0	equ	0xFEE
  1568                           wreg	equ	0xFE8
  1569                           postdec1	equ	0xFE5
  1570                           fsr1l	equ	0xFE1
  1571                           status	equ	0xFD8
  1572                           
  1573 ;; *************** function _lee_temperatura *****************
  1574 ;; Defined at:
  1575 ;;		line 323 in file "../main.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;		None
  1578 ;; Auto vars:     Size  Location     Type
  1579 ;;		None
  1580 ;; Return value:  Size  Location     Type
  1581 ;;		None               void
  1582 ;; Registers used:
  1583 ;;		wreg
  1584 ;; Tracked objects:
  1585 ;;		On entry : 0/0
  1586 ;;		On exit  : 0/0
  1587 ;;		Unchanged: 0/0
  1588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1593 ;;Total ram usage:        1 bytes
  1594 ;; Hardware stack levels used:    1
  1595 ;; This function calls:
  1596 ;;		Nothing
  1597 ;; This function is called by:
  1598 ;;		_V_Principal
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text2
  1603  00E684                     __ptext2:
  1604                           	opt stack 0
  1605  00E684                     _lee_temperatura:
  1606                           	opt stack 29
  1607                           
  1608                           ;main.c: 325: ADCON0bits.ADON = 1;
  1609                           
  1610                           ;incstack = 0
  1611  00E684  80C2               	bsf	4034,0,c	;volatile
  1612                           
  1613                           ;main.c: 326: ADCON0bits.GO = 1;
  1614  00E686  82C2               	bsf	4034,1,c	;volatile
  1615                           
  1616                           ;main.c: 327: while(ADCON0bits.GO);
  1617  00E688  D000               	goto	l211
  1618  00E68A                     l211:
  1619  00E68A  B2C2               	btfsc	4034,1,c	;volatile
  1620  00E68C  D7FE               	goto	l211
  1621                           
  1622                           ;main.c: 328: _delay((unsigned long)((1)*(8000000/4000.0)));
  1623  00E68E  0E03               	movlw	3
  1624  00E690  6E01               	movwf	??_lee_temperatura& (0+255),c
  1625  00E692  0E98               	movlw	152
  1626  00E694                     u2467:
  1627  00E694  2EE8               	decfsz	wreg,f,c
  1628  00E696  D7FE               	goto	u2467
  1629  00E698  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  1630  00E69A  D7FC               	goto	u2467
  1631                           
  1632                           ;main.c: 329: lectura = ADRESH;
  1633  00E69C  CFC4 F05B          	movff	4036,_lectura	;volatile
  1634                           
  1635                           ;main.c: 330: ADCON0bits.ADON = 0;
  1636  00E6A0  90C2               	bcf	4034,0,c	;volatile
  1637  00E6A2  0012               	return		;funcret
  1638  00E6A4                     __end_of_lee_temperatura:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           postinc0	equ	0xFEE
  1645                           wreg	equ	0xFE8
  1646                           postdec1	equ	0xFE5
  1647                           fsr1l	equ	0xFE1
  1648                           status	equ	0xFD8
  1649                           
  1650 ;; *************** function _Read_RTC *****************
  1651 ;; Defined at:
  1652 ;;		line 290 in file "../main.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;		None
  1657 ;; Return value:  Size  Location     Type
  1658 ;;		None               void
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1670 ;;Total ram usage:        0 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    1
  1673 ;; This function calls:
  1674 ;;		_RtccReadDate
  1675 ;;		_RtccReadTime
  1676 ;; This function is called by:
  1677 ;;		_V_Principal
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text3
  1682  00F0FC                     __ptext3:
  1683                           	opt stack 0
  1684  00F0FC                     _Read_RTC:
  1685                           	opt stack 28
  1686                           
  1687                           ;main.c: 293: RtccReadTime(&RtccTime);
  1688                           
  1689                           ;incstack = 0
  1690  00F0FC  0E9B               	movlw	low _RtccTime
  1691  00F0FE  6E01               	movwf	RtccReadTime@pTm,c
  1692  00F100  0E00               	movlw	high _RtccTime
  1693  00F102  6E02               	movwf	RtccReadTime@pTm+1,c
  1694  00F104  EC2E  F074         	call	_RtccReadTime	;wreg free
  1695                           
  1696                           ;main.c: 294: segundo_u=(RtccTime.f.sec & 0x0F);
  1697  00F108  0100               	movlb	0	; () banked
  1698  00F10A  519C               	movf	(_RtccTime+1)& (0+255),w,b
  1699  00F10C  0B0F               	andlw	15
  1700  00F10E  0100               	movlb	0	; () banked
  1701  00F110  6FC9               	movwf	_segundo_u& (0+255),b
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 295: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  1705  00F112  0100               	movlb	0	; () banked
  1706  00F114  399C               	swapf	(_RtccTime+1)& (0+255),w,b
  1707  00F116  0B0F               	andlw	15
  1708  00F118  0B0F               	andlw	15
  1709  00F11A  0100               	movlb	0	; () banked
  1710  00F11C  6FC8               	movwf	_segundo_d& (0+255),b
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;main.c: 296: minuto_u=(RtccTime.f.min & 0x0F);
  1714  00F11E  0100               	movlb	0	; () banked
  1715  00F120  519D               	movf	(_RtccTime+2)& (0+255),w,b
  1716  00F122  0B0F               	andlw	15
  1717  00F124  0100               	movlb	0	; () banked
  1718  00F126  6FC7               	movwf	_minuto_u& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;main.c: 297: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  1722  00F128  0100               	movlb	0	; () banked
  1723  00F12A  399D               	swapf	(_RtccTime+2)& (0+255),w,b
  1724  00F12C  0B0F               	andlw	15
  1725  00F12E  0B0F               	andlw	15
  1726  00F130  0100               	movlb	0	; () banked
  1727  00F132  6FC6               	movwf	_minuto_d& (0+255),b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 298: hora_u=(RtccTime.f.hour & 0x0F);
  1731  00F134  0100               	movlb	0	; () banked
  1732  00F136  519E               	movf	(_RtccTime+3)& (0+255),w,b
  1733  00F138  0B0F               	andlw	15
  1734  00F13A  0100               	movlb	0	; () banked
  1735  00F13C  6FC3               	movwf	_hora_u& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 299: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  1739  00F13E  0100               	movlb	0	; () banked
  1740  00F140  399E               	swapf	(_RtccTime+3)& (0+255),w,b
  1741  00F142  0B0F               	andlw	15
  1742  00F144  0B0F               	andlw	15
  1743  00F146  0100               	movlb	0	; () banked
  1744  00F148  6FC2               	movwf	_hora_d& (0+255),b
  1745                           
  1746                           ;main.c: 300: RtccReadDate(&RtccDate);
  1747  00F14A  0E5C               	movlw	low _RtccDate
  1748  00F14C  6E01               	movwf	RtccReadDate@pDt,c
  1749  00F14E  0E00               	movlw	high _RtccDate
  1750  00F150  6E02               	movwf	RtccReadDate@pDt+1,c
  1751  00F152  EC65  F074         	call	_RtccReadDate	;wreg free
  1752                           
  1753                           ;main.c: 301: fecha_u=(RtccDate.f.mday & 0x0F);
  1754  00F156  505D               	movf	_RtccDate+1,w,c
  1755  00F158  0B0F               	andlw	15
  1756  00F15A  0100               	movlb	0	; () banked
  1757  00F15C  6FC1               	movwf	_fecha_u& (0+255),b
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 302: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  1761  00F15E  385D               	swapf	_RtccDate+1,w,c
  1762  00F160  0B0F               	andlw	15
  1763  00F162  0B0F               	andlw	15
  1764  00F164  0100               	movlb	0	; () banked
  1765  00F166  6FC0               	movwf	_fecha_d& (0+255),b
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;main.c: 303: mes_u=(RtccDate.f.mon & 0x0F);
  1769  00F168  505E               	movf	_RtccDate+2,w,c
  1770  00F16A  0B0F               	andlw	15
  1771  00F16C  0100               	movlb	0	; () banked
  1772  00F16E  6FC5               	movwf	_mes_u& (0+255),b
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;main.c: 304: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  1776  00F170  385E               	swapf	_RtccDate+2,w,c
  1777  00F172  0B0F               	andlw	15
  1778  00F174  0B0F               	andlw	15
  1779  00F176  0100               	movlb	0	; () banked
  1780  00F178  6FC4               	movwf	_mes_d& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 305: dia_semana=RtccDate.f.wday;
  1784  00F17A  C05C  F0BF         	movff	_RtccDate,_dia_semana
  1785                           
  1786                           ; BSR set to: 0
  1787                           ;main.c: 306: anio_u=(RtccDate.f.year & 0x0F);
  1788  00F17E  505F               	movf	_RtccDate+3,w,c
  1789  00F180  0B0F               	andlw	15
  1790  00F182  0100               	movlb	0	; () banked
  1791  00F184  6FBE               	movwf	_anio_u& (0+255),b
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;main.c: 307: anio_d=((RtccDate.f.year & 0xF0)>>4);
  1795  00F186  385F               	swapf	_RtccDate+3,w,c
  1796  00F188  0B0F               	andlw	15
  1797  00F18A  0B0F               	andlw	15
  1798  00F18C  0100               	movlb	0	; () banked
  1799  00F18E  6FBD               	movwf	_anio_d& (0+255),b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 308: segundo=segundo_d*10+segundo_u;
  1803  00F190  0100               	movlb	0	; () banked
  1804  00F192  51C8               	movf	_segundo_d& (0+255),w,b
  1805  00F194  0D0A               	mullw	10
  1806  00F196  0100               	movlb	0	; () banked
  1807  00F198  51C9               	movf	_segundo_u& (0+255),w,b
  1808  00F19A  24F3               	addwf	prodl,w,c
  1809  00F19C  0100               	movlb	0	; () banked
  1810  00F19E  6F7E               	movwf	_segundo& (0+255),b
  1811  00F1A0  0100               	movlb	0	; () banked
  1812  00F1A2  0E00               	movlw	0
  1813  00F1A4  20F4               	addwfc	prodh,w,c
  1814  00F1A6  0100               	movlb	0	; () banked
  1815  00F1A8  6F7F               	movwf	(_segundo+1)& (0+255),b
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 309: minuto=minuto_d*10+minuto_u;
  1819  00F1AA  0100               	movlb	0	; () banked
  1820  00F1AC  51C6               	movf	_minuto_d& (0+255),w,b
  1821  00F1AE  0D0A               	mullw	10
  1822  00F1B0  0100               	movlb	0	; () banked
  1823  00F1B2  51C7               	movf	_minuto_u& (0+255),w,b
  1824  00F1B4  24F3               	addwf	prodl,w,c
  1825  00F1B6  0100               	movlb	0	; () banked
  1826  00F1B8  6FBB               	movwf	_minuto& (0+255),b
  1827  00F1BA  0100               	movlb	0	; () banked
  1828  00F1BC  0E00               	movlw	0
  1829  00F1BE  20F4               	addwfc	prodh,w,c
  1830  00F1C0  0100               	movlb	0	; () banked
  1831  00F1C2  6FBC               	movwf	(_minuto+1)& (0+255),b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;main.c: 310: hora=hora_d*10+hora_u;
  1835  00F1C4  0100               	movlb	0	; () banked
  1836  00F1C6  51C2               	movf	_hora_d& (0+255),w,b
  1837  00F1C8  0D0A               	mullw	10
  1838  00F1CA  0100               	movlb	0	; () banked
  1839  00F1CC  51C3               	movf	_hora_u& (0+255),w,b
  1840  00F1CE  24F3               	addwf	prodl,w,c
  1841  00F1D0  0100               	movlb	0	; () banked
  1842  00F1D2  6FB7               	movwf	_hora& (0+255),b
  1843  00F1D4  0100               	movlb	0	; () banked
  1844  00F1D6  0E00               	movlw	0
  1845  00F1D8  20F4               	addwfc	prodh,w,c
  1846  00F1DA  0100               	movlb	0	; () banked
  1847  00F1DC  6FB8               	movwf	(_hora+1)& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;main.c: 311: dia=fecha_d*10+fecha_u;
  1851  00F1DE  0100               	movlb	0	; () banked
  1852  00F1E0  51C0               	movf	_fecha_d& (0+255),w,b
  1853  00F1E2  0D0A               	mullw	10
  1854  00F1E4  0100               	movlb	0	; () banked
  1855  00F1E6  51C1               	movf	_fecha_u& (0+255),w,b
  1856  00F1E8  24F3               	addwf	prodl,w,c
  1857  00F1EA  0100               	movlb	0	; () banked
  1858  00F1EC  6FB3               	movwf	_dia& (0+255),b
  1859  00F1EE  0100               	movlb	0	; () banked
  1860  00F1F0  0E00               	movlw	0
  1861  00F1F2  20F4               	addwfc	prodh,w,c
  1862  00F1F4  0100               	movlb	0	; () banked
  1863  00F1F6  6FB4               	movwf	(_dia+1)& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;main.c: 312: diasem=dia_semana;
  1867  00F1F8  C0BF  F0B5         	movff	_dia_semana,_diasem
  1868  00F1FC  0100               	movlb	0	; () banked
  1869  00F1FE  6BB6               	clrf	(_diasem+1)& (0+255),b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;main.c: 313: mes=mes_d*10+mes_u;
  1873  00F200  0100               	movlb	0	; () banked
  1874  00F202  51C4               	movf	_mes_d& (0+255),w,b
  1875  00F204  0D0A               	mullw	10
  1876  00F206  0100               	movlb	0	; () banked
  1877  00F208  51C5               	movf	_mes_u& (0+255),w,b
  1878  00F20A  24F3               	addwf	prodl,w,c
  1879  00F20C  0100               	movlb	0	; () banked
  1880  00F20E  6FB9               	movwf	_mes& (0+255),b
  1881  00F210  0100               	movlb	0	; () banked
  1882  00F212  0E00               	movlw	0
  1883  00F214  20F4               	addwfc	prodh,w,c
  1884  00F216  0100               	movlb	0	; () banked
  1885  00F218  6FBA               	movwf	(_mes+1)& (0+255),b
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;main.c: 314: anio=anio_d*10+anio_u;
  1889  00F21A  0100               	movlb	0	; () banked
  1890  00F21C  51BD               	movf	_anio_d& (0+255),w,b
  1891  00F21E  0D0A               	mullw	10
  1892  00F220  0100               	movlb	0	; () banked
  1893  00F222  51BE               	movf	_anio_u& (0+255),w,b
  1894  00F224  24F3               	addwf	prodl,w,c
  1895  00F226  0100               	movlb	0	; () banked
  1896  00F228  6FB1               	movwf	_anio& (0+255),b
  1897  00F22A  0100               	movlb	0	; () banked
  1898  00F22C  0E00               	movlw	0
  1899  00F22E  20F4               	addwfc	prodh,w,c
  1900  00F230  0100               	movlb	0	; () banked
  1901  00F232  6FB2               	movwf	(_anio+1)& (0+255),b
  1902                           
  1903                           ; BSR set to: 0
  1904  00F234  0012               	return		;funcret
  1905  00F236                     __end_of_Read_RTC:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           tblptrh	equ	0xFF7
  1909                           tblptrl	equ	0xFF6
  1910                           tablat	equ	0xFF5
  1911                           prodh	equ	0xFF4
  1912                           prodl	equ	0xFF3
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _RtccReadTime *****************
  1920 ;; Defined at:
  1921 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  pTm             2    0[COMRAM] PTR struct .
  1924 ;;		 -> RtccTime(4), 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  rTD0            8   10[COMRAM] struct .
  1927 ;;  rTD1            8    2[COMRAM] struct .
  1928 ;; Return value:  Size  Location     Type
  1929 ;;		None               void
  1930 ;; Registers used:
  1931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1938 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1940 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1941 ;;Total ram usage:       18 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_Read_RTC
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text4
  1951  00E85C                     __ptext4:
  1952                           	opt stack 0
  1953  00E85C                     _RtccReadTime:
  1954                           	opt stack 28
  1955  00E85C  0EFC               	movlw	252
  1956  00E85E  010F               	movlb	15	; () banked
  1957  00E860  173F               	andwf	63,f,b	;volatile
  1958                           
  1959                           ; BSR set to: 15
  1960  00E862  010F               	movlb	15	; () banked
  1961  00E864  813F               	bsf	63,0,b	;volatile
  1962                           
  1963                           ; BSR set to: 15
  1964  00E866  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  1965                           
  1966                           ; BSR set to: 15
  1967  00E86A  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  1968                           
  1969                           ; BSR set to: 15
  1970  00E86E  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  1971                           
  1972                           ; BSR set to: 15
  1973  00E872  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  1974                           
  1975                           ; BSR set to: 15
  1976  00E876  0EFC               	movlw	252
  1977  00E878  010F               	movlb	15	; () banked
  1978  00E87A  173F               	andwf	63,f,b	;volatile
  1979  00E87C  010F               	movlb	15	; () banked
  1980  00E87E  813F               	bsf	63,0,b	;volatile
  1981                           
  1982                           ; BSR set to: 15
  1983  00E880  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  1984                           
  1985                           ; BSR set to: 15
  1986  00E884  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  1987                           
  1988                           ; BSR set to: 15
  1989  00E888  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  1990                           
  1991                           ; BSR set to: 15
  1992  00E88C  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  1993                           
  1994                           ; BSR set to: 15
  1995  00E890  5009               	movf	RtccReadTime@rTD1+6,w,c
  1996  00E892  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  1997  00E894  A4D8               	btfss	status,2,c
  1998  00E896  D7E2               	goto	l2351
  1999                           
  2000                           ; BSR set to: 15
  2001                           
  2002                           ; BSR set to: 15
  2003  00E898  EE20 F003          	lfsr	2,3
  2004  00E89C  5001               	movf	RtccReadTime@pTm,w,c
  2005  00E89E  26D9               	addwf	fsr2l,f,c
  2006  00E8A0  5002               	movf	RtccReadTime@pTm+1,w,c
  2007  00E8A2  22DA               	addwfc	fsr2h,f,c
  2008  00E8A4  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  2009  00E8A8  EE20 F002          	lfsr	2,2
  2010  00E8AC  5001               	movf	RtccReadTime@pTm,w,c
  2011  00E8AE  26D9               	addwf	fsr2l,f,c
  2012  00E8B0  5002               	movf	RtccReadTime@pTm+1,w,c
  2013  00E8B2  22DA               	addwfc	fsr2h,f,c
  2014  00E8B4  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  2015  00E8B8  EE20 F001          	lfsr	2,1
  2016  00E8BC  5001               	movf	RtccReadTime@pTm,w,c
  2017  00E8BE  26D9               	addwf	fsr2l,f,c
  2018  00E8C0  5002               	movf	RtccReadTime@pTm+1,w,c
  2019  00E8C2  22DA               	addwfc	fsr2h,f,c
  2020  00E8C4  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  2021                           
  2022                           ; BSR set to: 15
  2023  00E8C8  0012               	return		;funcret
  2024  00E8CA                     __end_of_RtccReadTime:
  2025                           	opt stack 0
  2026                           tblptru	equ	0xFF8
  2027                           tblptrh	equ	0xFF7
  2028                           tblptrl	equ	0xFF6
  2029                           tablat	equ	0xFF5
  2030                           prodh	equ	0xFF4
  2031                           prodl	equ	0xFF3
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           indf2	equ	0xFDF
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _RtccReadDate *****************
  2042 ;; Defined at:
  2043 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  pDt             2    0[COMRAM] PTR struct .
  2046 ;;		 -> RtccDate(4), 
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;  rTD0            8   10[COMRAM] struct .
  2049 ;;  rTD1            8    2[COMRAM] struct .
  2050 ;; Return value:  Size  Location     Type
  2051 ;;		None               void
  2052 ;; Registers used:
  2053 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2059 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2062 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2063 ;;Total ram usage:       18 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; This function calls:
  2066 ;;		Nothing
  2067 ;; This function is called by:
  2068 ;;		_Read_RTC
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text5
  2073  00E8CA                     __ptext5:
  2074                           	opt stack 0
  2075  00E8CA                     _RtccReadDate:
  2076                           	opt stack 28
  2077  00E8CA  0EFC               	movlw	252
  2078  00E8CC  010F               	movlb	15	; () banked
  2079  00E8CE  173F               	andwf	63,f,b	;volatile
  2080  00E8D0  0E03               	movlw	3
  2081  00E8D2  010F               	movlb	15	; () banked
  2082  00E8D4  133F               	iorwf	63,f,b	;volatile
  2083                           
  2084                           ; BSR set to: 15
  2085  00E8D6  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  2086                           
  2087                           ; BSR set to: 15
  2088  00E8DA  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  2089                           
  2090                           ; BSR set to: 15
  2091  00E8DE  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  2092                           
  2093                           ; BSR set to: 15
  2094  00E8E2  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  2095                           
  2096                           ; BSR set to: 15
  2097  00E8E6  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  2098                           
  2099                           ; BSR set to: 15
  2100  00E8EA  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  2101  00E8EE  0EFC               	movlw	252
  2102  00E8F0  010F               	movlb	15	; () banked
  2103  00E8F2  173F               	andwf	63,f,b	;volatile
  2104  00E8F4  0E03               	movlw	3
  2105  00E8F6  010F               	movlb	15	; () banked
  2106  00E8F8  133F               	iorwf	63,f,b	;volatile
  2107                           
  2108                           ; BSR set to: 15
  2109  00E8FA  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  2110                           
  2111                           ; BSR set to: 15
  2112  00E8FE  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  2113                           
  2114                           ; BSR set to: 15
  2115  00E902  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  2116                           
  2117                           ; BSR set to: 15
  2118  00E906  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  2119                           
  2120                           ; BSR set to: 15
  2121  00E90A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  2122                           
  2123                           ; BSR set to: 15
  2124  00E90E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  2125  00E912  5005               	movf	RtccReadDate@rTD1+2,w,c
  2126  00E914  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  2127  00E916  A4D8               	btfss	status,2,c
  2128  00E918  D7D8               	goto	l2377
  2129                           
  2130                           ; BSR set to: 15
  2131                           
  2132                           ; BSR set to: 15
  2133  00E91A  EE20 F001          	lfsr	2,1
  2134  00E91E  5001               	movf	RtccReadDate@pDt,w,c
  2135  00E920  26D9               	addwf	fsr2l,f,c
  2136  00E922  5002               	movf	RtccReadDate@pDt+1,w,c
  2137  00E924  22DA               	addwfc	fsr2h,f,c
  2138  00E926  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  2139  00E92A  EE20 F002          	lfsr	2,2
  2140  00E92E  5001               	movf	RtccReadDate@pDt,w,c
  2141  00E930  26D9               	addwf	fsr2l,f,c
  2142  00E932  5002               	movf	RtccReadDate@pDt+1,w,c
  2143  00E934  22DA               	addwfc	fsr2h,f,c
  2144  00E936  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  2145                           
  2146                           ; BSR set to: 15
  2147  00E93A  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  2148  00E93E  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  2149  00E942  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  2150                           
  2151                           ; BSR set to: 15
  2152  00E946  EE20 F003          	lfsr	2,3
  2153  00E94A  5001               	movf	RtccReadDate@pDt,w,c
  2154  00E94C  26D9               	addwf	fsr2l,f,c
  2155  00E94E  5002               	movf	RtccReadDate@pDt+1,w,c
  2156  00E950  22DA               	addwfc	fsr2h,f,c
  2157  00E952  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  2158                           
  2159                           ; BSR set to: 15
  2160  00E956  0012               	return		;funcret
  2161  00E958                     __end_of_RtccReadDate:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           postinc0	equ	0xFEE
  2170                           wreg	equ	0xFE8
  2171                           postdec1	equ	0xFE5
  2172                           fsr1l	equ	0xFE1
  2173                           indf2	equ	0xFDF
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _ManejaMovimientos *****************
  2179 ;; Defined at:
  2180 ;;		line 377 in file "../main.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;  posicion        2   87[COMRAM] int 
  2185 ;;  mes_tr          1   86[COMRAM] unsigned char 
  2186 ;;  diasem_tr       1   85[COMRAM] unsigned char 
  2187 ;;  dia_tr          1   84[COMRAM] unsigned char 
  2188 ;;  anio_tr         1   83[COMRAM] unsigned char 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;		None               void
  2191 ;; Registers used:
  2192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2202 ;;Total ram usage:        9 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    4
  2205 ;; This function calls:
  2206 ;;		_Convert_diasem
  2207 ;;		_Lcd_Out
  2208 ;;		_Write_RTC
  2209 ;;		_printf
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           	psect	text6
  2216  00F37C                     __ptext6:
  2217                           	opt stack 0
  2218  00F37C                     _ManejaMovimientos:
  2219                           	opt stack 26
  2220                           
  2221                           ;main.c: 379: for(i=0 ;i<30;i++){
  2222                           
  2223                           ; BSR set to: 15
  2224                           ;incstack = 0
  2225  00F37C  0E00               	movlw	0
  2226  00F37E  0100               	movlb	0	; () banked
  2227  00F380  6F7D               	movwf	(_i+1)& (0+255),b
  2228  00F382  0E00               	movlw	0
  2229  00F384  6F7C               	movwf	_i& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232  00F386  0100               	movlb	0	; () banked
  2233  00F388  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2234  00F38A  D00A               	goto	l2689
  2235  00F38C  0100               	movlb	0	; () banked
  2236  00F38E  517D               	movf	(_i+1)& (0+255),w,b
  2237  00F390  E106               	bnz	u2040
  2238  00F392  0E1E               	movlw	30
  2239  00F394  0100               	movlb	0	; () banked
  2240  00F396  5D7C               	subwf	_i& (0+255),w,b
  2241  00F398  B0D8               	btfsc	status,0,c
  2242  00F39A  0012               	return	
  2243  00F39C  D001               	goto	l2689
  2244  00F39E                     u2040:
  2245                           
  2246                           ; BSR set to: 0
  2247  00F39E  0012               	return	
  2248  00F3A0                     l2689:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;main.c: 380: _delay((unsigned long)((90)*(8000000/4000.0)));
  2252  00F3A0  0EEA               	movlw	234
  2253  00F3A2  6E51               	movwf	??_ManejaMovimientos& (0+255),c
  2254  00F3A4  0EC3               	movlw	195
  2255  00F3A6                     u2477:
  2256  00F3A6  2EE8               	decfsz	wreg,f,c
  2257  00F3A8  D7FE               	goto	u2477
  2258  00F3AA  2E51               	decfsz	??_ManejaMovimientos& (0+255),f,c
  2259  00F3AC  D7FC               	goto	u2477
  2260  00F3AE  F000               	nop	
  2261                           
  2262                           ;main.c: 381: char diasem_tr = diasem;
  2263  00F3B0  C0B5  F056         	movff	_diasem,ManejaMovimientos@diasem_tr
  2264                           
  2265                           ;main.c: 382: char dia_tr = dia;
  2266  00F3B4  C0B3  F055         	movff	_dia,ManejaMovimientos@dia_tr
  2267                           
  2268                           ;main.c: 383: char mes_tr = mes;
  2269  00F3B8  C0B9  F057         	movff	_mes,ManejaMovimientos@mes_tr
  2270                           
  2271                           ;main.c: 384: char anio_tr = anio;
  2272  00F3BC  C0B1  F054         	movff	_anio,ManejaMovimientos@anio_tr
  2273                           
  2274                           ;main.c: 385: int posicion = 0;
  2275  00F3C0  0E00               	movlw	0
  2276  00F3C2  6E59               	movwf	ManejaMovimientos@posicion+1,c
  2277  00F3C4  0E00               	movlw	0
  2278  00F3C6  6E58               	movwf	ManejaMovimientos@posicion,c
  2279                           
  2280                           ;main.c: 387: if(Sw_Up = PORTAbits.RA3 == 0){
  2281  00F3C8  B680               	btfsc	3968,3,c	;volatile
  2282  00F3CA  D002               	goto	u2050
  2283  00F3CC  0E01               	movlw	1
  2284  00F3CE  D001               	goto	u2060
  2285  00F3D0                     u2050:
  2286  00F3D0  0E00               	movlw	0
  2287  00F3D2                     u2060:
  2288  00F3D2  0100               	movlb	0	; () banked
  2289  00F3D4  6F86               	movwf	_Sw_Up& (0+255),b
  2290  00F3D6  0100               	movlb	0	; () banked
  2291  00F3D8  5186               	movf	_Sw_Up& (0+255),w,b
  2292  00F3DA  B4D8               	btfsc	status,2,c
  2293  00F3DC  D042               	goto	l2719
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;main.c: 388: i=0;
  2297  00F3DE  0E00               	movlw	0
  2298  00F3E0  0100               	movlb	0	; () banked
  2299  00F3E2  6F7D               	movwf	(_i+1)& (0+255),b
  2300  00F3E4  0E00               	movlw	0
  2301  00F3E6  6F7C               	movwf	_i& (0+255),b
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;main.c: 390: if(posicion == 0){
  2305  00F3E8  5058               	movf	ManejaMovimientos@posicion,w,c
  2306  00F3EA  1059               	iorwf	ManejaMovimientos@posicion+1,w,c
  2307  00F3EC  A4D8               	btfss	status,2,c
  2308  00F3EE  D024               	goto	l2713
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;main.c: 391: diasem_tr++;
  2312  00F3F0  2A56               	incf	ManejaMovimientos@diasem_tr,f,c
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;main.c: 392: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2316  00F3F2  0E00               	movlw	0
  2317  00F3F4  6E4B               	movwf	Lcd_Out@x,c
  2318  00F3F6  C056  F033         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2319  00F3FA  6A34               	clrf	Convert_diasem@dia+1,c
  2320  00F3FC  ECCB  F076         	call	_Convert_diasem	;wreg free
  2321  00F400  C033  F04C         	movff	?_Convert_diasem,Lcd_Out@buffer
  2322  00F404  C034  F04D         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2323  00F408  504C               	movf	Lcd_Out@buffer,w,c
  2324  00F40A  104D               	iorwf	Lcd_Out@buffer+1,w,c
  2325  00F40C  A4D8               	btfss	status,2,c
  2326  00F40E  0E20               	movlw	32
  2327  00F410  6E4E               	movwf	Lcd_Out@buffer+2,c
  2328  00F412  0E02               	movlw	2
  2329  00F414  ECF7  F074         	call	_Lcd_Out
  2330                           
  2331                           ;main.c: 393: printf(posicion);
  2332  00F418  C058  F051         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2333  00F41C  C059  F052         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2334  00F420  6A53               	clrf	(??_ManejaMovimientos+2)& (0+255),c
  2335  00F422  BE52               	btfsc	(??_ManejaMovimientos+1)& (0+255),7,c
  2336  00F424  6853               	setf	(??_ManejaMovimientos+2)& (0+255),c
  2337  00F426  C051  F023         	movff	??_ManejaMovimientos,printf@f
  2338  00F42A  C052  F024         	movff	??_ManejaMovimientos+1,printf@f+1
  2339  00F42E  C053  F025         	movff	??_ManejaMovimientos+2,printf@f+2
  2340  00F432  EC77  F073         	call	_printf	;wreg free
  2341                           
  2342                           ;main.c: 394: }else if(posicion == 1){
  2343  00F436  D015               	goto	l2719
  2344  00F438                     l2713:
  2345  00F438  0458               	decf	ManejaMovimientos@posicion,w,c
  2346  00F43A  1059               	iorwf	ManejaMovimientos@posicion+1,w,c
  2347  00F43C  A4D8               	btfss	status,2,c
  2348  00F43E  D011               	goto	l2719
  2349                           
  2350                           ;main.c: 395: mes_tr++;
  2351  00F440  2A57               	incf	ManejaMovimientos@mes_tr,f,c
  2352                           
  2353                           ;main.c: 396: Lcd_Out(2, 3, mes_tr);
  2354  00F442  0E03               	movlw	3
  2355  00F444  6E4B               	movwf	Lcd_Out@x,c
  2356  00F446  5057               	movf	ManejaMovimientos@mes_tr,w,c
  2357  00F448  6E51               	movwf	??_ManejaMovimientos& (0+255),c
  2358  00F44A  6A52               	clrf	(??_ManejaMovimientos+1)& (0+255),c
  2359  00F44C  6A53               	clrf	(??_ManejaMovimientos+2)& (0+255),c
  2360  00F44E  C051  F04C         	movff	??_ManejaMovimientos,Lcd_Out@buffer
  2361  00F452  C052  F04D         	movff	??_ManejaMovimientos+1,Lcd_Out@buffer+1
  2362  00F456  C053  F04E         	movff	??_ManejaMovimientos+2,Lcd_Out@buffer+2
  2363  00F45A  0E02               	movlw	2
  2364  00F45C  ECF7  F074         	call	_Lcd_Out
  2365  00F460  D000               	goto	l2719
  2366  00F462                     l2719:
  2367                           
  2368                           ;main.c: 397: }
  2369                           ;main.c: 402: }
  2370                           ;main.c: 403: if(Sw_Right = PORTAbits.RA2 == 0){
  2371  00F462  B480               	btfsc	3968,2,c	;volatile
  2372  00F464  D002               	goto	u2100
  2373  00F466  0E01               	movlw	1
  2374  00F468  D001               	goto	u2110
  2375  00F46A                     u2100:
  2376  00F46A  0E00               	movlw	0
  2377  00F46C                     u2110:
  2378  00F46C  0100               	movlb	0	; () banked
  2379  00F46E  6F85               	movwf	_Sw_Right& (0+255),b
  2380  00F470  0100               	movlb	0	; () banked
  2381  00F472  5185               	movf	_Sw_Right& (0+255),w,b
  2382  00F474  B4D8               	btfsc	status,2,c
  2383  00F476  D008               	goto	l2725
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 404: posicion++;
  2387  00F478  4A58               	infsnz	ManejaMovimientos@posicion,f,c
  2388  00F47A  2A59               	incf	ManejaMovimientos@posicion+1,f,c
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 405: i=0;
  2392  00F47C  0E00               	movlw	0
  2393  00F47E  0100               	movlb	0	; () banked
  2394  00F480  6F7D               	movwf	(_i+1)& (0+255),b
  2395  00F482  0E00               	movlw	0
  2396  00F484  6F7C               	movwf	_i& (0+255),b
  2397  00F486  D000               	goto	l2725
  2398  00F488                     l2725:
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;main.c: 408: }
  2402                           ;main.c: 409: if(Sw_Center = PORTAbits.RA5 == 0){
  2403  00F488  BA80               	btfsc	3968,5,c	;volatile
  2404  00F48A  D002               	goto	u2130
  2405  00F48C  0E01               	movlw	1
  2406  00F48E  D001               	goto	u2140
  2407  00F490                     u2130:
  2408  00F490  0E00               	movlw	0
  2409  00F492                     u2140:
  2410  00F492  0100               	movlb	0	; () banked
  2411  00F494  6F82               	movwf	_Sw_Center& (0+255),b
  2412  00F496  0100               	movlb	0	; () banked
  2413  00F498  5182               	movf	_Sw_Center& (0+255),w,b
  2414  00F49A  B4D8               	btfsc	status,2,c
  2415  00F49C  D00F               	goto	l2731
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;main.c: 410: diasem = diasem_tr;
  2419  00F49E  C056  F0B5         	movff	ManejaMovimientos@diasem_tr,_diasem
  2420  00F4A2  0100               	movlb	0	; () banked
  2421  00F4A4  6BB6               	clrf	(_diasem+1)& (0+255),b
  2422                           
  2423                           ;main.c: 411: dia = dia_tr;
  2424  00F4A6  C055  F0B3         	movff	ManejaMovimientos@dia_tr,_dia
  2425  00F4AA  0100               	movlb	0	; () banked
  2426  00F4AC  6BB4               	clrf	(_dia+1)& (0+255),b
  2427                           
  2428                           ;main.c: 412: mes = mes_tr;
  2429  00F4AE  C057  F0B9         	movff	ManejaMovimientos@mes_tr,_mes
  2430  00F4B2  0100               	movlb	0	; () banked
  2431  00F4B4  6BBA               	clrf	(_mes+1)& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;main.c: 413: Write_RTC();
  2435  00F4B6  EC6A  F07A         	call	_Write_RTC	;wreg free
  2436                           
  2437                           ;main.c: 415: break;
  2438  00F4BA  0012               	return	
  2439  00F4BC                     l2731:
  2440  00F4BC  0100               	movlb	0	; () banked
  2441  00F4BE  4B7C               	infsnz	_i& (0+255),f,b
  2442  00F4C0  2B7D               	incf	(_i+1)& (0+255),f,b
  2443                           
  2444                           ; BSR set to: 0
  2445  00F4C2  0100               	movlb	0	; () banked
  2446  00F4C4  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2447  00F4C6  D76C               	goto	l2689
  2448  00F4C8  0100               	movlb	0	; () banked
  2449  00F4CA  517D               	movf	(_i+1)& (0+255),w,b
  2450  00F4CC  E102               	bnz	l242
  2451  00F4CE  D761               	goto	L1
  2452  00F4D0  0012               	return	
  2453  00F4D2                     l242:
  2454  00F4D2  0012               	return		;funcret
  2455  00F4D4                     __end_of_ManejaMovimientos:
  2456                           	opt stack 0
  2457                           tblptru	equ	0xFF8
  2458                           tblptrh	equ	0xFF7
  2459                           tblptrl	equ	0xFF6
  2460                           tablat	equ	0xFF5
  2461                           prodh	equ	0xFF4
  2462                           prodl	equ	0xFF3
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _printf *****************
  2473 ;; Defined at:
  2474 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\printf.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;  f               3   34[COMRAM] PTR const unsigned char 
  2477 ;;		 -> ROM(65527), 
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;  pb              4   39[COMRAM] struct __prbuf
  2480 ;;  ap              2   37[COMRAM] PTR void [1]
  2481 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2482 ;; Return value:  Size  Location     Type
  2483 ;;                  2   34[COMRAM] int 
  2484 ;; Registers used:
  2485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2486 ;; Tracked objects:
  2487 ;;		On entry : 0/0
  2488 ;;		On exit  : 0/0
  2489 ;;		Unchanged: 0/0
  2490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2491 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2492 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2494 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2495 ;;Total ram usage:        9 bytes
  2496 ;; Hardware stack levels used:    1
  2497 ;; Hardware stack levels required when called:    2
  2498 ;; This function calls:
  2499 ;;		__doprnt
  2500 ;; This function is called by:
  2501 ;;		_ManejaMovimientos
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text7
  2506  00E6EE                     __ptext7:
  2507                           	opt stack 0
  2508  00E6EE                     _printf:
  2509                           	opt stack 27
  2510                           
  2511                           ;incstack = 0
  2512  00E6EE  0E00               	movlw	0
  2513  00E6F0  6E28               	movwf	printf@pb,c
  2514  00E6F2  0E00               	movlw	0
  2515  00E6F4  6E29               	movwf	printf@pb+1,c
  2516  00E6F6  0E52               	movlw	low _putch
  2517  00E6F8  6E2A               	movwf	printf@pb+2,c
  2518  00E6FA  0EE6               	movlw	high _putch
  2519  00E6FC  6E2B               	movwf	printf@pb+3,c
  2520  00E6FE  0E26               	movlw	low (?_printf+3)
  2521  00E700  6E26               	movwf	printf@ap,c
  2522  00E702  0E00               	movlw	high (?_printf+3)
  2523  00E704  6E27               	movwf	printf@ap+1,c
  2524                           
  2525                           ;	Return value of _printf is never used
  2526  00E706  0E28               	movlw	low printf@pb
  2527  00E708  6E0D               	movwf	__doprnt@pb,c
  2528  00E70A  0E00               	movlw	high printf@pb
  2529  00E70C  6E0E               	movwf	__doprnt@pb+1,c
  2530  00E70E  C023  F00F         	movff	printf@f,__doprnt@f
  2531  00E712  C024  F010         	movff	printf@f+1,__doprnt@f+1
  2532  00E716  C025  F011         	movff	printf@f+2,__doprnt@f+2
  2533  00E71A  0E26               	movlw	low printf@ap
  2534  00E71C  6E12               	movwf	__doprnt@ap,c
  2535  00E71E  0E00               	movlw	high printf@ap
  2536  00E720  6E13               	movwf	__doprnt@ap+1,c
  2537  00E722  EC54  F07C         	call	__doprnt	;wreg free
  2538  00E726  0012               	return	
  2539  00E728  0012               	return		;funcret
  2540  00E72A                     __end_of_printf:
  2541                           	opt stack 0
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           prodh	equ	0xFF4
  2547                           prodl	equ	0xFF3
  2548                           postinc0	equ	0xFEE
  2549                           wreg	equ	0xFE8
  2550                           postdec1	equ	0xFE5
  2551                           fsr1l	equ	0xFE1
  2552                           indf2	equ	0xFDF
  2553                           fsr2h	equ	0xFDA
  2554                           fsr2l	equ	0xFD9
  2555                           status	equ	0xFD8
  2556                           
  2557 ;; *************** function _Write_RTC *****************
  2558 ;; Defined at:
  2559 ;;		line 252 in file "../main.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;		None
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;		None
  2564 ;; Return value:  Size  Location     Type
  2565 ;;		None               void
  2566 ;; Registers used:
  2567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2577 ;;Total ram usage:        0 bytes
  2578 ;; Hardware stack levels used:    1
  2579 ;; Hardware stack levels required when called:    2
  2580 ;; This function calls:
  2581 ;;		_RtccWrOn
  2582 ;;		_RtccWriteDate
  2583 ;;		_RtccWriteTime
  2584 ;;		___awdiv
  2585 ;; This function is called by:
  2586 ;;		_main
  2587 ;;		_ManejaMovimientos
  2588 ;; This function uses a non-reentrant model
  2589 ;;
  2590                           
  2591                           	psect	text8
  2592  00F4D4                     __ptext8:
  2593                           	opt stack 0
  2594  00F4D4                     _Write_RTC:
  2595                           	opt stack 28
  2596                           
  2597                           ;main.c: 254: RtccWrOn();
  2598                           
  2599                           ;incstack = 0
  2600  00F4D4  EC2A  F073         	call	_RtccWrOn	;wreg free
  2601                           
  2602                           ;main.c: 256: PIE3bits.RTCCIE=1;
  2603  00F4D8  80A3               	bsf	4003,0,c	;volatile
  2604                           
  2605                           ;main.c: 257: segundo_d=segundo/10;
  2606  00F4DA  C07E  F001         	movff	_segundo,___awdiv@dividend
  2607  00F4DE  C07F  F002         	movff	_segundo+1,___awdiv@dividend+1
  2608  00F4E2  0E00               	movlw	0
  2609  00F4E4  6E04               	movwf	___awdiv@divisor+1,c
  2610  00F4E6  0E0A               	movlw	10
  2611  00F4E8  6E03               	movwf	___awdiv@divisor,c
  2612  00F4EA  ECAC  F074         	call	___awdiv	;wreg free
  2613  00F4EE  5001               	movf	?___awdiv,w,c
  2614  00F4F0  0100               	movlb	0	; () banked
  2615  00F4F2  6FC8               	movwf	_segundo_d& (0+255),b
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 258: segundo_u=segundo-segundo_d*10;
  2619  00F4F4  0100               	movlb	0	; () banked
  2620  00F4F6  51C8               	movf	_segundo_d& (0+255),w,b
  2621  00F4F8  0D0A               	mullw	10
  2622  00F4FA  50F3               	movf	prodl,w,c
  2623  00F4FC  0800               	sublw	0
  2624  00F4FE  0100               	movlb	0	; () banked
  2625  00F500  257E               	addwf	_segundo& (0+255),w,b
  2626  00F502  0100               	movlb	0	; () banked
  2627  00F504  6FC9               	movwf	_segundo_u& (0+255),b
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 259: RtccTime.f.sec =segundo_d*16+segundo_u;
  2631  00F506  0100               	movlb	0	; () banked
  2632  00F508  51C8               	movf	_segundo_d& (0+255),w,b
  2633  00F50A  0D10               	mullw	16
  2634  00F50C  50F3               	movf	prodl,w,c
  2635  00F50E  0100               	movlb	0	; () banked
  2636  00F510  25C9               	addwf	_segundo_u& (0+255),w,b
  2637  00F512  0100               	movlb	0	; () banked
  2638  00F514  6F9C               	movwf	(_RtccTime+1)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 260: minuto_d=minuto/10;
  2642  00F516  C0BB  F001         	movff	_minuto,___awdiv@dividend
  2643  00F51A  C0BC  F002         	movff	_minuto+1,___awdiv@dividend+1
  2644  00F51E  0E00               	movlw	0
  2645  00F520  6E04               	movwf	___awdiv@divisor+1,c
  2646  00F522  0E0A               	movlw	10
  2647  00F524  6E03               	movwf	___awdiv@divisor,c
  2648  00F526  ECAC  F074         	call	___awdiv	;wreg free
  2649  00F52A  5001               	movf	?___awdiv,w,c
  2650  00F52C  0100               	movlb	0	; () banked
  2651  00F52E  6FC6               	movwf	_minuto_d& (0+255),b
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 261: minuto_u=minuto-minuto_d*10;
  2655  00F530  0100               	movlb	0	; () banked
  2656  00F532  51C6               	movf	_minuto_d& (0+255),w,b
  2657  00F534  0D0A               	mullw	10
  2658  00F536  50F3               	movf	prodl,w,c
  2659  00F538  0800               	sublw	0
  2660  00F53A  0100               	movlb	0	; () banked
  2661  00F53C  25BB               	addwf	_minuto& (0+255),w,b
  2662  00F53E  0100               	movlb	0	; () banked
  2663  00F540  6FC7               	movwf	_minuto_u& (0+255),b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;main.c: 262: RtccTime.f.min =minuto_d*16+minuto_u;
  2667  00F542  0100               	movlb	0	; () banked
  2668  00F544  51C6               	movf	_minuto_d& (0+255),w,b
  2669  00F546  0D10               	mullw	16
  2670  00F548  50F3               	movf	prodl,w,c
  2671  00F54A  0100               	movlb	0	; () banked
  2672  00F54C  25C7               	addwf	_minuto_u& (0+255),w,b
  2673  00F54E  0100               	movlb	0	; () banked
  2674  00F550  6F9D               	movwf	(_RtccTime+2)& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;main.c: 263: hora_d=hora/10;
  2678  00F552  C0B7  F001         	movff	_hora,___awdiv@dividend
  2679  00F556  C0B8  F002         	movff	_hora+1,___awdiv@dividend+1
  2680  00F55A  0E00               	movlw	0
  2681  00F55C  6E04               	movwf	___awdiv@divisor+1,c
  2682  00F55E  0E0A               	movlw	10
  2683  00F560  6E03               	movwf	___awdiv@divisor,c
  2684  00F562  ECAC  F074         	call	___awdiv	;wreg free
  2685  00F566  5001               	movf	?___awdiv,w,c
  2686  00F568  0100               	movlb	0	; () banked
  2687  00F56A  6FC2               	movwf	_hora_d& (0+255),b
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 264: hora_u=hora-hora_d*10;
  2691  00F56C  0100               	movlb	0	; () banked
  2692  00F56E  51C2               	movf	_hora_d& (0+255),w,b
  2693  00F570  0D0A               	mullw	10
  2694  00F572  50F3               	movf	prodl,w,c
  2695  00F574  0800               	sublw	0
  2696  00F576  0100               	movlb	0	; () banked
  2697  00F578  25B7               	addwf	_hora& (0+255),w,b
  2698  00F57A  0100               	movlb	0	; () banked
  2699  00F57C  6FC3               	movwf	_hora_u& (0+255),b
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;main.c: 265: RtccTime.f.hour=hora_d*16+hora_u;
  2703  00F57E  0100               	movlb	0	; () banked
  2704  00F580  51C2               	movf	_hora_d& (0+255),w,b
  2705  00F582  0D10               	mullw	16
  2706  00F584  50F3               	movf	prodl,w,c
  2707  00F586  0100               	movlb	0	; () banked
  2708  00F588  25C3               	addwf	_hora_u& (0+255),w,b
  2709  00F58A  0100               	movlb	0	; () banked
  2710  00F58C  6F9E               	movwf	(_RtccTime+3)& (0+255),b
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 266: anio_d=anio/10;
  2714  00F58E  C0B1  F001         	movff	_anio,___awdiv@dividend
  2715  00F592  C0B2  F002         	movff	_anio+1,___awdiv@dividend+1
  2716  00F596  0E00               	movlw	0
  2717  00F598  6E04               	movwf	___awdiv@divisor+1,c
  2718  00F59A  0E0A               	movlw	10
  2719  00F59C  6E03               	movwf	___awdiv@divisor,c
  2720  00F59E  ECAC  F074         	call	___awdiv	;wreg free
  2721  00F5A2  5001               	movf	?___awdiv,w,c
  2722  00F5A4  0100               	movlb	0	; () banked
  2723  00F5A6  6FBD               	movwf	_anio_d& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 267: anio_u=anio-anio_d*10;
  2727  00F5A8  0100               	movlb	0	; () banked
  2728  00F5AA  51BD               	movf	_anio_d& (0+255),w,b
  2729  00F5AC  0D0A               	mullw	10
  2730  00F5AE  50F3               	movf	prodl,w,c
  2731  00F5B0  0800               	sublw	0
  2732  00F5B2  0100               	movlb	0	; () banked
  2733  00F5B4  25B1               	addwf	_anio& (0+255),w,b
  2734  00F5B6  0100               	movlb	0	; () banked
  2735  00F5B8  6FBE               	movwf	_anio_u& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;main.c: 268: RtccDate.f.year=anio_d*16+anio_u;
  2739  00F5BA  0100               	movlb	0	; () banked
  2740  00F5BC  51BD               	movf	_anio_d& (0+255),w,b
  2741  00F5BE  0D10               	mullw	16
  2742  00F5C0  50F3               	movf	prodl,w,c
  2743  00F5C2  0100               	movlb	0	; () banked
  2744  00F5C4  25BE               	addwf	_anio_u& (0+255),w,b
  2745  00F5C6  6E5F               	movwf	_RtccDate+3,c
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 269: mes_d=mes/10;
  2749  00F5C8  C0B9  F001         	movff	_mes,___awdiv@dividend
  2750  00F5CC  C0BA  F002         	movff	_mes+1,___awdiv@dividend+1
  2751  00F5D0  0E00               	movlw	0
  2752  00F5D2  6E04               	movwf	___awdiv@divisor+1,c
  2753  00F5D4  0E0A               	movlw	10
  2754  00F5D6  6E03               	movwf	___awdiv@divisor,c
  2755  00F5D8  ECAC  F074         	call	___awdiv	;wreg free
  2756  00F5DC  5001               	movf	?___awdiv,w,c
  2757  00F5DE  0100               	movlb	0	; () banked
  2758  00F5E0  6FC4               	movwf	_mes_d& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 270: mes_u=mes-mes_d*10;
  2762  00F5E2  0100               	movlb	0	; () banked
  2763  00F5E4  51C4               	movf	_mes_d& (0+255),w,b
  2764  00F5E6  0D0A               	mullw	10
  2765  00F5E8  50F3               	movf	prodl,w,c
  2766  00F5EA  0800               	sublw	0
  2767  00F5EC  0100               	movlb	0	; () banked
  2768  00F5EE  25B9               	addwf	_mes& (0+255),w,b
  2769  00F5F0  0100               	movlb	0	; () banked
  2770  00F5F2  6FC5               	movwf	_mes_u& (0+255),b
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 271: RtccDate.f.mon=mes_d*16+mes_u;
  2774  00F5F4  0100               	movlb	0	; () banked
  2775  00F5F6  51C4               	movf	_mes_d& (0+255),w,b
  2776  00F5F8  0D10               	mullw	16
  2777  00F5FA  50F3               	movf	prodl,w,c
  2778  00F5FC  0100               	movlb	0	; () banked
  2779  00F5FE  25C5               	addwf	_mes_u& (0+255),w,b
  2780  00F600  6E5E               	movwf	_RtccDate+2,c
  2781                           
  2782                           ; BSR set to: 0
  2783                           ;main.c: 272: fecha_d=dia/10;
  2784  00F602  C0B3  F001         	movff	_dia,___awdiv@dividend
  2785  00F606  C0B4  F002         	movff	_dia+1,___awdiv@dividend+1
  2786  00F60A  0E00               	movlw	0
  2787  00F60C  6E04               	movwf	___awdiv@divisor+1,c
  2788  00F60E  0E0A               	movlw	10
  2789  00F610  6E03               	movwf	___awdiv@divisor,c
  2790  00F612  ECAC  F074         	call	___awdiv	;wreg free
  2791  00F616  5001               	movf	?___awdiv,w,c
  2792  00F618  0100               	movlb	0	; () banked
  2793  00F61A  6FC0               	movwf	_fecha_d& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 273: fecha_u=dia-fecha_d*10;
  2797  00F61C  0100               	movlb	0	; () banked
  2798  00F61E  51C0               	movf	_fecha_d& (0+255),w,b
  2799  00F620  0D0A               	mullw	10
  2800  00F622  50F3               	movf	prodl,w,c
  2801  00F624  0800               	sublw	0
  2802  00F626  0100               	movlb	0	; () banked
  2803  00F628  25B3               	addwf	_dia& (0+255),w,b
  2804  00F62A  0100               	movlb	0	; () banked
  2805  00F62C  6FC1               	movwf	_fecha_u& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 274: RtccDate.f.mday=fecha_d*16+fecha_u;
  2809  00F62E  0100               	movlb	0	; () banked
  2810  00F630  51C0               	movf	_fecha_d& (0+255),w,b
  2811  00F632  0D10               	mullw	16
  2812  00F634  50F3               	movf	prodl,w,c
  2813  00F636  0100               	movlb	0	; () banked
  2814  00F638  25C1               	addwf	_fecha_u& (0+255),w,b
  2815  00F63A  6E5D               	movwf	_RtccDate+1,c
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 275: dia_semana=diasem;
  2819  00F63C  C0B5  F0BF         	movff	_diasem,_dia_semana
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;main.c: 276: RtccDate.f.wday =diasem;
  2823  00F640  C0B5  F05C         	movff	_diasem,_RtccDate
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;main.c: 278: RtccWriteTime(&RtccTime,1);
  2827  00F644  0E9B               	movlw	low _RtccTime
  2828  00F646  6E01               	movwf	RtccWriteTime@pTm,c
  2829  00F648  0E00               	movlw	high _RtccTime
  2830  00F64A  6E02               	movwf	RtccWriteTime@pTm+1,c
  2831  00F64C  0E01               	movlw	1
  2832  00F64E  6E03               	movwf	RtccWriteTime@di,c
  2833  00F650  ECB8  F075         	call	_RtccWriteTime	;wreg free
  2834                           
  2835                           ;main.c: 279: RtccWriteDate(&RtccDate,1);
  2836  00F654  0E5C               	movlw	low _RtccDate
  2837  00F656  6E01               	movwf	RtccWriteDate@pDt,c
  2838  00F658  0E00               	movlw	high _RtccDate
  2839  00F65A  6E02               	movwf	RtccWriteDate@pDt+1,c
  2840  00F65C  0E01               	movlw	1
  2841  00F65E  6E03               	movwf	RtccWriteDate@di,c
  2842  00F660  EC1B  F079         	call	_RtccWriteDate	;wreg free
  2843                           
  2844                           ;main.c: 280: (RTCCFGbits.RTCEN=1);
  2845  00F664  010F               	movlb	15	; () banked
  2846  00F666  8F3F               	bsf	63,7,b	;volatile
  2847                           
  2848                           ; BSR set to: 15
  2849  00F668  0012               	return		;funcret
  2850  00F66A                     __end_of_Write_RTC:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1l	equ	0xFE1
  2862                           indf2	equ	0xFDF
  2863                           fsr2h	equ	0xFDA
  2864                           fsr2l	equ	0xFD9
  2865                           status	equ	0xFD8
  2866                           
  2867 ;; *************** function ___awdiv *****************
  2868 ;; Defined at:
  2869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  dividend        2    0[COMRAM] int 
  2872 ;;  divisor         2    2[COMRAM] int 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  quotient        2    6[COMRAM] int 
  2875 ;;  sign            1    5[COMRAM] unsigned char 
  2876 ;;  counter         1    4[COMRAM] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  2    0[COMRAM] int 
  2879 ;; Registers used:
  2880 ;;		wreg, status,2, status,0
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2887 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2889 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2890 ;;Total ram usage:        8 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_Write_RTC
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text9
  2900  00E958                     __ptext9:
  2901                           	opt stack 0
  2902  00E958                     ___awdiv:
  2903                           	opt stack 29
  2904                           
  2905                           ; BSR set to: 15
  2906                           ;incstack = 0
  2907  00E958  0E00               	movlw	0
  2908  00E95A  6E06               	movwf	___awdiv@sign,c
  2909  00E95C  AE04               	btfss	___awdiv@divisor+1,7,c
  2910  00E95E  D007               	goto	l2417
  2911  00E960  6C03               	negf	___awdiv@divisor,c
  2912  00E962  1E04               	comf	___awdiv@divisor+1,f,c
  2913  00E964  B0D8               	btfsc	status,0,c
  2914  00E966  2A04               	incf	___awdiv@divisor+1,f,c
  2915  00E968  0E01               	movlw	1
  2916  00E96A  6E06               	movwf	___awdiv@sign,c
  2917  00E96C  D000               	goto	l2417
  2918  00E96E                     l2417:
  2919  00E96E  AE02               	btfss	___awdiv@dividend+1,7,c
  2920  00E970  D007               	goto	l2423
  2921  00E972  6C01               	negf	___awdiv@dividend,c
  2922  00E974  1E02               	comf	___awdiv@dividend+1,f,c
  2923  00E976  B0D8               	btfsc	status,0,c
  2924  00E978  2A02               	incf	___awdiv@dividend+1,f,c
  2925  00E97A  0E01               	movlw	1
  2926  00E97C  1A06               	xorwf	___awdiv@sign,f,c
  2927  00E97E  D000               	goto	l2423
  2928  00E980                     l2423:
  2929  00E980  0E00               	movlw	0
  2930  00E982  6E08               	movwf	___awdiv@quotient+1,c
  2931  00E984  0E00               	movlw	0
  2932  00E986  6E07               	movwf	___awdiv@quotient,c
  2933  00E988  5003               	movf	___awdiv@divisor,w,c
  2934  00E98A  1004               	iorwf	___awdiv@divisor+1,w,c
  2935  00E98C  B4D8               	btfsc	status,2,c
  2936  00E98E  D021               	goto	l2445
  2937  00E990  0E01               	movlw	1
  2938  00E992  6E05               	movwf	___awdiv@counter,c
  2939  00E994  D005               	goto	l2431
  2940  00E996                     l2429:
  2941  00E996  90D8               	bcf	status,0,c
  2942  00E998  3603               	rlcf	___awdiv@divisor,f,c
  2943  00E99A  3604               	rlcf	___awdiv@divisor+1,f,c
  2944  00E99C  2A05               	incf	___awdiv@counter,f,c
  2945  00E99E  D000               	goto	l2431
  2946  00E9A0                     l2431:
  2947  00E9A0  BE04               	btfsc	___awdiv@divisor+1,7,c
  2948  00E9A2  D002               	goto	l2433
  2949  00E9A4  D7F8               	goto	l2429
  2950  00E9A6  D000               	goto	l2433
  2951  00E9A8                     l2433:
  2952  00E9A8  90D8               	bcf	status,0,c
  2953  00E9AA  3607               	rlcf	___awdiv@quotient,f,c
  2954  00E9AC  3608               	rlcf	___awdiv@quotient+1,f,c
  2955  00E9AE  5003               	movf	___awdiv@divisor,w,c
  2956  00E9B0  5C01               	subwf	___awdiv@dividend,w,c
  2957  00E9B2  5004               	movf	___awdiv@divisor+1,w,c
  2958  00E9B4  5802               	subwfb	___awdiv@dividend+1,w,c
  2959  00E9B6  A0D8               	btfss	status,0,c
  2960  00E9B8  D006               	goto	l2441
  2961  00E9BA  5003               	movf	___awdiv@divisor,w,c
  2962  00E9BC  5E01               	subwf	___awdiv@dividend,f,c
  2963  00E9BE  5004               	movf	___awdiv@divisor+1,w,c
  2964  00E9C0  5A02               	subwfb	___awdiv@dividend+1,f,c
  2965  00E9C2  8007               	bsf	___awdiv@quotient,0,c
  2966  00E9C4  D000               	goto	l2441
  2967  00E9C6                     l2441:
  2968  00E9C6  90D8               	bcf	status,0,c
  2969  00E9C8  3204               	rrcf	___awdiv@divisor+1,f,c
  2970  00E9CA  3203               	rrcf	___awdiv@divisor,f,c
  2971  00E9CC  2E05               	decfsz	___awdiv@counter,f,c
  2972  00E9CE  D7EC               	goto	l2433
  2973  00E9D0  D000               	goto	l2445
  2974  00E9D2                     l2445:
  2975  00E9D2  5006               	movf	___awdiv@sign,w,c
  2976  00E9D4  B4D8               	btfsc	status,2,c
  2977  00E9D6  D005               	goto	l2449
  2978  00E9D8  6C07               	negf	___awdiv@quotient,c
  2979  00E9DA  1E08               	comf	___awdiv@quotient+1,f,c
  2980  00E9DC  B0D8               	btfsc	status,0,c
  2981  00E9DE  2A08               	incf	___awdiv@quotient+1,f,c
  2982  00E9E0  D000               	goto	l2449
  2983  00E9E2                     l2449:
  2984  00E9E2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2985  00E9E6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2986  00E9EA  0012               	return	
  2987  00E9EC  0012               	return		;funcret
  2988  00E9EE                     __end_of___awdiv:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           tblptrh	equ	0xFF7
  2992                           tblptrl	equ	0xFF6
  2993                           tablat	equ	0xFF5
  2994                           prodh	equ	0xFF4
  2995                           prodl	equ	0xFF3
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1l	equ	0xFE1
  3000                           indf2	equ	0xFDF
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _RtccWriteTime *****************
  3006 ;; Defined at:
  3007 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;  pTm             2    0[COMRAM] PTR const struct .
  3010 ;;		 -> RtccTime(4), 
  3011 ;;  di              1    2[COMRAM] enum E7121
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  tempHourWDay    2    9[COMRAM] struct .
  3014 ;;  tempMinSec      2    7[COMRAM] struct .
  3015 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3016 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3017 ;;  wasOn           1    4[COMRAM] enum E7121
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  1    wreg      enum E7337
  3020 ;; Registers used:
  3021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3027 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3028 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3030 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3031 ;;Total ram usage:       11 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    1
  3034 ;; This function calls:
  3035 ;;		_RtccWrOn
  3036 ;; This function is called by:
  3037 ;;		_Write_RTC
  3038 ;; This function uses a non-reentrant model
  3039 ;;
  3040                           
  3041                           	psect	text10
  3042  00EB70                     __ptext10:
  3043                           	opt stack 0
  3044  00EB70                     _RtccWriteTime:
  3045                           	opt stack 28
  3046                           
  3047                           ;incstack = 0
  3048  00EB70  0E00               	movlw	0
  3049  00EB72  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3050  00EB74  EE20 F002          	lfsr	2,2
  3051  00EB78  5001               	movf	RtccWriteTime@pTm,w,c
  3052  00EB7A  26D9               	addwf	fsr2l,f,c
  3053  00EB7C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3054  00EB7E  22DA               	addwfc	fsr2h,f,c
  3055  00EB80  0E5A               	movlw	90
  3056  00EB82  60DF               	cpfslt	indf2,c
  3057  00EB84  0012               	return	
  3058  00EB86  EE20 F001          	lfsr	2,1
  3059  00EB8A  5001               	movf	RtccWriteTime@pTm,w,c
  3060  00EB8C  26D9               	addwf	fsr2l,f,c
  3061  00EB8E  5002               	movf	RtccWriteTime@pTm+1,w,c
  3062  00EB90  22DA               	addwfc	fsr2h,f,c
  3063  00EB92  0E5A               	movlw	90
  3064  00EB94  60DF               	cpfslt	indf2,c
  3065  00EB96  0012               	return	
  3066  00EB98  EE20 F003          	lfsr	2,3
  3067  00EB9C  5001               	movf	RtccWriteTime@pTm,w,c
  3068  00EB9E  26D9               	addwf	fsr2l,f,c
  3069  00EBA0  5002               	movf	RtccWriteTime@pTm+1,w,c
  3070  00EBA2  22DA               	addwfc	fsr2h,f,c
  3071  00EBA4  0E24               	movlw	36
  3072  00EBA6  64DF               	cpfsgt	indf2,c
  3073  00EBA8  D002               	goto	l2223
  3074  00EBAA  0012               	return	
  3075                           
  3076                           ;	Return value of _RtccWriteTime is never used
  3077  00EBAC  0012               	return	
  3078  00EBAE                     l2223:
  3079  00EBAE  EE20 F002          	lfsr	2,2
  3080  00EBB2  5001               	movf	RtccWriteTime@pTm,w,c
  3081  00EBB4  26D9               	addwf	fsr2l,f,c
  3082  00EBB6  5002               	movf	RtccWriteTime@pTm+1,w,c
  3083  00EBB8  22DA               	addwfc	fsr2h,f,c
  3084  00EBBA  50DF               	movf	indf2,w,c
  3085  00EBBC  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3086  00EBBE  EE20 F001          	lfsr	2,1
  3087  00EBC2  5001               	movf	RtccWriteTime@pTm,w,c
  3088  00EBC4  26D9               	addwf	fsr2l,f,c
  3089  00EBC6  5002               	movf	RtccWriteTime@pTm+1,w,c
  3090  00EBC8  22DA               	addwfc	fsr2h,f,c
  3091  00EBCA  50DF               	movf	indf2,w,c
  3092  00EBCC  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3093  00EBCE  5003               	movf	RtccWriteTime@di,w,c
  3094  00EBD0  B4D8               	btfsc	status,2,c
  3095  00EBD2  D002               	goto	l2229
  3096  00EBD4  9CF2               	bcf	intcon,6,c	;volatile
  3097  00EBD6  D000               	goto	l2229
  3098  00EBD8                     l2229:
  3099  00EBD8  0E00               	movlw	0
  3100  00EBDA  BB3F               	btfsc	63,5,b	;volatile
  3101  00EBDC  0E01               	movlw	1
  3102  00EBDE  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3103  00EBE0  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3104  00EBE2  A4D8               	btfss	status,2,c
  3105  00EBE4  D003               	goto	l2233
  3106  00EBE6  EC2A  F073         	call	_RtccWrOn	;wreg free
  3107  00EBEA  D000               	goto	l2233
  3108  00EBEC                     l2233:
  3109  00EBEC  0E00               	movlw	0
  3110  00EBEE  BF3F               	btfsc	63,7,b	;volatile
  3111  00EBF0  0E01               	movlw	1
  3112  00EBF2  6E05               	movwf	RtccWriteTime@wasOn,c
  3113  00EBF4  5005               	movf	RtccWriteTime@wasOn,w,c
  3114  00EBF6  B4D8               	btfsc	status,2,c
  3115  00EBF8  D007               	goto	l2239
  3116  00EBFA  0E00               	movlw	0
  3117  00EBFC  BE91               	btfsc	3985,7,c	;volatile
  3118  00EBFE  0E01               	movlw	1
  3119  00EC00  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3120  00EC02  010F               	movlb	15	; () banked
  3121  00EC04  9F3F               	bcf	63,7,b	;volatile
  3122  00EC06  D000               	goto	l2239
  3123  00EC08                     l2239:
  3124  00EC08  0EFC               	movlw	252
  3125  00EC0A  010F               	movlb	15	; () banked
  3126  00EC0C  173F               	andwf	63,f,b	;volatile
  3127  00EC0E  010F               	movlb	15	; () banked
  3128  00EC10  813F               	bsf	63,0,b	;volatile
  3129                           
  3130                           ; BSR set to: 15
  3131  00EC12  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3132                           
  3133                           ; BSR set to: 15
  3134  00EC16  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3135                           
  3136                           ; BSR set to: 15
  3137  00EC1A  EE20 F003          	lfsr	2,3
  3138  00EC1E  5001               	movf	RtccWriteTime@pTm,w,c
  3139  00EC20  26D9               	addwf	fsr2l,f,c
  3140  00EC22  5002               	movf	RtccWriteTime@pTm+1,w,c
  3141  00EC24  22DA               	addwfc	fsr2h,f,c
  3142  00EC26  50DF               	movf	indf2,w,c
  3143  00EC28  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3144                           
  3145                           ; BSR set to: 15
  3146  00EC2A  0EFC               	movlw	252
  3147  00EC2C  010F               	movlb	15	; () banked
  3148  00EC2E  173F               	andwf	63,f,b	;volatile
  3149                           
  3150                           ; BSR set to: 15
  3151  00EC30  010F               	movlb	15	; () banked
  3152  00EC32  813F               	bsf	63,0,b	;volatile
  3153                           
  3154                           ; BSR set to: 15
  3155  00EC34  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3156                           
  3157                           ; BSR set to: 15
  3158  00EC38  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3159                           
  3160                           ; BSR set to: 15
  3161  00EC3C  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3162                           
  3163                           ; BSR set to: 15
  3164  00EC40  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3165                           
  3166                           ; BSR set to: 15
  3167  00EC44  5005               	movf	RtccWriteTime@wasOn,w,c
  3168  00EC46  B4D8               	btfsc	status,2,c
  3169  00EC48  D00D               	goto	l2271
  3170                           
  3171                           ; BSR set to: 15
  3172  00EC4A  010F               	movlb	15	; () banked
  3173  00EC4C  8F3F               	bsf	63,7,b	;volatile
  3174                           
  3175                           ; BSR set to: 15
  3176  00EC4E  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3177  00EC50  B4D8               	btfsc	status,2,c
  3178  00EC52  D002               	goto	l2267
  3179                           
  3180                           ; BSR set to: 15
  3181  00EC54  8E91               	bsf	3985,7,c	;volatile
  3182  00EC56  D000               	goto	l2267
  3183  00EC58                     l2267:
  3184                           
  3185                           ; BSR set to: 15
  3186  00EC58  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3187  00EC5A  B4D8               	btfsc	status,2,c
  3188  00EC5C  D009               	goto	l2275
  3189                           
  3190                           ; BSR set to: 15
  3191  00EC5E  EC2A  F073         	call	_RtccWrOn	;wreg free
  3192  00EC62  D006               	goto	l2275
  3193  00EC64                     l2271:
  3194  00EC64  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3195  00EC66  A4D8               	btfss	status,2,c
  3196  00EC68  D003               	goto	l2275
  3197  00EC6A  010F               	movlb	15	; () banked
  3198  00EC6C  9B3F               	bcf	63,5,b	;volatile
  3199                           
  3200                           ; BSR set to: 15
  3201  00EC6E  D000               	goto	l2275
  3202  00EC70                     l2275:
  3203  00EC70  5003               	movf	RtccWriteTime@di,w,c
  3204  00EC72  B4D8               	btfsc	status,2,c
  3205  00EC74  0012               	return	
  3206  00EC76  8CF2               	bsf	intcon,6,c	;volatile
  3207  00EC78  0012               	return	
  3208                           
  3209                           ;	Return value of _RtccWriteTime is never used
  3210  00EC7A  0012               	return		;funcret
  3211  00EC7C                     __end_of_RtccWriteTime:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           intcon	equ	0xFF2
  3220                           postinc0	equ	0xFEE
  3221                           wreg	equ	0xFE8
  3222                           postdec1	equ	0xFE5
  3223                           fsr1l	equ	0xFE1
  3224                           indf2	equ	0xFDF
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _RtccWriteDate *****************
  3230 ;; Defined at:
  3231 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  pDt             2    0[COMRAM] PTR const struct .
  3234 ;;		 -> RtccDate(4), 
  3235 ;;  di              1    2[COMRAM] enum E7121
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  tempHourWDay    2   11[COMRAM] struct .
  3238 ;;  tempDayMonth    2    9[COMRAM] struct .
  3239 ;;  tempYear        2    6[COMRAM] struct .
  3240 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3241 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3242 ;;  wasOn           1    4[COMRAM] enum E7121
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      enum E7337
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3252 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3253 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3255 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3256 ;;Total ram usage:       13 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    1
  3259 ;; This function calls:
  3260 ;;		_RtccWrOn
  3261 ;; This function is called by:
  3262 ;;		_Write_RTC
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text11
  3267  00F236                     __ptext11:
  3268                           	opt stack 0
  3269  00F236                     _RtccWriteDate:
  3270                           	opt stack 28
  3271                           
  3272                           ;incstack = 0
  3273  00F236  0E00               	movlw	0
  3274  00F238  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3275  00F23A  EE20 F002          	lfsr	2,2
  3276  00F23E  5001               	movf	RtccWriteDate@pDt,w,c
  3277  00F240  26D9               	addwf	fsr2l,f,c
  3278  00F242  5002               	movf	RtccWriteDate@pDt+1,w,c
  3279  00F244  22DA               	addwfc	fsr2h,f,c
  3280  00F246  0E13               	movlw	19
  3281  00F248  60DF               	cpfslt	indf2,c
  3282  00F24A  0012               	return	
  3283  00F24C  EE20 F002          	lfsr	2,2
  3284  00F250  5001               	movf	RtccWriteDate@pDt,w,c
  3285  00F252  26D9               	addwf	fsr2l,f,c
  3286  00F254  5002               	movf	RtccWriteDate@pDt+1,w,c
  3287  00F256  22DA               	addwfc	fsr2h,f,c
  3288  00F258  50DF               	movf	indf2,w,c
  3289  00F25A  B4D8               	btfsc	status,2,c
  3290  00F25C  0012               	return	
  3291  00F25E  EE20 F001          	lfsr	2,1
  3292  00F262  5001               	movf	RtccWriteDate@pDt,w,c
  3293  00F264  26D9               	addwf	fsr2l,f,c
  3294  00F266  5002               	movf	RtccWriteDate@pDt+1,w,c
  3295  00F268  22DA               	addwfc	fsr2h,f,c
  3296  00F26A  0E32               	movlw	50
  3297  00F26C  60DF               	cpfslt	indf2,c
  3298  00F26E  0012               	return	
  3299  00F270  EE20 F001          	lfsr	2,1
  3300  00F274  5001               	movf	RtccWriteDate@pDt,w,c
  3301  00F276  26D9               	addwf	fsr2l,f,c
  3302  00F278  5002               	movf	RtccWriteDate@pDt+1,w,c
  3303  00F27A  22DA               	addwfc	fsr2h,f,c
  3304  00F27C  50DF               	movf	indf2,w,c
  3305  00F27E  B4D8               	btfsc	status,2,c
  3306  00F280  0012               	return	
  3307  00F282  EE20 F003          	lfsr	2,3
  3308  00F286  5001               	movf	RtccWriteDate@pDt,w,c
  3309  00F288  26D9               	addwf	fsr2l,f,c
  3310  00F28A  5002               	movf	RtccWriteDate@pDt+1,w,c
  3311  00F28C  22DA               	addwfc	fsr2h,f,c
  3312  00F28E  0E99               	movlw	153
  3313  00F290  64DF               	cpfsgt	indf2,c
  3314  00F292  D002               	goto	l2291
  3315  00F294  0012               	return	
  3316                           
  3317                           ;	Return value of _RtccWriteDate is never used
  3318  00F296  0012               	return	
  3319  00F298                     l2291:
  3320  00F298  EE20 F003          	lfsr	2,3
  3321  00F29C  5001               	movf	RtccWriteDate@pDt,w,c
  3322  00F29E  26D9               	addwf	fsr2l,f,c
  3323  00F2A0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3324  00F2A2  22DA               	addwfc	fsr2h,f,c
  3325  00F2A4  50DF               	movf	indf2,w,c
  3326  00F2A6  6E07               	movwf	RtccWriteDate@tempYear,c
  3327  00F2A8  EE20 F001          	lfsr	2,1
  3328  00F2AC  5001               	movf	RtccWriteDate@pDt,w,c
  3329  00F2AE  26D9               	addwf	fsr2l,f,c
  3330  00F2B0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3331  00F2B2  22DA               	addwfc	fsr2h,f,c
  3332  00F2B4  50DF               	movf	indf2,w,c
  3333  00F2B6  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  3334  00F2B8  EE20 F002          	lfsr	2,2
  3335  00F2BC  5001               	movf	RtccWriteDate@pDt,w,c
  3336  00F2BE  26D9               	addwf	fsr2l,f,c
  3337  00F2C0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3338  00F2C2  22DA               	addwfc	fsr2h,f,c
  3339  00F2C4  50DF               	movf	indf2,w,c
  3340  00F2C6  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  3341  00F2C8  5003               	movf	RtccWriteDate@di,w,c
  3342  00F2CA  B4D8               	btfsc	status,2,c
  3343  00F2CC  D002               	goto	l2297
  3344  00F2CE  9CF2               	bcf	intcon,6,c	;volatile
  3345  00F2D0  D000               	goto	l2297
  3346  00F2D2                     l2297:
  3347  00F2D2  0E00               	movlw	0
  3348  00F2D4  BB3F               	btfsc	63,5,b	;volatile
  3349  00F2D6  0E01               	movlw	1
  3350  00F2D8  6E09               	movwf	RtccWriteDate@wasWrEn,c
  3351  00F2DA  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3352  00F2DC  A4D8               	btfss	status,2,c
  3353  00F2DE  D003               	goto	l2301
  3354  00F2E0  EC2A  F073         	call	_RtccWrOn	;wreg free
  3355  00F2E4  D000               	goto	l2301
  3356  00F2E6                     l2301:
  3357  00F2E6  0E00               	movlw	0
  3358  00F2E8  BF3F               	btfsc	63,7,b	;volatile
  3359  00F2EA  0E01               	movlw	1
  3360  00F2EC  6E05               	movwf	RtccWriteDate@wasOn,c
  3361  00F2EE  5005               	movf	RtccWriteDate@wasOn,w,c
  3362  00F2F0  B4D8               	btfsc	status,2,c
  3363  00F2F2  D007               	goto	l2307
  3364  00F2F4  0E00               	movlw	0
  3365  00F2F6  BE91               	btfsc	3985,7,c	;volatile
  3366  00F2F8  0E01               	movlw	1
  3367  00F2FA  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3368  00F2FC  010F               	movlb	15	; () banked
  3369  00F2FE  9F3F               	bcf	63,7,b	;volatile
  3370  00F300  D000               	goto	l2307
  3371  00F302                     l2307:
  3372  00F302  0EFC               	movlw	252
  3373  00F304  010F               	movlb	15	; () banked
  3374  00F306  173F               	andwf	63,f,b	;volatile
  3375  00F308  010F               	movlb	15	; () banked
  3376  00F30A  813F               	bsf	63,0,b	;volatile
  3377                           
  3378                           ; BSR set to: 15
  3379  00F30C  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  3380                           
  3381                           ; BSR set to: 15
  3382  00F310  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  3383                           
  3384                           ; BSR set to: 15
  3385  00F314  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  3386  00F318  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  3387  00F31C  50DF               	movf	indf2,w,c
  3388  00F31E  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  3389                           
  3390                           ; BSR set to: 15
  3391  00F320  0EFC               	movlw	252
  3392  00F322  010F               	movlb	15	; () banked
  3393  00F324  173F               	andwf	63,f,b	;volatile
  3394                           
  3395                           ; BSR set to: 15
  3396  00F326  0E03               	movlw	3
  3397  00F328  010F               	movlb	15	; () banked
  3398  00F32A  133F               	iorwf	63,f,b	;volatile
  3399                           
  3400                           ; BSR set to: 15
  3401  00F32C  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  3402                           
  3403                           ; BSR set to: 15
  3404  00F330  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  3405                           
  3406                           ; BSR set to: 15
  3407  00F334  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  3408                           
  3409                           ; BSR set to: 15
  3410  00F338  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  3411                           
  3412                           ; BSR set to: 15
  3413  00F33C  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  3414                           
  3415                           ; BSR set to: 15
  3416  00F340  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  3417                           
  3418                           ; BSR set to: 15
  3419  00F344  5005               	movf	RtccWriteDate@wasOn,w,c
  3420  00F346  B4D8               	btfsc	status,2,c
  3421  00F348  D00D               	goto	l2343
  3422                           
  3423                           ; BSR set to: 15
  3424  00F34A  010F               	movlb	15	; () banked
  3425  00F34C  8F3F               	bsf	63,7,b	;volatile
  3426                           
  3427                           ; BSR set to: 15
  3428  00F34E  5006               	movf	RtccWriteDate@wasAlrm,w,c
  3429  00F350  B4D8               	btfsc	status,2,c
  3430  00F352  D002               	goto	l2339
  3431                           
  3432                           ; BSR set to: 15
  3433  00F354  8E91               	bsf	3985,7,c	;volatile
  3434  00F356  D000               	goto	l2339
  3435  00F358                     l2339:
  3436                           
  3437                           ; BSR set to: 15
  3438  00F358  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3439  00F35A  B4D8               	btfsc	status,2,c
  3440  00F35C  D009               	goto	l2347
  3441                           
  3442                           ; BSR set to: 15
  3443  00F35E  EC2A  F073         	call	_RtccWrOn	;wreg free
  3444  00F362  D006               	goto	l2347
  3445  00F364                     l2343:
  3446  00F364  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3447  00F366  A4D8               	btfss	status,2,c
  3448  00F368  D003               	goto	l2347
  3449  00F36A  010F               	movlb	15	; () banked
  3450  00F36C  9B3F               	bcf	63,5,b	;volatile
  3451                           
  3452                           ; BSR set to: 15
  3453  00F36E  D000               	goto	l2347
  3454  00F370                     l2347:
  3455  00F370  5003               	movf	RtccWriteDate@di,w,c
  3456  00F372  B4D8               	btfsc	status,2,c
  3457  00F374  0012               	return	
  3458  00F376  9CF2               	bcf	intcon,6,c	;volatile
  3459  00F378  0012               	return	
  3460                           
  3461                           ;	Return value of _RtccWriteDate is never used
  3462  00F37A  0012               	return		;funcret
  3463  00F37C                     __end_of_RtccWriteDate:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           intcon	equ	0xFF2
  3472                           postinc0	equ	0xFEE
  3473                           wreg	equ	0xFE8
  3474                           postdec1	equ	0xFE5
  3475                           fsr1l	equ	0xFE1
  3476                           indf2	equ	0xFDF
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _RtccWrOn *****************
  3482 ;; Defined at:
  3483 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;		None
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  data            2    0        unsigned int 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;		None               void
  3490 ;; Registers used:
  3491 ;;		wreg, status,2
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3501 ;;Total ram usage:        0 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_Write_RTC
  3507 ;;		_RtccWriteDate
  3508 ;;		_RtccWriteTime
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text12
  3513  00E654                     __ptext12:
  3514                           	opt stack 0
  3515  00E654                     _RtccWrOn:
  3516                           	opt stack 28
  3517                           
  3518                           ;incstack = 0
  3519  00E654  9CF2               	bcf	intcon,6,c	;volatile
  3520  00E656  0E55               	movlw	85
  3521  00E658  6EA7               	movwf	4007,c	;volatile
  3522  00E65A  0EAA               	movlw	170
  3523  00E65C  6EA7               	movwf	4007,c	;volatile
  3524  00E65E  010F               	movlb	15	; () banked
  3525  00E660  8B3F               	bsf	63,5,b	;volatile
  3526                           
  3527                           ; BSR set to: 15
  3528  00E662  8CF2               	bsf	intcon,6,c	;volatile
  3529                           
  3530                           ; BSR set to: 15
  3531  00E664  0012               	return		;funcret
  3532  00E666                     __end_of_RtccWrOn:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           fsr1l	equ	0xFE1
  3545                           indf2	equ	0xFDF
  3546                           fsr2h	equ	0xFDA
  3547                           fsr2l	equ	0xFD9
  3548                           status	equ	0xFD8
  3549                           
  3550 ;; *************** function _Lcd_Out *****************
  3551 ;; Defined at:
  3552 ;;		line 84 in file "../lcd.h"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  y               1    wreg     unsigned char 
  3555 ;;  x               1   74[COMRAM] unsigned char 
  3556 ;;  buffer          3   75[COMRAM] PTR const unsigned char 
  3557 ;;		 -> ROM(65527), Convert_diasem@buffer_dia(20), STR_6(21), STR_5(20), 
  3558 ;;		 -> STR_4(18), STR_3(19), buffer1(20), STR_1(18), 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  y               1   78[COMRAM] unsigned char 
  3561 ;;  data            1   79[COMRAM] unsigned char 
  3562 ;; Return value:  Size  Location     Type
  3563 ;;		None               void
  3564 ;; Registers used:
  3565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3571 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3574 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3575 ;;Total ram usage:        6 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    1
  3578 ;; This function calls:
  3579 ;;		_Lcd_Chr_CP
  3580 ;;		_Lcd_Cmd
  3581 ;; This function is called by:
  3582 ;;		_main
  3583 ;;		_V_Principal
  3584 ;;		_ManejaMovimientos
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text13
  3589  00E9EE                     __ptext13:
  3590                           	opt stack 0
  3591  00E9EE                     _Lcd_Out:
  3592                           	opt stack 28
  3593                           
  3594                           ; BSR set to: 15
  3595                           ;incstack = 0
  3596                           ;Lcd_Out@y stored from wreg
  3597  00E9EE  6E4F               	movwf	Lcd_Out@y,c
  3598                           
  3599                           ;lcd.h: 86: unsigned char data;
  3600                           ;lcd.h: 87: switch (y)
  3601  00E9F0  D00D               	goto	l2465
  3602  00E9F2                     l2455:
  3603  00E9F2  504B               	movf	Lcd_Out@x,w,c
  3604  00E9F4  0F80               	addlw	128
  3605  00E9F6  D008               	goto	L4
  3606  00E9F8                     l2457:
  3607  00E9F8  504B               	movf	Lcd_Out@x,w,c
  3608  00E9FA  0FC0               	addlw	192
  3609  00E9FC  D005               	goto	L4
  3610  00E9FE                     l2459:
  3611  00E9FE  504B               	movf	Lcd_Out@x,w,c
  3612  00EA00  0F94               	addlw	148
  3613  00EA02  D002               	goto	L4
  3614  00EA04                     l2461:
  3615  00EA04  504B               	movf	Lcd_Out@x,w,c
  3616  00EA06  0FD4               	addlw	212
  3617  00EA08                     L4:
  3618  00EA08  6E50               	movwf	Lcd_Out@data,c
  3619                           
  3620                           ;lcd.h: 94: }
  3621                           
  3622                           ;lcd.h: 93: default: break;
  3623  00EA0A  D00E               	goto	l2467
  3624  00EA0C                     l2465:
  3625  00EA0C  504F               	movf	Lcd_Out@y,w,c
  3626                           
  3627                           ; Switch size 1, requested type "space"
  3628                           ; Number of cases is 4, Range of values is 1 to 4
  3629                           ; switch strategies available:
  3630                           ; Name         Instructions Cycles
  3631                           ; simple_byte           13     7 (average)
  3632                           ;	Chosen strategy is simple_byte
  3633  00EA0E  0A01               	xorlw	1	; case 1
  3634  00EA10  B4D8               	btfsc	status,2,c
  3635  00EA12  D7EF               	goto	l2455
  3636  00EA14  0A03               	xorlw	3	; case 2
  3637  00EA16  B4D8               	btfsc	status,2,c
  3638  00EA18  D7EF               	goto	l2457
  3639  00EA1A  0A01               	xorlw	1	; case 3
  3640  00EA1C  B4D8               	btfsc	status,2,c
  3641  00EA1E  D7EF               	goto	l2459
  3642  00EA20  0A07               	xorlw	7	; case 4
  3643  00EA22  B4D8               	btfsc	status,2,c
  3644  00EA24  D7EF               	goto	l2461
  3645  00EA26  D000               	goto	l2467
  3646  00EA28                     l2467:
  3647                           
  3648                           ;lcd.h: 95: Lcd_Cmd(data);
  3649  00EA28  5050               	movf	Lcd_Out@data,w,c
  3650  00EA2A  EC5A  F077         	call	_Lcd_Cmd
  3651                           
  3652                           ;lcd.h: 96: while(*buffer)
  3653  00EA2E  D019               	goto	l2473
  3654  00EA30                     l2469:
  3655                           
  3656                           ;lcd.h: 97: {
  3657                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  3658  00EA30  C04C  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3659  00EA34  C04D  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3660  00EA38  C04E  FFF8         	movff	Lcd_Out@buffer+2,tblptru
  3661  00EA3C  BAF8               	btfsc	tblptru,5,c
  3662  00EA3E  D003               	bra	u1987
  3663  00EA40  0008               	tblrd		*
  3664  00EA42  50F5               	movf	tablat,w,c
  3665  00EA44  D005               	bra	u1980
  3666  00EA46                     u1987:
  3667  00EA46  CFF6 FFE9          	movff	tblptrl,fsr0l
  3668  00EA4A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3669  00EA4E  50EF               	movf	indf0,w,c
  3670  00EA50                     u1980:
  3671  00EA50  ECEA  F077         	call	_Lcd_Chr_CP
  3672                           
  3673                           ;lcd.h: 99: buffer++;
  3674  00EA54  0E01               	movlw	1
  3675  00EA56  264C               	addwf	Lcd_Out@buffer,f,c
  3676  00EA58  0E00               	movlw	0
  3677  00EA5A  224D               	addwfc	Lcd_Out@buffer+1,f,c
  3678  00EA5C  0E00               	movlw	0
  3679  00EA5E  224E               	addwfc	Lcd_Out@buffer+2,f,c
  3680  00EA60  D000               	goto	l2473
  3681  00EA62                     l2473:
  3682  00EA62  C04C  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3683  00EA66  C04D  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3684  00EA6A  C04E  FFF8         	movff	Lcd_Out@buffer+2,tblptru
  3685  00EA6E  BAF8               	btfsc	tblptru,5,c
  3686  00EA70  D003               	bra	u1997
  3687  00EA72  0008               	tblrd		*
  3688  00EA74  50F5               	movf	tablat,w,c
  3689  00EA76  D005               	bra	u1990
  3690  00EA78                     u1997:
  3691  00EA78  CFF6 FFE9          	movff	tblptrl,fsr0l
  3692  00EA7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3693  00EA80  50EF               	movf	indf0,w,c
  3694  00EA82                     u1990:
  3695  00EA82  0900               	iorlw	0
  3696  00EA84  A4D8               	btfss	status,2,c
  3697  00EA86  D7D4               	goto	l2469
  3698                           
  3699                           ;lcd.h: 100: }
  3700                           ;lcd.h: 101: return;
  3701  00EA88  0012               	return		;funcret
  3702  00EA8A                     __end_of_Lcd_Out:
  3703                           	opt stack 0
  3704                           tblptru	equ	0xFF8
  3705                           tblptrh	equ	0xFF7
  3706                           tblptrl	equ	0xFF6
  3707                           tablat	equ	0xFF5
  3708                           prodh	equ	0xFF4
  3709                           prodl	equ	0xFF3
  3710                           intcon	equ	0xFF2
  3711                           indf0	equ	0xFEF
  3712                           postinc0	equ	0xFEE
  3713                           fsr0h	equ	0xFEA
  3714                           fsr0l	equ	0xFE9
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           indf2	equ	0xFDF
  3719                           fsr2h	equ	0xFDA
  3720                           fsr2l	equ	0xFD9
  3721                           status	equ	0xFD8
  3722                           
  3723 ;; *************** function _Lcd_Chr_CP *****************
  3724 ;; Defined at:
  3725 ;;		line 126 in file "../lcd.h"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  data            1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  data            1    2[COMRAM] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;		None               void
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, status,0
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3741 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3742 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3743 ;;Total ram usage:        3 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; This function calls:
  3746 ;;		Nothing
  3747 ;; This function is called by:
  3748 ;;		_Lcd_Out
  3749 ;;		_Lcd_Out2
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text14
  3754  00EFD4                     __ptext14:
  3755                           	opt stack 0
  3756  00EFD4                     _Lcd_Chr_CP:
  3757                           	opt stack 28
  3758                           
  3759                           ;incstack = 0
  3760                           ;Lcd_Chr_CP@data stored from wreg
  3761  00EFD4  6E03               	movwf	Lcd_Chr_CP@data,c
  3762                           
  3763                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  3764  00EFD6  988A               	bcf	3978,4,c	;volatile
  3765  00EFD8  8A8A               	bsf	3978,5,c	;volatile
  3766                           
  3767                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  3768  00EFDA  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  3769  00EFDC  AE03               	btfss	Lcd_Chr_CP@data,7,c
  3770  00EFDE  D001               	bra	u1635
  3771  00EFE0  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  3772  00EFE2                     u1635:
  3773  00EFE2  0E01               	movlw	1
  3774  00EFE4  1601               	andwf	??_Lcd_Chr_CP,f,c
  3775  00EFE6  508A               	movf	3978,w,c	;volatile
  3776  00EFE8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3777  00EFEA  0BFE               	andlw	-2
  3778  00EFEC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3779  00EFEE  6E8A               	movwf	3978,c	;volatile
  3780  00EFF0  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3781  00EFF4  0E06               	movlw	6
  3782  00EFF6  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3783  00EFF8                     u1645:
  3784  00EFF8  90D8               	bcf	status,0,c
  3785  00EFFA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3786  00EFFC  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3787  00EFFE  D7FC               	goto	u1645
  3788  00F000  0E01               	movlw	1
  3789  00F002  1601               	andwf	??_Lcd_Chr_CP,f,c
  3790  00F004  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3791  00F006  508A               	movf	3978,w,c	;volatile
  3792  00F008  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3793  00F00A  0BFD               	andlw	-3
  3794  00F00C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3795  00F00E  6E8A               	movwf	3978,c	;volatile
  3796                           
  3797                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  3798  00F010  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3799  00F014  0E05               	movlw	5
  3800  00F016  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3801  00F018                     u1655:
  3802  00F018  90D8               	bcf	status,0,c
  3803  00F01A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3804  00F01C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3805  00F01E  D7FC               	goto	u1655
  3806  00F020  0E01               	movlw	1
  3807  00F022  1601               	andwf	??_Lcd_Chr_CP,f,c
  3808  00F024  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3809  00F026  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3810  00F028  508A               	movf	3978,w,c	;volatile
  3811  00F02A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3812  00F02C  0BFB               	andlw	-5
  3813  00F02E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3814  00F030  6E8A               	movwf	3978,c	;volatile
  3815  00F032  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3816  00F036  3A01               	swapf	??_Lcd_Chr_CP,f,c
  3817  00F038  0E0F               	movlw	15
  3818  00F03A  1601               	andwf	??_Lcd_Chr_CP,f,c
  3819  00F03C  0E01               	movlw	1
  3820  00F03E  1601               	andwf	??_Lcd_Chr_CP,f,c
  3821  00F040  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3822  00F042  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3823  00F044  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3824  00F046  508A               	movf	3978,w,c	;volatile
  3825  00F048  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3826  00F04A  0BF7               	andlw	-9
  3827  00F04C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3828  00F04E  6E8A               	movwf	3978,c	;volatile
  3829                           
  3830                           ;lcd.h: 130: _delay(10);
  3831  00F050  0E03               	movlw	3
  3832  00F052                     u2487:
  3833  00F052  2EE8               	decfsz	wreg,f,c
  3834  00F054  D7FE               	goto	u2487
  3835  00F056  F000               	nop	
  3836                           
  3837                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3838  00F058  888A               	bsf	3978,4,c	;volatile
  3839  00F05A  0E03               	movlw	3
  3840  00F05C                     u2497:
  3841  00F05C  2EE8               	decfsz	wreg,f,c
  3842  00F05E  D7FE               	goto	u2497
  3843  00F060  F000               	nop	
  3844  00F062  988A               	bcf	3978,4,c	;volatile
  3845                           
  3846                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  3847  00F064  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3848  00F068  90D8               	bcf	status,0,c
  3849  00F06A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3850  00F06C  90D8               	bcf	status,0,c
  3851  00F06E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3852  00F070  90D8               	bcf	status,0,c
  3853  00F072  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3854  00F074  0E01               	movlw	1
  3855  00F076  1601               	andwf	??_Lcd_Chr_CP,f,c
  3856  00F078  508A               	movf	3978,w,c	;volatile
  3857  00F07A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3858  00F07C  0BFE               	andlw	-2
  3859  00F07E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3860  00F080  6E8A               	movwf	3978,c	;volatile
  3861  00F082  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3862  00F086  90D8               	bcf	status,0,c
  3863  00F088  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3864  00F08A  90D8               	bcf	status,0,c
  3865  00F08C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3866  00F08E  0E01               	movlw	1
  3867  00F090  1601               	andwf	??_Lcd_Chr_CP,f,c
  3868  00F092  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3869  00F094  508A               	movf	3978,w,c	;volatile
  3870  00F096  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3871  00F098  0BFD               	andlw	-3
  3872  00F09A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3873  00F09C  6E8A               	movwf	3978,c	;volatile
  3874                           
  3875                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  3876  00F09E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3877  00F0A2  90D8               	bcf	status,0,c
  3878  00F0A4  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3879  00F0A6  0E01               	movlw	1
  3880  00F0A8  1601               	andwf	??_Lcd_Chr_CP,f,c
  3881  00F0AA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3882  00F0AC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3883  00F0AE  508A               	movf	3978,w,c	;volatile
  3884  00F0B0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3885  00F0B2  0BFB               	andlw	-5
  3886  00F0B4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3887  00F0B6  6E8A               	movwf	3978,c	;volatile
  3888  00F0B8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3889  00F0BC  0E01               	movlw	1
  3890  00F0BE  1601               	andwf	??_Lcd_Chr_CP,f,c
  3891  00F0C0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3892  00F0C2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3893  00F0C4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3894  00F0C6  508A               	movf	3978,w,c	;volatile
  3895  00F0C8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3896  00F0CA  0BF7               	andlw	-9
  3897  00F0CC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3898  00F0CE  6E8A               	movwf	3978,c	;volatile
  3899                           
  3900                           ;lcd.h: 134: _delay(10);
  3901  00F0D0  0E03               	movlw	3
  3902  00F0D2                     u2507:
  3903  00F0D2  2EE8               	decfsz	wreg,f,c
  3904  00F0D4  D7FE               	goto	u2507
  3905  00F0D6  F000               	nop	
  3906                           
  3907                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3908  00F0D8  888A               	bsf	3978,4,c	;volatile
  3909  00F0DA  0E03               	movlw	3
  3910  00F0DC                     u2517:
  3911  00F0DC  2EE8               	decfsz	wreg,f,c
  3912  00F0DE  D7FE               	goto	u2517
  3913  00F0E0  F000               	nop	
  3914  00F0E2  988A               	bcf	3978,4,c	;volatile
  3915                           
  3916                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  3917  00F0E4  0E03               	movlw	3
  3918  00F0E6                     u2527:
  3919  00F0E6  2EE8               	decfsz	wreg,f,c
  3920  00F0E8  D7FE               	goto	u2527
  3921  00F0EA  F000               	nop	
  3922  00F0EC  0E0F               	movlw	15
  3923  00F0EE  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  3924  00F0F0  0E48               	movlw	72
  3925  00F0F2                     u2537:
  3926  00F0F2  2EE8               	decfsz	wreg,f,c
  3927  00F0F4  D7FE               	goto	u2537
  3928  00F0F6  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  3929  00F0F8  D7FC               	goto	u2537
  3930  00F0FA  0012               	return		;funcret
  3931  00F0FC                     __end_of_Lcd_Chr_CP:
  3932                           	opt stack 0
  3933                           tblptru	equ	0xFF8
  3934                           tblptrh	equ	0xFF7
  3935                           tblptrl	equ	0xFF6
  3936                           tablat	equ	0xFF5
  3937                           prodh	equ	0xFF4
  3938                           prodl	equ	0xFF3
  3939                           intcon	equ	0xFF2
  3940                           indf0	equ	0xFEF
  3941                           postinc0	equ	0xFEE
  3942                           fsr0h	equ	0xFEA
  3943                           fsr0l	equ	0xFE9
  3944                           wreg	equ	0xFE8
  3945                           postdec1	equ	0xFE5
  3946                           fsr1l	equ	0xFE1
  3947                           indf2	equ	0xFDF
  3948                           fsr2h	equ	0xFDA
  3949                           fsr2l	equ	0xFD9
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _Convert_diasem *****************
  3953 ;; Defined at:
  3954 ;;		line 340 in file "../main.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  dia             2   50[COMRAM] int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  buffer_dia     20   54[COMRAM] unsigned char [20]
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  2   50[COMRAM] PTR unsigned char 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3968 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3969 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3970 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3971 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3972 ;;Total ram usage:       24 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    3
  3975 ;; This function calls:
  3976 ;;		_sprintf
  3977 ;; This function is called by:
  3978 ;;		_V_Principal
  3979 ;;		_ManejaMovimientos
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text15
  3984  00ED96                     __ptext15:
  3985                           	opt stack 0
  3986  00ED96                     _Convert_diasem:
  3987                           	opt stack 26
  3988                           
  3989                           ;main.c: 342: unsigned char buffer_dia[20];
  3990                           ;main.c: 344: switch(dia){
  3991                           
  3992                           ;incstack = 0
  3993  00ED96  D069               	goto	l2593
  3994  00ED98                     l2577:
  3995                           
  3996                           ;main.c: 346: sprintf(buffer_dia,"%s", "Domingo             ");
  3997  00ED98  0E37               	movlw	low Convert_diasem@buffer_dia
  3998  00ED9A  6E23               	movwf	sprintf@wh,c
  3999  00ED9C  0E00               	movlw	high Convert_diasem@buffer_dia
  4000  00ED9E  6E24               	movwf	sprintf@wh+1,c
  4001  00EDA0  0EF4               	movlw	low STR_9
  4002  00EDA2  6E25               	movwf	sprintf@f,c
  4003  00EDA4  0EFF               	movlw	high STR_9
  4004  00EDA6  6E26               	movwf	sprintf@f+1,c
  4005  00EDA8  0E40               	movlw	low STR_10
  4006  00EDAA  6E27               	movwf	?_sprintf+4,c
  4007  00EDAC  0EFF               	movlw	high STR_10
  4008  00EDAE  6E28               	movwf	?_sprintf+5,c
  4009  00EDB0  ECD9  F073         	call	_sprintf	;wreg free
  4010                           
  4011                           ;main.c: 347: break;
  4012  00EDB4  D079               	goto	l2595
  4013  00EDB6                     l2579:
  4014                           
  4015                           ;main.c: 350: sprintf(buffer_dia,"%s", "Lunes               ");
  4016  00EDB6  0E37               	movlw	low Convert_diasem@buffer_dia
  4017  00EDB8  6E23               	movwf	sprintf@wh,c
  4018  00EDBA  0E00               	movlw	high Convert_diasem@buffer_dia
  4019  00EDBC  6E24               	movwf	sprintf@wh+1,c
  4020  00EDBE  0EF4               	movlw	low STR_9
  4021  00EDC0  6E25               	movwf	sprintf@f,c
  4022  00EDC2  0EFF               	movlw	high STR_9
  4023  00EDC4  6E26               	movwf	sprintf@f+1,c
  4024  00EDC6  0EEC               	movlw	low STR_12
  4025  00EDC8  6E27               	movwf	?_sprintf+4,c
  4026  00EDCA  0EFE               	movlw	high STR_12
  4027  00EDCC  6E28               	movwf	?_sprintf+5,c
  4028  00EDCE  ECD9  F073         	call	_sprintf	;wreg free
  4029                           
  4030                           ;main.c: 351: break;
  4031  00EDD2  D06A               	goto	l2595
  4032  00EDD4                     l2581:
  4033                           
  4034                           ;main.c: 354: sprintf(buffer_dia,"%s", "Martes              ");
  4035  00EDD4  0E37               	movlw	low Convert_diasem@buffer_dia
  4036  00EDD6  6E23               	movwf	sprintf@wh,c
  4037  00EDD8  0E00               	movlw	high Convert_diasem@buffer_dia
  4038  00EDDA  6E24               	movwf	sprintf@wh+1,c
  4039  00EDDC  0EF4               	movlw	low STR_9
  4040  00EDDE  6E25               	movwf	sprintf@f,c
  4041  00EDE0  0EFF               	movlw	high STR_9
  4042  00EDE2  6E26               	movwf	sprintf@f+1,c
  4043  00EDE4  0E16               	movlw	low STR_14
  4044  00EDE6  6E27               	movwf	?_sprintf+4,c
  4045  00EDE8  0EFF               	movlw	high STR_14
  4046  00EDEA  6E28               	movwf	?_sprintf+5,c
  4047  00EDEC  ECD9  F073         	call	_sprintf	;wreg free
  4048                           
  4049                           ;main.c: 355: break;
  4050  00EDF0  D05B               	goto	l2595
  4051  00EDF2                     l2583:
  4052                           
  4053                           ;main.c: 358: sprintf(buffer_dia,"%s", "Miercoles           ");
  4054  00EDF2  0E37               	movlw	low Convert_diasem@buffer_dia
  4055  00EDF4  6E23               	movwf	sprintf@wh,c
  4056  00EDF6  0E00               	movlw	high Convert_diasem@buffer_dia
  4057  00EDF8  6E24               	movwf	sprintf@wh+1,c
  4058  00EDFA  0EF4               	movlw	low STR_9
  4059  00EDFC  6E25               	movwf	sprintf@f,c
  4060  00EDFE  0EFF               	movlw	high STR_9
  4061  00EE00  6E26               	movwf	sprintf@f+1,c
  4062  00EE02  0E6A               	movlw	low STR_16
  4063  00EE04  6E27               	movwf	?_sprintf+4,c
  4064  00EE06  0EFF               	movlw	high STR_16
  4065  00EE08  6E28               	movwf	?_sprintf+5,c
  4066  00EE0A  ECD9  F073         	call	_sprintf	;wreg free
  4067                           
  4068                           ;main.c: 359: break;
  4069  00EE0E  D04C               	goto	l2595
  4070  00EE10                     l2585:
  4071                           
  4072                           ;main.c: 362: sprintf(buffer_dia,"%s", "Jueves              ");
  4073  00EE10  0E37               	movlw	low Convert_diasem@buffer_dia
  4074  00EE12  6E23               	movwf	sprintf@wh,c
  4075  00EE14  0E00               	movlw	high Convert_diasem@buffer_dia
  4076  00EE16  6E24               	movwf	sprintf@wh+1,c
  4077  00EE18  0EF4               	movlw	low STR_9
  4078  00EE1A  6E25               	movwf	sprintf@f,c
  4079  00EE1C  0EFF               	movlw	high STR_9
  4080  00EE1E  6E26               	movwf	sprintf@f+1,c
  4081  00EE20  0E2B               	movlw	low STR_18
  4082  00EE22  6E27               	movwf	?_sprintf+4,c
  4083  00EE24  0EFF               	movlw	high STR_18
  4084  00EE26  6E28               	movwf	?_sprintf+5,c
  4085  00EE28  ECD9  F073         	call	_sprintf	;wreg free
  4086                           
  4087                           ;main.c: 363: break;
  4088  00EE2C  D03D               	goto	l2595
  4089  00EE2E                     l2587:
  4090                           
  4091                           ;main.c: 366: sprintf(buffer_dia,"%s", "Viernes             ");
  4092  00EE2E  0E37               	movlw	low Convert_diasem@buffer_dia
  4093  00EE30  6E23               	movwf	sprintf@wh,c
  4094  00EE32  0E00               	movlw	high Convert_diasem@buffer_dia
  4095  00EE34  6E24               	movwf	sprintf@wh+1,c
  4096  00EE36  0EF4               	movlw	low STR_9
  4097  00EE38  6E25               	movwf	sprintf@f,c
  4098  00EE3A  0EFF               	movlw	high STR_9
  4099  00EE3C  6E26               	movwf	sprintf@f+1,c
  4100  00EE3E  0E55               	movlw	low STR_20
  4101  00EE40  6E27               	movwf	?_sprintf+4,c
  4102  00EE42  0EFF               	movlw	high STR_20
  4103  00EE44  6E28               	movwf	?_sprintf+5,c
  4104  00EE46  ECD9  F073         	call	_sprintf	;wreg free
  4105                           
  4106                           ;main.c: 367: break;
  4107  00EE4A  D02E               	goto	l2595
  4108  00EE4C                     l2589:
  4109                           
  4110                           ;main.c: 370: sprintf(buffer_dia,"%s", "Sabado              ");
  4111  00EE4C  0E37               	movlw	low Convert_diasem@buffer_dia
  4112  00EE4E  6E23               	movwf	sprintf@wh,c
  4113  00EE50  0E00               	movlw	high Convert_diasem@buffer_dia
  4114  00EE52  6E24               	movwf	sprintf@wh+1,c
  4115  00EE54  0EF4               	movlw	low STR_9
  4116  00EE56  6E25               	movwf	sprintf@f,c
  4117  00EE58  0EFF               	movlw	high STR_9
  4118  00EE5A  6E26               	movwf	sprintf@f+1,c
  4119  00EE5C  0E01               	movlw	low STR_22
  4120  00EE5E  6E27               	movwf	?_sprintf+4,c
  4121  00EE60  0EFF               	movlw	high STR_22
  4122  00EE62  6E28               	movwf	?_sprintf+5,c
  4123  00EE64  ECD9  F073         	call	_sprintf	;wreg free
  4124                           
  4125                           ;main.c: 372: }
  4126                           ;main.c: 373: }
  4127                           
  4128                           ;main.c: 371: break;
  4129  00EE68  D01F               	goto	l2595
  4130  00EE6A                     l2593:
  4131  00EE6A  C033  F035         	movff	Convert_diasem@dia,??_Convert_diasem
  4132  00EE6E  C034  F036         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  4133                           
  4134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4135                           ; Switch size 1, requested type "space"
  4136                           ; Number of cases is 1, Range of values is 0 to 0
  4137                           ; switch strategies available:
  4138                           ; Name         Instructions Cycles
  4139                           ; simple_byte            4     3 (average)
  4140                           ;	Chosen strategy is simple_byte
  4141  00EE72  5036               	movf	??_Convert_diasem+1,w,c
  4142  00EE74  0A00               	xorlw	0	; case 0
  4143  00EE76  A4D8               	btfss	status,2,c
  4144  00EE78  D017               	goto	l2595
  4145                           
  4146                           ; Switch size 1, requested type "space"
  4147                           ; Number of cases is 7, Range of values is 0 to 6
  4148                           ; switch strategies available:
  4149                           ; Name         Instructions Cycles
  4150                           ; simple_byte           22    12 (average)
  4151                           ;	Chosen strategy is simple_byte
  4152  00EE7A  5035               	movf	??_Convert_diasem,w,c
  4153  00EE7C  0A00               	xorlw	0	; case 0
  4154  00EE7E  B4D8               	btfsc	status,2,c
  4155  00EE80  D78B               	goto	l2577
  4156  00EE82  0A01               	xorlw	1	; case 1
  4157  00EE84  B4D8               	btfsc	status,2,c
  4158  00EE86  D797               	goto	l2579
  4159  00EE88  0A03               	xorlw	3	; case 2
  4160  00EE8A  B4D8               	btfsc	status,2,c
  4161  00EE8C  D7A3               	goto	l2581
  4162  00EE8E  0A01               	xorlw	1	; case 3
  4163  00EE90  B4D8               	btfsc	status,2,c
  4164  00EE92  D7AF               	goto	l2583
  4165  00EE94  0A07               	xorlw	7	; case 4
  4166  00EE96  B4D8               	btfsc	status,2,c
  4167  00EE98  D7BB               	goto	l2585
  4168  00EE9A  0A01               	xorlw	1	; case 5
  4169  00EE9C  B4D8               	btfsc	status,2,c
  4170  00EE9E  D7C7               	goto	l2587
  4171  00EEA0  0A03               	xorlw	3	; case 6
  4172  00EEA2  B4D8               	btfsc	status,2,c
  4173  00EEA4  D7D3               	goto	l2589
  4174  00EEA6  D000               	goto	l2595
  4175  00EEA8                     l2595:
  4176                           
  4177                           ;main.c: 374: return buffer_dia;
  4178  00EEA8  0E37               	movlw	low Convert_diasem@buffer_dia
  4179  00EEAA  6E33               	movwf	?_Convert_diasem,c
  4180  00EEAC  0E00               	movlw	high Convert_diasem@buffer_dia
  4181  00EEAE  6E34               	movwf	?_Convert_diasem+1,c
  4182  00EEB0  0012               	return	
  4183  00EEB2  0012               	return		;funcret
  4184  00EEB4                     __end_of_Convert_diasem:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           prodh	equ	0xFF4
  4191                           prodl	equ	0xFF3
  4192                           intcon	equ	0xFF2
  4193                           indf0	equ	0xFEF
  4194                           postinc0	equ	0xFEE
  4195                           fsr0h	equ	0xFEA
  4196                           fsr0l	equ	0xFE9
  4197                           wreg	equ	0xFE8
  4198                           postdec1	equ	0xFE5
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           fsr2h	equ	0xFDA
  4202                           fsr2l	equ	0xFD9
  4203                           status	equ	0xFD8
  4204                           
  4205 ;; *************** function _sprintf *****************
  4206 ;; Defined at:
  4207 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sprintf.c"
  4208 ;; Parameters:    Size  Location     Type
  4209 ;;  wh              2   34[COMRAM] PTR unsigned char 
  4210 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4211 ;;  f               2   36[COMRAM] PTR const unsigned char 
  4212 ;;		 -> STR_21(3), STR_19(3), STR_17(3), STR_15(3), 
  4213 ;;		 -> STR_13(3), STR_11(3), STR_9(3), STR_8(15), 
  4214 ;;		 -> STR_7(15), STR_2(5), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  pb              4   46[COMRAM] struct __prbuf
  4217 ;;  ap              2   44[COMRAM] PTR void [1]
  4218 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  2   34[COMRAM] int 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4228 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4231 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4232 ;;Total ram usage:       16 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    2
  4235 ;; This function calls:
  4236 ;;		__doprnt
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;;		_V_Principal
  4240 ;;		_Convert_diasem
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text16
  4245  00E7B2                     __ptext16:
  4246                           	opt stack 0
  4247  00E7B2                     _sprintf:
  4248                           	opt stack 28
  4249                           
  4250                           ;incstack = 0
  4251  00E7B2  C023  F02F         	movff	sprintf@wh,sprintf@pb
  4252  00E7B6  C024  F030         	movff	sprintf@wh+1,sprintf@pb+1
  4253  00E7BA  0E00               	movlw	0
  4254  00E7BC  6E31               	movwf	sprintf@pb+2,c
  4255  00E7BE  0E00               	movlw	0
  4256  00E7C0  6E32               	movwf	sprintf@pb+3,c
  4257  00E7C2  0E27               	movlw	low (?_sprintf+4)
  4258  00E7C4  6E2D               	movwf	sprintf@ap,c
  4259  00E7C6  0E00               	movlw	high (?_sprintf+4)
  4260  00E7C8  6E2E               	movwf	sprintf@ap+1,c
  4261  00E7CA  0E2F               	movlw	low sprintf@pb
  4262  00E7CC  6E0D               	movwf	__doprnt@pb,c
  4263  00E7CE  0E00               	movlw	high sprintf@pb
  4264  00E7D0  6E0E               	movwf	__doprnt@pb+1,c
  4265  00E7D2  C025  F00F         	movff	sprintf@f,__doprnt@f
  4266  00E7D6  C026  F010         	movff	sprintf@f+1,__doprnt@f+1
  4267  00E7DA  500F               	movf	__doprnt@f,w,c
  4268  00E7DC  1010               	iorwf	__doprnt@f+1,w,c
  4269  00E7DE  A4D8               	btfss	status,2,c
  4270  00E7E0  0E00               	movlw	low (__mediumconst shr (0+16))
  4271  00E7E2  6E11               	movwf	__doprnt@f+2,c
  4272  00E7E4  0E2D               	movlw	low sprintf@ap
  4273  00E7E6  6E12               	movwf	__doprnt@ap,c
  4274  00E7E8  0E00               	movlw	high sprintf@ap
  4275  00E7EA  6E13               	movwf	__doprnt@ap+1,c
  4276  00E7EC  EC54  F07C         	call	__doprnt	;wreg free
  4277  00E7F0  C02F  FFD9         	movff	sprintf@pb,fsr2l
  4278  00E7F4  C030  FFDA         	movff	sprintf@pb+1,fsr2h
  4279  00E7F8  0E00               	movlw	0
  4280  00E7FA  6EDF               	movwf	indf2,c
  4281  00E7FC  0012               	return	
  4282                           
  4283                           ;	Return value of _sprintf is never used
  4284  00E7FE  0012               	return		;funcret
  4285  00E800                     __end_of_sprintf:
  4286                           	opt stack 0
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           indf0	equ	0xFEF
  4295                           postinc0	equ	0xFEE
  4296                           fsr0h	equ	0xFEA
  4297                           fsr0l	equ	0xFE9
  4298                           wreg	equ	0xFE8
  4299                           postdec1	equ	0xFE5
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function __doprnt *****************
  4307 ;; Defined at:
  4308 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  4311 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4312 ;;  f               3   14[COMRAM] PTR const unsigned char 
  4313 ;;		 -> ROM(65527), STR_21(3), STR_19(3), STR_17(3), 
  4314 ;;		 -> STR_15(3), STR_13(3), STR_11(3), STR_9(3), 
  4315 ;;		 -> STR_8(15), STR_7(15), STR_2(5), 
  4316 ;;  ap              2   17[COMRAM] PTR PTR void 
  4317 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  tmpval          4    0        struct .
  4320 ;;  width           2   31[COMRAM] int 
  4321 ;;  cp              2   29[COMRAM] PTR const unsigned char 
  4322 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_23(7), 
  4323 ;;		 -> _doprnt@c(1), STR_22(21), STR_20(21), STR_18(21), 
  4324 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  4325 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4326 ;;  len             2   27[COMRAM] unsigned int 
  4327 ;;  val             2   24[COMRAM] unsigned int 
  4328 ;;  c               1   33[COMRAM] char 
  4329 ;;  prec            1   26[COMRAM] char 
  4330 ;;  flag            1   23[COMRAM] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  2   12[COMRAM] int 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4340 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4341 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4342 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4343 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4344 ;;Total ram usage:       22 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    1
  4347 ;; This function calls:
  4348 ;;		Absolute function
  4349 ;;		___lwdiv
  4350 ;;		___lwmod
  4351 ;;		___wmul
  4352 ;;		_isdigit
  4353 ;;		_putch
  4354 ;; This function is called by:
  4355 ;;		_printf
  4356 ;;		_sprintf
  4357 ;; This function uses a non-reentrant model
  4358 ;;
  4359                           
  4360                           	psect	text17
  4361  00F8A8                     __ptext17:
  4362                           	opt stack 0
  4363  00F8A8                     __doprnt:
  4364                           	opt stack 28
  4365                           
  4366                           ;doprnt.c: 499: signed char c;
  4367                           ;doprnt.c: 501: int width;
  4368                           ;doprnt.c: 506: signed char prec;
  4369                           ;doprnt.c: 508: unsigned char flag;
  4370                           ;doprnt.c: 523: union {
  4371                           ;doprnt.c: 524: unsigned long vd;
  4372                           ;doprnt.c: 525: double integ;
  4373                           ;doprnt.c: 526: } tmpval;
  4374                           ;doprnt.c: 528: unsigned int val;
  4375                           ;doprnt.c: 529: unsigned len;
  4376                           ;doprnt.c: 530: const char * cp;
  4377                           ;doprnt.c: 536: while(c = *f++) {
  4378                           
  4379                           ;incstack = 0
  4380  00F8A8  D2F3               	goto	l2155
  4381  00F8AA                     l2011:
  4382                           
  4383                           ;doprnt.c: 538: if(c != '%')
  4384  00F8AA  0E25               	movlw	37
  4385  00F8AC  1822               	xorwf	__doprnt@c,w,c
  4386  00F8AE  B4D8               	btfsc	status,2,c
  4387  00F8B0  D036               	goto	l2021
  4388                           
  4389                           ;doprnt.c: 540: {
  4390                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4391  00F8B2  EE20 F002          	lfsr	2,2
  4392  00F8B6  500D               	movf	__doprnt@pb,w,c
  4393  00F8B8  26D9               	addwf	fsr2l,f,c
  4394  00F8BA  500E               	movf	__doprnt@pb+1,w,c
  4395  00F8BC  22DA               	addwfc	fsr2h,f,c
  4396  00F8BE  50DE               	movf	postinc2,w,c
  4397  00F8C0  10DE               	iorwf	postinc2,w,c
  4398  00F8C2  B4D8               	btfsc	status,2,c
  4399  00F8C4  D016               	goto	l2017
  4400  00F8C6  EE20 F002          	lfsr	2,2
  4401  00F8CA  500D               	movf	__doprnt@pb,w,c
  4402  00F8CC  26D9               	addwf	fsr2l,f,c
  4403  00F8CE  500E               	movf	__doprnt@pb+1,w,c
  4404  00F8D0  22DA               	addwfc	fsr2h,f,c
  4405  00F8D2  CFDE F014          	movff	postinc2,??__doprnt
  4406  00F8D6  CFDD F015          	movff	postdec2,??__doprnt+1
  4407  00F8DA  D801               	call	u1288
  4408  00F8DC  D2D9               	goto	l2155
  4409  00F8DE                     u1288:
  4410  00F8DE  0005               	push	
  4411  00F8E0  6EFA               	movwf	pclath,c
  4412  00F8E2  5014               	movf	??__doprnt,w,c
  4413  00F8E4  6EFD               	movwf	tosl,c
  4414  00F8E6  5015               	movf	??__doprnt+1,w,c
  4415  00F8E8  6EFE               	movwf	tosh,c
  4416  00F8EA  6AFF               	clrf	tosu,c
  4417  00F8EC  50FA               	movf	pclath,w,c
  4418  00F8EE  5022               	movf	__doprnt@c,w,c
  4419  00F8F0  0012               	return		;indir
  4420  00F8F2                     l2017:
  4421  00F8F2  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4422  00F8F6  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4423  00F8FA  CFDE F014          	movff	postinc2,??__doprnt
  4424  00F8FE  CFDD F015          	movff	postdec2,??__doprnt+1
  4425  00F902  C014  FFD9         	movff	??__doprnt,fsr2l
  4426  00F906  C015  FFDA         	movff	??__doprnt+1,fsr2h
  4427  00F90A  C022  FFDF         	movff	__doprnt@c,indf2
  4428  00F90E  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4429  00F912  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4430  00F916  2ADE               	incf	postinc2,f,c
  4431  00F918  0E00               	movlw	0
  4432  00F91A  22DD               	addwfc	postdec2,f,c
  4433                           
  4434                           ;doprnt.c: 542: continue;
  4435  00F91C  D2B9               	goto	l2155
  4436  00F91E                     l2021:
  4437                           
  4438                           ;doprnt.c: 543: }
  4439                           ;doprnt.c: 546: width = 0;
  4440  00F91E  0E00               	movlw	0
  4441  00F920  6E21               	movwf	__doprnt@width+1,c
  4442  00F922  0E00               	movlw	0
  4443  00F924  6E20               	movwf	__doprnt@width,c
  4444                           
  4445                           ;doprnt.c: 548: flag = 0;
  4446  00F926  0E00               	movlw	0
  4447  00F928  6E18               	movwf	__doprnt@flag,c
  4448                           
  4449                           ;doprnt.c: 551: switch(*f) {
  4450                           
  4451                           ;doprnt.c: 550: for(;;) {
  4452  00F92A  D009               	goto	l2029
  4453  00F92C                     l2023:
  4454                           
  4455                           ;doprnt.c: 580: flag |= 0x04;
  4456  00F92C  8418               	bsf	__doprnt@flag,2,c
  4457                           
  4458                           ;doprnt.c: 581: f++;
  4459  00F92E  0E01               	movlw	1
  4460  00F930  260F               	addwf	__doprnt@f,f,c
  4461  00F932  0E00               	movlw	0
  4462  00F934  2210               	addwfc	__doprnt@f+1,f,c
  4463  00F936  0E00               	movlw	0
  4464  00F938  2211               	addwfc	__doprnt@f+2,f,c
  4465                           
  4466                           ;doprnt.c: 582: continue;
  4467  00F93A  D001               	goto	l2029
  4468                           
  4469                           ;doprnt.c: 584: }
  4470  00F93C  D00D               	goto	l2031
  4471  00F93E                     l2029:
  4472  00F93E  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4473  00F942  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4474  00F946  C011  FFF8         	movff	__doprnt@f+2,tblptru
  4475  00F94A  0008               	tblrd		*
  4476  00F94C  50F5               	movf	tablat,w,c
  4477                           
  4478                           ; Switch size 1, requested type "space"
  4479                           ; Number of cases is 1, Range of values is 48 to 48
  4480                           ; switch strategies available:
  4481                           ; Name         Instructions Cycles
  4482                           ; simple_byte            4     3 (average)
  4483                           ;	Chosen strategy is simple_byte
  4484  00F94E  0A30               	xorlw	48	; case 48
  4485  00F950  B4D8               	btfsc	status,2,c
  4486  00F952  D7EC               	goto	l2023
  4487                           
  4488                           ;doprnt.c: 585: break;
  4489  00F954  D001               	goto	l2031
  4490                           
  4491                           ;doprnt.c: 586: }
  4492  00F956  D7F3               	goto	l2029
  4493  00F958                     l2031:
  4494                           
  4495                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4496  00F958  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4497  00F95C  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4498  00F960  C011  FFF8         	movff	__doprnt@f+2,tblptru
  4499  00F964  0008               	tblrd		*
  4500  00F966  50F5               	movf	tablat,w,c
  4501  00F968  EC52  F073         	call	_isdigit
  4502  00F96C  A0D8               	btfss	status,0,c
  4503  00F96E  D13D               	goto	l2093
  4504                           
  4505                           ;doprnt.c: 598: width = 0;
  4506  00F970  0E00               	movlw	0
  4507  00F972  6E21               	movwf	__doprnt@width+1,c
  4508  00F974  0E00               	movlw	0
  4509  00F976  6E20               	movwf	__doprnt@width,c
  4510  00F978  D000               	goto	l2035
  4511  00F97A                     l2035:
  4512                           
  4513                           ;doprnt.c: 600: width *= 10;
  4514  00F97A  C020  F001         	movff	__doprnt@width,___wmul@multiplier
  4515  00F97E  C021  F002         	movff	__doprnt@width+1,___wmul@multiplier+1
  4516  00F982  0E00               	movlw	0
  4517  00F984  6E04               	movwf	___wmul@multiplicand+1,c
  4518  00F986  0E0A               	movlw	10
  4519  00F988  6E03               	movwf	___wmul@multiplicand,c
  4520  00F98A  EC63  F073         	call	___wmul	;wreg free
  4521  00F98E  C001  F020         	movff	?___wmul,__doprnt@width
  4522  00F992  C002  F021         	movff	?___wmul+1,__doprnt@width+1
  4523                           
  4524                           ;doprnt.c: 601: width += *f++ - '0';
  4525  00F996  0ED0               	movlw	208
  4526  00F998  6E14               	movwf	??__doprnt& (0+255),c
  4527  00F99A  0EFF               	movlw	255
  4528  00F99C  6E15               	movwf	(??__doprnt+1)& (0+255),c
  4529  00F99E  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4530  00F9A2  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4531  00F9A6  C011  FFF8         	movff	__doprnt@f+2,tblptru
  4532  00F9AA  0008               	tblrd		*
  4533  00F9AC  50F5               	movf	tablat,w,c
  4534  00F9AE  6E16               	movwf	(??__doprnt+2)& (0+255),c
  4535  00F9B0  6A17               	clrf	(??__doprnt+3)& (0+255),c
  4536  00F9B2  5014               	movf	??__doprnt,w,c
  4537  00F9B4  2616               	addwf	??__doprnt+2,f,c
  4538  00F9B6  5015               	movf	??__doprnt+1,w,c
  4539  00F9B8  2217               	addwfc	??__doprnt+3,f,c
  4540  00F9BA  5016               	movf	??__doprnt+2,w,c
  4541  00F9BC  2620               	addwf	__doprnt@width,f,c
  4542  00F9BE  5017               	movf	??__doprnt+3,w,c
  4543  00F9C0  2221               	addwfc	__doprnt@width+1,f,c
  4544  00F9C2  0E01               	movlw	1
  4545  00F9C4  260F               	addwf	__doprnt@f,f,c
  4546  00F9C6  0E00               	movlw	0
  4547  00F9C8  2210               	addwfc	__doprnt@f+1,f,c
  4548  00F9CA  0E00               	movlw	0
  4549  00F9CC  2211               	addwfc	__doprnt@f+2,f,c
  4550                           
  4551                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4552  00F9CE  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4553  00F9D2  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4554  00F9D6  C011  FFF8         	movff	__doprnt@f+2,tblptru
  4555  00F9DA  0008               	tblrd		*
  4556  00F9DC  50F5               	movf	tablat,w,c
  4557  00F9DE  EC52  F073         	call	_isdigit
  4558  00F9E2  A0D8               	btfss	status,0,c
  4559  00F9E4  D102               	goto	l2093
  4560  00F9E6  D7C9               	goto	l2035
  4561                           
  4562                           ;doprnt.c: 608: }
  4563                           ;doprnt.c: 635: switch(c = *f++) {
  4564  00F9E8  D100               	goto	l2093
  4565                           
  4566                           ;doprnt.c: 638: goto alldone;
  4567                           
  4568                           ;doprnt.c: 637: case 0:
  4569  00F9EA  D26A               	goto	l2157
  4570  00F9EC                     l2043:
  4571                           
  4572                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4573  00F9EC  C012  FFD9         	movff	__doprnt@ap,fsr2l
  4574  00F9F0  C013  FFDA         	movff	__doprnt@ap+1,fsr2h
  4575  00F9F4  CFDF F014          	movff	indf2,??__doprnt
  4576  00F9F8  0E02               	movlw	2
  4577  00F9FA  26DE               	addwf	postinc2,f,c
  4578  00F9FC  CFDF F015          	movff	indf2,??__doprnt+1
  4579  00FA00  0E00               	movlw	0
  4580  00FA02  22DD               	addwfc	postdec2,f,c
  4581  00FA04  C014  FFD9         	movff	??__doprnt,fsr2l
  4582  00FA08  C015  FFDA         	movff	??__doprnt+1,fsr2h
  4583  00FA0C  CFDE F01E          	movff	postinc2,__doprnt@cp
  4584  00FA10  CFDD F01F          	movff	postdec2,__doprnt@cp+1
  4585                           
  4586                           ;doprnt.c: 740: if(!cp)
  4587  00FA14  501E               	movf	__doprnt@cp,w,c
  4588  00FA16  101F               	iorwf	__doprnt@cp+1,w,c
  4589  00FA18  A4D8               	btfss	status,2,c
  4590  00FA1A  D005               	goto	l2049
  4591                           
  4592                           ;doprnt.c: 741: cp = "(null)";
  4593  00FA1C  0EE8               	movlw	low STR_23
  4594  00FA1E  6E1E               	movwf	__doprnt@cp,c
  4595  00FA20  0EFF               	movlw	high STR_23
  4596  00FA22  6E1F               	movwf	__doprnt@cp+1,c
  4597  00FA24  D000               	goto	l2049
  4598  00FA26                     l2049:
  4599                           
  4600                           ;doprnt.c: 745: len = 0;
  4601  00FA26  0E00               	movlw	0
  4602  00FA28  6E1D               	movwf	__doprnt@len+1,c
  4603  00FA2A  0E00               	movlw	0
  4604  00FA2C  6E1C               	movwf	__doprnt@len,c
  4605                           
  4606                           ;doprnt.c: 746: while(cp[len])
  4607  00FA2E  D003               	goto	l2053
  4608  00FA30                     l2051:
  4609                           
  4610                           ;doprnt.c: 747: len++;
  4611  00FA30  4A1C               	infsnz	__doprnt@len,f,c
  4612  00FA32  2A1D               	incf	__doprnt@len+1,f,c
  4613  00FA34  D000               	goto	l2053
  4614  00FA36                     l2053:
  4615  00FA36  501C               	movf	__doprnt@len,w,c
  4616  00FA38  241E               	addwf	__doprnt@cp,w,c
  4617  00FA3A  6E14               	movwf	??__doprnt& (0+255),c
  4618  00FA3C  501D               	movf	__doprnt@len+1,w,c
  4619  00FA3E  201F               	addwfc	__doprnt@cp+1,w,c
  4620  00FA40  6E15               	movwf	(??__doprnt+1)& (0+255),c
  4621  00FA42  C014  FFF6         	movff	??__doprnt,tblptrl
  4622  00FA46  C015  FFF7         	movff	??__doprnt+1,tblptrh
  4623  00FA4A  6AF8               	clrf	tblptru,c
  4624  00FA4C  0E0E               	movlw	(high __ramtop+-1)
  4625  00FA4E  64F7               	cpfsgt	tblptrh,c
  4626  00FA50  D003               	bra	u1327
  4627  00FA52  0008               	tblrd		*
  4628  00FA54  50F5               	movf	tablat,w,c
  4629  00FA56  D005               	bra	u1320
  4630  00FA58                     u1327:
  4631  00FA58  CFF6 FFE9          	movff	tblptrl,fsr0l
  4632  00FA5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4633  00FA60  50EF               	movf	indf0,w,c
  4634  00FA62                     u1320:
  4635  00FA62  0900               	iorlw	0
  4636  00FA64  B4D8               	btfsc	status,2,c
  4637  00FA66  D002               	goto	l2055
  4638  00FA68  D7E3               	goto	l2051
  4639  00FA6A  D000               	goto	l2055
  4640  00FA6C                     l2055:
  4641                           
  4642                           ;doprnt.c: 757: if(width > len)
  4643  00FA6C  5020               	movf	__doprnt@width,w,c
  4644  00FA6E  5C1C               	subwf	__doprnt@len,w,c
  4645  00FA70  5021               	movf	__doprnt@width+1,w,c
  4646  00FA72  581D               	subwfb	__doprnt@len+1,w,c
  4647  00FA74  B0D8               	btfsc	status,0,c
  4648  00FA76  D005               	goto	l2059
  4649                           
  4650                           ;doprnt.c: 758: width -= len;
  4651  00FA78  501C               	movf	__doprnt@len,w,c
  4652  00FA7A  5E20               	subwf	__doprnt@width,f,c
  4653  00FA7C  501D               	movf	__doprnt@len+1,w,c
  4654  00FA7E  5A21               	subwfb	__doprnt@width+1,f,c
  4655  00FA80  D03B               	goto	l2069
  4656  00FA82                     l2059:
  4657                           
  4658                           ;doprnt.c: 759: else
  4659                           ;doprnt.c: 760: width = 0;
  4660  00FA82  0E00               	movlw	0
  4661  00FA84  6E21               	movwf	__doprnt@width+1,c
  4662  00FA86  0E00               	movlw	0
  4663  00FA88  6E20               	movwf	__doprnt@width,c
  4664                           
  4665                           ;doprnt.c: 764: while(width--)
  4666  00FA8A  D036               	goto	l2069
  4667  00FA8C                     l2061:
  4668                           
  4669                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4670  00FA8C  EE20 F002          	lfsr	2,2
  4671  00FA90  500D               	movf	__doprnt@pb,w,c
  4672  00FA92  26D9               	addwf	fsr2l,f,c
  4673  00FA94  500E               	movf	__doprnt@pb+1,w,c
  4674  00FA96  22DA               	addwfc	fsr2h,f,c
  4675  00FA98  50DE               	movf	postinc2,w,c
  4676  00FA9A  10DE               	iorwf	postinc2,w,c
  4677  00FA9C  B4D8               	btfsc	status,2,c
  4678  00FA9E  D016               	goto	l2065
  4679  00FAA0  EE20 F002          	lfsr	2,2
  4680  00FAA4  500D               	movf	__doprnt@pb,w,c
  4681  00FAA6  26D9               	addwf	fsr2l,f,c
  4682  00FAA8  500E               	movf	__doprnt@pb+1,w,c
  4683  00FAAA  22DA               	addwfc	fsr2h,f,c
  4684  00FAAC  CFDE F014          	movff	postinc2,??__doprnt
  4685  00FAB0  CFDD F015          	movff	postdec2,??__doprnt+1
  4686  00FAB4  D801               	call	u1368
  4687  00FAB6  D020               	goto	l2069
  4688  00FAB8                     u1368:
  4689  00FAB8  0005               	push	
  4690  00FABA  6EFA               	movwf	pclath,c
  4691  00FABC  5014               	movf	??__doprnt,w,c
  4692  00FABE  6EFD               	movwf	tosl,c
  4693  00FAC0  5015               	movf	??__doprnt+1,w,c
  4694  00FAC2  6EFE               	movwf	tosh,c
  4695  00FAC4  6AFF               	clrf	tosu,c
  4696  00FAC6  50FA               	movf	pclath,w,c
  4697  00FAC8  0E20               	movlw	32
  4698  00FACA  0012               	return		;indir
  4699  00FACC                     l2065:
  4700  00FACC  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4701  00FAD0  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4702  00FAD4  CFDE F014          	movff	postinc2,??__doprnt
  4703  00FAD8  CFDD F015          	movff	postdec2,??__doprnt+1
  4704  00FADC  C014  FFD9         	movff	??__doprnt,fsr2l
  4705  00FAE0  C015  FFDA         	movff	??__doprnt+1,fsr2h
  4706  00FAE4  0E20               	movlw	32
  4707  00FAE6  6EDF               	movwf	indf2,c
  4708  00FAE8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4709  00FAEC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4710  00FAF0  2ADE               	incf	postinc2,f,c
  4711  00FAF2  0E00               	movlw	0
  4712  00FAF4  22DD               	addwfc	postdec2,f,c
  4713  00FAF6  D000               	goto	l2069
  4714  00FAF8                     l2069:
  4715  00FAF8  0620               	decf	__doprnt@width,f,c
  4716  00FAFA  A0D8               	btfss	status,0,c
  4717  00FAFC  0621               	decf	__doprnt@width+1,f,c
  4718  00FAFE  2820               	incf	__doprnt@width,w,c
  4719  00FB00  E1C5               	bnz	l2061
  4720  00FB02  2821               	incf	__doprnt@width+1,w,c
  4721  00FB04  B4D8               	btfsc	status,2,c
  4722  00FB06  D05B               	goto	l2083
  4723  00FB08  D7C1               	goto	l2061
  4724                           
  4725                           ;doprnt.c: 767: while(len--)
  4726  00FB0A  D059               	goto	l2083
  4727  00FB0C                     l2071:
  4728                           
  4729                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4730  00FB0C  EE20 F002          	lfsr	2,2
  4731  00FB10  500D               	movf	__doprnt@pb,w,c
  4732  00FB12  26D9               	addwf	fsr2l,f,c
  4733  00FB14  500E               	movf	__doprnt@pb+1,w,c
  4734  00FB16  22DA               	addwfc	fsr2h,f,c
  4735  00FB18  50DE               	movf	postinc2,w,c
  4736  00FB1A  10DE               	iorwf	postinc2,w,c
  4737  00FB1C  B4D8               	btfsc	status,2,c
  4738  00FB1E  D028               	goto	l2077
  4739  00FB20  EE20 F002          	lfsr	2,2
  4740  00FB24  500D               	movf	__doprnt@pb,w,c
  4741  00FB26  26D9               	addwf	fsr2l,f,c
  4742  00FB28  500E               	movf	__doprnt@pb+1,w,c
  4743  00FB2A  22DA               	addwfc	fsr2h,f,c
  4744  00FB2C  CFDE F014          	movff	postinc2,??__doprnt
  4745  00FB30  CFDD F015          	movff	postdec2,??__doprnt+1
  4746  00FB34  D801               	call	u1398
  4747  00FB36  D019               	goto	l2075
  4748  00FB38                     u1398:
  4749  00FB38  0005               	push	
  4750  00FB3A  6EFA               	movwf	pclath,c
  4751  00FB3C  5014               	movf	??__doprnt,w,c
  4752  00FB3E  6EFD               	movwf	tosl,c
  4753  00FB40  5015               	movf	??__doprnt+1,w,c
  4754  00FB42  6EFE               	movwf	tosh,c
  4755  00FB44  6AFF               	clrf	tosu,c
  4756  00FB46  50FA               	movf	pclath,w,c
  4757  00FB48  C01E  FFF6         	movff	__doprnt@cp,tblptrl
  4758  00FB4C  C01F  FFF7         	movff	__doprnt@cp+1,tblptrh
  4759  00FB50  6AF8               	clrf	tblptru,c
  4760  00FB52  0E0E               	movlw	(high __ramtop+-1)
  4761  00FB54  64F7               	cpfsgt	tblptrh,c
  4762  00FB56  D003               	bra	u1407
  4763  00FB58  0008               	tblrd		*
  4764  00FB5A  50F5               	movf	tablat,w,c
  4765  00FB5C  D005               	bra	u1400
  4766  00FB5E                     u1407:
  4767  00FB5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4768  00FB62  CFF7 FFEA          	movff	tblptrh,fsr0h
  4769  00FB66  50EF               	movf	indf0,w,c
  4770  00FB68                     u1400:
  4771  00FB68  0012               	return		;indir
  4772  00FB6A                     l2075:
  4773  00FB6A  4A1E               	infsnz	__doprnt@cp,f,c
  4774  00FB6C  2A1F               	incf	__doprnt@cp+1,f,c
  4775  00FB6E  D027               	goto	l2083
  4776  00FB70                     l2077:
  4777  00FB70  C01E  FFF6         	movff	__doprnt@cp,tblptrl
  4778  00FB74  C01F  FFF7         	movff	__doprnt@cp+1,tblptrh
  4779  00FB78  6AF8               	clrf	tblptru,c
  4780  00FB7A  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4781  00FB7E  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4782  00FB82  CFDE F014          	movff	postinc2,??__doprnt
  4783  00FB86  CFDD F015          	movff	postdec2,??__doprnt+1
  4784  00FB8A  C014  FFD9         	movff	??__doprnt,fsr2l
  4785  00FB8E  C015  FFDA         	movff	??__doprnt+1,fsr2h
  4786  00FB92  0E0E               	movlw	(high __ramtop+-1)
  4787  00FB94  64F7               	cpfsgt	tblptrh,c
  4788  00FB96  D003               	bra	u1417
  4789  00FB98  0008               	tblrd		*
  4790  00FB9A  50F5               	movf	tablat,w,c
  4791  00FB9C  D005               	bra	u1410
  4792  00FB9E                     u1417:
  4793  00FB9E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4794  00FBA2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4795  00FBA6  50EF               	movf	indf0,w,c
  4796  00FBA8                     u1410:
  4797  00FBA8  6EDF               	movwf	indf2,c
  4798  00FBAA  4A1E               	infsnz	__doprnt@cp,f,c
  4799  00FBAC  2A1F               	incf	__doprnt@cp+1,f,c
  4800  00FBAE  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4801  00FBB2  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4802  00FBB6  2ADE               	incf	postinc2,f,c
  4803  00FBB8  0E00               	movlw	0
  4804  00FBBA  22DD               	addwfc	postdec2,f,c
  4805  00FBBC  D000               	goto	l2083
  4806  00FBBE                     l2083:
  4807  00FBBE  061C               	decf	__doprnt@len,f,c
  4808  00FBC0  A0D8               	btfss	status,0,c
  4809  00FBC2  061D               	decf	__doprnt@len+1,f,c
  4810  00FBC4  281C               	incf	__doprnt@len,w,c
  4811  00FBC6  E1A2               	bnz	l2071
  4812  00FBC8  281D               	incf	__doprnt@len+1,w,c
  4813  00FBCA  B4D8               	btfsc	status,2,c
  4814  00FBCC  D161               	goto	l2155
  4815  00FBCE  D79E               	goto	l2071
  4816                           
  4817                           ;doprnt.c: 774: continue;
  4818  00FBD0  D15F               	goto	l2155
  4819  00FBD2                     l2085:
  4820                           
  4821                           ;doprnt.c: 805: cp = (char *)&c;
  4822  00FBD2  0E22               	movlw	low __doprnt@c
  4823  00FBD4  6E1E               	movwf	__doprnt@cp,c
  4824  00FBD6  0E00               	movlw	high __doprnt@c
  4825  00FBD8  6E1F               	movwf	__doprnt@cp+1,c
  4826                           
  4827                           ;doprnt.c: 806: len = 1;
  4828  00FBDA  0E00               	movlw	0
  4829  00FBDC  6E1D               	movwf	__doprnt@len+1,c
  4830  00FBDE  0E01               	movlw	1
  4831  00FBE0  6E1C               	movwf	__doprnt@len,c
  4832                           
  4833                           ;doprnt.c: 807: goto dostring;
  4834  00FBE2  D744               	goto	l2055
  4835  00FBE4                     l2089:
  4836                           
  4837                           ;doprnt.c: 818: flag |= 0xC0;
  4838  00FBE4  0EC0               	movlw	192
  4839  00FBE6  1218               	iorwf	__doprnt@flag,f,c
  4840                           
  4841                           ;doprnt.c: 822: }
  4842                           
  4843                           ;doprnt.c: 819: break;
  4844  00FBE8  D01E               	goto	l2095
  4845  00FBEA                     l2093:
  4846  00FBEA  C00F  F014         	movff	__doprnt@f,??__doprnt
  4847  00FBEE  C010  F015         	movff	__doprnt@f+1,??__doprnt+1
  4848  00FBF2  C011  F016         	movff	__doprnt@f+2,??__doprnt+2
  4849  00FBF6  2A0F               	incf	__doprnt@f,f,c
  4850  00FBF8  0E00               	movlw	0
  4851  00FBFA  2210               	addwfc	__doprnt@f+1,f,c
  4852  00FBFC  2211               	addwfc	__doprnt@f+2,f,c
  4853  00FBFE  C014  FFF6         	movff	??__doprnt,tblptrl
  4854  00FC02  C015  FFF7         	movff	??__doprnt+1,tblptrh
  4855  00FC06  C016  FFF8         	movff	??__doprnt+2,tblptru
  4856  00FC0A  0008               	tblrd		*
  4857  00FC0C  CFF5 F022          	movff	tablat,__doprnt@c
  4858  00FC10  5022               	movf	__doprnt@c,w,c
  4859                           
  4860                           ; Switch size 1, requested type "space"
  4861                           ; Number of cases is 3, Range of values is 0 to 117
  4862                           ; switch strategies available:
  4863                           ; Name         Instructions Cycles
  4864                           ; simple_byte           10     6 (average)
  4865                           ;	Chosen strategy is simple_byte
  4866  00FC12  0A00               	xorlw	0	; case 0
  4867  00FC14  B4D8               	btfsc	status,2,c
  4868  00FC16  D154               	goto	l2157
  4869  00FC18  0A73               	xorlw	115	; case 115
  4870  00FC1A  B4D8               	btfsc	status,2,c
  4871  00FC1C  D6E7               	goto	l2043
  4872  00FC1E  0A06               	xorlw	6	; case 117
  4873  00FC20  B4D8               	btfsc	status,2,c
  4874  00FC22  D7E0               	goto	l2089
  4875  00FC24  D7D6               	goto	l2085
  4876  00FC26                     l2095:
  4877                           
  4878                           ;doprnt.c: 1273: {
  4879                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4880  00FC26  C012  FFD9         	movff	__doprnt@ap,fsr2l
  4881  00FC2A  C013  FFDA         	movff	__doprnt@ap+1,fsr2h
  4882  00FC2E  CFDF F014          	movff	indf2,??__doprnt
  4883  00FC32  0E02               	movlw	2
  4884  00FC34  26DE               	addwf	postinc2,f,c
  4885  00FC36  CFDF F015          	movff	indf2,??__doprnt+1
  4886  00FC3A  0E00               	movlw	0
  4887  00FC3C  22DD               	addwfc	postdec2,f,c
  4888  00FC3E  C014  FFD9         	movff	??__doprnt,fsr2l
  4889  00FC42  C015  FFDA         	movff	??__doprnt+1,fsr2h
  4890  00FC46  CFDE F019          	movff	postinc2,__doprnt@val
  4891  00FC4A  CFDD F01A          	movff	postdec2,__doprnt@val+1
  4892                           
  4893                           ;doprnt.c: 1287: }
  4894                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4895  00FC4E  0E01               	movlw	1
  4896  00FC50  6E22               	movwf	__doprnt@c,c
  4897  00FC52                     l2099:
  4898  00FC52  0E05               	movlw	5
  4899  00FC54  1822               	xorwf	__doprnt@c,w,c
  4900  00FC56  B4D8               	btfsc	status,2,c
  4901  00FC58  D019               	goto	l2111
  4902  00FC5A  D001               	goto	l2103
  4903  00FC5C  D017               	goto	l2111
  4904  00FC5E                     l2103:
  4905                           
  4906                           ;doprnt.c: 1306: if(val < dpowers[c])
  4907  00FC5E  5022               	movf	__doprnt@c,w,c
  4908  00FC60  0D02               	mullw	2
  4909  00FC62  0ECD               	movlw	low _dpowers
  4910  00FC64  24F3               	addwf	prodl,w,c
  4911  00FC66  6EF6               	movwf	tblptrl,c
  4912  00FC68  0EFE               	movlw	high _dpowers
  4913  00FC6A  20F4               	addwfc	prodh,w,c
  4914  00FC6C  6EF7               	movwf	tblptrh,c
  4915  00FC6E                     	if	1	;There are 3 active tblptr bytes
  4916  00FC6E  6AF8               	clrf	tblptru,c
  4917  00FC70  0E00               	movlw	low (__mediumconst shr (0+16))
  4918  00FC72  22F8               	addwfc	tblptru,f,c
  4919  00FC74                     	endif
  4920  00FC74  0009               	tblrd		*+
  4921  00FC76  50F5               	movf	tablat,w,c
  4922  00FC78  5C19               	subwf	__doprnt@val,w,c
  4923  00FC7A  0009               	tblrd		*+
  4924  00FC7C  50F5               	movf	tablat,w,c
  4925  00FC7E  581A               	subwfb	__doprnt@val+1,w,c
  4926  00FC80  A0D8               	btfss	status,0,c
  4927  00FC82  D004               	goto	l2111
  4928  00FC84  D001               	goto	l2107
  4929                           
  4930                           ;doprnt.c: 1307: break;
  4931  00FC86  D002               	goto	l2111
  4932  00FC88                     l2107:
  4933  00FC88  2A22               	incf	__doprnt@c,f,c
  4934  00FC8A  D7E3               	goto	l2099
  4935  00FC8C                     l2111:
  4936                           
  4937                           ;doprnt.c: 1381: if(width > c)
  4938  00FC8C  0E80               	movlw	128
  4939  00FC8E  BE22               	btfsc	__doprnt@c,7,c
  4940  00FC90  0E7F               	movlw	127
  4941  00FC92  6E14               	movwf	??__doprnt& (0+255),c
  4942  00FC94  5020               	movf	__doprnt@width,w,c
  4943  00FC96  5C22               	subwf	__doprnt@c,w,c
  4944  00FC98  5021               	movf	__doprnt@width+1,w,c
  4945  00FC9A  0A80               	xorlw	128
  4946  00FC9C  5814               	subwfb	??__doprnt& (0+255),w,c
  4947  00FC9E  B0D8               	btfsc	status,0,c
  4948  00FCA0  D007               	goto	l2115
  4949                           
  4950                           ;doprnt.c: 1382: width -= c;
  4951  00FCA2  5022               	movf	__doprnt@c,w,c
  4952  00FCA4  5E20               	subwf	__doprnt@width,f,c
  4953  00FCA6  0E00               	movlw	0
  4954  00FCA8  BE22               	btfsc	__doprnt@c,7,c
  4955  00FCAA  0EFF               	movlw	255
  4956  00FCAC  5A21               	subwfb	__doprnt@width+1,f,c
  4957  00FCAE  D005               	goto	l2117
  4958  00FCB0                     l2115:
  4959                           
  4960                           ;doprnt.c: 1383: else
  4961                           ;doprnt.c: 1384: width = 0;
  4962  00FCB0  0E00               	movlw	0
  4963  00FCB2  6E21               	movwf	__doprnt@width+1,c
  4964  00FCB4  0E00               	movlw	0
  4965  00FCB6  6E20               	movwf	__doprnt@width,c
  4966  00FCB8  D000               	goto	l2117
  4967  00FCBA                     l2117:
  4968                           
  4969                           ;doprnt.c: 1387: if(flag & 0x04) {
  4970  00FCBA  A418               	btfss	__doprnt@flag,2,c
  4971  00FCBC  D043               	goto	l2131
  4972                           
  4973                           ;doprnt.c: 1415: if(width)
  4974  00FCBE  5020               	movf	__doprnt@width,w,c
  4975  00FCC0  1021               	iorwf	__doprnt@width+1,w,c
  4976  00FCC2  B4D8               	btfsc	status,2,c
  4977  00FCC4  D082               	goto	l300
  4978  00FCC6                     l2121:
  4979                           
  4980                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  4981  00FCC6  EE20 F002          	lfsr	2,2
  4982  00FCCA  500D               	movf	__doprnt@pb,w,c
  4983  00FCCC  26D9               	addwf	fsr2l,f,c
  4984  00FCCE  500E               	movf	__doprnt@pb+1,w,c
  4985  00FCD0  22DA               	addwfc	fsr2h,f,c
  4986  00FCD2  50DE               	movf	postinc2,w,c
  4987  00FCD4  10DE               	iorwf	postinc2,w,c
  4988  00FCD6  B4D8               	btfsc	status,2,c
  4989  00FCD8  D016               	goto	l2125
  4990  00FCDA  EE20 F002          	lfsr	2,2
  4991  00FCDE  500D               	movf	__doprnt@pb,w,c
  4992  00FCE0  26D9               	addwf	fsr2l,f,c
  4993  00FCE2  500E               	movf	__doprnt@pb+1,w,c
  4994  00FCE4  22DA               	addwfc	fsr2h,f,c
  4995  00FCE6  CFDE F014          	movff	postinc2,??__doprnt
  4996  00FCEA  CFDD F015          	movff	postdec2,??__doprnt+1
  4997  00FCEE  D801               	call	u1508
  4998  00FCF0  D020               	goto	l2129
  4999  00FCF2                     u1508:
  5000  00FCF2  0005               	push	
  5001  00FCF4  6EFA               	movwf	pclath,c
  5002  00FCF6  5014               	movf	??__doprnt,w,c
  5003  00FCF8  6EFD               	movwf	tosl,c
  5004  00FCFA  5015               	movf	??__doprnt+1,w,c
  5005  00FCFC  6EFE               	movwf	tosh,c
  5006  00FCFE  6AFF               	clrf	tosu,c
  5007  00FD00  50FA               	movf	pclath,w,c
  5008  00FD02  0E30               	movlw	48
  5009  00FD04  0012               	return		;indir
  5010  00FD06                     l2125:
  5011  00FD06  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5012  00FD0A  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5013  00FD0E  CFDE F014          	movff	postinc2,??__doprnt
  5014  00FD12  CFDD F015          	movff	postdec2,??__doprnt+1
  5015  00FD16  C014  FFD9         	movff	??__doprnt,fsr2l
  5016  00FD1A  C015  FFDA         	movff	??__doprnt+1,fsr2h
  5017  00FD1E  0E30               	movlw	48
  5018  00FD20  6EDF               	movwf	indf2,c
  5019  00FD22  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5020  00FD26  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5021  00FD2A  2ADE               	incf	postinc2,f,c
  5022  00FD2C  0E00               	movlw	0
  5023  00FD2E  22DD               	addwfc	postdec2,f,c
  5024  00FD30  D000               	goto	l2129
  5025  00FD32                     l2129:
  5026                           
  5027                           ;doprnt.c: 1418: while(--width);
  5028  00FD32  0620               	decf	__doprnt@width,f,c
  5029  00FD34  A0D8               	btfss	status,0,c
  5030  00FD36  0621               	decf	__doprnt@width+1,f,c
  5031  00FD38  5020               	movf	__doprnt@width,w,c
  5032  00FD3A  1021               	iorwf	__doprnt@width+1,w,c
  5033  00FD3C  B4D8               	btfsc	status,2,c
  5034  00FD3E  D045               	goto	l300
  5035  00FD40  D7C2               	goto	l2121
  5036                           
  5037                           ;doprnt.c: 1420: } else
  5038  00FD42  D043               	goto	l300
  5039  00FD44                     l2131:
  5040                           
  5041                           ;doprnt.c: 1422: {
  5042                           ;doprnt.c: 1424: if(width
  5043                           ;doprnt.c: 1428: )
  5044  00FD44  5020               	movf	__doprnt@width,w,c
  5045  00FD46  1021               	iorwf	__doprnt@width+1,w,c
  5046  00FD48  B4D8               	btfsc	status,2,c
  5047  00FD4A  D03F               	goto	l300
  5048  00FD4C                     l2133:
  5049                           
  5050                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5051  00FD4C  EE20 F002          	lfsr	2,2
  5052  00FD50  500D               	movf	__doprnt@pb,w,c
  5053  00FD52  26D9               	addwf	fsr2l,f,c
  5054  00FD54  500E               	movf	__doprnt@pb+1,w,c
  5055  00FD56  22DA               	addwfc	fsr2h,f,c
  5056  00FD58  50DE               	movf	postinc2,w,c
  5057  00FD5A  10DE               	iorwf	postinc2,w,c
  5058  00FD5C  B4D8               	btfsc	status,2,c
  5059  00FD5E  D016               	goto	l2137
  5060  00FD60  EE20 F002          	lfsr	2,2
  5061  00FD64  500D               	movf	__doprnt@pb,w,c
  5062  00FD66  26D9               	addwf	fsr2l,f,c
  5063  00FD68  500E               	movf	__doprnt@pb+1,w,c
  5064  00FD6A  22DA               	addwfc	fsr2h,f,c
  5065  00FD6C  CFDE F014          	movff	postinc2,??__doprnt
  5066  00FD70  CFDD F015          	movff	postdec2,??__doprnt+1
  5067  00FD74  D801               	call	u1548
  5068  00FD76  D020               	goto	l2141
  5069  00FD78                     u1548:
  5070  00FD78  0005               	push	
  5071  00FD7A  6EFA               	movwf	pclath,c
  5072  00FD7C  5014               	movf	??__doprnt,w,c
  5073  00FD7E  6EFD               	movwf	tosl,c
  5074  00FD80  5015               	movf	??__doprnt+1,w,c
  5075  00FD82  6EFE               	movwf	tosh,c
  5076  00FD84  6AFF               	clrf	tosu,c
  5077  00FD86  50FA               	movf	pclath,w,c
  5078  00FD88  0E20               	movlw	32
  5079  00FD8A  0012               	return		;indir
  5080  00FD8C                     l2137:
  5081  00FD8C  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5082  00FD90  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5083  00FD94  CFDE F014          	movff	postinc2,??__doprnt
  5084  00FD98  CFDD F015          	movff	postdec2,??__doprnt+1
  5085  00FD9C  C014  FFD9         	movff	??__doprnt,fsr2l
  5086  00FDA0  C015  FFDA         	movff	??__doprnt+1,fsr2h
  5087  00FDA4  0E20               	movlw	32
  5088  00FDA6  6EDF               	movwf	indf2,c
  5089  00FDA8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5090  00FDAC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5091  00FDB0  2ADE               	incf	postinc2,f,c
  5092  00FDB2  0E00               	movlw	0
  5093  00FDB4  22DD               	addwfc	postdec2,f,c
  5094  00FDB6  D000               	goto	l2141
  5095  00FDB8                     l2141:
  5096                           
  5097                           ;doprnt.c: 1431: while(--width);
  5098  00FDB8  0620               	decf	__doprnt@width,f,c
  5099  00FDBA  A0D8               	btfss	status,0,c
  5100  00FDBC  0621               	decf	__doprnt@width+1,f,c
  5101  00FDBE  5020               	movf	__doprnt@width,w,c
  5102  00FDC0  1021               	iorwf	__doprnt@width+1,w,c
  5103  00FDC2  B4D8               	btfsc	status,2,c
  5104  00FDC4  D002               	goto	l300
  5105  00FDC6  D7C2               	goto	l2133
  5106  00FDC8  D000               	goto	l300
  5107  00FDCA                     l300:
  5108                           
  5109                           ;doprnt.c: 1469: }
  5110                           ;doprnt.c: 1472: prec = c;
  5111  00FDCA  C022  F01B         	movff	__doprnt@c,__doprnt@prec
  5112                           
  5113                           ;doprnt.c: 1474: while(prec--) {
  5114  00FDCE  D05A               	goto	l2153
  5115  00FDD0                     l2143:
  5116                           
  5117                           ;doprnt.c: 1478: {
  5118                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5119  00FDD0  501B               	movf	__doprnt@prec,w,c
  5120  00FDD2  0D02               	mullw	2
  5121  00FDD4  0ECD               	movlw	low _dpowers
  5122  00FDD6  24F3               	addwf	prodl,w,c
  5123  00FDD8  6EF6               	movwf	tblptrl,c
  5124  00FDDA  0EFE               	movlw	high _dpowers
  5125  00FDDC  20F4               	addwfc	prodh,w,c
  5126  00FDDE  6EF7               	movwf	tblptrh,c
  5127  00FDE0                     	if	1	;There are 3 active tblptr bytes
  5128  00FDE0  6AF8               	clrf	tblptru,c
  5129  00FDE2  0E00               	movlw	low (__mediumconst shr (0+16))
  5130  00FDE4  22F8               	addwfc	tblptru,f,c
  5131  00FDE6                     	endif
  5132  00FDE6  0009               	tblrd		*+
  5133  00FDE8  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5134  00FDEC  000A               	tblrd		*-
  5135  00FDEE  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5136  00FDF2  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  5137  00FDF6  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5138  00FDFA  EC00  F074         	call	___lwdiv
  5139  00FDFE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5140  00FE02  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5141  00FE06  0E00               	movlw	0
  5142  00FE08  6E0B               	movwf	___lwmod@divisor+1,c
  5143  00FE0A  0E0A               	movlw	10
  5144  00FE0C  6E0A               	movwf	___lwmod@divisor,c
  5145  00FE0E  ECB3  F073         	call	___lwmod	;wreg free
  5146  00FE12  5008               	movf	?___lwmod,w,c
  5147  00FE14  0F30               	addlw	48
  5148  00FE16  6E22               	movwf	__doprnt@c,c
  5149                           
  5150                           ;doprnt.c: 1523: }
  5151                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5152  00FE18  EE20 F002          	lfsr	2,2
  5153  00FE1C  500D               	movf	__doprnt@pb,w,c
  5154  00FE1E  26D9               	addwf	fsr2l,f,c
  5155  00FE20  500E               	movf	__doprnt@pb+1,w,c
  5156  00FE22  22DA               	addwfc	fsr2h,f,c
  5157  00FE24  50DE               	movf	postinc2,w,c
  5158  00FE26  10DE               	iorwf	postinc2,w,c
  5159  00FE28  B4D8               	btfsc	status,2,c
  5160  00FE2A  D016               	goto	l2149
  5161  00FE2C  EE20 F002          	lfsr	2,2
  5162  00FE30  500D               	movf	__doprnt@pb,w,c
  5163  00FE32  26D9               	addwf	fsr2l,f,c
  5164  00FE34  500E               	movf	__doprnt@pb+1,w,c
  5165  00FE36  22DA               	addwfc	fsr2h,f,c
  5166  00FE38  CFDE F014          	movff	postinc2,??__doprnt
  5167  00FE3C  CFDD F015          	movff	postdec2,??__doprnt+1
  5168  00FE40  D801               	call	u1578
  5169  00FE42  D020               	goto	l2153
  5170  00FE44                     u1578:
  5171  00FE44  0005               	push	
  5172  00FE46  6EFA               	movwf	pclath,c
  5173  00FE48  5014               	movf	??__doprnt,w,c
  5174  00FE4A  6EFD               	movwf	tosl,c
  5175  00FE4C  5015               	movf	??__doprnt+1,w,c
  5176  00FE4E  6EFE               	movwf	tosh,c
  5177  00FE50  6AFF               	clrf	tosu,c
  5178  00FE52  50FA               	movf	pclath,w,c
  5179  00FE54  5022               	movf	__doprnt@c,w,c
  5180  00FE56  0012               	return		;indir
  5181  00FE58                     l2149:
  5182  00FE58  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5183  00FE5C  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5184  00FE60  CFDE F014          	movff	postinc2,??__doprnt
  5185  00FE64  CFDD F015          	movff	postdec2,??__doprnt+1
  5186  00FE68  C014  FFD9         	movff	??__doprnt,fsr2l
  5187  00FE6C  C015  FFDA         	movff	??__doprnt+1,fsr2h
  5188  00FE70  C022  FFDF         	movff	__doprnt@c,indf2
  5189  00FE74  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5190  00FE78  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5191  00FE7C  2ADE               	incf	postinc2,f,c
  5192  00FE7E  0E00               	movlw	0
  5193  00FE80  22DD               	addwfc	postdec2,f,c
  5194  00FE82  D000               	goto	l2153
  5195  00FE84                     l2153:
  5196  00FE84  061B               	decf	__doprnt@prec,f,c
  5197  00FE86  281B               	incf	__doprnt@prec,w,c
  5198  00FE88  B4D8               	btfsc	status,2,c
  5199  00FE8A  D002               	goto	l2155
  5200  00FE8C  D7A1               	goto	l2143
  5201  00FE8E  D000               	goto	l2155
  5202  00FE90                     l2155:
  5203  00FE90  C00F  F014         	movff	__doprnt@f,??__doprnt
  5204  00FE94  C010  F015         	movff	__doprnt@f+1,??__doprnt+1
  5205  00FE98  C011  F016         	movff	__doprnt@f+2,??__doprnt+2
  5206  00FE9C  2A0F               	incf	__doprnt@f,f,c
  5207  00FE9E  0E00               	movlw	0
  5208  00FEA0  2210               	addwfc	__doprnt@f+1,f,c
  5209  00FEA2  2211               	addwfc	__doprnt@f+2,f,c
  5210  00FEA4  C014  FFF6         	movff	??__doprnt,tblptrl
  5211  00FEA8  C015  FFF7         	movff	??__doprnt+1,tblptrh
  5212  00FEAC  C016  FFF8         	movff	??__doprnt+2,tblptru
  5213  00FEB0  0008               	tblrd		*
  5214  00FEB2  CFF5 F022          	movff	tablat,__doprnt@c
  5215  00FEB6  5022               	movf	__doprnt@c,w,c
  5216  00FEB8  B4D8               	btfsc	status,2,c
  5217  00FEBA  D002               	goto	l2157
  5218  00FEBC  D4F6               	goto	l2011
  5219  00FEBE  D000               	goto	l2157
  5220  00FEC0                     l2157:
  5221                           
  5222                           ;doprnt.c: 1540: return 0;
  5223  00FEC0  0E00               	movlw	0
  5224  00FEC2  6E0E               	movwf	?__doprnt+1,c
  5225  00FEC4  0E00               	movlw	0
  5226  00FEC6  6E0D               	movwf	?__doprnt,c
  5227  00FEC8  0012               	return	
  5228  00FECA  0012               	return		;funcret
  5229  00FECC                     __end_of__doprnt:
  5230                           	opt stack 0
  5231                           tosu	equ	0xFFF
  5232                           tosh	equ	0xFFE
  5233                           tosl	equ	0xFFD
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           indf0	equ	0xFEF
  5243                           postinc0	equ	0xFEE
  5244                           fsr0h	equ	0xFEA
  5245                           fsr0l	equ	0xFE9
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           fsr2h	equ	0xFDA
  5253                           fsr2l	equ	0xFD9
  5254                           status	equ	0xFD8
  5255                           
  5256 ;; *************** function _putch *****************
  5257 ;; Defined at:
  5258 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\putch.c"
  5259 ;; Parameters:    Size  Location     Type
  5260 ;;  c               1    wreg     unsigned char 
  5261 ;; Auto vars:     Size  Location     Type
  5262 ;;  c               1    0[COMRAM] unsigned char 
  5263 ;; Return value:  Size  Location     Type
  5264 ;;		None               void
  5265 ;; Registers used:
  5266 ;;		wreg
  5267 ;; Tracked objects:
  5268 ;;		On entry : 0/0
  5269 ;;		On exit  : 0/0
  5270 ;;		Unchanged: 0/0
  5271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5276 ;;Total ram usage:        0 bytes
  5277 ;; Hardware stack levels used:    1
  5278 ;; This function calls:
  5279 ;;		Nothing
  5280 ;; This function is called by:
  5281 ;;		_printf
  5282 ;;		__doprnt
  5283 ;; This function uses a non-reentrant model
  5284 ;;
  5285                           
  5286                           	psect	text18
  5287  00E652                     __ptext18:
  5288                           	opt stack 0
  5289  00E652                     _putch:
  5290                           	opt stack 28
  5291                           
  5292                           ;incstack = 0
  5293  00E652  0012               	return		;funcret
  5294  00E654                     __end_of_putch:
  5295                           	opt stack 0
  5296                           tosu	equ	0xFFF
  5297                           tosh	equ	0xFFE
  5298                           tosl	equ	0xFFD
  5299                           pclath	equ	0xFFA
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           indf0	equ	0xFEF
  5308                           postinc0	equ	0xFEE
  5309                           fsr0h	equ	0xFEA
  5310                           fsr0l	equ	0xFE9
  5311                           wreg	equ	0xFE8
  5312                           postdec1	equ	0xFE5
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function _isdigit *****************
  5322 ;; Defined at:
  5323 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  c               1    wreg     unsigned char 
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  c               1    2[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;		None               void
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5338 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5339 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5340 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5341 ;;Total ram usage:        3 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; This function calls:
  5344 ;;		Nothing
  5345 ;; This function is called by:
  5346 ;;		__doprnt
  5347 ;; This function uses a non-reentrant model
  5348 ;;
  5349                           
  5350                           	psect	text19
  5351  00E6A4                     __ptext19:
  5352                           	opt stack 0
  5353  00E6A4                     _isdigit:
  5354                           	opt stack 28
  5355                           
  5356                           ;incstack = 0
  5357                           ;isdigit@c stored from wreg
  5358  00E6A4  6E03               	movwf	isdigit@c,c
  5359  00E6A6  0E00               	movlw	0
  5360  00E6A8  6E02               	movwf	_isdigit$2087,c
  5361  00E6AA  0E3A               	movlw	58
  5362  00E6AC  6003               	cpfslt	isdigit@c,c
  5363  00E6AE  D006               	goto	l1953
  5364  00E6B0  0E2F               	movlw	47
  5365  00E6B2  6403               	cpfsgt	isdigit@c,c
  5366  00E6B4  D003               	goto	l1953
  5367  00E6B6  0E01               	movlw	1
  5368  00E6B8  6E02               	movwf	_isdigit$2087,c
  5369  00E6BA  D000               	goto	l1953
  5370  00E6BC                     l1953:
  5371  00E6BC  C002  F001         	movff	_isdigit$2087,??_isdigit
  5372  00E6C0  3001               	rrcf	??_isdigit,w,c
  5373  00E6C2  0012               	return	
  5374  00E6C4  0012               	return		;funcret
  5375  00E6C6                     __end_of_isdigit:
  5376                           	opt stack 0
  5377                           tosu	equ	0xFFF
  5378                           tosh	equ	0xFFE
  5379                           tosl	equ	0xFFD
  5380                           pclath	equ	0xFFA
  5381                           tblptru	equ	0xFF8
  5382                           tblptrh	equ	0xFF7
  5383                           tblptrl	equ	0xFF6
  5384                           tablat	equ	0xFF5
  5385                           prodh	equ	0xFF4
  5386                           prodl	equ	0xFF3
  5387                           intcon	equ	0xFF2
  5388                           indf0	equ	0xFEF
  5389                           postinc0	equ	0xFEE
  5390                           fsr0h	equ	0xFEA
  5391                           fsr0l	equ	0xFE9
  5392                           wreg	equ	0xFE8
  5393                           postdec1	equ	0xFE5
  5394                           fsr1l	equ	0xFE1
  5395                           indf2	equ	0xFDF
  5396                           postinc2	equ	0xFDE
  5397                           postdec2	equ	0xFDD
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function ___wmul *****************
  5403 ;; Defined at:
  5404 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  multiplier      2    0[COMRAM] unsigned int 
  5407 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  product         2    4[COMRAM] unsigned int 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  2    0[COMRAM] unsigned int 
  5412 ;; Registers used:
  5413 ;;		wreg, status,2, status,0, prodl, prodh
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5419 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5420 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5422 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5423 ;;Total ram usage:        6 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		__doprnt
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           	psect	text20
  5433  00E6C6                     __ptext20:
  5434                           	opt stack 0
  5435  00E6C6                     ___wmul:
  5436                           	opt stack 28
  5437                           
  5438                           ;incstack = 0
  5439  00E6C6  5001               	movf	___wmul@multiplier,w,c
  5440  00E6C8  0203               	mulwf	___wmul@multiplicand,c
  5441  00E6CA  CFF3 F005          	movff	prodl,___wmul@product
  5442  00E6CE  CFF4 F006          	movff	prodh,___wmul@product+1
  5443  00E6D2  5001               	movf	___wmul@multiplier,w,c
  5444  00E6D4  0204               	mulwf	___wmul@multiplicand+1,c
  5445  00E6D6  50F3               	movf	prodl,w,c
  5446  00E6D8  2606               	addwf	___wmul@product+1,f,c
  5447  00E6DA  5002               	movf	___wmul@multiplier+1,w,c
  5448  00E6DC  0203               	mulwf	___wmul@multiplicand,c
  5449  00E6DE  50F3               	movf	prodl,w,c
  5450  00E6E0  2606               	addwf	___wmul@product+1,f,c
  5451  00E6E2  C005  F001         	movff	___wmul@product,?___wmul
  5452  00E6E6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5453  00E6EA  0012               	return	
  5454  00E6EC  0012               	return		;funcret
  5455  00E6EE                     __end_of___wmul:
  5456                           	opt stack 0
  5457                           tosu	equ	0xFFF
  5458                           tosh	equ	0xFFE
  5459                           tosl	equ	0xFFD
  5460                           pclath	equ	0xFFA
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           indf0	equ	0xFEF
  5469                           postinc0	equ	0xFEE
  5470                           fsr0h	equ	0xFEA
  5471                           fsr0l	equ	0xFE9
  5472                           wreg	equ	0xFE8
  5473                           postdec1	equ	0xFE5
  5474                           fsr1l	equ	0xFE1
  5475                           indf2	equ	0xFDF
  5476                           postinc2	equ	0xFDE
  5477                           postdec2	equ	0xFDD
  5478                           fsr2h	equ	0xFDA
  5479                           fsr2l	equ	0xFD9
  5480                           status	equ	0xFD8
  5481                           
  5482 ;; *************** function ___lwmod *****************
  5483 ;; Defined at:
  5484 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  dividend        2    7[COMRAM] unsigned int 
  5487 ;;  divisor         2    9[COMRAM] unsigned int 
  5488 ;; Auto vars:     Size  Location     Type
  5489 ;;  counter         1   11[COMRAM] unsigned char 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  2    7[COMRAM] unsigned int 
  5492 ;; Registers used:
  5493 ;;		wreg, status,2, status,0
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5499 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5502 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5503 ;;Total ram usage:        5 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		__doprnt
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text21
  5513  00E766                     __ptext21:
  5514                           	opt stack 0
  5515  00E766                     ___lwmod:
  5516                           	opt stack 28
  5517                           
  5518                           ;incstack = 0
  5519  00E766  500A               	movf	___lwmod@divisor,w,c
  5520  00E768  100B               	iorwf	___lwmod@divisor+1,w,c
  5521  00E76A  B4D8               	btfsc	status,2,c
  5522  00E76C  D01D               	goto	l937
  5523  00E76E  0E01               	movlw	1
  5524  00E770  6E0C               	movwf	___lwmod@counter,c
  5525  00E772  D005               	goto	l1991
  5526  00E774                     l1989:
  5527  00E774  90D8               	bcf	status,0,c
  5528  00E776  360A               	rlcf	___lwmod@divisor,f,c
  5529  00E778  360B               	rlcf	___lwmod@divisor+1,f,c
  5530  00E77A  2A0C               	incf	___lwmod@counter,f,c
  5531  00E77C  D000               	goto	l1991
  5532  00E77E                     l1991:
  5533  00E77E  BE0B               	btfsc	___lwmod@divisor+1,7,c
  5534  00E780  D002               	goto	l1993
  5535  00E782  D7F8               	goto	l1989
  5536  00E784  D000               	goto	l1993
  5537  00E786                     l1993:
  5538  00E786  500A               	movf	___lwmod@divisor,w,c
  5539  00E788  5C08               	subwf	___lwmod@dividend,w,c
  5540  00E78A  500B               	movf	___lwmod@divisor+1,w,c
  5541  00E78C  5809               	subwfb	___lwmod@dividend+1,w,c
  5542  00E78E  A0D8               	btfss	status,0,c
  5543  00E790  D005               	goto	l1997
  5544  00E792  500A               	movf	___lwmod@divisor,w,c
  5545  00E794  5E08               	subwf	___lwmod@dividend,f,c
  5546  00E796  500B               	movf	___lwmod@divisor+1,w,c
  5547  00E798  5A09               	subwfb	___lwmod@dividend+1,f,c
  5548  00E79A  D000               	goto	l1997
  5549  00E79C                     l1997:
  5550  00E79C  90D8               	bcf	status,0,c
  5551  00E79E  320B               	rrcf	___lwmod@divisor+1,f,c
  5552  00E7A0  320A               	rrcf	___lwmod@divisor,f,c
  5553  00E7A2  2E0C               	decfsz	___lwmod@counter,f,c
  5554  00E7A4  D7F0               	goto	l1993
  5555  00E7A6  D000               	goto	l937
  5556  00E7A8                     l937:
  5557  00E7A8  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5558  00E7AC  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5559  00E7B0  0012               	return		;funcret
  5560  00E7B2                     __end_of___lwmod:
  5561                           	opt stack 0
  5562                           tosu	equ	0xFFF
  5563                           tosh	equ	0xFFE
  5564                           tosl	equ	0xFFD
  5565                           pclath	equ	0xFFA
  5566                           tblptru	equ	0xFF8
  5567                           tblptrh	equ	0xFF7
  5568                           tblptrl	equ	0xFF6
  5569                           tablat	equ	0xFF5
  5570                           prodh	equ	0xFF4
  5571                           prodl	equ	0xFF3
  5572                           intcon	equ	0xFF2
  5573                           indf0	equ	0xFEF
  5574                           postinc0	equ	0xFEE
  5575                           fsr0h	equ	0xFEA
  5576                           fsr0l	equ	0xFE9
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function ___lwdiv *****************
  5588 ;; Defined at:
  5589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  dividend        2    0[COMRAM] unsigned int 
  5592 ;;  divisor         2    2[COMRAM] unsigned int 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  quotient        2    4[COMRAM] unsigned int 
  5595 ;;  counter         1    6[COMRAM] unsigned char 
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  2    0[COMRAM] unsigned int 
  5598 ;; Registers used:
  5599 ;;		wreg, status,2, status,0
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5606 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5608 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5609 ;;Total ram usage:        7 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; This function calls:
  5612 ;;		Nothing
  5613 ;; This function is called by:
  5614 ;;		__doprnt
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           	psect	text22
  5619  00E800                     __ptext22:
  5620                           	opt stack 0
  5621  00E800                     ___lwdiv:
  5622                           	opt stack 28
  5623                           
  5624                           ;incstack = 0
  5625  00E800  0E00               	movlw	0
  5626  00E802  6E06               	movwf	___lwdiv@quotient+1,c
  5627  00E804  0E00               	movlw	0
  5628  00E806  6E05               	movwf	___lwdiv@quotient,c
  5629  00E808  5003               	movf	___lwdiv@divisor,w,c
  5630  00E80A  1004               	iorwf	___lwdiv@divisor+1,w,c
  5631  00E80C  B4D8               	btfsc	status,2,c
  5632  00E80E  D021               	goto	l927
  5633  00E810  0E01               	movlw	1
  5634  00E812  6E07               	movwf	___lwdiv@counter,c
  5635  00E814  D005               	goto	l1971
  5636  00E816                     l1969:
  5637  00E816  90D8               	bcf	status,0,c
  5638  00E818  3603               	rlcf	___lwdiv@divisor,f,c
  5639  00E81A  3604               	rlcf	___lwdiv@divisor+1,f,c
  5640  00E81C  2A07               	incf	___lwdiv@counter,f,c
  5641  00E81E  D000               	goto	l1971
  5642  00E820                     l1971:
  5643  00E820  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5644  00E822  D002               	goto	l1973
  5645  00E824  D7F8               	goto	l1969
  5646  00E826  D000               	goto	l1973
  5647  00E828                     l1973:
  5648  00E828  90D8               	bcf	status,0,c
  5649  00E82A  3605               	rlcf	___lwdiv@quotient,f,c
  5650  00E82C  3606               	rlcf	___lwdiv@quotient+1,f,c
  5651  00E82E  5003               	movf	___lwdiv@divisor,w,c
  5652  00E830  5C01               	subwf	___lwdiv@dividend,w,c
  5653  00E832  5004               	movf	___lwdiv@divisor+1,w,c
  5654  00E834  5802               	subwfb	___lwdiv@dividend+1,w,c
  5655  00E836  A0D8               	btfss	status,0,c
  5656  00E838  D006               	goto	l1981
  5657  00E83A  5003               	movf	___lwdiv@divisor,w,c
  5658  00E83C  5E01               	subwf	___lwdiv@dividend,f,c
  5659  00E83E  5004               	movf	___lwdiv@divisor+1,w,c
  5660  00E840  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5661  00E842  8005               	bsf	___lwdiv@quotient,0,c
  5662  00E844  D000               	goto	l1981
  5663  00E846                     l1981:
  5664  00E846  90D8               	bcf	status,0,c
  5665  00E848  3204               	rrcf	___lwdiv@divisor+1,f,c
  5666  00E84A  3203               	rrcf	___lwdiv@divisor,f,c
  5667  00E84C  2E07               	decfsz	___lwdiv@counter,f,c
  5668  00E84E  D7EC               	goto	l1973
  5669  00E850  D000               	goto	l927
  5670  00E852                     l927:
  5671  00E852  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5672  00E856  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5673  00E85A  0012               	return		;funcret
  5674  00E85C                     __end_of___lwdiv:
  5675                           	opt stack 0
  5676                           tosu	equ	0xFFF
  5677                           tosh	equ	0xFFE
  5678                           tosl	equ	0xFFD
  5679                           pclath	equ	0xFFA
  5680                           tblptru	equ	0xFF8
  5681                           tblptrh	equ	0xFF7
  5682                           tblptrl	equ	0xFF6
  5683                           tablat	equ	0xFF5
  5684                           prodh	equ	0xFF4
  5685                           prodl	equ	0xFF3
  5686                           intcon	equ	0xFF2
  5687                           indf0	equ	0xFEF
  5688                           postinc0	equ	0xFEE
  5689                           fsr0h	equ	0xFEA
  5690                           fsr0l	equ	0xFE9
  5691                           wreg	equ	0xFE8
  5692                           postdec1	equ	0xFE5
  5693                           fsr1l	equ	0xFE1
  5694                           indf2	equ	0xFDF
  5695                           postinc2	equ	0xFDE
  5696                           postdec2	equ	0xFDD
  5697                           fsr2h	equ	0xFDA
  5698                           fsr2l	equ	0xFD9
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _Lcd_Init *****************
  5702 ;; Defined at:
  5703 ;;		line 42 in file "../lcd.h"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;		None
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  data            1    4[COMRAM] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5721 ;;Total ram usage:        2 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    1
  5724 ;; This function calls:
  5725 ;;		_Lcd_Cmd
  5726 ;; This function is called by:
  5727 ;;		_main
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text23
  5732  00EC7C                     __ptext23:
  5733                           	opt stack 0
  5734  00EC7C                     _Lcd_Init:
  5735                           	opt stack 29
  5736                           
  5737                           ;lcd.h: 43: unsigned char data;
  5738                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  5739                           
  5740                           ;incstack = 0
  5741  00EC7C  9093               	bcf	3987,0,c	;volatile
  5742                           
  5743                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  5744  00EC7E  9293               	bcf	3987,1,c	;volatile
  5745                           
  5746                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  5747  00EC80  9493               	bcf	3987,2,c	;volatile
  5748                           
  5749                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  5750  00EC82  9693               	bcf	3987,3,c	;volatile
  5751                           
  5752                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  5753  00EC84  9893               	bcf	3987,4,c	;volatile
  5754                           
  5755                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  5756  00EC86  9A93               	bcf	3987,5,c	;volatile
  5757                           
  5758                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  5759  00EC88  908A               	bcf	3978,0,c	;volatile
  5760                           
  5761                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  5762  00EC8A  928A               	bcf	3978,1,c	;volatile
  5763                           
  5764                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  5765  00EC8C  948A               	bcf	3978,2,c	;volatile
  5766                           
  5767                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  5768  00EC8E  968A               	bcf	3978,3,c	;volatile
  5769                           
  5770                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  5771  00EC90  988A               	bcf	3978,4,c	;volatile
  5772                           
  5773                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  5774  00EC92  9A8A               	bcf	3978,5,c	;volatile
  5775                           
  5776                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5777  00EC94  0E0F               	movlw	15
  5778  00EC96  6E04               	movwf	??_Lcd_Init& (0+255),c
  5779  00EC98  0E48               	movlw	72
  5780  00EC9A                     u2547:
  5781  00EC9A  2EE8               	decfsz	wreg,f,c
  5782  00EC9C  D7FE               	goto	u2547
  5783  00EC9E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5784  00ECA0  D7FC               	goto	u2547
  5785                           
  5786                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5787  00ECA2  0E0F               	movlw	15
  5788  00ECA4  6E04               	movwf	??_Lcd_Init& (0+255),c
  5789  00ECA6  0E48               	movlw	72
  5790  00ECA8                     u2557:
  5791  00ECA8  2EE8               	decfsz	wreg,f,c
  5792  00ECAA  D7FE               	goto	u2557
  5793  00ECAC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5794  00ECAE  D7FC               	goto	u2557
  5795                           
  5796                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5797  00ECB0  0E0F               	movlw	15
  5798  00ECB2  6E04               	movwf	??_Lcd_Init& (0+255),c
  5799  00ECB4  0E48               	movlw	72
  5800  00ECB6                     u2567:
  5801  00ECB6  2EE8               	decfsz	wreg,f,c
  5802  00ECB8  D7FE               	goto	u2567
  5803  00ECBA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5804  00ECBC  D7FC               	goto	u2567
  5805                           
  5806                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5807  00ECBE  0E0F               	movlw	15
  5808  00ECC0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5809  00ECC2  0E48               	movlw	72
  5810  00ECC4                     u2577:
  5811  00ECC4  2EE8               	decfsz	wreg,f,c
  5812  00ECC6  D7FE               	goto	u2577
  5813  00ECC8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5814  00ECCA  D7FC               	goto	u2577
  5815                           
  5816                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5817  00ECCC  0E0F               	movlw	15
  5818  00ECCE  6E04               	movwf	??_Lcd_Init& (0+255),c
  5819  00ECD0  0E48               	movlw	72
  5820  00ECD2                     u2587:
  5821  00ECD2  2EE8               	decfsz	wreg,f,c
  5822  00ECD4  D7FE               	goto	u2587
  5823  00ECD6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5824  00ECD8  D7FC               	goto	u2587
  5825                           
  5826                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5827  00ECDA  0E0F               	movlw	15
  5828  00ECDC  6E04               	movwf	??_Lcd_Init& (0+255),c
  5829  00ECDE  0E48               	movlw	72
  5830  00ECE0                     u2597:
  5831  00ECE0  2EE8               	decfsz	wreg,f,c
  5832  00ECE2  D7FE               	goto	u2597
  5833  00ECE4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5834  00ECE6  D7FC               	goto	u2597
  5835                           
  5836                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5837  00ECE8  0E01               	movlw	1
  5838  00ECEA  6E05               	movwf	Lcd_Init@data,c
  5839  00ECEC  D01F               	goto	L5
  5840  00ECEE  D021               	goto	l74
  5841  00ECF0                     l73:
  5842                           
  5843                           ;lcd.h: 63: {
  5844                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5845  00ECF0  908A               	bcf	3978,0,c	;volatile
  5846  00ECF2  928A               	bcf	3978,1,c	;volatile
  5847  00ECF4  848A               	bsf	3978,2,c	;volatile
  5848  00ECF6  868A               	bsf	3978,3,c	;volatile
  5849  00ECF8  988A               	bcf	3978,4,c	;volatile
  5850                           
  5851                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5852  00ECFA  9A8A               	bcf	3978,5,c	;volatile
  5853  00ECFC  908A               	bcf	3978,0,c	;volatile
  5854  00ECFE  928A               	bcf	3978,1,c	;volatile
  5855  00ED00  848A               	bsf	3978,2,c	;volatile
  5856  00ED02  868A               	bsf	3978,3,c	;volatile
  5857                           
  5858                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5859  00ED04  888A               	bsf	3978,4,c	;volatile
  5860  00ED06  9A8A               	bcf	3978,5,c	;volatile
  5861                           
  5862                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5863  00ED08  0E03               	movlw	3
  5864  00ED0A                     u2607:
  5865  00ED0A  2EE8               	decfsz	wreg,f,c
  5866  00ED0C  D7FE               	goto	u2607
  5867  00ED0E  F000               	nop	
  5868                           
  5869                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5870  00ED10  908A               	bcf	3978,0,c	;volatile
  5871  00ED12  928A               	bcf	3978,1,c	;volatile
  5872  00ED14  848A               	bsf	3978,2,c	;volatile
  5873  00ED16  868A               	bsf	3978,3,c	;volatile
  5874  00ED18  988A               	bcf	3978,4,c	;volatile
  5875                           
  5876                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5877  00ED1A  9A8A               	bcf	3978,5,c	;volatile
  5878                           
  5879                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5880  00ED1C  0E0F               	movlw	15
  5881  00ED1E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5882  00ED20  0E48               	movlw	72
  5883  00ED22                     u2617:
  5884  00ED22  2EE8               	decfsz	wreg,f,c
  5885  00ED24  D7FE               	goto	u2617
  5886  00ED26  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5887  00ED28  D7FC               	goto	u2617
  5888  00ED2A  2A05               	incf	Lcd_Init@data,f,c
  5889  00ED2C                     L5:
  5890  00ED2C  0E03               	movlw	3
  5891  00ED2E  6405               	cpfsgt	Lcd_Init@data,c
  5892  00ED30  D7DF               	goto	l73
  5893  00ED32                     l74:
  5894                           
  5895                           ;lcd.h: 71: }
  5896                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5897  00ED32  908A               	bcf	3978,0,c	;volatile
  5898  00ED34  928A               	bcf	3978,1,c	;volatile
  5899  00ED36  848A               	bsf	3978,2,c	;volatile
  5900  00ED38  968A               	bcf	3978,3,c	;volatile
  5901  00ED3A  988A               	bcf	3978,4,c	;volatile
  5902  00ED3C  9A8A               	bcf	3978,5,c	;volatile
  5903                           
  5904                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5905  00ED3E  908A               	bcf	3978,0,c	;volatile
  5906  00ED40  928A               	bcf	3978,1,c	;volatile
  5907  00ED42  848A               	bsf	3978,2,c	;volatile
  5908  00ED44  968A               	bcf	3978,3,c	;volatile
  5909  00ED46  888A               	bsf	3978,4,c	;volatile
  5910  00ED48  9A8A               	bcf	3978,5,c	;volatile
  5911                           
  5912                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5913  00ED4A  0E03               	movlw	3
  5914  00ED4C                     u2627:
  5915  00ED4C  2EE8               	decfsz	wreg,f,c
  5916  00ED4E  D7FE               	goto	u2627
  5917  00ED50  F000               	nop	
  5918                           
  5919                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5920  00ED52  908A               	bcf	3978,0,c	;volatile
  5921  00ED54  928A               	bcf	3978,1,c	;volatile
  5922  00ED56  848A               	bsf	3978,2,c	;volatile
  5923  00ED58  968A               	bcf	3978,3,c	;volatile
  5924  00ED5A  988A               	bcf	3978,4,c	;volatile
  5925  00ED5C  9A8A               	bcf	3978,5,c	;volatile
  5926                           
  5927                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5928  00ED5E  0E0F               	movlw	15
  5929  00ED60  6E04               	movwf	??_Lcd_Init& (0+255),c
  5930  00ED62  0E48               	movlw	72
  5931  00ED64                     u2637:
  5932  00ED64  2EE8               	decfsz	wreg,f,c
  5933  00ED66  D7FE               	goto	u2637
  5934  00ED68  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5935  00ED6A  D7FC               	goto	u2637
  5936                           
  5937                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5938  00ED6C  0E28               	movlw	40
  5939  00ED6E  6E05               	movwf	Lcd_Init@data,c
  5940  00ED70  5005               	movf	Lcd_Init@data,w,c
  5941  00ED72  EC5A  F077         	call	_Lcd_Cmd
  5942                           
  5943                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  5944  00ED76  0E10               	movlw	16
  5945  00ED78  6E05               	movwf	Lcd_Init@data,c
  5946  00ED7A  5005               	movf	Lcd_Init@data,w,c
  5947  00ED7C  EC5A  F077         	call	_Lcd_Cmd
  5948                           
  5949                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  5950  00ED80  0E01               	movlw	1
  5951  00ED82  6E05               	movwf	Lcd_Init@data,c
  5952  00ED84  5005               	movf	Lcd_Init@data,w,c
  5953  00ED86  EC5A  F077         	call	_Lcd_Cmd
  5954                           
  5955                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  5956  00ED8A  0E0F               	movlw	15
  5957  00ED8C  6E05               	movwf	Lcd_Init@data,c
  5958  00ED8E  5005               	movf	Lcd_Init@data,w,c
  5959  00ED90  EC5A  F077         	call	_Lcd_Cmd
  5960  00ED94  0012               	return		;funcret
  5961  00ED96                     __end_of_Lcd_Init:
  5962                           	opt stack 0
  5963                           tosu	equ	0xFFF
  5964                           tosh	equ	0xFFE
  5965                           tosl	equ	0xFFD
  5966                           pclath	equ	0xFFA
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           indf0	equ	0xFEF
  5975                           postinc0	equ	0xFEE
  5976                           fsr0h	equ	0xFEA
  5977                           fsr0l	equ	0xFE9
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _Lcd_Cmd *****************
  5989 ;; Defined at:
  5990 ;;		line 140 in file "../lcd.h"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  data            1    wreg     unsigned char 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  data            1    2[COMRAM] unsigned char 
  5995 ;; Return value:  Size  Location     Type
  5996 ;;		None               void
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6007 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6008 ;;Total ram usage:        3 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; This function calls:
  6011 ;;		Nothing
  6012 ;; This function is called by:
  6013 ;;		_Lcd_Init
  6014 ;;		_Lcd_Out
  6015 ;;		_main
  6016 ;;		_Lcd_Out2
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text24
  6021  00EEB4                     __ptext24:
  6022                           	opt stack 0
  6023  00EEB4                     _Lcd_Cmd:
  6024                           	opt stack 28
  6025                           
  6026                           ;incstack = 0
  6027                           ;Lcd_Cmd@data stored from wreg
  6028  00EEB4  6E03               	movwf	Lcd_Cmd@data,c
  6029                           
  6030                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  6031  00EEB6  988A               	bcf	3978,4,c	;volatile
  6032  00EEB8  9A8A               	bcf	3978,5,c	;volatile
  6033                           
  6034                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  6035  00EEBA  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6036  00EEBC  AE03               	btfss	Lcd_Cmd@data,7,c
  6037  00EEBE  D001               	bra	u1605
  6038  00EEC0  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6039  00EEC2                     u1605:
  6040  00EEC2  0E01               	movlw	1
  6041  00EEC4  1601               	andwf	??_Lcd_Cmd,f,c
  6042  00EEC6  508A               	movf	3978,w,c	;volatile
  6043  00EEC8  1801               	xorwf	??_Lcd_Cmd,w,c
  6044  00EECA  0BFE               	andlw	-2
  6045  00EECC  1801               	xorwf	??_Lcd_Cmd,w,c
  6046  00EECE  6E8A               	movwf	3978,c	;volatile
  6047  00EED0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6048  00EED4  0E06               	movlw	6
  6049  00EED6  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6050  00EED8                     u1615:
  6051  00EED8  90D8               	bcf	status,0,c
  6052  00EEDA  3201               	rrcf	??_Lcd_Cmd,f,c
  6053  00EEDC  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6054  00EEDE  D7FC               	goto	u1615
  6055  00EEE0  0E01               	movlw	1
  6056  00EEE2  1601               	andwf	??_Lcd_Cmd,f,c
  6057  00EEE4  4601               	rlncf	??_Lcd_Cmd,f,c
  6058  00EEE6  508A               	movf	3978,w,c	;volatile
  6059  00EEE8  1801               	xorwf	??_Lcd_Cmd,w,c
  6060  00EEEA  0BFD               	andlw	-3
  6061  00EEEC  1801               	xorwf	??_Lcd_Cmd,w,c
  6062  00EEEE  6E8A               	movwf	3978,c	;volatile
  6063                           
  6064                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  6065  00EEF0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6066  00EEF4  0E05               	movlw	5
  6067  00EEF6  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6068  00EEF8                     u1625:
  6069  00EEF8  90D8               	bcf	status,0,c
  6070  00EEFA  3201               	rrcf	??_Lcd_Cmd,f,c
  6071  00EEFC  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6072  00EEFE  D7FC               	goto	u1625
  6073  00EF00  0E01               	movlw	1
  6074  00EF02  1601               	andwf	??_Lcd_Cmd,f,c
  6075  00EF04  4601               	rlncf	??_Lcd_Cmd,f,c
  6076  00EF06  4601               	rlncf	??_Lcd_Cmd,f,c
  6077  00EF08  508A               	movf	3978,w,c	;volatile
  6078  00EF0A  1801               	xorwf	??_Lcd_Cmd,w,c
  6079  00EF0C  0BFB               	andlw	-5
  6080  00EF0E  1801               	xorwf	??_Lcd_Cmd,w,c
  6081  00EF10  6E8A               	movwf	3978,c	;volatile
  6082  00EF12  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6083  00EF16  3A01               	swapf	??_Lcd_Cmd,f,c
  6084  00EF18  0E0F               	movlw	15
  6085  00EF1A  1601               	andwf	??_Lcd_Cmd,f,c
  6086  00EF1C  0E01               	movlw	1
  6087  00EF1E  1601               	andwf	??_Lcd_Cmd,f,c
  6088  00EF20  4601               	rlncf	??_Lcd_Cmd,f,c
  6089  00EF22  4601               	rlncf	??_Lcd_Cmd,f,c
  6090  00EF24  4601               	rlncf	??_Lcd_Cmd,f,c
  6091  00EF26  508A               	movf	3978,w,c	;volatile
  6092  00EF28  1801               	xorwf	??_Lcd_Cmd,w,c
  6093  00EF2A  0BF7               	andlw	-9
  6094  00EF2C  1801               	xorwf	??_Lcd_Cmd,w,c
  6095  00EF2E  6E8A               	movwf	3978,c	;volatile
  6096                           
  6097                           ;lcd.h: 144: _delay(10);
  6098  00EF30  0E03               	movlw	3
  6099  00EF32                     u2647:
  6100  00EF32  2EE8               	decfsz	wreg,f,c
  6101  00EF34  D7FE               	goto	u2647
  6102  00EF36  F000               	nop	
  6103                           
  6104                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6105  00EF38  888A               	bsf	3978,4,c	;volatile
  6106  00EF3A  0E03               	movlw	3
  6107  00EF3C                     u2657:
  6108  00EF3C  2EE8               	decfsz	wreg,f,c
  6109  00EF3E  D7FE               	goto	u2657
  6110  00EF40  F000               	nop	
  6111  00EF42  988A               	bcf	3978,4,c	;volatile
  6112                           
  6113                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  6114  00EF44  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6115  00EF48  90D8               	bcf	status,0,c
  6116  00EF4A  3201               	rrcf	??_Lcd_Cmd,f,c
  6117  00EF4C  90D8               	bcf	status,0,c
  6118  00EF4E  3201               	rrcf	??_Lcd_Cmd,f,c
  6119  00EF50  90D8               	bcf	status,0,c
  6120  00EF52  3201               	rrcf	??_Lcd_Cmd,f,c
  6121  00EF54  0E01               	movlw	1
  6122  00EF56  1601               	andwf	??_Lcd_Cmd,f,c
  6123  00EF58  508A               	movf	3978,w,c	;volatile
  6124  00EF5A  1801               	xorwf	??_Lcd_Cmd,w,c
  6125  00EF5C  0BFE               	andlw	-2
  6126  00EF5E  1801               	xorwf	??_Lcd_Cmd,w,c
  6127  00EF60  6E8A               	movwf	3978,c	;volatile
  6128  00EF62  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6129  00EF66  90D8               	bcf	status,0,c
  6130  00EF68  3201               	rrcf	??_Lcd_Cmd,f,c
  6131  00EF6A  90D8               	bcf	status,0,c
  6132  00EF6C  3201               	rrcf	??_Lcd_Cmd,f,c
  6133  00EF6E  0E01               	movlw	1
  6134  00EF70  1601               	andwf	??_Lcd_Cmd,f,c
  6135  00EF72  4601               	rlncf	??_Lcd_Cmd,f,c
  6136  00EF74  508A               	movf	3978,w,c	;volatile
  6137  00EF76  1801               	xorwf	??_Lcd_Cmd,w,c
  6138  00EF78  0BFD               	andlw	-3
  6139  00EF7A  1801               	xorwf	??_Lcd_Cmd,w,c
  6140  00EF7C  6E8A               	movwf	3978,c	;volatile
  6141                           
  6142                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  6143  00EF7E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6144  00EF82  90D8               	bcf	status,0,c
  6145  00EF84  3201               	rrcf	??_Lcd_Cmd,f,c
  6146  00EF86  0E01               	movlw	1
  6147  00EF88  1601               	andwf	??_Lcd_Cmd,f,c
  6148  00EF8A  4601               	rlncf	??_Lcd_Cmd,f,c
  6149  00EF8C  4601               	rlncf	??_Lcd_Cmd,f,c
  6150  00EF8E  508A               	movf	3978,w,c	;volatile
  6151  00EF90  1801               	xorwf	??_Lcd_Cmd,w,c
  6152  00EF92  0BFB               	andlw	-5
  6153  00EF94  1801               	xorwf	??_Lcd_Cmd,w,c
  6154  00EF96  6E8A               	movwf	3978,c	;volatile
  6155  00EF98  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6156  00EF9C  0E01               	movlw	1
  6157  00EF9E  1601               	andwf	??_Lcd_Cmd,f,c
  6158  00EFA0  4601               	rlncf	??_Lcd_Cmd,f,c
  6159  00EFA2  4601               	rlncf	??_Lcd_Cmd,f,c
  6160  00EFA4  4601               	rlncf	??_Lcd_Cmd,f,c
  6161  00EFA6  508A               	movf	3978,w,c	;volatile
  6162  00EFA8  1801               	xorwf	??_Lcd_Cmd,w,c
  6163  00EFAA  0BF7               	andlw	-9
  6164  00EFAC  1801               	xorwf	??_Lcd_Cmd,w,c
  6165  00EFAE  6E8A               	movwf	3978,c	;volatile
  6166                           
  6167                           ;lcd.h: 148: _delay(10);
  6168  00EFB0  0E03               	movlw	3
  6169  00EFB2                     u2667:
  6170  00EFB2  2EE8               	decfsz	wreg,f,c
  6171  00EFB4  D7FE               	goto	u2667
  6172  00EFB6  F000               	nop	
  6173                           
  6174                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6175  00EFB8  888A               	bsf	3978,4,c	;volatile
  6176  00EFBA  0E03               	movlw	3
  6177  00EFBC                     u2677:
  6178  00EFBC  2EE8               	decfsz	wreg,f,c
  6179  00EFBE  D7FE               	goto	u2677
  6180  00EFC0  F000               	nop	
  6181  00EFC2  988A               	bcf	3978,4,c	;volatile
  6182                           
  6183                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6184  00EFC4  0E0F               	movlw	15
  6185  00EFC6  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6186  00EFC8  0E48               	movlw	72
  6187  00EFCA                     u2687:
  6188  00EFCA  2EE8               	decfsz	wreg,f,c
  6189  00EFCC  D7FE               	goto	u2687
  6190  00EFCE  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6191  00EFD0  D7FC               	goto	u2687
  6192  00EFD2  0012               	return		;funcret
  6193  00EFD4                     __end_of_Lcd_Cmd:
  6194                           	opt stack 0
  6195                           tosu	equ	0xFFF
  6196                           tosh	equ	0xFFE
  6197                           tosl	equ	0xFFD
  6198                           pclath	equ	0xFFA
  6199                           tblptru	equ	0xFF8
  6200                           tblptrh	equ	0xFF7
  6201                           tblptrl	equ	0xFF6
  6202                           tablat	equ	0xFF5
  6203                           prodh	equ	0xFF4
  6204                           prodl	equ	0xFF3
  6205                           intcon	equ	0xFF2
  6206                           indf0	equ	0xFEF
  6207                           postinc0	equ	0xFEE
  6208                           fsr0h	equ	0xFEA
  6209                           fsr0l	equ	0xFE9
  6210                           wreg	equ	0xFE8
  6211                           postdec1	equ	0xFE5
  6212                           fsr1l	equ	0xFE1
  6213                           indf2	equ	0xFDF
  6214                           postinc2	equ	0xFDE
  6215                           postdec2	equ	0xFDD
  6216                           fsr2h	equ	0xFDA
  6217                           fsr2l	equ	0xFD9
  6218                           status	equ	0xFD8
  6219                           tosu	equ	0xFFF
  6220                           tosh	equ	0xFFE
  6221                           tosl	equ	0xFFD
  6222                           pclath	equ	0xFFA
  6223                           tblptru	equ	0xFF8
  6224                           tblptrh	equ	0xFF7
  6225                           tblptrl	equ	0xFF6
  6226                           tablat	equ	0xFF5
  6227                           prodh	equ	0xFF4
  6228                           prodl	equ	0xFF3
  6229                           intcon	equ	0xFF2
  6230                           indf0	equ	0xFEF
  6231                           postinc0	equ	0xFEE
  6232                           fsr0h	equ	0xFEA
  6233                           fsr0l	equ	0xFE9
  6234                           wreg	equ	0xFE8
  6235                           postdec1	equ	0xFE5
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           postdec2	equ	0xFDD
  6240                           fsr2h	equ	0xFDA
  6241                           fsr2l	equ	0xFD9
  6242                           status	equ	0xFD8
  6243                           
  6244                           	psect	text25
  6245  000000                     __ptext25:
  6246                           	opt stack 0
  6247                           tosu	equ	0xFFF
  6248                           tosh	equ	0xFFE
  6249                           tosl	equ	0xFFD
  6250                           pclath	equ	0xFFA
  6251                           tblptru	equ	0xFF8
  6252                           tblptrh	equ	0xFF7
  6253                           tblptrl	equ	0xFF6
  6254                           tablat	equ	0xFF5
  6255                           prodh	equ	0xFF4
  6256                           prodl	equ	0xFF3
  6257                           intcon	equ	0xFF2
  6258                           indf0	equ	0xFEF
  6259                           postinc0	equ	0xFEE
  6260                           fsr0h	equ	0xFEA
  6261                           fsr0l	equ	0xFE9
  6262                           wreg	equ	0xFE8
  6263                           postdec1	equ	0xFE5
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           postinc2	equ	0xFDE
  6267                           postdec2	equ	0xFDD
  6268                           fsr2h	equ	0xFDA
  6269                           fsr2l	equ	0xFD9
  6270                           status	equ	0xFD8
  6271                           
  6272                           	psect	rparam
  6273  0000                     tosu	equ	0xFFF
  6274                           tosh	equ	0xFFE
  6275                           tosl	equ	0xFFD
  6276                           pclath	equ	0xFFA
  6277                           tblptru	equ	0xFF8
  6278                           tblptrh	equ	0xFF7
  6279                           tblptrl	equ	0xFF6
  6280                           tablat	equ	0xFF5
  6281                           prodh	equ	0xFF4
  6282                           prodl	equ	0xFF3
  6283                           intcon	equ	0xFF2
  6284                           indf0	equ	0xFEF
  6285                           postinc0	equ	0xFEE
  6286                           fsr0h	equ	0xFEA
  6287                           fsr0l	equ	0xFE9
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        30
    BSS         68
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     90      95
    BANK0           160      0     106
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[3]), STR_19(CODE[3]), STR_17(CODE[3]), STR_15(CODE[3]), 
		 -> STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 65527
		 -> ROM(CODE[65527]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), NULL(NULL[0]), STR_23(CODE[7]), 
		 -> _doprnt@c(COMRAM[1]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    _doprnt@f	PTR const unsigned char  size(3) Largest target is 65527
		 -> ROM(CODE[65527]), STR_21(CODE[3]), STR_19(CODE[3]), STR_17(CODE[3]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_2(CODE[5]), 

    S1089__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> putch(), Absolute function(), 

    S1089__prbuf$ptr	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(3) Largest target is 65527
		 -> ROM(CODE[65527]), Convert_diasem@buffer_dia(COMRAM[20]), STR_6(CODE[21]), STR_5(CODE[20]), 
		 -> STR_4(CODE[18]), STR_3(CODE[19]), buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_ManejaMovimientos
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _ManejaMovimientos->_Lcd_Out
    _printf->__doprnt
    _Write_RTC->_RtccWriteDate
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   32655
                                             89 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                  _ManejaMovimientos
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0   11755
                                             80 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _ManejaMovimientos                                    9     9      0   11953
                                             80 COMRAM     9     9      0
                     _Convert_diasem
                            _Lcd_Out
                          _Write_RTC
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               9     6      3    2967
                                             34 COMRAM     9     6      3
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              6     2      4    1941
                                             74 COMRAM     6     2      4
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    4584
                                             50 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16     6     10    4239
                                             34 COMRAM    16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             26    19      7    2777
                                             12 COMRAM    22    15      7
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _ManejaMovimientos
     _Convert_diasem
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _V_Principal
     _Convert_diasem
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     __doprnt
       Absolute function(Fake) *
       ___lwdiv *
       ___lwmod *
         ___lwdiv (ARG)
       ___wmul *
       _isdigit *
       _putch *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6A       5       66.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5A      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C9       6        0.0%
DATA                 0      0      C9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 25 15:31:57 2020

            V_Principal@cte 0051                           _i 007C                          l73 ECF0  
                        l74 ED32                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                         l211 E68A                         l300 FDCA  
                       l242 F4D2                         l927 E852                         l937 E7A8  
 ManejaMovimientos@posicion 0058                         _dia 00B3                         _mes 00B9  
                       tosl 000FFD                         wreg 000FE8             RtccReadDate@pDt 0001  
                      l2011 F8AA                        l2021 F91E                        l2111 FC8C  
                      l2103 FC5E                        l2031 F958                        l2023 F92C  
                      l2121 FCC6                        l2017 F8F2                        l2131 FD44  
                      l2115 FCB0                        l2107 FC88                        l2051 FA30  
                      l2043 F9EC                        l2035 F97A                        l2141 FDB8  
                      l2133 FD4C                        l2125 FD06                        l2117 FCBA  
                      l2061 FA8C                        l2053 FA36                        l2029 F93E  
                      l2301 F2E6                        l2143 FDD0                        l2071 FB0C  
                      l2055 FA6C                        l2223 EBAE                        l2153 FE84  
                      l2137 FD8C                        l2129 FD32                        l2065 FACC  
                      l2049 FA26                        l2233 EBEC                        l2075 FB6A  
                      l2083 FBBE                        l2059 FA82                        l2155 FE90  
                      l2307 F302                        l2149 FE58                        l2085 FBD2  
                      l2077 FB70                        l2069 FAF8                        l2157 FEC0  
                      l2093 FBEA                        l2229 EBD8                        l2095 FC26  
                      l2343 F364                        l2271 EC64                        l2239 EC08  
                      l2431 E9A0                        l2423 E980                        l2351 E85C  
                      l2089 FBE4                        l2441 E9C6                        l2433 E9A8  
                      l2417 E96E                        l2099 FC52                        l2347 F370  
                      l2339 F358                        l2291 F298                        l2275 EC70  
                      l2267 EC58                        l2461 EA04                        l2429 E996  
                      l2445 E9D2                        l2455 E9F2                        l2473 EA62  
                      l2457 E9F8                        l2465 EA0C                        l2297 F2D2  
                      l2449 E9E2                        l2713 F438                        l2377 E8CA  
                      l2801 F786                        l2459 E9FE                        l2467 EA28  
                      l2731 F4BC                        l2811 F808                        l2581 EDD4  
                      l2469 EA30                        l2725 F488                        l2821 F876  
                      l2583 EDF2                        l2719 F462                        l2815 F83C  
                      l2807 F7D4                        l1953 E6BC                        l2585 EE10  
                      l2577 ED98                        l2593 EE6A                        l1971 E820  
                      l2587 EE2E                        l2579 EDB6                        l2595 EEA8  
                      l1981 E846                        l1973 E828                        l2589 EE4C  
                      l1991 E77E                        l1969 E816                        l1993 E786  
                      l2689 F3A0                        l2793 F74A                        l1997 E79C  
                      l1989 E774                        STR_1 FFB8                        STR_2 FFEF  
                      STR_3 FF93                        STR_4 FFA6                        STR_5 FF7F  
                      STR_6 FED7                        STR_7 FFCA                        STR_8 FFD9  
                      STR_9 FFF4                        u2100 F46A                        u2110 F46C  
                      u1400 FB68                        u1320 FA62                        u2040 F39E  
                      u1410 FBA8                        u2130 F490                        u2050 F3D0  
                      u2210 F78E                        u2140 F492                        u2060 F3D2  
                      u2300 F844                        u2220 F790                        u2310 F846  
                      u1407 FB5E                        u1327 FA58                        u2240 F7DC  
                      u1417 FB9E                        u2250 F7DE                        u1508 FCF2  
                      u2180 F756                        u1605 EEC2                        u2270 F810  
                      u2190 F758                        u1615 EED8                        u2407 F708  
                      u1368 FAB8                        u1288 F8DE                        u2280 F812  
                      u1625 EEF8                        u2417 F718                        u2507 F0D2  
                      u1635 EFE2                        u2427 F728                        u1548 FD78  
                      u2517 F0DC                        u1645 EFF8                        u2437 F738  
                      u2357 F6B8                        u1398 FB38                        u2607 ED0A  
                      u2527 F0E6                        u1655 F018                        u2447 F882  
                      u2367 F6C8                        u2617 ED22                        u2537 F0F2  
                      u2457 F898                        u2377 F6D8                        u1578 FE44  
                      u2627 ED4C                        u2547 EC9A                        u2467 E694  
                      u2387 F6E8                        u2637 ED64                        u2557 ECA8  
                      u2477 F3A6                        u2397 F6F8                        u2647 EF32  
                      u2567 ECB6                        u2487 F052                        u2657 EF3C  
                      u2577 ECC4                        u2497 F05C                        u2667 EFB2  
                      u2587 ECD2                        u1980 EA50                        u2677 EFBC  
                      u2597 ECE0                        u1990 EA82                        u2687 EFCA  
                      u1987 EA46                        u1997 EA78                        _anio 00B1  
                      _main F66A                        _hora 00B7                        fsr0h 000FEA  
                      indf0 000FEF                        fsr0l 000FE9                        fsr2h 000FDA  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
             __CFG_T1DIG$ON 000000                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000            RtccReadDate@rTD0 000B  
          RtccReadDate@rTD1 0003             __end_of_Lcd_Cmd EFD4             __end_of_Lcd_Out EA8A  
              ___param_bank 000010             RtccReadTime@pTm 0001                  _Lcd_Chr_CP EFD4  
             ??_V_Principal 0051               __CFG_PLLDIV$1 000000                       ?_main 0001  
           __end_of___awdiv E9EE                       STR_10 FF40                       STR_11 FFF4  
                     STR_20 FF55                       STR_12 FEEC                       STR_21 FFF4  
                     STR_13 FFF4                       STR_14 FF16                       STR_22 FF01  
                     STR_15 FFF4                       STR_23 FFE8                       STR_16 FF6A  
                     STR_17 FFF4                       STR_18 FF2B                       STR_19 FFF4  
           ___awdiv@divisor 0003             __end_of___lwdiv E85C             __end_of___lwmod E7B2  
           ___awdiv@counter 0005             __end_of__doprnt FECC                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94              __CFG_FCMEN$OFF 000000  
                     _Sw_Up 0086             __end_of_dpowers FED7                       _mes_d 00C4  
                     _mes_u 00C5             __end_of_isdigit E6C6                       _putch E652  
                     pclath 000FFA                       tablat 000FF5                  _CuentamSeg 0080  
__size_of_ManejaMovimientos 0158                       status 000FD8             __end_of_sprintf E800  
          __end_of_Lcd_Init ED96     __CFG_DSWDTOSC$INTOSCREF 000000             __initialization E72A  
              __end_of_main F8A8            RtccReadTime@rTD0 000B            RtccReadTime@rTD1 0003  
          __end_of_Read_RTC F236                      ??_main 005A               __activetblptr 000003  
       __end_of_V_Principal EB70            __end_of_RtccWrOn E666                      _ADCON0 000FC2  
                    _ADCON1 000FC1                      _ADRESH 000FC4                      _EECON2 000FA7  
                    _ANCON0 000F48                      _ANCON1 000F49            ___awdiv@dividend 0001  
                    ?_putch 0001              __CFG_WDTEN$OFF 000000             _lee_temperatura E684  
                 ??_Lcd_Cmd 0001            RtccWriteDate@pDt 0001                      _RTCCFG 000F3F  
                 ??_Lcd_Out 004F              __CFG_WPCFG$OFF 000000                      _Flag_1 0081  
            __CFG_WPDIS$OFF 000000                      _Grados 00AB              __CFG_XINST$OFF 000000  
               ?_Lcd_Chr_CP 0001                      ___wmul E6C6                   ??___awdiv 0005  
            __CFG_STVREN$ON 000000                      _diasem 00B5                      _anio_d 00BD  
                    _anio_u 00BE            ??_Convert_diasem 0035                   ??___lwdiv 0005  
                 ??___lwmod 000C                      _hora_d 00C2                      _hora_u 00C3  
                 ??__doprnt 0014                      clear_0 E730            ___awdiv@quotient 0007  
                    _minuto 00BB                __doprnt@flag 0018                      _printf E6EE  
     __end_of_RtccWriteDate F37C                __doprnt@prec 001B       __end_of_RtccWriteTime EC7C  
          RtccWriteTime@pTm 0001                   ??_isdigit 0001                __mediumconst FECC  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                    putch@c 0001                   ??_sprintf 002D                  __accesstop 0060  
   __end_of__initialization E760          __size_of_Write_RTC 0196               ___rparam_used 000001  
            __pcstackCOMRAM 0001                __pidataBANK0 E666                 _V_Principal EA8A  
             __end_of_putch E654             __CFG_DSWDTPS$G2 000000             __CFG_OSC$INTOSC 000000  
   __end_of_lee_temperatura E6A4                   ?_Lcd_Init 0001                  __doprnt@ap 0012  
                __doprnt@cp 001E                  __doprnt@pb 000D         __size_of_Lcd_Chr_CP 0128  
                   ??_putch 0001                  __pbssBANK0 0060                   ?_Read_RTC 0001  
                _dia_semana 00BF   RtccWriteTime@tempHourWDay 000A                   ?_RtccWrOn 0001  
                   ?___wmul 0001               ?_RtccReadDate 0001               ?_RtccReadTime 0001  
                   ?_printf 0023           __end_of_Write_RTC F66A                  ??_Lcd_Init 0004  
                   _RTCVALH 000F99                     _RTCVALL 000F98                  ??_Read_RTC 0013  
                   _Lcd_Cmd EEB4                     _Lcd_Out E9EE                     __Hparam 0000  
                   __Lparam 0000                     _Sw_Left 0084                     _Sw_Down 0083  
                ??_RtccWrOn 0001              ??_RtccReadDate 0003              ??_RtccReadTime 0003  
                   ___awdiv E958             __size_of___wmul 0028                     ___lwdiv E800  
                   ___lwmod E766                     __doprnt F8A8                 _RtccTimeVal 0078  
                   __pcinit E72A                     _fecha_d 00C0                     _fecha_u 00C1  
                   __ramtop 0F00                     __ptext0 F66A                     __ptext1 EA8A  
                   __ptext2 E684                     __ptext3 F0FC                     __ptext4 E85C  
                   __ptext5 E8CA                     __ptext6 F37C                     __ptext7 E6EE  
                   __ptext8 F4D4                     __ptext9 E958                     _buffer1 0087  
           __size_of_printf 003C                   _T1CONbits 000FCD                     _lectura 005B  
                   _dpowers FECD                     _isdigit E6A4                     _segundo 007E  
          ?_lee_temperatura 0001                     _sprintf E7B2               __doprnt@width 0020  
      end_of_initialization E760                     printf@f 0023                ??_Lcd_Chr_CP 0001  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                   _PORTAbits 000F80                   _PORTCbits 000F82  
          __CFG_DSBOREN$OFF 000000            __CFG_CPUDIV$OSC1 000000                   _TRISBbits 000F93  
        __end_of_Lcd_Chr_CP F0FC            __CFG_IOL1WAY$OFF 000000   RtccWriteDate@tempDayMonth 000A  
       __CFG_MSSP7B_EN$MSK7 000000                ?_V_Principal 0001              __end_of___wmul E6EE  
 RtccWriteDate@tempHourWDay 000C            __CFG_DSWDTEN$OFF 000000              __end_of_printf E72A  
       start_initialization E72A        __end_of_RtccReadDate E958               Lcd_Out@buffer 004C  
      __end_of_RtccReadTime E8CA           __size_of_Lcd_Init 011A        RtccWriteTime@wasAlrm 0006  
      RtccWriteTime@wasWrEn 0007      __size_of_RtccWriteDate 0146             RtccWriteDate@di 0003  
    __size_of_RtccWriteTime 010C           __size_of_Read_RTC 013A                   _Sw_Center 0082  
                 _Temp_prog 00AE                    ??___wmul 0005                 __doprnt@len 001C  
               __doprnt@val 0019                 __pdataBANK0 009F           __size_of_RtccWrOn 0012  
           RtccWriteTime@di 0003            __CFG_LPT1OSC$OFF 000000                    ??_printf 0026  
         Convert_diasem@dia 0033                 _ALRMCFGbits 000F91                 __pbssCOMRAM 005B  
   __size_of_Convert_diasem 011E                   _Write_RTC F4D4                _isdigit$2087 0002  
                  ?_Lcd_Cmd 0001                    ?_Lcd_Out 004B                   __doprnt@c 0022  
                 __doprnt@f 000F                   __pnvBANK0 00BD            ___lwdiv@dividend 0001  
             __pmediumconst FECC                    ?___awdiv 0001                    ?___lwdiv 0001  
                  ?___lwmod 0008                    ?__doprnt 000D     RtccWriteTime@tempMinSec 0008  
             _RtccWriteDate F236               _RtccWriteTime EB70                    ?_isdigit 0001  
      __CFG_RTCOSC$T1OSCREF 000000    ManejaMovimientos@anio_tr 0054    Convert_diasem@buffer_dia 0037  
                ?_Write_RTC 0001            ___lwdiv@quotient 0005                    ?_sprintf 0023  
            __size_of_putch 0002            _RtccAlrmTimeDate 0060              ___wmul@product 0005  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _PIE3bits 000FA3  
                 _segundo_d 00C8                   _segundo_u 00C9                    Lcd_Out@x 004B  
          __CFG_WDTPS$32768 000000                    Lcd_Out@y 004F          RtccWriteDate@wasOn 0005  
        _Rtcc_read_TimeDate 0070                Lcd_Init@data 0005              ?_RtccWriteDate 0001  
                _ADCON0bits 000FC2           ___wmul@multiplier 0001        __size_of_V_Principal 00E6  
            ?_RtccWriteTime 0001       __size_of_RtccReadDate 008E       __size_of_RtccReadTime 006E  
                  _Lcd_Init EC7C                   copy_data0 E754                    _Read_RTC F0FC  
  __size_of_lee_temperatura 0020            __size_of_Lcd_Cmd 0120            __size_of_Lcd_Out 009C  
                  __Hrparam 0000                    _RtccDate 005C                    __Lrparam 0000  
                  _RtccTime 009B                    _RtccWrOn E654                    _Sw_Right 0085  
              _RtccReadDate E8CA            __size_of___awdiv 0096                _RtccReadTime E85C  
          __size_of___lwdiv 005C            __size_of___lwmod 004C            __size_of__doprnt 0624  
            _posicionesLeft 009F                _RtccTimeDate 0068              _Convert_diasem ED96  
          __size_of_isdigit 0022              Lcd_Chr_CP@data 0003             ___lwdiv@divisor 0003  
               ??_Write_RTC 000E             ___lwdiv@counter 0007                    __ptext10 EB70  
                  __ptext11 F236                    __ptext20 E6C6                    __ptext12 E654  
                  __ptext21 E766                    __ptext13 E9EE                    __ptext22 E800  
                  __ptext14 EFD4                    __ptext23 EC7C                    __ptext15 ED96  
                  __ptext24 EEB4                    __ptext16 E7B2                    __ptext25 0000  
                  __ptext17 F8A8                    __ptext18 E652                    __ptext19 E6A4  
          __size_of_sprintf 004E     ManejaMovimientos@dia_tr 0055                 Lcd_Cmd@data 0003  
             __size_of_main 023E     ManejaMovimientos@mes_tr 0057                    _minuto_d 00C6  
                  _minuto_u 00C7             ??_RtccWriteDate 0004             ??_RtccWriteTime 0004  
    __end_of_Convert_diasem EEB4                 Lcd_Out@data 0050                 _OSCTUNEbits 000F9B  
                _INTCONbits 000FF2          RtccWriteTime@wasOn 0005                    isdigit@c 0003  
                 sprintf@ap 002D                   sprintf@pb 002F                   sprintf@wh 0023  
          ___lwmod@dividend 0008           _ManejaMovimientos F37C                  _OSCCONbits 000FD3  
        ?_ManejaMovimientos 0001       RtccWriteDate@tempYear 0007           ??_lee_temperatura 0001  
                  printf@ap 0026                    printf@pb 0028         ??_ManejaMovimientos 0051  
                _RTCCFGbits 000F3F                    sprintf@f 0025             ?_Convert_diasem 0033  
           ___lwmod@divisor 000A             ___lwmod@counter 000C        RtccWriteDate@wasAlrm 0006  
      RtccWriteDate@wasWrEn 0009  ManejaMovimientos@diasem_tr 0056   __end_of_ManejaMovimientos F4D4  
