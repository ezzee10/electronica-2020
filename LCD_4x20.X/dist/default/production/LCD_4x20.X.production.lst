

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 26 00:49:37 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  00E5CE                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _anio
    45  00E5CE  0014               	dw	20
    46                           
    47                           ;initializer for _dia
    48  00E5D0  0006               	dw	6
    49                           
    50                           ;initializer for _mes
    51  00E5D2  000B               	dw	11
    52                           
    53                           	psect	idataBANK0
    54  00E628                     __pidataBANK0:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _posicionesLeft
    58  00E628  0002               	dw	2
    59  00E62A  0000               	dw	0
    60  00E62C  0003               	dw	3
    61  00E62E  0000               	dw	0
    62  00E630  0003               	dw	3
    63  00E632  0003               	dw	3
    64  00E634  0003               	dw	3
    65  00E636  0006               	dw	6
    66  00E638  0004               	dw	4
    67  00E63A  0000               	dw	0
    68  00E63C  0004               	dw	4
    69  00E63E  0003               	dw	3
    70                           
    71                           ;initializer for _Grados
    72  00E640  00                 	db	0
    73  00E641  A0                 	db	160
    74  00E642  41                 	db	65
    75                           
    76                           ;initializer for _Temp_prog
    77  00E643  00                 	db	0
    78  00E644  B4                 	db	180
    79  00E645  41                 	db	65
    80                           
    81                           ;initializer for _hora
    82  00E646  0012               	dw	18
    83                           
    84                           ;initializer for _minuto
    85  00E648  0037               	dw	55
    86                           
    87                           	psect	mediumconst
    88  00FECC                     __pmediumconst:
    89                           	opt stack 0
    90  00FECC  00                 	db	0
    91  00FECD                     _dpowers:
    92                           	opt stack 0
    93  00FECD  0001               	dw	1
    94  00FECF  000A               	dw	10
    95  00FED1  0064               	dw	100
    96  00FED3  03E8               	dw	1000
    97  00FED5  2710               	dw	10000
    98  00FED7                     __end_of_dpowers:
    99                           	opt stack 0
   100  00FED7                     STR_6:
   101  00FED7  20                 	db	32
   102  00FED8  20                 	db	32
   103  00FED9  20                 	db	32
   104  00FEDA  20                 	db	32
   105  00FEDB  20                 	db	32
   106  00FEDC  20                 	db	32
   107  00FEDD  20                 	db	32
   108  00FEDE  20                 	db	32
   109  00FEDF  20                 	db	32
   110  00FEE0  20                 	db	32
   111  00FEE1  20                 	db	32
   112  00FEE2  20                 	db	32
   113  00FEE3  20                 	db	32
   114  00FEE4  20                 	db	32
   115  00FEE5  20                 	db	32
   116  00FEE6  20                 	db	32
   117  00FEE7  20                 	db	32
   118  00FEE8  20                 	db	32
   119  00FEE9  20                 	db	32
   120  00FEEA  20                 	db	32
   121  00FEEB  00                 	db	0
   122  00FEEC                     STR_12:
   123  00FEEC  4C                 	db	76	;'L'
   124  00FEED  75                 	db	117	;'u'
   125  00FEEE  6E                 	db	110	;'n'
   126  00FEEF  65                 	db	101	;'e'
   127  00FEF0  73                 	db	115	;'s'
   128  00FEF1  20                 	db	32
   129  00FEF2  20                 	db	32
   130  00FEF3  20                 	db	32
   131  00FEF4  20                 	db	32
   132  00FEF5  20                 	db	32
   133  00FEF6  20                 	db	32
   134  00FEF7  20                 	db	32
   135  00FEF8  20                 	db	32
   136  00FEF9  20                 	db	32
   137  00FEFA  20                 	db	32
   138  00FEFB  20                 	db	32
   139  00FEFC  20                 	db	32
   140  00FEFD  20                 	db	32
   141  00FEFE  20                 	db	32
   142  00FEFF  20                 	db	32
   143  00FF00  00                 	db	0
   144  00FF01                     STR_22:
   145  00FF01  53                 	db	83	;'S'
   146  00FF02  61                 	db	97	;'a'
   147  00FF03  62                 	db	98	;'b'
   148  00FF04  61                 	db	97	;'a'
   149  00FF05  64                 	db	100	;'d'
   150  00FF06  6F                 	db	111	;'o'
   151  00FF07  20                 	db	32
   152  00FF08  20                 	db	32
   153  00FF09  20                 	db	32
   154  00FF0A  20                 	db	32
   155  00FF0B  20                 	db	32
   156  00FF0C  20                 	db	32
   157  00FF0D  20                 	db	32
   158  00FF0E  20                 	db	32
   159  00FF0F  20                 	db	32
   160  00FF10  20                 	db	32
   161  00FF11  20                 	db	32
   162  00FF12  20                 	db	32
   163  00FF13  20                 	db	32
   164  00FF14  20                 	db	32
   165  00FF15  00                 	db	0
   166  00FF16                     STR_14:
   167  00FF16  4D                 	db	77	;'M'
   168  00FF17  61                 	db	97	;'a'
   169  00FF18  72                 	db	114	;'r'
   170  00FF19  74                 	db	116	;'t'
   171  00FF1A  65                 	db	101	;'e'
   172  00FF1B  73                 	db	115	;'s'
   173  00FF1C  20                 	db	32
   174  00FF1D  20                 	db	32
   175  00FF1E  20                 	db	32
   176  00FF1F  20                 	db	32
   177  00FF20  20                 	db	32
   178  00FF21  20                 	db	32
   179  00FF22  20                 	db	32
   180  00FF23  20                 	db	32
   181  00FF24  20                 	db	32
   182  00FF25  20                 	db	32
   183  00FF26  20                 	db	32
   184  00FF27  20                 	db	32
   185  00FF28  20                 	db	32
   186  00FF29  20                 	db	32
   187  00FF2A  00                 	db	0
   188  00FF2B                     STR_18:
   189  00FF2B  4A                 	db	74	;'J'
   190  00FF2C  75                 	db	117	;'u'
   191  00FF2D  65                 	db	101	;'e'
   192  00FF2E  76                 	db	118	;'v'
   193  00FF2F  65                 	db	101	;'e'
   194  00FF30  73                 	db	115	;'s'
   195  00FF31  20                 	db	32
   196  00FF32  20                 	db	32
   197  00FF33  20                 	db	32
   198  00FF34  20                 	db	32
   199  00FF35  20                 	db	32
   200  00FF36  20                 	db	32
   201  00FF37  20                 	db	32
   202  00FF38  20                 	db	32
   203  00FF39  20                 	db	32
   204  00FF3A  20                 	db	32
   205  00FF3B  20                 	db	32
   206  00FF3C  20                 	db	32
   207  00FF3D  20                 	db	32
   208  00FF3E  20                 	db	32
   209  00FF3F  00                 	db	0
   210  00FF40                     STR_10:
   211  00FF40  44                 	db	68	;'D'
   212  00FF41  6F                 	db	111	;'o'
   213  00FF42  6D                 	db	109	;'m'
   214  00FF43  69                 	db	105	;'i'
   215  00FF44  6E                 	db	110	;'n'
   216  00FF45  67                 	db	103	;'g'
   217  00FF46  6F                 	db	111	;'o'
   218  00FF47  20                 	db	32
   219  00FF48  20                 	db	32
   220  00FF49  20                 	db	32
   221  00FF4A  20                 	db	32
   222  00FF4B  20                 	db	32
   223  00FF4C  20                 	db	32
   224  00FF4D  20                 	db	32
   225  00FF4E  20                 	db	32
   226  00FF4F  20                 	db	32
   227  00FF50  20                 	db	32
   228  00FF51  20                 	db	32
   229  00FF52  20                 	db	32
   230  00FF53  20                 	db	32
   231  00FF54  00                 	db	0
   232  00FF55                     STR_20:
   233  00FF55  56                 	db	86	;'V'
   234  00FF56  69                 	db	105	;'i'
   235  00FF57  65                 	db	101	;'e'
   236  00FF58  72                 	db	114	;'r'
   237  00FF59  6E                 	db	110	;'n'
   238  00FF5A  65                 	db	101	;'e'
   239  00FF5B  73                 	db	115	;'s'
   240  00FF5C  20                 	db	32
   241  00FF5D  20                 	db	32
   242  00FF5E  20                 	db	32
   243  00FF5F  20                 	db	32
   244  00FF60  20                 	db	32
   245  00FF61  20                 	db	32
   246  00FF62  20                 	db	32
   247  00FF63  20                 	db	32
   248  00FF64  20                 	db	32
   249  00FF65  20                 	db	32
   250  00FF66  20                 	db	32
   251  00FF67  20                 	db	32
   252  00FF68  20                 	db	32
   253  00FF69  00                 	db	0
   254  00FF6A                     STR_16:
   255  00FF6A  4D                 	db	77	;'M'
   256  00FF6B  69                 	db	105	;'i'
   257  00FF6C  65                 	db	101	;'e'
   258  00FF6D  72                 	db	114	;'r'
   259  00FF6E  63                 	db	99	;'c'
   260  00FF6F  6F                 	db	111	;'o'
   261  00FF70  6C                 	db	108	;'l'
   262  00FF71  65                 	db	101	;'e'
   263  00FF72  73                 	db	115	;'s'
   264  00FF73  20                 	db	32
   265  00FF74  20                 	db	32
   266  00FF75  20                 	db	32
   267  00FF76  20                 	db	32
   268  00FF77  20                 	db	32
   269  00FF78  20                 	db	32
   270  00FF79  20                 	db	32
   271  00FF7A  20                 	db	32
   272  00FF7B  20                 	db	32
   273  00FF7C  20                 	db	32
   274  00FF7D  20                 	db	32
   275  00FF7E  00                 	db	0
   276  00FF7F                     STR_5:
   277  00FF7F  43                 	db	67	;'C'
   278  00FF80  45                 	db	69	;'E'
   279  00FF81  4E                 	db	78	;'N'
   280  00FF82  54                 	db	84	;'T'
   281  00FF83  45                 	db	69	;'E'
   282  00FF84  52                 	db	82	;'R'
   283  00FF85  20                 	db	32
   284  00FF86  20                 	db	32
   285  00FF87  20                 	db	32
   286  00FF88  20                 	db	32
   287  00FF89  20                 	db	32
   288  00FF8A  20                 	db	32
   289  00FF8B  20                 	db	32
   290  00FF8C  20                 	db	32
   291  00FF8D  20                 	db	32
   292  00FF8E  20                 	db	32
   293  00FF8F  20                 	db	32
   294  00FF90  20                 	db	32
   295  00FF91  20                 	db	32
   296  00FF92  00                 	db	0
   297  00FF93                     STR_3:
   298  00FF93  52                 	db	82	;'R'
   299  00FF94  49                 	db	73	;'I'
   300  00FF95  47                 	db	71	;'G'
   301  00FF96  48                 	db	72	;'H'
   302  00FF97  54                 	db	84	;'T'
   303  00FF98  20                 	db	32
   304  00FF99  20                 	db	32
   305  00FF9A  20                 	db	32
   306  00FF9B  20                 	db	32
   307  00FF9C  20                 	db	32
   308  00FF9D  20                 	db	32
   309  00FF9E  20                 	db	32
   310  00FF9F  20                 	db	32
   311  00FFA0  20                 	db	32
   312  00FFA1  20                 	db	32
   313  00FFA2  20                 	db	32
   314  00FFA3  20                 	db	32
   315  00FFA4  20                 	db	32
   316  00FFA5  00                 	db	0
   317  00FFA6                     STR_4:
   318  00FFA6  55                 	db	85	;'U'
   319  00FFA7  50                 	db	80	;'P'
   320  00FFA8  20                 	db	32
   321  00FFA9  20                 	db	32
   322  00FFAA  20                 	db	32
   323  00FFAB  20                 	db	32
   324  00FFAC  20                 	db	32
   325  00FFAD  20                 	db	32
   326  00FFAE  20                 	db	32
   327  00FFAF  20                 	db	32
   328  00FFB0  20                 	db	32
   329  00FFB1  20                 	db	32
   330  00FFB2  20                 	db	32
   331  00FFB3  20                 	db	32
   332  00FFB4  20                 	db	32
   333  00FFB5  20                 	db	32
   334  00FFB6  20                 	db	32
   335  00FFB7  00                 	db	0
   336  00FFB8                     STR_1:
   337  00FFB8  50                 	db	80	;'P'
   338  00FFB9  72                 	db	114	;'r'
   339  00FFBA  6F                 	db	111	;'o'
   340  00FFBB  67                 	db	103	;'g'
   341  00FFBC  72                 	db	114	;'r'
   342  00FFBD  61                 	db	97	;'a'
   343  00FFBE  6D                 	db	109	;'m'
   344  00FFBF  20                 	db	32
   345  00FFC0  64                 	db	100	;'d'
   346  00FFC1  65                 	db	101	;'e'
   347  00FFC2  6C                 	db	108	;'l'
   348  00FFC3  20                 	db	32
   349  00FFC4  72                 	db	114	;'r'
   350  00FFC5  65                 	db	101	;'e'
   351  00FFC6  6C                 	db	108	;'l'
   352  00FFC7  6F                 	db	111	;'o'
   353  00FFC8  6A                 	db	106	;'j'
   354  00FFC9  00                 	db	0
   355  00FFCA                     STR_7:
   356  00FFCA  25                 	db	37
   357  00FFCB  30                 	db	48	;'0'
   358  00FFCC  32                 	db	50	;'2'
   359  00FFCD  75                 	db	117	;'u'
   360  00FFCE  2F                 	db	47
   361  00FFCF  25                 	db	37
   362  00FFD0  30                 	db	48	;'0'
   363  00FFD1  32                 	db	50	;'2'
   364  00FFD2  75                 	db	117	;'u'
   365  00FFD3  2F                 	db	47
   366  00FFD4  25                 	db	37
   367  00FFD5  30                 	db	48	;'0'
   368  00FFD6  32                 	db	50	;'2'
   369  00FFD7  75                 	db	117	;'u'
   370  00FFD8  00                 	db	0
   371  00FFD9                     STR_8:
   372  00FFD9  25                 	db	37
   373  00FFDA  30                 	db	48	;'0'
   374  00FFDB  32                 	db	50	;'2'
   375  00FFDC  75                 	db	117	;'u'
   376  00FFDD  3A                 	db	58	;':'
   377  00FFDE  25                 	db	37
   378  00FFDF  30                 	db	48	;'0'
   379  00FFE0  32                 	db	50	;'2'
   380  00FFE1  75                 	db	117	;'u'
   381  00FFE2  3A                 	db	58	;':'
   382  00FFE3  25                 	db	37
   383  00FFE4  30                 	db	48	;'0'
   384  00FFE5  32                 	db	50	;'2'
   385  00FFE6  75                 	db	117	;'u'
   386  00FFE7  00                 	db	0
   387  00FFE8                     STR_48:
   388  00FFE8  28                 	db	40
   389  00FFE9  6E                 	db	110	;'n'
   390  00FFEA  75                 	db	117	;'u'
   391  00FFEB  6C                 	db	108	;'l'
   392  00FFEC  6C                 	db	108	;'l'
   393  00FFED  29                 	db	41
   394  00FFEE  00                 	db	0
   395  00FFEF                     STR_2:
   396  00FFEF  25                 	db	37
   397  00FFF0  30                 	db	48	;'0'
   398  00FFF1  33                 	db	51	;'3'
   399  00FFF2  75                 	db	117	;'u'
   400  00FFF3  00                 	db	0
   401  00FFF4                     STR_9:
   402  00FFF4  25                 	db	37
   403  00FFF5  73                 	db	115	;'s'
   404  00FFF6  00                 	db	0
   405  0000                     
   406                           ; #config settings
   407  00FFF7  00                 	db	0	; dummy byte at the end
   408  0000                     
   409                           	psect	nvBANK0
   410  0000BE                     __pnvBANK0:
   411                           	opt stack 0
   412  0000BE                     _anio_d:
   413                           	opt stack 0
   414  0000BE                     	ds	1
   415  0000BF                     _anio_u:
   416                           	opt stack 0
   417  0000BF                     	ds	1
   418  0000C0                     _dia_semana:
   419                           	opt stack 0
   420  0000C0                     	ds	1
   421  0000C1                     _fecha_d:
   422                           	opt stack 0
   423  0000C1                     	ds	1
   424  0000C2                     _fecha_u:
   425                           	opt stack 0
   426  0000C2                     	ds	1
   427  0000C3                     _hora_d:
   428                           	opt stack 0
   429  0000C3                     	ds	1
   430  0000C4                     _hora_u:
   431                           	opt stack 0
   432  0000C4                     	ds	1
   433  0000C5                     _mes_d:
   434                           	opt stack 0
   435  0000C5                     	ds	1
   436  0000C6                     _mes_u:
   437                           	opt stack 0
   438  0000C6                     	ds	1
   439  0000C7                     _minuto_d:
   440                           	opt stack 0
   441  0000C7                     	ds	1
   442  0000C8                     _minuto_u:
   443                           	opt stack 0
   444  0000C8                     	ds	1
   445  0000C9                     _segundo_d:
   446                           	opt stack 0
   447  0000C9                     	ds	1
   448  0000CA                     _segundo_u:
   449                           	opt stack 0
   450  0000CA                     	ds	1
   451  0000                     _ANCON0	set	3912
   452  0000                     _ANCON1	set	3913
   453  0000                     _RTCCFG	set	3903
   454  0000                     _RTCCFGbits	set	3903
   455  0000                     _ADCON0	set	4034
   456  0000                     _ADCON0bits	set	4034
   457  0000                     _ADCON1	set	4033
   458  0000                     _ADRESH	set	4036
   459  0000                     _ALRMCFGbits	set	3985
   460  0000                     _EECON2	set	4007
   461  0000                     _INTCONbits	set	4082
   462  0000                     _LATAbits	set	3977
   463  0000                     _LATBbits	set	3978
   464  0000                     _OSCCONbits	set	4051
   465  0000                     _OSCTUNEbits	set	3995
   466  0000                     _PIE3bits	set	4003
   467  0000                     _PORTAbits	set	3968
   468  0000                     _PORTCbits	set	3970
   469  0000                     _RTCVALH	set	3993
   470  0000                     _RTCVALL	set	3992
   471  0000                     _T1CONbits	set	4045
   472  0000                     _TRISA	set	3986
   473  0000                     _TRISB	set	3987
   474  0000                     _TRISBbits	set	3987
   475  0000                     _TRISC	set	3988
   476                           
   477                           	psect	cinit
   478  00E71A                     __pcinit:
   479                           	opt stack 0
   480  00E71A                     start_initialization:
   481                           	opt stack 0
   482  00E71A                     __initialization:
   483                           	opt stack 0
   484                           
   485                           ; Clear objects allocated to BANK0 (60 bytes)
   486  00E71A  EE00  F060         	lfsr	0,__pbssBANK0
   487  00E71E  0E3C               	movlw	60
   488  00E720                     clear_0:
   489  00E720  6AEE               	clrf	postinc0,c
   490  00E722  06E8               	decf	wreg,f,c
   491  00E724  E1FD               	bnz	clear_0
   492                           
   493                           ; Clear objects allocated to COMRAM (10 bytes)
   494  00E726  EE00  F050         	lfsr	0,__pbssCOMRAM
   495  00E72A  0E0A               	movlw	10
   496  00E72C                     clear_1:
   497  00E72C  6AEE               	clrf	postinc0,c
   498  00E72E  06E8               	decf	wreg,f,c
   499  00E730  E1FD               	bnz	clear_1
   500                           
   501                           ; Initialize objects allocated to BANK0 (34 bytes)
   502                           ; load TBLPTR registers with __pidataBANK0
   503  00E732  0E28               	movlw	low __pidataBANK0
   504  00E734  6EF6               	movwf	tblptrl,c
   505  00E736  0EE6               	movlw	high __pidataBANK0
   506  00E738  6EF7               	movwf	tblptrh,c
   507  00E73A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   508  00E73C  6EF8               	movwf	tblptru,c
   509  00E73E  EE00  F09C         	lfsr	0,__pdataBANK0
   510  00E742  EE10 F022          	lfsr	1,34
   511  00E746                     copy_data0:
   512  00E746  0009               	tblrd		*+
   513  00E748  CFF5 FFEE          	movff	tablat,postinc0
   514  00E74C  50E5               	movf	postdec1,w,c
   515  00E74E  50E1               	movf	fsr1l,w,c
   516  00E750  E1FA               	bnz	copy_data0
   517                           
   518                           ; Initialize objects allocated to COMRAM (6 bytes)
   519                           ; load TBLPTR registers with __pidataCOMRAM
   520  00E752  0ECE               	movlw	low __pidataCOMRAM
   521  00E754  6EF6               	movwf	tblptrl,c
   522  00E756  0EE5               	movlw	high __pidataCOMRAM
   523  00E758  6EF7               	movwf	tblptrh,c
   524  00E75A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   525  00E75C  6EF8               	movwf	tblptru,c
   526  00E75E  EE00  F05A         	lfsr	0,__pdataCOMRAM
   527  00E762  EE10 F006          	lfsr	1,6
   528  00E766                     copy_data1:
   529  00E766  0009               	tblrd		*+
   530  00E768  CFF5 FFEE          	movff	tablat,postinc0
   531  00E76C  50E5               	movf	postdec1,w,c
   532  00E76E  50E1               	movf	fsr1l,w,c
   533  00E770  E1FA               	bnz	copy_data1
   534  00E772                     end_of_initialization:
   535                           	opt stack 0
   536  00E772                     __end_of__initialization:
   537                           	opt stack 0
   538  00E772  0E00               	movlw	low (__Lmediumconst shr (0+16))
   539  00E774  6EF8               	movwf	tblptru,c
   540  00E776  0100               	movlb	0
   541  00E778  EFEE  F079         	goto	_main	;jump to C main() function
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1l	equ	0xFE1
   550                           
   551                           	psect	bssCOMRAM
   552  000050                     __pbssCOMRAM:
   553                           	opt stack 0
   554  000050                     _diasem:
   555                           	opt stack 0
   556  000050                     	ds	2
   557  000052                     _RtccDate:
   558                           	opt stack 0
   559  000052                     	ds	4
   560  000056                     _RtccTime:
   561                           	opt stack 0
   562  000056                     	ds	4
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataCOMRAM
   573  00005A                     __pdataCOMRAM:
   574                           	opt stack 0
   575  00005A                     _anio:
   576                           	opt stack 0
   577  00005A                     	ds	2
   578  00005C                     _dia:
   579                           	opt stack 0
   580  00005C                     	ds	2
   581  00005E                     _mes:
   582                           	opt stack 0
   583  00005E                     	ds	2
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssBANK0
   594  000060                     __pbssBANK0:
   595                           	opt stack 0
   596  000060                     _RtccAlrmTimeDate:
   597                           	opt stack 0
   598  000060                     	ds	8
   599  000068                     _RtccTimeDate:
   600                           	opt stack 0
   601  000068                     	ds	8
   602  000070                     _Rtcc_read_TimeDate:
   603                           	opt stack 0
   604  000070                     	ds	8
   605  000078                     _RtccTimeVal:
   606                           	opt stack 0
   607  000078                     	ds	4
   608  00007C                     _i:
   609                           	opt stack 0
   610  00007C                     	ds	2
   611  00007E                     _segundo:
   612                           	opt stack 0
   613  00007E                     	ds	2
   614  000080                     _CuentamSeg:
   615                           	opt stack 0
   616  000080                     	ds	1
   617  000081                     _Flag_1:
   618                           	opt stack 0
   619  000081                     	ds	1
   620  000082                     _Sw_Center:
   621                           	opt stack 0
   622  000082                     	ds	1
   623  000083                     _Sw_Down:
   624                           	opt stack 0
   625  000083                     	ds	1
   626  000084                     _Sw_Left:
   627                           	opt stack 0
   628  000084                     	ds	1
   629  000085                     _Sw_Right:
   630                           	opt stack 0
   631  000085                     	ds	1
   632  000086                     _Sw_Up:
   633                           	opt stack 0
   634  000086                     	ds	1
   635  000087                     _lectura:
   636                           	opt stack 0
   637  000087                     	ds	1
   638  000088                     _buffer1:
   639                           	opt stack 0
   640  000088                     	ds	20
   641                           tblptru	equ	0xFF8
   642                           tblptrh	equ	0xFF7
   643                           tblptrl	equ	0xFF6
   644                           tablat	equ	0xFF5
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1l	equ	0xFE1
   649                           
   650                           	psect	dataBANK0
   651  00009C                     __pdataBANK0:
   652                           	opt stack 0
   653  00009C                     _posicionesLeft:
   654                           	opt stack 0
   655  00009C                     	ds	24
   656  0000B4                     _Grados:
   657                           	opt stack 0
   658  0000B4                     	ds	3
   659  0000B7                     _Temp_prog:
   660                           	opt stack 0
   661  0000B7                     	ds	3
   662  0000BA                     _hora:
   663                           	opt stack 0
   664  0000BA                     	ds	2
   665  0000BC                     _minuto:
   666                           	opt stack 0
   667  0000BC                     	ds	2
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677                           	psect	cstackCOMRAM
   678  000001                     __pcstackCOMRAM:
   679                           	opt stack 0
   680  000001                     ??_Lcd_Cmd:
   681  000001                     ??_Lcd_Chr_CP:
   682  000001                     ??_lee_temperatura:
   683  000001                     ??_isdigit:
   684  000001                     ?___wmul:
   685                           	opt stack 0
   686  000001                     ?___awdiv:
   687                           	opt stack 0
   688  000001                     ?___lwdiv:
   689                           	opt stack 0
   690  000001                     RtccReadDate@pDt:
   691                           	opt stack 0
   692  000001                     RtccReadTime@pTm:
   693                           	opt stack 0
   694  000001                     RtccWriteDate@pDt:
   695                           	opt stack 0
   696  000001                     RtccWriteTime@pTm:
   697                           	opt stack 0
   698  000001                     ___wmul@multiplier:
   699                           	opt stack 0
   700  000001                     ___awdiv@dividend:
   701                           	opt stack 0
   702  000001                     ___lwdiv@dividend:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x0
   706  000001                     	ds	1
   707  000002                     _isdigit$2097:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x1
   711  000002                     	ds	1
   712  000003                     Lcd_Chr_CP@data:
   713                           	opt stack 0
   714  000003                     Lcd_Cmd@data:
   715                           	opt stack 0
   716  000003                     RtccWriteDate@di:
   717                           	opt stack 0
   718  000003                     RtccWriteTime@di:
   719                           	opt stack 0
   720  000003                     isdigit@c:
   721                           	opt stack 0
   722  000003                     ___wmul@multiplicand:
   723                           	opt stack 0
   724  000003                     ___awdiv@divisor:
   725                           	opt stack 0
   726  000003                     ___lwdiv@divisor:
   727                           	opt stack 0
   728  000003                     RtccReadDate@rTD1:
   729                           	opt stack 0
   730  000003                     RtccReadTime@rTD1:
   731                           	opt stack 0
   732                           
   733                           ; 8 bytes @ 0x2
   734  000003                     	ds	1
   735  000004                     ??_Lcd_Init:
   736                           
   737                           ; 0 bytes @ 0x3
   738  000004                     	ds	1
   739  000005                     Lcd_Init@data:
   740                           	opt stack 0
   741  000005                     RtccWriteDate@wasOn:
   742                           	opt stack 0
   743  000005                     RtccWriteTime@wasOn:
   744                           	opt stack 0
   745  000005                     ___awdiv@counter:
   746                           	opt stack 0
   747  000005                     ___wmul@product:
   748                           	opt stack 0
   749  000005                     ___lwdiv@quotient:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x4
   753  000005                     	ds	1
   754  000006                     RtccWriteDate@wasAlrm:
   755                           	opt stack 0
   756  000006                     RtccWriteTime@wasAlrm:
   757                           	opt stack 0
   758  000006                     ___awdiv@sign:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x5
   762  000006                     	ds	1
   763  000007                     RtccWriteTime@wasWrEn:
   764                           	opt stack 0
   765  000007                     ___lwdiv@counter:
   766                           	opt stack 0
   767  000007                     RtccWriteDate@tempYear:
   768                           	opt stack 0
   769  000007                     ___awdiv@quotient:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x6
   773  000007                     	ds	1
   774  000008                     ?___lwmod:
   775                           	opt stack 0
   776  000008                     RtccWriteTime@tempMinSec:
   777                           	opt stack 0
   778  000008                     ___lwmod@dividend:
   779                           	opt stack 0
   780                           
   781                           ; 2 bytes @ 0x7
   782  000008                     	ds	1
   783  000009                     RtccWriteDate@wasWrEn:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x8
   787  000009                     	ds	1
   788  00000A                     RtccWriteDate@tempDayMonth:
   789                           	opt stack 0
   790  00000A                     RtccWriteTime@tempHourWDay:
   791                           	opt stack 0
   792  00000A                     ___lwmod@divisor:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x9
   796  00000A                     	ds	1
   797  00000B                     RtccReadDate@rTD0:
   798                           	opt stack 0
   799  00000B                     RtccReadTime@rTD0:
   800                           	opt stack 0
   801                           
   802                           ; 8 bytes @ 0xA
   803  00000B                     	ds	1
   804  00000C                     ___lwmod@counter:
   805                           	opt stack 0
   806  00000C                     RtccWriteDate@tempHourWDay:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0xB
   810  00000C                     	ds	1
   811  00000D                     ?_sprintf:
   812                           	opt stack 0
   813  00000D                     sprintf@sp:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0xC
   817  00000D                     	ds	1
   818  00000E                     
   819                           ; 0 bytes @ 0xD
   820  00000E                     	ds	1
   821  00000F                     sprintf@f:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0xE
   825  00000F                     	ds	4
   826  000013                     
   827                           ; 0 bytes @ 0x12
   828  000013                     	ds	4
   829  000017                     ??_sprintf:
   830                           
   831                           ; 0 bytes @ 0x16
   832  000017                     	ds	4
   833  00001B                     sprintf@flag:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x1A
   837  00001B                     	ds	1
   838  00001C                     sprintf@val:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x1B
   842  00001C                     	ds	2
   843  00001E                     sprintf@prec:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x1D
   847  00001E                     	ds	1
   848  00001F                     sprintf@ap:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x1E
   852  00001F                     	ds	2
   853  000021                     sprintf@cp:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x20
   857  000021                     	ds	2
   858  000023                     sprintf@len:
   859                           	opt stack 0
   860                           
   861                           ; 2 bytes @ 0x22
   862  000023                     	ds	2
   863  000025                     sprintf@width:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0x24
   867  000025                     	ds	2
   868  000027                     sprintf@c:
   869                           	opt stack 0
   870                           
   871                           ; 1 bytes @ 0x26
   872  000027                     	ds	1
   873  000028                     ?_Convert_diasem:
   874                           	opt stack 0
   875  000028                     Convert_diasem@dia:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x27
   879  000028                     	ds	2
   880  00002A                     ??_Convert_diasem:
   881                           
   882                           ; 0 bytes @ 0x29
   883  00002A                     	ds	2
   884  00002C                     Convert_diasem@buffer_dia:
   885                           	opt stack 0
   886                           
   887                           ; 20 bytes @ 0x2B
   888  00002C                     	ds	20
   889  000040                     Lcd_Out@x:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x3F
   893  000040                     	ds	1
   894  000041                     Lcd_Out@buffer:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x40
   898  000041                     	ds	2
   899  000043                     Lcd_Out@y:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x42
   903  000043                     	ds	1
   904  000044                     Lcd_Out@data:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x43
   908  000044                     	ds	1
   909  000045                     ??_ManejaMovimientos:
   910  000045                     V_Principal@cte:
   911                           	opt stack 0
   912                           
   913                           ; 2 bytes @ 0x44
   914  000045                     	ds	2
   915  000047                     ManejaMovimientos@diasem_tr:
   916                           	opt stack 0
   917                           
   918                           ; 1 bytes @ 0x46
   919  000047                     	ds	1
   920  000048                     ManejaMovimientos@dia_tr:
   921                           	opt stack 0
   922                           
   923                           ; 1 bytes @ 0x47
   924  000048                     	ds	1
   925  000049                     ManejaMovimientos@mes_tr:
   926                           	opt stack 0
   927                           
   928                           ; 1 bytes @ 0x48
   929  000049                     	ds	1
   930  00004A                     ManejaMovimientos@anio_tr:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x49
   934  00004A                     	ds	1
   935  00004B                     ManejaMovimientos@hora_tr:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x4A
   939  00004B                     	ds	1
   940  00004C                     ManejaMovimientos@minuto_tr:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x4B
   944  00004C                     	ds	1
   945  00004D                     ManejaMovimientos@posicion:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x4C
   949  00004D                     	ds	2
   950  00004F                     ??_main:
   951                           
   952                           ; 0 bytes @ 0x4E
   953  00004F                     	ds	1
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           
   963 ;;
   964 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   965 ;;
   966 ;; *************** function _main *****************
   967 ;; Defined at:
   968 ;;		line 130 in file "../main.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;		None
   971 ;; Auto vars:     Size  Location     Type
   972 ;;		None
   973 ;; Return value:  Size  Location     Type
   974 ;;		None               void
   975 ;; Registers used:
   976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   977 ;; Tracked objects:
   978 ;;		On entry : 0/0
   979 ;;		On exit  : 0/0
   980 ;;		Unchanged: 0/0
   981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   985 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   986 ;;Total ram usage:        1 bytes
   987 ;; Hardware stack levels required when called:    4
   988 ;; This function calls:
   989 ;;		_Lcd_Cmd
   990 ;;		_Lcd_Init
   991 ;;		_Lcd_Out
   992 ;;		_ManejaMovimientos
   993 ;;		_V_Principal
   994 ;;		_Write_RTC
   995 ;;		_sprintf
   996 ;; This function is called by:
   997 ;;		Startup code after reset
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text0
  1002  00F3DC                     __ptext0:
  1003                           	opt stack 0
  1004  00F3DC                     _main:
  1005                           	opt stack 27
  1006                           
  1007                           ;main.c: 132: OSCTUNEbits.INTSRC=1;
  1008                           
  1009                           ;incstack = 0
  1010  00F3DC  8E9B               	bsf	3995,7,c	;volatile
  1011                           
  1012                           ;main.c: 133: OSCTUNEbits.PLLEN=0;
  1013  00F3DE  9C9B               	bcf	3995,6,c	;volatile
  1014                           
  1015                           ;main.c: 134: OSCCONbits.IRCF0=1;
  1016  00F3E0  88D3               	bsf	4051,4,c	;volatile
  1017                           
  1018                           ;main.c: 135: OSCCONbits.IRCF1=1;
  1019  00F3E2  8AD3               	bsf	4051,5,c	;volatile
  1020                           
  1021                           ;main.c: 136: OSCCONbits.IRCF2=1;
  1022  00F3E4  8CD3               	bsf	4051,6,c	;volatile
  1023                           
  1024                           ;main.c: 137: OSCCONbits.SCS0=0;
  1025  00F3E6  90D3               	bcf	4051,0,c	;volatile
  1026                           
  1027                           ;main.c: 138: OSCCONbits.SCS1=0;
  1028  00F3E8  92D3               	bcf	4051,1,c	;volatile
  1029                           
  1030                           ;main.c: 140: RTCCFGbits.RTCEN=1;
  1031  00F3EA  010F               	movlb	15	; () banked
  1032  00F3EC  8F3F               	bsf	63,7,b	;volatile
  1033                           
  1034                           ;main.c: 141: RTCCFGbits.RTCWREN=1;
  1035  00F3EE  010F               	movlb	15	; () banked
  1036  00F3F0  8B3F               	bsf	63,5,b	;volatile
  1037                           
  1038                           ;main.c: 142: T1CONbits.T1OSCEN=1;
  1039  00F3F2  86CD               	bsf	4045,3,c	;volatile
  1040                           
  1041                           ; BSR set to: 15
  1042                           ;main.c: 144: TRISA = 0b11111101;
  1043  00F3F4  0EFD               	movlw	253
  1044  00F3F6  6E92               	movwf	3986,c	;volatile
  1045                           
  1046                           ;main.c: 145: TRISB = 0;
  1047  00F3F8  0E00               	movlw	0
  1048  00F3FA  6E93               	movwf	3987,c	;volatile
  1049                           
  1050                           ; BSR set to: 15
  1051                           ;main.c: 146: TRISC = 0b11111111;
  1052  00F3FC  6894               	setf	3988,c	;volatile
  1053                           
  1054                           ; BSR set to: 15
  1055                           ;main.c: 147: ANCON0 = 0b11111111;
  1056  00F3FE  010F               	movlb	15	; () banked
  1057  00F400  6948               	setf	72,b	;volatile
  1058                           
  1059                           ;main.c: 148: ANCON1 = 0b11110111;
  1060  00F402  0EF7               	movlw	247
  1061  00F404  010F               	movlb	15	; () banked
  1062  00F406  6F49               	movwf	73,b	;volatile
  1063                           
  1064                           ;main.c: 149: ADCON0 = 0b00101111;
  1065  00F408  0E2F               	movlw	47
  1066  00F40A  6EC2               	movwf	4034,c	;volatile
  1067                           
  1068                           ;main.c: 150: ADCON1 = 0b00111001;
  1069  00F40C  0E39               	movlw	57
  1070  00F40E  6EC1               	movwf	4033,c	;volatile
  1071                           
  1072                           ; BSR set to: 15
  1073                           ;main.c: 152: Write_RTC();
  1074  00F410  EC29  F079         	call	_Write_RTC	;wreg free
  1075                           
  1076                           ;main.c: 153: Lcd_Init();
  1077  00F414  ECB6  F075         	call	_Lcd_Init	;wreg free
  1078                           
  1079                           ;main.c: 154: Lcd_Cmd(1);
  1080  00F418  0E01               	movlw	1
  1081  00F41A  ECD2  F076         	call	_Lcd_Cmd
  1082                           
  1083                           ;main.c: 155: Lcd_Cmd(12);
  1084  00F41E  0E0C               	movlw	12
  1085  00F420  ECD2  F076         	call	_Lcd_Cmd
  1086                           
  1087                           ;main.c: 164: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1088  00F424  0EFF               	movlw	255
  1089  00F426  6E4F               	movwf	??_main& (0+255),c
  1090  00F428  0E8A               	movlw	138
  1091  00F42A                     u2577:
  1092  00F42A  2EE8               	decfsz	wreg,f,c
  1093  00F42C  D7FE               	goto	u2577
  1094  00F42E  2E4F               	decfsz	??_main& (0+255),f,c
  1095  00F430  D7FC               	goto	u2577
  1096  00F432  D000               	nop2	
  1097  00F434  0EFF               	movlw	255
  1098  00F436  6E4F               	movwf	??_main& (0+255),c
  1099  00F438  0E8A               	movlw	138
  1100  00F43A                     u2587:
  1101  00F43A  2EE8               	decfsz	wreg,f,c
  1102  00F43C  D7FE               	goto	u2587
  1103  00F43E  2E4F               	decfsz	??_main& (0+255),f,c
  1104  00F440  D7FC               	goto	u2587
  1105  00F442  D000               	nop2	
  1106  00F444  0EFF               	movlw	255
  1107  00F446  6E4F               	movwf	??_main& (0+255),c
  1108  00F448  0E8A               	movlw	138
  1109  00F44A                     u2597:
  1110  00F44A  2EE8               	decfsz	wreg,f,c
  1111  00F44C  D7FE               	goto	u2597
  1112  00F44E  2E4F               	decfsz	??_main& (0+255),f,c
  1113  00F450  D7FC               	goto	u2597
  1114  00F452  D000               	nop2	
  1115  00F454  0EFF               	movlw	255
  1116  00F456  6E4F               	movwf	??_main& (0+255),c
  1117  00F458  0E8A               	movlw	138
  1118  00F45A                     u2607:
  1119  00F45A  2EE8               	decfsz	wreg,f,c
  1120  00F45C  D7FE               	goto	u2607
  1121  00F45E  2E4F               	decfsz	??_main& (0+255),f,c
  1122  00F460  D7FC               	goto	u2607
  1123  00F462  D000               	nop2	
  1124  00F464  0EFF               	movlw	255
  1125  00F466  6E4F               	movwf	??_main& (0+255),c
  1126  00F468  0E8A               	movlw	138
  1127  00F46A                     u2617:
  1128  00F46A  2EE8               	decfsz	wreg,f,c
  1129  00F46C  D7FE               	goto	u2617
  1130  00F46E  2E4F               	decfsz	??_main& (0+255),f,c
  1131  00F470  D7FC               	goto	u2617
  1132  00F472  D000               	nop2	
  1133  00F474  0EFF               	movlw	255
  1134  00F476  6E4F               	movwf	??_main& (0+255),c
  1135  00F478  0E8A               	movlw	138
  1136  00F47A                     u2627:
  1137  00F47A  2EE8               	decfsz	wreg,f,c
  1138  00F47C  D7FE               	goto	u2627
  1139  00F47E  2E4F               	decfsz	??_main& (0+255),f,c
  1140  00F480  D7FC               	goto	u2627
  1141  00F482  D000               	nop2	
  1142  00F484  0EFF               	movlw	255
  1143  00F486  6E4F               	movwf	??_main& (0+255),c
  1144  00F488  0E8A               	movlw	138
  1145  00F48A                     u2637:
  1146  00F48A  2EE8               	decfsz	wreg,f,c
  1147  00F48C  D7FE               	goto	u2637
  1148  00F48E  2E4F               	decfsz	??_main& (0+255),f,c
  1149  00F490  D7FC               	goto	u2637
  1150  00F492  D000               	nop2	
  1151  00F494  0EFF               	movlw	255
  1152  00F496  6E4F               	movwf	??_main& (0+255),c
  1153  00F498  0E8A               	movlw	138
  1154  00F49A                     u2647:
  1155  00F49A  2EE8               	decfsz	wreg,f,c
  1156  00F49C  D7FE               	goto	u2647
  1157  00F49E  2E4F               	decfsz	??_main& (0+255),f,c
  1158  00F4A0  D7FC               	goto	u2647
  1159  00F4A2  D000               	nop2	
  1160                           
  1161                           ;main.c: 165: Lcd_Cmd(1);
  1162  00F4A4  0E01               	movlw	1
  1163  00F4A6  ECD2  F076         	call	_Lcd_Cmd
  1164  00F4AA  D000               	goto	l2971
  1165  00F4AC                     l2971:
  1166                           
  1167                           ;main.c: 171: V_Principal();
  1168  00F4AC  ECD1  F074         	call	_V_Principal	;wreg free
  1169                           
  1170                           ;main.c: 172: if(Sw_Left = PORTAbits.RA0 == 0){
  1171  00F4B0  B080               	btfsc	3968,0,c	;volatile
  1172  00F4B2  D002               	goto	u2420
  1173  00F4B4  0E01               	movlw	1
  1174  00F4B6  D001               	goto	u2430
  1175  00F4B8                     u2420:
  1176  00F4B8  0E00               	movlw	0
  1177  00F4BA                     u2430:
  1178  00F4BA  0100               	movlb	0	; () banked
  1179  00F4BC  6F84               	movwf	_Sw_Left& (0+255),b
  1180  00F4BE  0100               	movlb	0	; () banked
  1181  00F4C0  5184               	movf	_Sw_Left& (0+255),w,b
  1182  00F4C2  B4D8               	btfsc	status,2,c
  1183  00F4C4  D00C               	goto	l2979
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;main.c: 176: Lcd_Out(1, 0, "Program del reloj");
  1187  00F4C6  0E00               	movlw	0
  1188  00F4C8  6E40               	movwf	Lcd_Out@x,c
  1189  00F4CA  0EB8               	movlw	low STR_1
  1190  00F4CC  6E41               	movwf	Lcd_Out@buffer,c
  1191  00F4CE  0EFF               	movlw	high STR_1
  1192  00F4D0  6E42               	movwf	Lcd_Out@buffer+1,c
  1193  00F4D2  0E01               	movlw	1
  1194  00F4D4  EC3C  F074         	call	_Lcd_Out
  1195                           
  1196                           ;main.c: 180: ManejaMovimientos();
  1197  00F4D8  EC89  F07C         	call	_ManejaMovimientos	;wreg free
  1198  00F4DC  D000               	goto	l2979
  1199  00F4DE                     l2979:
  1200                           
  1201                           ;main.c: 184: }
  1202                           ;main.c: 186: if(Sw_Down = PORTCbits.RC4 == 0){
  1203  00F4DE  B882               	btfsc	3970,4,c	;volatile
  1204  00F4E0  D002               	goto	u2450
  1205  00F4E2  0E01               	movlw	1
  1206  00F4E4  D001               	goto	u2460
  1207  00F4E6                     u2450:
  1208  00F4E6  0E00               	movlw	0
  1209  00F4E8                     u2460:
  1210  00F4E8  0100               	movlb	0	; () banked
  1211  00F4EA  6F83               	movwf	_Sw_Down& (0+255),b
  1212  00F4EC  0100               	movlb	0	; () banked
  1213  00F4EE  5183               	movf	_Sw_Down& (0+255),w,b
  1214  00F4F0  B4D8               	btfsc	status,2,c
  1215  00F4F2  D017               	goto	l2985
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 188: sprintf(buffer1,"%03u",lectura);
  1219  00F4F4  0E88               	movlw	low _buffer1
  1220  00F4F6  6E0D               	movwf	sprintf@sp,c
  1221  00F4F8  0E00               	movlw	high _buffer1
  1222  00F4FA  6E0E               	movwf	sprintf@sp+1,c
  1223  00F4FC  0EEF               	movlw	low STR_2
  1224  00F4FE  6E0F               	movwf	sprintf@f,c
  1225  00F500  0EFF               	movlw	high STR_2
  1226  00F502  6E10               	movwf	sprintf@f+1,c
  1227  00F504  C087  F011         	movff	_lectura,?_sprintf+4
  1228  00F508  6A12               	clrf	?_sprintf+5,c
  1229  00F50A  ECEC  F07A         	call	_sprintf	;wreg free
  1230                           
  1231                           ;main.c: 190: Lcd_Out(4,0,buffer1);
  1232  00F50E  0E00               	movlw	0
  1233  00F510  6E40               	movwf	Lcd_Out@x,c
  1234  00F512  0E88               	movlw	low _buffer1
  1235  00F514  6E41               	movwf	Lcd_Out@buffer,c
  1236  00F516  0E00               	movlw	high _buffer1
  1237  00F518  6E42               	movwf	Lcd_Out@buffer+1,c
  1238  00F51A  0E04               	movlw	4
  1239  00F51C  EC3C  F074         	call	_Lcd_Out
  1240  00F520  D000               	goto	l2985
  1241  00F522                     l2985:
  1242                           
  1243                           ;main.c: 191: }
  1244                           ;main.c: 193: if(Sw_Right = PORTAbits.RA2 == 0){
  1245  00F522  B480               	btfsc	3968,2,c	;volatile
  1246  00F524  D002               	goto	u2480
  1247  00F526  0E01               	movlw	1
  1248  00F528  D001               	goto	u2490
  1249  00F52A                     u2480:
  1250  00F52A  0E00               	movlw	0
  1251  00F52C                     u2490:
  1252  00F52C  0100               	movlb	0	; () banked
  1253  00F52E  6F85               	movwf	_Sw_Right& (0+255),b
  1254  00F530  0100               	movlb	0	; () banked
  1255  00F532  5185               	movf	_Sw_Right& (0+255),w,b
  1256  00F534  B4D8               	btfsc	status,2,c
  1257  00F536  D00A               	goto	l2989
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 194: Lcd_Out(3, 0, "RIGHT             ");
  1261  00F538  0E00               	movlw	0
  1262  00F53A  6E40               	movwf	Lcd_Out@x,c
  1263  00F53C  0E93               	movlw	low STR_3
  1264  00F53E  6E41               	movwf	Lcd_Out@buffer,c
  1265  00F540  0EFF               	movlw	high STR_3
  1266  00F542  6E42               	movwf	Lcd_Out@buffer+1,c
  1267  00F544  0E03               	movlw	3
  1268  00F546  EC3C  F074         	call	_Lcd_Out
  1269  00F54A  D000               	goto	l2989
  1270  00F54C                     l2989:
  1271                           
  1272                           ;main.c: 195: }
  1273                           ;main.c: 197: if(Sw_Up = PORTAbits.RA3 == 0){
  1274  00F54C  B680               	btfsc	3968,3,c	;volatile
  1275  00F54E  D002               	goto	u2510
  1276  00F550  0E01               	movlw	1
  1277  00F552  D001               	goto	u2520
  1278  00F554                     u2510:
  1279  00F554  0E00               	movlw	0
  1280  00F556                     u2520:
  1281  00F556  0100               	movlb	0	; () banked
  1282  00F558  6F86               	movwf	_Sw_Up& (0+255),b
  1283  00F55A  0100               	movlb	0	; () banked
  1284  00F55C  5186               	movf	_Sw_Up& (0+255),w,b
  1285  00F55E  B4D8               	btfsc	status,2,c
  1286  00F560  D00A               	goto	l2993
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 198: Lcd_Out(4, 0, "UP               ");
  1290  00F562  0E00               	movlw	0
  1291  00F564  6E40               	movwf	Lcd_Out@x,c
  1292  00F566  0EA6               	movlw	low STR_4
  1293  00F568  6E41               	movwf	Lcd_Out@buffer,c
  1294  00F56A  0EFF               	movlw	high STR_4
  1295  00F56C  6E42               	movwf	Lcd_Out@buffer+1,c
  1296  00F56E  0E04               	movlw	4
  1297  00F570  EC3C  F074         	call	_Lcd_Out
  1298  00F574  D000               	goto	l2993
  1299  00F576                     l2993:
  1300                           
  1301                           ;main.c: 199: }
  1302                           ;main.c: 201: if(Sw_Center = PORTAbits.RA5 == 0){
  1303  00F576  BA80               	btfsc	3968,5,c	;volatile
  1304  00F578  D002               	goto	u2540
  1305  00F57A  0E01               	movlw	1
  1306  00F57C  D001               	goto	u2550
  1307  00F57E                     u2540:
  1308  00F57E  0E00               	movlw	0
  1309  00F580                     u2550:
  1310  00F580  0100               	movlb	0	; () banked
  1311  00F582  6F82               	movwf	_Sw_Center& (0+255),b
  1312  00F584  0100               	movlb	0	; () banked
  1313  00F586  5182               	movf	_Sw_Center& (0+255),w,b
  1314  00F588  B4D8               	btfsc	status,2,c
  1315  00F58A  D00D               	goto	l2999
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 202: Lcd_Cmd(1);
  1319  00F58C  0E01               	movlw	1
  1320  00F58E  ECD2  F076         	call	_Lcd_Cmd
  1321                           
  1322                           ;main.c: 203: Lcd_Out(2, 0, "CENTER             ");
  1323  00F592  0E00               	movlw	0
  1324  00F594  6E40               	movwf	Lcd_Out@x,c
  1325  00F596  0E7F               	movlw	low STR_5
  1326  00F598  6E41               	movwf	Lcd_Out@buffer,c
  1327  00F59A  0EFF               	movlw	high STR_5
  1328  00F59C  6E42               	movwf	Lcd_Out@buffer+1,c
  1329  00F59E  0E02               	movlw	2
  1330  00F5A0  EC3C  F074         	call	_Lcd_Out
  1331  00F5A4  D000               	goto	l2999
  1332  00F5A6                     l2999:
  1333                           
  1334                           ;main.c: 204: }
  1335                           ;main.c: 206: LATBbits.LATB7 = 1;
  1336  00F5A6  8E8A               	bsf	3978,7,c	;volatile
  1337                           
  1338                           ;main.c: 207: LATBbits.LATB6 = 1;
  1339  00F5A8  8C8A               	bsf	3978,6,c	;volatile
  1340                           
  1341                           ;main.c: 208: LATAbits.LA1 = 1;
  1342  00F5AA  8289               	bsf	3977,1,c	;volatile
  1343                           
  1344                           ;main.c: 209: _delay((unsigned long)((10)*(8000000/4000.0)));
  1345  00F5AC  0E1A               	movlw	26
  1346  00F5AE  6E4F               	movwf	??_main& (0+255),c
  1347  00F5B0  0EF8               	movlw	248
  1348  00F5B2                     u2657:
  1349  00F5B2  2EE8               	decfsz	wreg,f,c
  1350  00F5B4  D7FE               	goto	u2657
  1351  00F5B6  2E4F               	decfsz	??_main& (0+255),f,c
  1352  00F5B8  D7FC               	goto	u2657
  1353  00F5BA  D000               	nop2	
  1354                           
  1355                           ;main.c: 210: LATBbits.LATB7 = 0;
  1356  00F5BC  9E8A               	bcf	3978,7,c	;volatile
  1357                           
  1358                           ;main.c: 211: LATBbits.LATB6 = 0;
  1359  00F5BE  9C8A               	bcf	3978,6,c	;volatile
  1360                           
  1361                           ;main.c: 212: LATAbits.LA1 = 0;
  1362  00F5C0  9289               	bcf	3977,1,c	;volatile
  1363                           
  1364                           ;main.c: 213: _delay((unsigned long)((10)*(8000000/4000.0)));
  1365  00F5C2  0E1A               	movlw	26
  1366  00F5C4  6E4F               	movwf	??_main& (0+255),c
  1367  00F5C6  0EF8               	movlw	248
  1368  00F5C8                     u2667:
  1369  00F5C8  2EE8               	decfsz	wreg,f,c
  1370  00F5CA  D7FE               	goto	u2667
  1371  00F5CC  2E4F               	decfsz	??_main& (0+255),f,c
  1372  00F5CE  D7FC               	goto	u2667
  1373  00F5D0  D000               	nop2	
  1374  00F5D2  D76C               	goto	l2971
  1375  00F5D4  EF00  F000         	goto	start
  1376  00F5D8                     __end_of_main:
  1377                           	opt stack 0
  1378                           tblptru	equ	0xFF8
  1379                           tblptrh	equ	0xFF7
  1380                           tblptrl	equ	0xFF6
  1381                           tablat	equ	0xFF5
  1382                           postinc0	equ	0xFEE
  1383                           wreg	equ	0xFE8
  1384                           postdec1	equ	0xFE5
  1385                           fsr1l	equ	0xFE1
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _V_Principal *****************
  1389 ;; Defined at:
  1390 ;;		line 221 in file "../main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  cte             2   68[COMRAM] PTR unsigned char 
  1395 ;;		 -> Convert_diasem@buffer_dia(20), 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;		None               void
  1398 ;; Registers used:
  1399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 0/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1408 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1409 ;;Total ram usage:        2 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:    3
  1412 ;; This function calls:
  1413 ;;		_Convert_diasem
  1414 ;;		_Lcd_Out
  1415 ;;		_Read_RTC
  1416 ;;		_lee_temperatura
  1417 ;;		_sprintf
  1418 ;; This function is called by:
  1419 ;;		_main
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text1
  1424  00E9A2                     __ptext1:
  1425                           	opt stack 0
  1426  00E9A2                     _V_Principal:
  1427                           	opt stack 27
  1428                           
  1429                           ;main.c: 223: Read_RTC();
  1430                           
  1431                           ;incstack = 0
  1432  00E9A2  EC62  F077         	call	_Read_RTC	;wreg free
  1433                           
  1434                           ;main.c: 224: lee_temperatura();
  1435  00E9A6  ECF3  F072         	call	_lee_temperatura	;wreg free
  1436                           
  1437                           ;main.c: 225: Lcd_Out(1, 0, "                    ");
  1438  00E9AA  0E00               	movlw	0
  1439  00E9AC  6E40               	movwf	Lcd_Out@x,c
  1440  00E9AE  0ED7               	movlw	low STR_6
  1441  00E9B0  6E41               	movwf	Lcd_Out@buffer,c
  1442  00E9B2  0EFE               	movlw	high STR_6
  1443  00E9B4  6E42               	movwf	Lcd_Out@buffer+1,c
  1444  00E9B6  0E01               	movlw	1
  1445  00E9B8  EC3C  F074         	call	_Lcd_Out
  1446                           
  1447                           ;main.c: 226: char* cte = Convert_diasem(diasem);
  1448  00E9BC  C050  F028         	movff	_diasem,Convert_diasem@dia
  1449  00E9C0  C051  F029         	movff	_diasem+1,Convert_diasem@dia+1
  1450  00E9C4  EC43  F076         	call	_Convert_diasem	;wreg free
  1451  00E9C8  C028  F045         	movff	?_Convert_diasem,V_Principal@cte
  1452  00E9CC  C029  F046         	movff	?_Convert_diasem+1,V_Principal@cte+1
  1453                           
  1454                           ;main.c: 228: Lcd_Out(2, 0, cte);
  1455  00E9D0  0E00               	movlw	0
  1456  00E9D2  6E40               	movwf	Lcd_Out@x,c
  1457  00E9D4  C045  F041         	movff	V_Principal@cte,Lcd_Out@buffer
  1458  00E9D8  C046  F042         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  1459  00E9DC  0E02               	movlw	2
  1460  00E9DE  EC3C  F074         	call	_Lcd_Out
  1461                           
  1462                           ;main.c: 231: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  1463  00E9E2  0E88               	movlw	low _buffer1
  1464  00E9E4  6E0D               	movwf	sprintf@sp,c
  1465  00E9E6  0E00               	movlw	high _buffer1
  1466  00E9E8  6E0E               	movwf	sprintf@sp+1,c
  1467  00E9EA  0ECA               	movlw	low STR_7
  1468  00E9EC  6E0F               	movwf	sprintf@f,c
  1469  00E9EE  0EFF               	movlw	high STR_7
  1470  00E9F0  6E10               	movwf	sprintf@f+1,c
  1471  00E9F2  C05C  F011         	movff	_dia,?_sprintf+4
  1472  00E9F6  C05D  F012         	movff	_dia+1,?_sprintf+5
  1473  00E9FA  C05E  F013         	movff	_mes,?_sprintf+6
  1474  00E9FE  C05F  F014         	movff	_mes+1,?_sprintf+7
  1475  00EA02  C05A  F015         	movff	_anio,?_sprintf+8
  1476  00EA06  C05B  F016         	movff	_anio+1,?_sprintf+9
  1477  00EA0A  ECEC  F07A         	call	_sprintf	;wreg free
  1478                           
  1479                           ;main.c: 232: Lcd_Out(3,0,buffer1);
  1480  00EA0E  0E00               	movlw	0
  1481  00EA10  6E40               	movwf	Lcd_Out@x,c
  1482  00EA12  0E88               	movlw	low _buffer1
  1483  00EA14  6E41               	movwf	Lcd_Out@buffer,c
  1484  00EA16  0E00               	movlw	high _buffer1
  1485  00EA18  6E42               	movwf	Lcd_Out@buffer+1,c
  1486  00EA1A  0E03               	movlw	3
  1487  00EA1C  EC3C  F074         	call	_Lcd_Out
  1488                           
  1489                           ;main.c: 233: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  1490  00EA20  0E88               	movlw	low _buffer1
  1491  00EA22  6E0D               	movwf	sprintf@sp,c
  1492  00EA24  0E00               	movlw	high _buffer1
  1493  00EA26  6E0E               	movwf	sprintf@sp+1,c
  1494  00EA28  0ED9               	movlw	low STR_8
  1495  00EA2A  6E0F               	movwf	sprintf@f,c
  1496  00EA2C  0EFF               	movlw	high STR_8
  1497  00EA2E  6E10               	movwf	sprintf@f+1,c
  1498  00EA30  C0BA  F011         	movff	_hora,?_sprintf+4
  1499  00EA34  C0BB  F012         	movff	_hora+1,?_sprintf+5
  1500  00EA38  C0BC  F013         	movff	_minuto,?_sprintf+6
  1501  00EA3C  C0BD  F014         	movff	_minuto+1,?_sprintf+7
  1502  00EA40  C07E  F015         	movff	_segundo,?_sprintf+8
  1503  00EA44  C07F  F016         	movff	_segundo+1,?_sprintf+9
  1504  00EA48  ECEC  F07A         	call	_sprintf	;wreg free
  1505                           
  1506                           ;main.c: 234: Lcd_Out(4,0,buffer1);
  1507  00EA4C  0E00               	movlw	0
  1508  00EA4E  6E40               	movwf	Lcd_Out@x,c
  1509  00EA50  0E88               	movlw	low _buffer1
  1510  00EA52  6E41               	movwf	Lcd_Out@buffer,c
  1511  00EA54  0E00               	movlw	high _buffer1
  1512  00EA56  6E42               	movwf	Lcd_Out@buffer+1,c
  1513  00EA58  0E04               	movlw	4
  1514  00EA5A  EC3C  F074         	call	_Lcd_Out
  1515  00EA5E  0012               	return		;funcret
  1516  00EA60                     __end_of_V_Principal:
  1517                           	opt stack 0
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _lee_temperatura *****************
  1529 ;; Defined at:
  1530 ;;		line 325 in file "../main.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;		None
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;		None
  1535 ;; Return value:  Size  Location     Type
  1536 ;;		None               void
  1537 ;; Registers used:
  1538 ;;		wreg
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_V_Principal
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text2
  1558  00E5E6                     __ptext2:
  1559                           	opt stack 0
  1560  00E5E6                     _lee_temperatura:
  1561                           	opt stack 29
  1562                           
  1563                           ;main.c: 327: ADCON0bits.ADON = 1;
  1564                           
  1565                           ;incstack = 0
  1566  00E5E6  80C2               	bsf	4034,0,c	;volatile
  1567                           
  1568                           ;main.c: 328: ADCON0bits.GO = 1;
  1569  00E5E8  82C2               	bsf	4034,1,c	;volatile
  1570                           
  1571                           ;main.c: 329: while(ADCON0bits.GO);
  1572  00E5EA  D000               	goto	l209
  1573  00E5EC                     l209:
  1574  00E5EC  B2C2               	btfsc	4034,1,c	;volatile
  1575  00E5EE  D7FE               	goto	l209
  1576                           
  1577                           ;main.c: 330: _delay((unsigned long)((1)*(8000000/4000.0)));
  1578  00E5F0  0E03               	movlw	3
  1579  00E5F2  6E01               	movwf	??_lee_temperatura& (0+255),c
  1580  00E5F4  0E98               	movlw	152
  1581  00E5F6                     u2677:
  1582  00E5F6  2EE8               	decfsz	wreg,f,c
  1583  00E5F8  D7FE               	goto	u2677
  1584  00E5FA  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  1585  00E5FC  D7FC               	goto	u2677
  1586                           
  1587                           ;main.c: 331: lectura = ADRESH;
  1588  00E5FE  CFC4 F087          	movff	4036,_lectura	;volatile
  1589                           
  1590                           ;main.c: 332: ADCON0bits.ADON = 0;
  1591  00E602  90C2               	bcf	4034,0,c	;volatile
  1592  00E604  0012               	return		;funcret
  1593  00E606                     __end_of_lee_temperatura:
  1594                           	opt stack 0
  1595                           tblptru	equ	0xFF8
  1596                           tblptrh	equ	0xFF7
  1597                           tblptrl	equ	0xFF6
  1598                           tablat	equ	0xFF5
  1599                           postinc0	equ	0xFEE
  1600                           wreg	equ	0xFE8
  1601                           postdec1	equ	0xFE5
  1602                           fsr1l	equ	0xFE1
  1603                           status	equ	0xFD8
  1604                           
  1605 ;; *************** function _Read_RTC *****************
  1606 ;; Defined at:
  1607 ;;		line 292 in file "../main.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;		None
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;		None               void
  1614 ;; Registers used:
  1615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1625 ;;Total ram usage:        0 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    1
  1628 ;; This function calls:
  1629 ;;		_RtccReadDate
  1630 ;;		_RtccReadTime
  1631 ;; This function is called by:
  1632 ;;		_V_Principal
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text3
  1637  00EEC4                     __ptext3:
  1638                           	opt stack 0
  1639  00EEC4                     _Read_RTC:
  1640                           	opt stack 28
  1641                           
  1642                           ;main.c: 295: RtccReadTime(&RtccTime);
  1643                           
  1644                           ;incstack = 0
  1645  00EEC4  0E56               	movlw	low _RtccTime
  1646  00EEC6  6E01               	movwf	RtccReadTime@pTm,c
  1647  00EEC8  0E00               	movlw	high _RtccTime
  1648  00EECA  6E02               	movwf	RtccReadTime@pTm+1,c
  1649  00EECC  ECBE  F073         	call	_RtccReadTime	;wreg free
  1650                           
  1651                           ;main.c: 296: segundo_u=(RtccTime.f.sec & 0x0F);
  1652  00EED0  5057               	movf	_RtccTime+1,w,c
  1653  00EED2  0B0F               	andlw	15
  1654  00EED4  0100               	movlb	0	; () banked
  1655  00EED6  6FCA               	movwf	_segundo_u& (0+255),b
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;main.c: 297: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  1659  00EED8  3857               	swapf	_RtccTime+1,w,c
  1660  00EEDA  0B0F               	andlw	15
  1661  00EEDC  0B0F               	andlw	15
  1662  00EEDE  0100               	movlb	0	; () banked
  1663  00EEE0  6FC9               	movwf	_segundo_d& (0+255),b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 298: minuto_u=(RtccTime.f.min & 0x0F);
  1667  00EEE2  5058               	movf	_RtccTime+2,w,c
  1668  00EEE4  0B0F               	andlw	15
  1669  00EEE6  0100               	movlb	0	; () banked
  1670  00EEE8  6FC8               	movwf	_minuto_u& (0+255),b
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 299: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  1674  00EEEA  3858               	swapf	_RtccTime+2,w,c
  1675  00EEEC  0B0F               	andlw	15
  1676  00EEEE  0B0F               	andlw	15
  1677  00EEF0  0100               	movlb	0	; () banked
  1678  00EEF2  6FC7               	movwf	_minuto_d& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;main.c: 300: hora_u=(RtccTime.f.hour & 0x0F);
  1682  00EEF4  5059               	movf	_RtccTime+3,w,c
  1683  00EEF6  0B0F               	andlw	15
  1684  00EEF8  0100               	movlb	0	; () banked
  1685  00EEFA  6FC4               	movwf	_hora_u& (0+255),b
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;main.c: 301: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  1689  00EEFC  3859               	swapf	_RtccTime+3,w,c
  1690  00EEFE  0B0F               	andlw	15
  1691  00EF00  0B0F               	andlw	15
  1692  00EF02  0100               	movlb	0	; () banked
  1693  00EF04  6FC3               	movwf	_hora_d& (0+255),b
  1694                           
  1695                           ;main.c: 302: RtccReadDate(&RtccDate);
  1696  00EF06  0E52               	movlw	low _RtccDate
  1697  00EF08  6E01               	movwf	RtccReadDate@pDt,c
  1698  00EF0A  0E00               	movlw	high _RtccDate
  1699  00EF0C  6E02               	movwf	RtccReadDate@pDt+1,c
  1700  00EF0E  ECF5  F073         	call	_RtccReadDate	;wreg free
  1701                           
  1702                           ;main.c: 303: fecha_u=(RtccDate.f.mday & 0x0F);
  1703  00EF12  5053               	movf	_RtccDate+1,w,c
  1704  00EF14  0B0F               	andlw	15
  1705  00EF16  0100               	movlb	0	; () banked
  1706  00EF18  6FC2               	movwf	_fecha_u& (0+255),b
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;main.c: 304: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  1710  00EF1A  3853               	swapf	_RtccDate+1,w,c
  1711  00EF1C  0B0F               	andlw	15
  1712  00EF1E  0B0F               	andlw	15
  1713  00EF20  0100               	movlb	0	; () banked
  1714  00EF22  6FC1               	movwf	_fecha_d& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;main.c: 305: mes_u=(RtccDate.f.mon & 0x0F);
  1718  00EF24  5054               	movf	_RtccDate+2,w,c
  1719  00EF26  0B0F               	andlw	15
  1720  00EF28  0100               	movlb	0	; () banked
  1721  00EF2A  6FC6               	movwf	_mes_u& (0+255),b
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 306: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  1725  00EF2C  3854               	swapf	_RtccDate+2,w,c
  1726  00EF2E  0B0F               	andlw	15
  1727  00EF30  0B0F               	andlw	15
  1728  00EF32  0100               	movlb	0	; () banked
  1729  00EF34  6FC5               	movwf	_mes_d& (0+255),b
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 307: dia_semana=RtccDate.f.wday;
  1733  00EF36  C052  F0C0         	movff	_RtccDate,_dia_semana
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;main.c: 308: anio_u=(RtccDate.f.year & 0x0F);
  1737  00EF3A  5055               	movf	_RtccDate+3,w,c
  1738  00EF3C  0B0F               	andlw	15
  1739  00EF3E  0100               	movlb	0	; () banked
  1740  00EF40  6FBF               	movwf	_anio_u& (0+255),b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;main.c: 309: anio_d=((RtccDate.f.year & 0xF0)>>4);
  1744  00EF42  3855               	swapf	_RtccDate+3,w,c
  1745  00EF44  0B0F               	andlw	15
  1746  00EF46  0B0F               	andlw	15
  1747  00EF48  0100               	movlb	0	; () banked
  1748  00EF4A  6FBE               	movwf	_anio_d& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;main.c: 310: segundo=segundo_d*10+segundo_u;
  1752  00EF4C  0100               	movlb	0	; () banked
  1753  00EF4E  51C9               	movf	_segundo_d& (0+255),w,b
  1754  00EF50  0D0A               	mullw	10
  1755  00EF52  0100               	movlb	0	; () banked
  1756  00EF54  51CA               	movf	_segundo_u& (0+255),w,b
  1757  00EF56  24F3               	addwf	prodl,w,c
  1758  00EF58  0100               	movlb	0	; () banked
  1759  00EF5A  6F7E               	movwf	_segundo& (0+255),b
  1760  00EF5C  0100               	movlb	0	; () banked
  1761  00EF5E  0E00               	movlw	0
  1762  00EF60  20F4               	addwfc	prodh,w,c
  1763  00EF62  0100               	movlb	0	; () banked
  1764  00EF64  6F7F               	movwf	(_segundo+1)& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;main.c: 311: minuto=minuto_d*10+minuto_u;
  1768  00EF66  0100               	movlb	0	; () banked
  1769  00EF68  51C7               	movf	_minuto_d& (0+255),w,b
  1770  00EF6A  0D0A               	mullw	10
  1771  00EF6C  0100               	movlb	0	; () banked
  1772  00EF6E  51C8               	movf	_minuto_u& (0+255),w,b
  1773  00EF70  24F3               	addwf	prodl,w,c
  1774  00EF72  0100               	movlb	0	; () banked
  1775  00EF74  6FBC               	movwf	_minuto& (0+255),b
  1776  00EF76  0100               	movlb	0	; () banked
  1777  00EF78  0E00               	movlw	0
  1778  00EF7A  20F4               	addwfc	prodh,w,c
  1779  00EF7C  0100               	movlb	0	; () banked
  1780  00EF7E  6FBD               	movwf	(_minuto+1)& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;main.c: 312: hora=hora_d*10+hora_u;
  1784  00EF80  0100               	movlb	0	; () banked
  1785  00EF82  51C3               	movf	_hora_d& (0+255),w,b
  1786  00EF84  0D0A               	mullw	10
  1787  00EF86  0100               	movlb	0	; () banked
  1788  00EF88  51C4               	movf	_hora_u& (0+255),w,b
  1789  00EF8A  24F3               	addwf	prodl,w,c
  1790  00EF8C  0100               	movlb	0	; () banked
  1791  00EF8E  6FBA               	movwf	_hora& (0+255),b
  1792  00EF90  0100               	movlb	0	; () banked
  1793  00EF92  0E00               	movlw	0
  1794  00EF94  20F4               	addwfc	prodh,w,c
  1795  00EF96  0100               	movlb	0	; () banked
  1796  00EF98  6FBB               	movwf	(_hora+1)& (0+255),b
  1797                           
  1798                           ; BSR set to: 0
  1799                           ;main.c: 313: dia=fecha_d*10+fecha_u;
  1800  00EF9A  0100               	movlb	0	; () banked
  1801  00EF9C  51C1               	movf	_fecha_d& (0+255),w,b
  1802  00EF9E  0D0A               	mullw	10
  1803  00EFA0  0100               	movlb	0	; () banked
  1804  00EFA2  51C2               	movf	_fecha_u& (0+255),w,b
  1805  00EFA4  24F3               	addwf	prodl,w,c
  1806  00EFA6  6E5C               	movwf	_dia,c
  1807  00EFA8  0100               	movlb	0	; () banked
  1808  00EFAA  0E00               	movlw	0
  1809  00EFAC  20F4               	addwfc	prodh,w,c
  1810  00EFAE  6E5D               	movwf	_dia+1,c
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;main.c: 314: diasem=dia_semana;
  1814  00EFB0  C0C0  F050         	movff	_dia_semana,_diasem
  1815  00EFB4  6A51               	clrf	_diasem+1,c
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 315: mes=mes_d*10+mes_u;
  1819  00EFB6  0100               	movlb	0	; () banked
  1820  00EFB8  51C5               	movf	_mes_d& (0+255),w,b
  1821  00EFBA  0D0A               	mullw	10
  1822  00EFBC  0100               	movlb	0	; () banked
  1823  00EFBE  51C6               	movf	_mes_u& (0+255),w,b
  1824  00EFC0  24F3               	addwf	prodl,w,c
  1825  00EFC2  6E5E               	movwf	_mes,c
  1826  00EFC4  0100               	movlb	0	; () banked
  1827  00EFC6  0E00               	movlw	0
  1828  00EFC8  20F4               	addwfc	prodh,w,c
  1829  00EFCA  6E5F               	movwf	_mes+1,c
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;main.c: 316: anio=anio_d*10+anio_u;
  1833  00EFCC  0100               	movlb	0	; () banked
  1834  00EFCE  51BE               	movf	_anio_d& (0+255),w,b
  1835  00EFD0  0D0A               	mullw	10
  1836  00EFD2  0100               	movlb	0	; () banked
  1837  00EFD4  51BF               	movf	_anio_u& (0+255),w,b
  1838  00EFD6  24F3               	addwf	prodl,w,c
  1839  00EFD8  6E5A               	movwf	_anio,c
  1840  00EFDA  0100               	movlb	0	; () banked
  1841  00EFDC  0E00               	movlw	0
  1842  00EFDE  20F4               	addwfc	prodh,w,c
  1843  00EFE0  6E5B               	movwf	_anio+1,c
  1844                           
  1845                           ; BSR set to: 0
  1846  00EFE2  0012               	return		;funcret
  1847  00EFE4                     __end_of_Read_RTC:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           prodh	equ	0xFF4
  1854                           prodl	equ	0xFF3
  1855                           postinc0	equ	0xFEE
  1856                           wreg	equ	0xFE8
  1857                           postdec1	equ	0xFE5
  1858                           fsr1l	equ	0xFE1
  1859                           status	equ	0xFD8
  1860                           
  1861 ;; *************** function _RtccReadTime *****************
  1862 ;; Defined at:
  1863 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  pTm             2    0[COMRAM] PTR struct .
  1866 ;;		 -> RtccTime(4), 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;  rTD0            8   10[COMRAM] struct .
  1869 ;;  rTD1            8    2[COMRAM] struct .
  1870 ;; Return value:  Size  Location     Type
  1871 ;;		None               void
  1872 ;; Registers used:
  1873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1879 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;Total ram usage:       18 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_Read_RTC
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text4
  1893  00E77C                     __ptext4:
  1894                           	opt stack 0
  1895  00E77C                     _RtccReadTime:
  1896                           	opt stack 28
  1897  00E77C  0EFC               	movlw	252
  1898  00E77E  010F               	movlb	15	; () banked
  1899  00E780  173F               	andwf	63,f,b	;volatile
  1900                           
  1901                           ; BSR set to: 15
  1902  00E782  010F               	movlb	15	; () banked
  1903  00E784  813F               	bsf	63,0,b	;volatile
  1904                           
  1905                           ; BSR set to: 15
  1906  00E786  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  1907                           
  1908                           ; BSR set to: 15
  1909  00E78A  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  1910                           
  1911                           ; BSR set to: 15
  1912  00E78E  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  1913                           
  1914                           ; BSR set to: 15
  1915  00E792  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  1916                           
  1917                           ; BSR set to: 15
  1918  00E796  0EFC               	movlw	252
  1919  00E798  010F               	movlb	15	; () banked
  1920  00E79A  173F               	andwf	63,f,b	;volatile
  1921  00E79C  010F               	movlb	15	; () banked
  1922  00E79E  813F               	bsf	63,0,b	;volatile
  1923                           
  1924                           ; BSR set to: 15
  1925  00E7A0  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  1926                           
  1927                           ; BSR set to: 15
  1928  00E7A4  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  1929                           
  1930                           ; BSR set to: 15
  1931  00E7A8  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  1932                           
  1933                           ; BSR set to: 15
  1934  00E7AC  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  1935                           
  1936                           ; BSR set to: 15
  1937  00E7B0  5009               	movf	RtccReadTime@rTD1+6,w,c
  1938  00E7B2  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  1939  00E7B4  A4D8               	btfss	status,2,c
  1940  00E7B6  D7E2               	goto	l2397
  1941                           
  1942                           ; BSR set to: 15
  1943                           
  1944                           ; BSR set to: 15
  1945  00E7B8  EE20 F003          	lfsr	2,3
  1946  00E7BC  5001               	movf	RtccReadTime@pTm,w,c
  1947  00E7BE  26D9               	addwf	fsr2l,f,c
  1948  00E7C0  5002               	movf	RtccReadTime@pTm+1,w,c
  1949  00E7C2  22DA               	addwfc	fsr2h,f,c
  1950  00E7C4  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  1951  00E7C8  EE20 F002          	lfsr	2,2
  1952  00E7CC  5001               	movf	RtccReadTime@pTm,w,c
  1953  00E7CE  26D9               	addwf	fsr2l,f,c
  1954  00E7D0  5002               	movf	RtccReadTime@pTm+1,w,c
  1955  00E7D2  22DA               	addwfc	fsr2h,f,c
  1956  00E7D4  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  1957  00E7D8  EE20 F001          	lfsr	2,1
  1958  00E7DC  5001               	movf	RtccReadTime@pTm,w,c
  1959  00E7DE  26D9               	addwf	fsr2l,f,c
  1960  00E7E0  5002               	movf	RtccReadTime@pTm+1,w,c
  1961  00E7E2  22DA               	addwfc	fsr2h,f,c
  1962  00E7E4  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  1963                           
  1964                           ; BSR set to: 15
  1965  00E7E8  0012               	return		;funcret
  1966  00E7EA                     __end_of_RtccReadTime:
  1967                           	opt stack 0
  1968                           tblptru	equ	0xFF8
  1969                           tblptrh	equ	0xFF7
  1970                           tblptrl	equ	0xFF6
  1971                           tablat	equ	0xFF5
  1972                           prodh	equ	0xFF4
  1973                           prodl	equ	0xFF3
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postdec1	equ	0xFE5
  1977                           fsr1l	equ	0xFE1
  1978                           indf2	equ	0xFDF
  1979                           fsr2h	equ	0xFDA
  1980                           fsr2l	equ	0xFD9
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _RtccReadDate *****************
  1984 ;; Defined at:
  1985 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;  pDt             2    0[COMRAM] PTR struct .
  1988 ;;		 -> RtccDate(4), 
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  rTD0            8   10[COMRAM] struct .
  1991 ;;  rTD1            8    2[COMRAM] struct .
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2004 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;Total ram usage:       18 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		_Read_RTC
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text5
  2015  00E7EA                     __ptext5:
  2016                           	opt stack 0
  2017  00E7EA                     _RtccReadDate:
  2018                           	opt stack 28
  2019  00E7EA  0EFC               	movlw	252
  2020  00E7EC  010F               	movlb	15	; () banked
  2021  00E7EE  173F               	andwf	63,f,b	;volatile
  2022  00E7F0  0E03               	movlw	3
  2023  00E7F2  010F               	movlb	15	; () banked
  2024  00E7F4  133F               	iorwf	63,f,b	;volatile
  2025                           
  2026                           ; BSR set to: 15
  2027  00E7F6  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  2028                           
  2029                           ; BSR set to: 15
  2030  00E7FA  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  2031                           
  2032                           ; BSR set to: 15
  2033  00E7FE  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  2034                           
  2035                           ; BSR set to: 15
  2036  00E802  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  2037                           
  2038                           ; BSR set to: 15
  2039  00E806  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  2040                           
  2041                           ; BSR set to: 15
  2042  00E80A  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  2043  00E80E  0EFC               	movlw	252
  2044  00E810  010F               	movlb	15	; () banked
  2045  00E812  173F               	andwf	63,f,b	;volatile
  2046  00E814  0E03               	movlw	3
  2047  00E816  010F               	movlb	15	; () banked
  2048  00E818  133F               	iorwf	63,f,b	;volatile
  2049                           
  2050                           ; BSR set to: 15
  2051  00E81A  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  2052                           
  2053                           ; BSR set to: 15
  2054  00E81E  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  2055                           
  2056                           ; BSR set to: 15
  2057  00E822  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  2058                           
  2059                           ; BSR set to: 15
  2060  00E826  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  2061                           
  2062                           ; BSR set to: 15
  2063  00E82A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  2064                           
  2065                           ; BSR set to: 15
  2066  00E82E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  2067  00E832  5005               	movf	RtccReadDate@rTD1+2,w,c
  2068  00E834  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  2069  00E836  A4D8               	btfss	status,2,c
  2070  00E838  D7D8               	goto	l2423
  2071                           
  2072                           ; BSR set to: 15
  2073                           
  2074                           ; BSR set to: 15
  2075  00E83A  EE20 F001          	lfsr	2,1
  2076  00E83E  5001               	movf	RtccReadDate@pDt,w,c
  2077  00E840  26D9               	addwf	fsr2l,f,c
  2078  00E842  5002               	movf	RtccReadDate@pDt+1,w,c
  2079  00E844  22DA               	addwfc	fsr2h,f,c
  2080  00E846  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  2081  00E84A  EE20 F002          	lfsr	2,2
  2082  00E84E  5001               	movf	RtccReadDate@pDt,w,c
  2083  00E850  26D9               	addwf	fsr2l,f,c
  2084  00E852  5002               	movf	RtccReadDate@pDt+1,w,c
  2085  00E854  22DA               	addwfc	fsr2h,f,c
  2086  00E856  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  2087                           
  2088                           ; BSR set to: 15
  2089  00E85A  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  2090  00E85E  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  2091  00E862  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  2092                           
  2093                           ; BSR set to: 15
  2094  00E866  EE20 F003          	lfsr	2,3
  2095  00E86A  5001               	movf	RtccReadDate@pDt,w,c
  2096  00E86C  26D9               	addwf	fsr2l,f,c
  2097  00E86E  5002               	movf	RtccReadDate@pDt+1,w,c
  2098  00E870  22DA               	addwfc	fsr2h,f,c
  2099  00E872  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  2100                           
  2101                           ; BSR set to: 15
  2102  00E876  0012               	return		;funcret
  2103  00E878                     __end_of_RtccReadDate:
  2104                           	opt stack 0
  2105                           tblptru	equ	0xFF8
  2106                           tblptrh	equ	0xFF7
  2107                           tblptrl	equ	0xFF6
  2108                           tablat	equ	0xFF5
  2109                           prodh	equ	0xFF4
  2110                           prodl	equ	0xFF3
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           postdec1	equ	0xFE5
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function _ManejaMovimientos *****************
  2121 ;; Defined at:
  2122 ;;		line 372 in file "../main.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  posicion        2   76[COMRAM] int 
  2127 ;;  minuto_tr       1   75[COMRAM] unsigned char 
  2128 ;;  hora_tr         1   74[COMRAM] unsigned char 
  2129 ;;  anio_tr         1   73[COMRAM] unsigned char 
  2130 ;;  mes_tr          1   72[COMRAM] unsigned char 
  2131 ;;  dia_tr          1   71[COMRAM] unsigned char 
  2132 ;;  diasem_tr       1   70[COMRAM] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;		None               void
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2143 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2145 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2146 ;;Total ram usage:       10 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    3
  2149 ;; This function calls:
  2150 ;;		_Convert_diasem
  2151 ;;		_Lcd_Cmd
  2152 ;;		_Lcd_Out
  2153 ;;		_Write_RTC
  2154 ;;		_sprintf
  2155 ;; This function is called by:
  2156 ;;		_main
  2157 ;; This function uses a non-reentrant model
  2158 ;;
  2159                           
  2160                           	psect	text6
  2161  00F912                     __ptext6:
  2162                           	opt stack 0
  2163  00F912                     _ManejaMovimientos:
  2164                           	opt stack 27
  2165                           
  2166                           ;main.c: 374: char diasem_tr = diasem;
  2167                           
  2168                           ; BSR set to: 15
  2169                           ;incstack = 0
  2170  00F912  C050  F047         	movff	_diasem,ManejaMovimientos@diasem_tr
  2171                           
  2172                           ;main.c: 375: char dia_tr = dia;
  2173  00F916  C05C  F048         	movff	_dia,ManejaMovimientos@dia_tr
  2174                           
  2175                           ;main.c: 376: char mes_tr = mes;
  2176  00F91A  C05E  F049         	movff	_mes,ManejaMovimientos@mes_tr
  2177                           
  2178                           ;main.c: 377: char anio_tr = anio;
  2179  00F91E  C05A  F04A         	movff	_anio,ManejaMovimientos@anio_tr
  2180                           
  2181                           ;main.c: 378: char hora_tr = hora;
  2182  00F922  C0BA  F04B         	movff	_hora,ManejaMovimientos@hora_tr
  2183                           
  2184                           ;main.c: 379: char minuto_tr = minuto;
  2185  00F926  C0BC  F04C         	movff	_minuto,ManejaMovimientos@minuto_tr
  2186                           
  2187                           ;main.c: 380: int posicion = 0;
  2188  00F92A  0E00               	movlw	0
  2189  00F92C  6E4E               	movwf	ManejaMovimientos@posicion+1,c
  2190  00F92E  0E00               	movlw	0
  2191  00F930  6E4D               	movwf	ManejaMovimientos@posicion,c
  2192                           
  2193                           ;main.c: 381: Lcd_Cmd(14);
  2194  00F932  0E0E               	movlw	14
  2195  00F934  ECD2  F076         	call	_Lcd_Cmd
  2196                           
  2197                           ;main.c: 382: Lcd_Out(2, 0, "" );
  2198  00F938  0E00               	movlw	0
  2199  00F93A  6E40               	movwf	Lcd_Out@x,c
  2200  00F93C  0EEB               	movlw	low (STR_6+20)
  2201  00F93E  6E41               	movwf	Lcd_Out@buffer,c
  2202  00F940  0EFE               	movlw	high (STR_6+20)
  2203  00F942  6E42               	movwf	Lcd_Out@buffer+1,c
  2204  00F944  0E02               	movlw	2
  2205  00F946  EC3C  F074         	call	_Lcd_Out
  2206                           
  2207                           ;main.c: 385: for(i=0 ;i<30;i++){
  2208  00F94A  0E00               	movlw	0
  2209  00F94C  0100               	movlb	0	; () banked
  2210  00F94E  6F7D               	movwf	(_i+1)& (0+255),b
  2211  00F950  0E00               	movlw	0
  2212  00F952  6F7C               	movwf	_i& (0+255),b
  2213                           
  2214                           ; BSR set to: 0
  2215  00F954  0100               	movlb	0	; () banked
  2216  00F956  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2217  00F958  D00A               	goto	l2737
  2218  00F95A  0100               	movlb	0	; () banked
  2219  00F95C  517D               	movf	(_i+1)& (0+255),w,b
  2220  00F95E  E106               	bnz	u2000
  2221  00F960  0E1E               	movlw	30
  2222  00F962  0100               	movlb	0	; () banked
  2223  00F964  5D7C               	subwf	_i& (0+255),w,b
  2224  00F966  B0D8               	btfsc	status,0,c
  2225  00F968  D2AD               	goto	l2913
  2226  00F96A  D001               	goto	l2737
  2227  00F96C                     u2000:
  2228                           
  2229                           ; BSR set to: 0
  2230  00F96C  D2AB               	goto	l2913
  2231  00F96E                     l2737:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;main.c: 387: _delay((unsigned long)((90)*(8000000/4000.0)));
  2235  00F96E  0EEA               	movlw	234
  2236  00F970  6E45               	movwf	??_ManejaMovimientos& (0+255),c
  2237  00F972  0EC3               	movlw	195
  2238  00F974                     u2687:
  2239  00F974  2EE8               	decfsz	wreg,f,c
  2240  00F976  D7FE               	goto	u2687
  2241  00F978  2E45               	decfsz	??_ManejaMovimientos& (0+255),f,c
  2242  00F97A  D7FC               	goto	u2687
  2243  00F97C  F000               	nop	
  2244                           
  2245                           ;main.c: 389: if(Sw_Up = PORTAbits.RA3 == 0){
  2246  00F97E  B680               	btfsc	3968,3,c	;volatile
  2247  00F980  D002               	goto	u2010
  2248  00F982  0E01               	movlw	1
  2249  00F984  D001               	goto	u2020
  2250  00F986                     u2010:
  2251  00F986  0E00               	movlw	0
  2252  00F988                     u2020:
  2253  00F988  0100               	movlb	0	; () banked
  2254  00F98A  6F86               	movwf	_Sw_Up& (0+255),b
  2255  00F98C  0100               	movlb	0	; () banked
  2256  00F98E  5186               	movf	_Sw_Up& (0+255),w,b
  2257  00F990  B4D8               	btfsc	status,2,c
  2258  00F992  D0F8               	goto	l2813
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;main.c: 391: i=0;
  2262  00F994  0E00               	movlw	0
  2263  00F996  0100               	movlb	0	; () banked
  2264  00F998  6F7D               	movwf	(_i+1)& (0+255),b
  2265  00F99A  0E00               	movlw	0
  2266  00F99C  6F7C               	movwf	_i& (0+255),b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;main.c: 392: if(posicion == 0){
  2270  00F99E  504D               	movf	ManejaMovimientos@posicion,w,c
  2271  00F9A0  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2272  00F9A2  A4D8               	btfss	status,2,c
  2273  00F9A4  D01D               	goto	l2753
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;main.c: 393: if(diasem_tr<6){diasem_tr++;}
  2277  00F9A6  0E06               	movlw	6
  2278  00F9A8  6047               	cpfslt	ManejaMovimientos@diasem_tr,c
  2279  00F9AA  D002               	goto	l2749
  2280                           
  2281                           ; BSR set to: 0
  2282  00F9AC  2A47               	incf	ManejaMovimientos@diasem_tr,f,c
  2283  00F9AE  D000               	goto	l2749
  2284  00F9B0                     l2749:
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;main.c: 394: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2288  00F9B0  0E00               	movlw	0
  2289  00F9B2  6E40               	movwf	Lcd_Out@x,c
  2290  00F9B4  C047  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2291  00F9B8  6A29               	clrf	Convert_diasem@dia+1,c
  2292  00F9BA  EC43  F076         	call	_Convert_diasem	;wreg free
  2293  00F9BE  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2294  00F9C2  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2295  00F9C6  0E02               	movlw	2
  2296  00F9C8  EC3C  F074         	call	_Lcd_Out
  2297                           
  2298                           ;main.c: 395: Lcd_Out(2, 0, "" );
  2299  00F9CC  0E00               	movlw	0
  2300  00F9CE  6E40               	movwf	Lcd_Out@x,c
  2301  00F9D0  0EEB               	movlw	low (STR_6+20)
  2302  00F9D2  6E41               	movwf	Lcd_Out@buffer,c
  2303  00F9D4  0EFE               	movlw	high (STR_6+20)
  2304  00F9D6  6E42               	movwf	Lcd_Out@buffer+1,c
  2305  00F9D8  0E02               	movlw	2
  2306  00F9DA  EC3C  F074         	call	_Lcd_Out
  2307                           
  2308                           ;main.c: 396: }else if(posicion == 2){
  2309  00F9DE  D0D2               	goto	l2813
  2310  00F9E0                     l2753:
  2311  00F9E0  0E02               	movlw	2
  2312  00F9E2  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2313  00F9E4  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2314  00F9E6  A4D8               	btfss	status,2,c
  2315  00F9E8  D025               	goto	l2765
  2316                           
  2317                           ;main.c: 397: if(dia_tr<31){dia_tr++;}
  2318  00F9EA  0E1F               	movlw	31
  2319  00F9EC  6048               	cpfslt	ManejaMovimientos@dia_tr,c
  2320  00F9EE  D002               	goto	l2759
  2321  00F9F0  2A48               	incf	ManejaMovimientos@dia_tr,f,c
  2322  00F9F2  D000               	goto	l2759
  2323  00F9F4                     l2759:
  2324                           
  2325                           ;main.c: 398: sprintf(buffer1,"%02u",dia_tr);
  2326  00F9F4  0E88               	movlw	low _buffer1
  2327  00F9F6  6E0D               	movwf	sprintf@sp,c
  2328  00F9F8  0E00               	movlw	high _buffer1
  2329  00F9FA  6E0E               	movwf	sprintf@sp+1,c
  2330  00F9FC  0ED4               	movlw	low (STR_7+10)
  2331  00F9FE  6E0F               	movwf	sprintf@f,c
  2332  00FA00  0EFF               	movlw	high (STR_7+10)
  2333  00FA02  6E10               	movwf	sprintf@f+1,c
  2334  00FA04  C048  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2335  00FA08  6A12               	clrf	?_sprintf+5,c
  2336  00FA0A  ECEC  F07A         	call	_sprintf	;wreg free
  2337                           
  2338                           ;main.c: 399: Lcd_Out(3, 0, buffer1);
  2339  00FA0E  0E00               	movlw	0
  2340  00FA10  6E40               	movwf	Lcd_Out@x,c
  2341  00FA12  0E88               	movlw	low _buffer1
  2342  00FA14  6E41               	movwf	Lcd_Out@buffer,c
  2343  00FA16  0E00               	movlw	high _buffer1
  2344  00FA18  6E42               	movwf	Lcd_Out@buffer+1,c
  2345  00FA1A  0E03               	movlw	3
  2346  00FA1C  EC3C  F074         	call	_Lcd_Out
  2347                           
  2348                           ;main.c: 400: Lcd_Out(3, 0, "" );
  2349  00FA20  0E00               	movlw	0
  2350  00FA22  6E40               	movwf	Lcd_Out@x,c
  2351  00FA24  0EEB               	movlw	low (STR_6+20)
  2352  00FA26  6E41               	movwf	Lcd_Out@buffer,c
  2353  00FA28  0EFE               	movlw	high (STR_6+20)
  2354  00FA2A  6E42               	movwf	Lcd_Out@buffer+1,c
  2355  00FA2C  0E03               	movlw	3
  2356  00FA2E  EC3C  F074         	call	_Lcd_Out
  2357                           
  2358                           ;main.c: 401: }else if(posicion == 4){
  2359  00FA32  D0A8               	goto	l2813
  2360  00FA34                     l2765:
  2361  00FA34  0E04               	movlw	4
  2362  00FA36  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2363  00FA38  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2364  00FA3A  A4D8               	btfss	status,2,c
  2365  00FA3C  D025               	goto	l2777
  2366                           
  2367                           ;main.c: 402: if(mes_tr<12){mes_tr++;}
  2368  00FA3E  0E0C               	movlw	12
  2369  00FA40  6049               	cpfslt	ManejaMovimientos@mes_tr,c
  2370  00FA42  D002               	goto	l2771
  2371  00FA44  2A49               	incf	ManejaMovimientos@mes_tr,f,c
  2372  00FA46  D000               	goto	l2771
  2373  00FA48                     l2771:
  2374                           
  2375                           ;main.c: 403: sprintf(buffer1,"%02u",mes_tr);
  2376  00FA48  0E88               	movlw	low _buffer1
  2377  00FA4A  6E0D               	movwf	sprintf@sp,c
  2378  00FA4C  0E00               	movlw	high _buffer1
  2379  00FA4E  6E0E               	movwf	sprintf@sp+1,c
  2380  00FA50  0ED4               	movlw	low (STR_7+10)
  2381  00FA52  6E0F               	movwf	sprintf@f,c
  2382  00FA54  0EFF               	movlw	high (STR_7+10)
  2383  00FA56  6E10               	movwf	sprintf@f+1,c
  2384  00FA58  C049  F011         	movff	ManejaMovimientos@mes_tr,?_sprintf+4
  2385  00FA5C  6A12               	clrf	?_sprintf+5,c
  2386  00FA5E  ECEC  F07A         	call	_sprintf	;wreg free
  2387                           
  2388                           ;main.c: 404: Lcd_Out(3, 3, buffer1);
  2389  00FA62  0E03               	movlw	3
  2390  00FA64  6E40               	movwf	Lcd_Out@x,c
  2391  00FA66  0E88               	movlw	low _buffer1
  2392  00FA68  6E41               	movwf	Lcd_Out@buffer,c
  2393  00FA6A  0E00               	movlw	high _buffer1
  2394  00FA6C  6E42               	movwf	Lcd_Out@buffer+1,c
  2395  00FA6E  0E03               	movlw	3
  2396  00FA70  EC3C  F074         	call	_Lcd_Out
  2397                           
  2398                           ;main.c: 405: Lcd_Out(3, 3, "" );
  2399  00FA74  0E03               	movlw	3
  2400  00FA76  6E40               	movwf	Lcd_Out@x,c
  2401  00FA78  0EEB               	movlw	low (STR_6+20)
  2402  00FA7A  6E41               	movwf	Lcd_Out@buffer,c
  2403  00FA7C  0EFE               	movlw	high (STR_6+20)
  2404  00FA7E  6E42               	movwf	Lcd_Out@buffer+1,c
  2405  00FA80  0E03               	movlw	3
  2406  00FA82  EC3C  F074         	call	_Lcd_Out
  2407                           
  2408                           ;main.c: 406: }else if(posicion == 6){
  2409  00FA86  D07E               	goto	l2813
  2410  00FA88                     l2777:
  2411  00FA88  0E06               	movlw	6
  2412  00FA8A  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2413  00FA8C  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2414  00FA8E  A4D8               	btfss	status,2,c
  2415  00FA90  D025               	goto	l2789
  2416                           
  2417                           ;main.c: 407: if(anio_tr<99){anio_tr++;}
  2418  00FA92  0E63               	movlw	99
  2419  00FA94  604A               	cpfslt	ManejaMovimientos@anio_tr,c
  2420  00FA96  D002               	goto	l2783
  2421  00FA98  2A4A               	incf	ManejaMovimientos@anio_tr,f,c
  2422  00FA9A  D000               	goto	l2783
  2423  00FA9C                     l2783:
  2424                           
  2425                           ;main.c: 408: sprintf(buffer1,"%02u",anio_tr);
  2426  00FA9C  0E88               	movlw	low _buffer1
  2427  00FA9E  6E0D               	movwf	sprintf@sp,c
  2428  00FAA0  0E00               	movlw	high _buffer1
  2429  00FAA2  6E0E               	movwf	sprintf@sp+1,c
  2430  00FAA4  0ED4               	movlw	low (STR_7+10)
  2431  00FAA6  6E0F               	movwf	sprintf@f,c
  2432  00FAA8  0EFF               	movlw	high (STR_7+10)
  2433  00FAAA  6E10               	movwf	sprintf@f+1,c
  2434  00FAAC  C04A  F011         	movff	ManejaMovimientos@anio_tr,?_sprintf+4
  2435  00FAB0  6A12               	clrf	?_sprintf+5,c
  2436  00FAB2  ECEC  F07A         	call	_sprintf	;wreg free
  2437                           
  2438                           ;main.c: 409: Lcd_Out(3, 6, buffer1);
  2439  00FAB6  0E06               	movlw	6
  2440  00FAB8  6E40               	movwf	Lcd_Out@x,c
  2441  00FABA  0E88               	movlw	low _buffer1
  2442  00FABC  6E41               	movwf	Lcd_Out@buffer,c
  2443  00FABE  0E00               	movlw	high _buffer1
  2444  00FAC0  6E42               	movwf	Lcd_Out@buffer+1,c
  2445  00FAC2  0E03               	movlw	3
  2446  00FAC4  EC3C  F074         	call	_Lcd_Out
  2447                           
  2448                           ;main.c: 410: Lcd_Out(3, 6, "" );
  2449  00FAC8  0E06               	movlw	6
  2450  00FACA  6E40               	movwf	Lcd_Out@x,c
  2451  00FACC  0EEB               	movlw	low (STR_6+20)
  2452  00FACE  6E41               	movwf	Lcd_Out@buffer,c
  2453  00FAD0  0EFE               	movlw	high (STR_6+20)
  2454  00FAD2  6E42               	movwf	Lcd_Out@buffer+1,c
  2455  00FAD4  0E03               	movlw	3
  2456  00FAD6  EC3C  F074         	call	_Lcd_Out
  2457                           
  2458                           ;main.c: 411: }else if(posicion == 8){
  2459  00FADA  D054               	goto	l2813
  2460  00FADC                     l2789:
  2461  00FADC  0E08               	movlw	8
  2462  00FADE  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2463  00FAE0  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2464  00FAE2  A4D8               	btfss	status,2,c
  2465  00FAE4  D025               	goto	l2801
  2466                           
  2467                           ;main.c: 412: if(hora_tr<23){hora_tr++;}
  2468  00FAE6  0E17               	movlw	23
  2469  00FAE8  604B               	cpfslt	ManejaMovimientos@hora_tr,c
  2470  00FAEA  D002               	goto	l2795
  2471  00FAEC  2A4B               	incf	ManejaMovimientos@hora_tr,f,c
  2472  00FAEE  D000               	goto	l2795
  2473  00FAF0                     l2795:
  2474                           
  2475                           ;main.c: 413: sprintf(buffer1,"%02u",hora_tr);
  2476  00FAF0  0E88               	movlw	low _buffer1
  2477  00FAF2  6E0D               	movwf	sprintf@sp,c
  2478  00FAF4  0E00               	movlw	high _buffer1
  2479  00FAF6  6E0E               	movwf	sprintf@sp+1,c
  2480  00FAF8  0ED4               	movlw	low (STR_7+10)
  2481  00FAFA  6E0F               	movwf	sprintf@f,c
  2482  00FAFC  0EFF               	movlw	high (STR_7+10)
  2483  00FAFE  6E10               	movwf	sprintf@f+1,c
  2484  00FB00  C04B  F011         	movff	ManejaMovimientos@hora_tr,?_sprintf+4
  2485  00FB04  6A12               	clrf	?_sprintf+5,c
  2486  00FB06  ECEC  F07A         	call	_sprintf	;wreg free
  2487                           
  2488                           ;main.c: 414: Lcd_Out(4, 0, buffer1);
  2489  00FB0A  0E00               	movlw	0
  2490  00FB0C  6E40               	movwf	Lcd_Out@x,c
  2491  00FB0E  0E88               	movlw	low _buffer1
  2492  00FB10  6E41               	movwf	Lcd_Out@buffer,c
  2493  00FB12  0E00               	movlw	high _buffer1
  2494  00FB14  6E42               	movwf	Lcd_Out@buffer+1,c
  2495  00FB16  0E04               	movlw	4
  2496  00FB18  EC3C  F074         	call	_Lcd_Out
  2497                           
  2498                           ;main.c: 415: Lcd_Out(4, 0, "" );
  2499  00FB1C  0E00               	movlw	0
  2500  00FB1E  6E40               	movwf	Lcd_Out@x,c
  2501  00FB20  0EEB               	movlw	low (STR_6+20)
  2502  00FB22  6E41               	movwf	Lcd_Out@buffer,c
  2503  00FB24  0EFE               	movlw	high (STR_6+20)
  2504  00FB26  6E42               	movwf	Lcd_Out@buffer+1,c
  2505  00FB28  0E04               	movlw	4
  2506  00FB2A  EC3C  F074         	call	_Lcd_Out
  2507                           
  2508                           ;main.c: 416: }else if(posicion == 10){
  2509  00FB2E  D02A               	goto	l2813
  2510  00FB30                     l2801:
  2511  00FB30  0E0A               	movlw	10
  2512  00FB32  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2513  00FB34  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2514  00FB36  A4D8               	btfss	status,2,c
  2515  00FB38  D025               	goto	l2813
  2516                           
  2517                           ;main.c: 417: if(minuto_tr<59){minuto_tr++;}
  2518  00FB3A  0E3B               	movlw	59
  2519  00FB3C  604C               	cpfslt	ManejaMovimientos@minuto_tr,c
  2520  00FB3E  D002               	goto	l2807
  2521  00FB40  2A4C               	incf	ManejaMovimientos@minuto_tr,f,c
  2522  00FB42  D000               	goto	l2807
  2523  00FB44                     l2807:
  2524                           
  2525                           ;main.c: 418: sprintf(buffer1,"%02u",minuto_tr);
  2526  00FB44  0E88               	movlw	low _buffer1
  2527  00FB46  6E0D               	movwf	sprintf@sp,c
  2528  00FB48  0E00               	movlw	high _buffer1
  2529  00FB4A  6E0E               	movwf	sprintf@sp+1,c
  2530  00FB4C  0ED4               	movlw	low (STR_7+10)
  2531  00FB4E  6E0F               	movwf	sprintf@f,c
  2532  00FB50  0EFF               	movlw	high (STR_7+10)
  2533  00FB52  6E10               	movwf	sprintf@f+1,c
  2534  00FB54  C04C  F011         	movff	ManejaMovimientos@minuto_tr,?_sprintf+4
  2535  00FB58  6A12               	clrf	?_sprintf+5,c
  2536  00FB5A  ECEC  F07A         	call	_sprintf	;wreg free
  2537                           
  2538                           ;main.c: 419: Lcd_Out(4, 3, buffer1);
  2539  00FB5E  0E03               	movlw	3
  2540  00FB60  6E40               	movwf	Lcd_Out@x,c
  2541  00FB62  0E88               	movlw	low _buffer1
  2542  00FB64  6E41               	movwf	Lcd_Out@buffer,c
  2543  00FB66  0E00               	movlw	high _buffer1
  2544  00FB68  6E42               	movwf	Lcd_Out@buffer+1,c
  2545  00FB6A  0E04               	movlw	4
  2546  00FB6C  EC3C  F074         	call	_Lcd_Out
  2547                           
  2548                           ;main.c: 420: Lcd_Out(4, 3, "" );
  2549  00FB70  0E03               	movlw	3
  2550  00FB72  6E40               	movwf	Lcd_Out@x,c
  2551  00FB74  0EEB               	movlw	low (STR_6+20)
  2552  00FB76  6E41               	movwf	Lcd_Out@buffer,c
  2553  00FB78  0EFE               	movlw	high (STR_6+20)
  2554  00FB7A  6E42               	movwf	Lcd_Out@buffer+1,c
  2555  00FB7C  0E04               	movlw	4
  2556  00FB7E  EC3C  F074         	call	_Lcd_Out
  2557  00FB82  D000               	goto	l2813
  2558  00FB84                     l2813:
  2559                           
  2560                           ;main.c: 421: }
  2561                           ;main.c: 423: }
  2562                           ;main.c: 424: if(Sw_Right = PORTAbits.RA2 == 0){
  2563  00FB84  B480               	btfsc	3968,2,c	;volatile
  2564  00FB86  D002               	goto	u2160
  2565  00FB88  0E01               	movlw	1
  2566  00FB8A  D001               	goto	u2170
  2567  00FB8C                     u2160:
  2568  00FB8C  0E00               	movlw	0
  2569  00FB8E                     u2170:
  2570  00FB8E  0100               	movlb	0	; () banked
  2571  00FB90  6F85               	movwf	_Sw_Right& (0+255),b
  2572  00FB92  0100               	movlb	0	; () banked
  2573  00FB94  5185               	movf	_Sw_Right& (0+255),w,b
  2574  00FB96  B4D8               	btfsc	status,2,c
  2575  00FB98  D02D               	goto	l2821
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 426: posicion+=2;
  2579  00FB9A  0E02               	movlw	2
  2580  00FB9C  264D               	addwf	ManejaMovimientos@posicion,f,c
  2581  00FB9E  0E00               	movlw	0
  2582  00FBA0  224E               	addwfc	ManejaMovimientos@posicion+1,f,c
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;main.c: 427: i=0;
  2586  00FBA2  0E00               	movlw	0
  2587  00FBA4  0100               	movlb	0	; () banked
  2588  00FBA6  6F7D               	movwf	(_i+1)& (0+255),b
  2589  00FBA8  0E00               	movlw	0
  2590  00FBAA  6F7C               	movwf	_i& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 428: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion+1], "" );
  2594  00FBAC  C04D  F045         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2595  00FBB0  C04E  F046         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2596  00FBB4  90D8               	bcf	status,0,c
  2597  00FBB6  3645               	rlcf	??_ManejaMovimientos,f,c
  2598  00FBB8  3646               	rlcf	??_ManejaMovimientos+1,f,c
  2599  00FBBA  0E02               	movlw	2
  2600  00FBBC  2645               	addwf	??_ManejaMovimientos,f,c
  2601  00FBBE  0E00               	movlw	0
  2602  00FBC0  2246               	addwfc	??_ManejaMovimientos+1,f,c
  2603  00FBC2  0E9C               	movlw	low _posicionesLeft
  2604  00FBC4  2445               	addwf	??_ManejaMovimientos,w,c
  2605  00FBC6  6ED9               	movwf	fsr2l,c
  2606  00FBC8  0E00               	movlw	high _posicionesLeft
  2607  00FBCA  2046               	addwfc	??_ManejaMovimientos+1,w,c
  2608  00FBCC  6EDA               	movwf	fsr2h,c
  2609  00FBCE  50DF               	movf	indf2,w,c
  2610  00FBD0  6E40               	movwf	Lcd_Out@x,c
  2611  00FBD2  0EEB               	movlw	low (STR_6+20)
  2612  00FBD4  6E41               	movwf	Lcd_Out@buffer,c
  2613  00FBD6  0EFE               	movlw	high (STR_6+20)
  2614  00FBD8  6E42               	movwf	Lcd_Out@buffer+1,c
  2615  00FBDA  90D8               	bcf	status,0,c
  2616  00FBDC  344D               	rlcf	ManejaMovimientos@posicion,w,c
  2617  00FBDE  6ED9               	movwf	fsr2l,c
  2618  00FBE0  344E               	rlcf	ManejaMovimientos@posicion+1,w,c
  2619  00FBE2  6EDA               	movwf	fsr2h,c
  2620  00FBE4  0E9C               	movlw	low _posicionesLeft
  2621  00FBE6  26D9               	addwf	fsr2l,f,c
  2622  00FBE8  0E00               	movlw	high _posicionesLeft
  2623  00FBEA  22DA               	addwfc	fsr2h,f,c
  2624  00FBEC  50DF               	movf	indf2,w,c
  2625  00FBEE  EC3C  F074         	call	_Lcd_Out
  2626  00FBF2  D000               	goto	l2821
  2627  00FBF4                     l2821:
  2628                           
  2629                           ;main.c: 430: }
  2630                           ;main.c: 432: if(Sw_Left = PORTAbits.RA0 == 0){
  2631  00FBF4  B080               	btfsc	3968,0,c	;volatile
  2632  00FBF6  D002               	goto	u2190
  2633  00FBF8  0E01               	movlw	1
  2634  00FBFA  D001               	goto	u2200
  2635  00FBFC                     u2190:
  2636  00FBFC  0E00               	movlw	0
  2637  00FBFE                     u2200:
  2638  00FBFE  0100               	movlb	0	; () banked
  2639  00FC00  6F84               	movwf	_Sw_Left& (0+255),b
  2640  00FC02  0100               	movlb	0	; () banked
  2641  00FC04  5184               	movf	_Sw_Left& (0+255),w,b
  2642  00FC06  B4D8               	btfsc	status,2,c
  2643  00FC08  D02D               	goto	l2829
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;main.c: 434: posicion-=2;
  2647  00FC0A  0EFE               	movlw	254
  2648  00FC0C  264D               	addwf	ManejaMovimientos@posicion,f,c
  2649  00FC0E  0EFF               	movlw	255
  2650  00FC10  224E               	addwfc	ManejaMovimientos@posicion+1,f,c
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 435: i=0;
  2654  00FC12  0E00               	movlw	0
  2655  00FC14  0100               	movlb	0	; () banked
  2656  00FC16  6F7D               	movwf	(_i+1)& (0+255),b
  2657  00FC18  0E00               	movlw	0
  2658  00FC1A  6F7C               	movwf	_i& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 436: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion+1], "" );
  2662  00FC1C  C04D  F045         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2663  00FC20  C04E  F046         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2664  00FC24  90D8               	bcf	status,0,c
  2665  00FC26  3645               	rlcf	??_ManejaMovimientos,f,c
  2666  00FC28  3646               	rlcf	??_ManejaMovimientos+1,f,c
  2667  00FC2A  0E02               	movlw	2
  2668  00FC2C  2645               	addwf	??_ManejaMovimientos,f,c
  2669  00FC2E  0E00               	movlw	0
  2670  00FC30  2246               	addwfc	??_ManejaMovimientos+1,f,c
  2671  00FC32  0E9C               	movlw	low _posicionesLeft
  2672  00FC34  2445               	addwf	??_ManejaMovimientos,w,c
  2673  00FC36  6ED9               	movwf	fsr2l,c
  2674  00FC38  0E00               	movlw	high _posicionesLeft
  2675  00FC3A  2046               	addwfc	??_ManejaMovimientos+1,w,c
  2676  00FC3C  6EDA               	movwf	fsr2h,c
  2677  00FC3E  50DF               	movf	indf2,w,c
  2678  00FC40  6E40               	movwf	Lcd_Out@x,c
  2679  00FC42  0EEB               	movlw	low (STR_6+20)
  2680  00FC44  6E41               	movwf	Lcd_Out@buffer,c
  2681  00FC46  0EFE               	movlw	high (STR_6+20)
  2682  00FC48  6E42               	movwf	Lcd_Out@buffer+1,c
  2683  00FC4A  90D8               	bcf	status,0,c
  2684  00FC4C  344D               	rlcf	ManejaMovimientos@posicion,w,c
  2685  00FC4E  6ED9               	movwf	fsr2l,c
  2686  00FC50  344E               	rlcf	ManejaMovimientos@posicion+1,w,c
  2687  00FC52  6EDA               	movwf	fsr2h,c
  2688  00FC54  0E9C               	movlw	low _posicionesLeft
  2689  00FC56  26D9               	addwf	fsr2l,f,c
  2690  00FC58  0E00               	movlw	high _posicionesLeft
  2691  00FC5A  22DA               	addwfc	fsr2h,f,c
  2692  00FC5C  50DF               	movf	indf2,w,c
  2693  00FC5E  EC3C  F074         	call	_Lcd_Out
  2694  00FC62  D000               	goto	l2829
  2695  00FC64                     l2829:
  2696                           
  2697                           ;main.c: 438: }
  2698                           ;main.c: 440: if(Sw_Down = PORTCbits.RC4 == 0){
  2699  00FC64  B882               	btfsc	3970,4,c	;volatile
  2700  00FC66  D002               	goto	u2220
  2701  00FC68  0E01               	movlw	1
  2702  00FC6A  D001               	goto	u2230
  2703  00FC6C                     u2220:
  2704  00FC6C  0E00               	movlw	0
  2705  00FC6E                     u2230:
  2706  00FC6E  0100               	movlb	0	; () banked
  2707  00FC70  6F83               	movwf	_Sw_Down& (0+255),b
  2708  00FC72  0100               	movlb	0	; () banked
  2709  00FC74  5183               	movf	_Sw_Down& (0+255),w,b
  2710  00FC76  B4D8               	btfsc	status,2,c
  2711  00FC78  D0F8               	goto	l2903
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 442: i=0;
  2715  00FC7A  0E00               	movlw	0
  2716  00FC7C  0100               	movlb	0	; () banked
  2717  00FC7E  6F7D               	movwf	(_i+1)& (0+255),b
  2718  00FC80  0E00               	movlw	0
  2719  00FC82  6F7C               	movwf	_i& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;main.c: 443: if(posicion == 0){
  2723  00FC84  504D               	movf	ManejaMovimientos@posicion,w,c
  2724  00FC86  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2725  00FC88  A4D8               	btfss	status,2,c
  2726  00FC8A  D01D               	goto	l2843
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;main.c: 444: if(diasem_tr>0){diasem_tr--;}
  2730  00FC8C  5047               	movf	ManejaMovimientos@diasem_tr,w,c
  2731  00FC8E  B4D8               	btfsc	status,2,c
  2732  00FC90  D002               	goto	l2839
  2733                           
  2734                           ; BSR set to: 0
  2735  00FC92  0647               	decf	ManejaMovimientos@diasem_tr,f,c
  2736  00FC94  D000               	goto	l2839
  2737  00FC96                     l2839:
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 445: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2741  00FC96  0E00               	movlw	0
  2742  00FC98  6E40               	movwf	Lcd_Out@x,c
  2743  00FC9A  C047  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2744  00FC9E  6A29               	clrf	Convert_diasem@dia+1,c
  2745  00FCA0  EC43  F076         	call	_Convert_diasem	;wreg free
  2746  00FCA4  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2747  00FCA8  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2748  00FCAC  0E02               	movlw	2
  2749  00FCAE  EC3C  F074         	call	_Lcd_Out
  2750                           
  2751                           ;main.c: 446: Lcd_Out(2, 0, "" );
  2752  00FCB2  0E00               	movlw	0
  2753  00FCB4  6E40               	movwf	Lcd_Out@x,c
  2754  00FCB6  0EEB               	movlw	low (STR_6+20)
  2755  00FCB8  6E41               	movwf	Lcd_Out@buffer,c
  2756  00FCBA  0EFE               	movlw	high (STR_6+20)
  2757  00FCBC  6E42               	movwf	Lcd_Out@buffer+1,c
  2758  00FCBE  0E02               	movlw	2
  2759  00FCC0  EC3C  F074         	call	_Lcd_Out
  2760                           
  2761                           ;main.c: 447: }else if(posicion == 2){
  2762  00FCC4  D0D2               	goto	l2903
  2763  00FCC6                     l2843:
  2764  00FCC6  0E02               	movlw	2
  2765  00FCC8  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2766  00FCCA  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2767  00FCCC  A4D8               	btfss	status,2,c
  2768  00FCCE  D025               	goto	l2855
  2769                           
  2770                           ;main.c: 448: if(dia_tr>1){dia_tr--;}
  2771  00FCD0  0E01               	movlw	1
  2772  00FCD2  6448               	cpfsgt	ManejaMovimientos@dia_tr,c
  2773  00FCD4  D002               	goto	l2849
  2774  00FCD6  0648               	decf	ManejaMovimientos@dia_tr,f,c
  2775  00FCD8  D000               	goto	l2849
  2776  00FCDA                     l2849:
  2777                           
  2778                           ;main.c: 449: sprintf(buffer1,"%02u",dia_tr);
  2779  00FCDA  0E88               	movlw	low _buffer1
  2780  00FCDC  6E0D               	movwf	sprintf@sp,c
  2781  00FCDE  0E00               	movlw	high _buffer1
  2782  00FCE0  6E0E               	movwf	sprintf@sp+1,c
  2783  00FCE2  0ED4               	movlw	low (STR_7+10)
  2784  00FCE4  6E0F               	movwf	sprintf@f,c
  2785  00FCE6  0EFF               	movlw	high (STR_7+10)
  2786  00FCE8  6E10               	movwf	sprintf@f+1,c
  2787  00FCEA  C048  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2788  00FCEE  6A12               	clrf	?_sprintf+5,c
  2789  00FCF0  ECEC  F07A         	call	_sprintf	;wreg free
  2790                           
  2791                           ;main.c: 450: Lcd_Out(3, 0, buffer1);
  2792  00FCF4  0E00               	movlw	0
  2793  00FCF6  6E40               	movwf	Lcd_Out@x,c
  2794  00FCF8  0E88               	movlw	low _buffer1
  2795  00FCFA  6E41               	movwf	Lcd_Out@buffer,c
  2796  00FCFC  0E00               	movlw	high _buffer1
  2797  00FCFE  6E42               	movwf	Lcd_Out@buffer+1,c
  2798  00FD00  0E03               	movlw	3
  2799  00FD02  EC3C  F074         	call	_Lcd_Out
  2800                           
  2801                           ;main.c: 451: Lcd_Out(3, 0, "" );
  2802  00FD06  0E00               	movlw	0
  2803  00FD08  6E40               	movwf	Lcd_Out@x,c
  2804  00FD0A  0EEB               	movlw	low (STR_6+20)
  2805  00FD0C  6E41               	movwf	Lcd_Out@buffer,c
  2806  00FD0E  0EFE               	movlw	high (STR_6+20)
  2807  00FD10  6E42               	movwf	Lcd_Out@buffer+1,c
  2808  00FD12  0E03               	movlw	3
  2809  00FD14  EC3C  F074         	call	_Lcd_Out
  2810                           
  2811                           ;main.c: 452: }else if(posicion == 4){
  2812  00FD18  D0A8               	goto	l2903
  2813  00FD1A                     l2855:
  2814  00FD1A  0E04               	movlw	4
  2815  00FD1C  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2816  00FD1E  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2817  00FD20  A4D8               	btfss	status,2,c
  2818  00FD22  D025               	goto	l2867
  2819                           
  2820                           ;main.c: 453: if(mes_tr>1){mes_tr--;}
  2821  00FD24  0E01               	movlw	1
  2822  00FD26  6449               	cpfsgt	ManejaMovimientos@mes_tr,c
  2823  00FD28  D002               	goto	l2861
  2824  00FD2A  0649               	decf	ManejaMovimientos@mes_tr,f,c
  2825  00FD2C  D000               	goto	l2861
  2826  00FD2E                     l2861:
  2827                           
  2828                           ;main.c: 454: sprintf(buffer1,"%02u",mes_tr);
  2829  00FD2E  0E88               	movlw	low _buffer1
  2830  00FD30  6E0D               	movwf	sprintf@sp,c
  2831  00FD32  0E00               	movlw	high _buffer1
  2832  00FD34  6E0E               	movwf	sprintf@sp+1,c
  2833  00FD36  0ED4               	movlw	low (STR_7+10)
  2834  00FD38  6E0F               	movwf	sprintf@f,c
  2835  00FD3A  0EFF               	movlw	high (STR_7+10)
  2836  00FD3C  6E10               	movwf	sprintf@f+1,c
  2837  00FD3E  C049  F011         	movff	ManejaMovimientos@mes_tr,?_sprintf+4
  2838  00FD42  6A12               	clrf	?_sprintf+5,c
  2839  00FD44  ECEC  F07A         	call	_sprintf	;wreg free
  2840                           
  2841                           ;main.c: 455: Lcd_Out(3, 3, buffer1);
  2842  00FD48  0E03               	movlw	3
  2843  00FD4A  6E40               	movwf	Lcd_Out@x,c
  2844  00FD4C  0E88               	movlw	low _buffer1
  2845  00FD4E  6E41               	movwf	Lcd_Out@buffer,c
  2846  00FD50  0E00               	movlw	high _buffer1
  2847  00FD52  6E42               	movwf	Lcd_Out@buffer+1,c
  2848  00FD54  0E03               	movlw	3
  2849  00FD56  EC3C  F074         	call	_Lcd_Out
  2850                           
  2851                           ;main.c: 456: Lcd_Out(3, 3, "" );
  2852  00FD5A  0E03               	movlw	3
  2853  00FD5C  6E40               	movwf	Lcd_Out@x,c
  2854  00FD5E  0EEB               	movlw	low (STR_6+20)
  2855  00FD60  6E41               	movwf	Lcd_Out@buffer,c
  2856  00FD62  0EFE               	movlw	high (STR_6+20)
  2857  00FD64  6E42               	movwf	Lcd_Out@buffer+1,c
  2858  00FD66  0E03               	movlw	3
  2859  00FD68  EC3C  F074         	call	_Lcd_Out
  2860                           
  2861                           ;main.c: 457: }else if(posicion == 6){
  2862  00FD6C  D07E               	goto	l2903
  2863  00FD6E                     l2867:
  2864  00FD6E  0E06               	movlw	6
  2865  00FD70  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2866  00FD72  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2867  00FD74  A4D8               	btfss	status,2,c
  2868  00FD76  D025               	goto	l2879
  2869                           
  2870                           ;main.c: 458: if(anio_tr>20){anio_tr--;}
  2871  00FD78  0E14               	movlw	20
  2872  00FD7A  644A               	cpfsgt	ManejaMovimientos@anio_tr,c
  2873  00FD7C  D002               	goto	l2873
  2874  00FD7E  064A               	decf	ManejaMovimientos@anio_tr,f,c
  2875  00FD80  D000               	goto	l2873
  2876  00FD82                     l2873:
  2877                           
  2878                           ;main.c: 459: sprintf(buffer1,"%02u",anio_tr);
  2879  00FD82  0E88               	movlw	low _buffer1
  2880  00FD84  6E0D               	movwf	sprintf@sp,c
  2881  00FD86  0E00               	movlw	high _buffer1
  2882  00FD88  6E0E               	movwf	sprintf@sp+1,c
  2883  00FD8A  0ED4               	movlw	low (STR_7+10)
  2884  00FD8C  6E0F               	movwf	sprintf@f,c
  2885  00FD8E  0EFF               	movlw	high (STR_7+10)
  2886  00FD90  6E10               	movwf	sprintf@f+1,c
  2887  00FD92  C04A  F011         	movff	ManejaMovimientos@anio_tr,?_sprintf+4
  2888  00FD96  6A12               	clrf	?_sprintf+5,c
  2889  00FD98  ECEC  F07A         	call	_sprintf	;wreg free
  2890                           
  2891                           ;main.c: 460: Lcd_Out(3, 6, buffer1);
  2892  00FD9C  0E06               	movlw	6
  2893  00FD9E  6E40               	movwf	Lcd_Out@x,c
  2894  00FDA0  0E88               	movlw	low _buffer1
  2895  00FDA2  6E41               	movwf	Lcd_Out@buffer,c
  2896  00FDA4  0E00               	movlw	high _buffer1
  2897  00FDA6  6E42               	movwf	Lcd_Out@buffer+1,c
  2898  00FDA8  0E03               	movlw	3
  2899  00FDAA  EC3C  F074         	call	_Lcd_Out
  2900                           
  2901                           ;main.c: 461: Lcd_Out(3, 6, "" );
  2902  00FDAE  0E06               	movlw	6
  2903  00FDB0  6E40               	movwf	Lcd_Out@x,c
  2904  00FDB2  0EEB               	movlw	low (STR_6+20)
  2905  00FDB4  6E41               	movwf	Lcd_Out@buffer,c
  2906  00FDB6  0EFE               	movlw	high (STR_6+20)
  2907  00FDB8  6E42               	movwf	Lcd_Out@buffer+1,c
  2908  00FDBA  0E03               	movlw	3
  2909  00FDBC  EC3C  F074         	call	_Lcd_Out
  2910                           
  2911                           ;main.c: 462: }else if(posicion == 8){
  2912  00FDC0  D054               	goto	l2903
  2913  00FDC2                     l2879:
  2914  00FDC2  0E08               	movlw	8
  2915  00FDC4  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2916  00FDC6  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2917  00FDC8  A4D8               	btfss	status,2,c
  2918  00FDCA  D025               	goto	l2891
  2919                           
  2920                           ;main.c: 463: if(hora_tr>0){hora_tr--;}
  2921  00FDCC  504B               	movf	ManejaMovimientos@hora_tr,w,c
  2922  00FDCE  B4D8               	btfsc	status,2,c
  2923  00FDD0  D002               	goto	l2885
  2924  00FDD2  064B               	decf	ManejaMovimientos@hora_tr,f,c
  2925  00FDD4  D000               	goto	l2885
  2926  00FDD6                     l2885:
  2927                           
  2928                           ;main.c: 464: sprintf(buffer1,"%02u",hora_tr);
  2929  00FDD6  0E88               	movlw	low _buffer1
  2930  00FDD8  6E0D               	movwf	sprintf@sp,c
  2931  00FDDA  0E00               	movlw	high _buffer1
  2932  00FDDC  6E0E               	movwf	sprintf@sp+1,c
  2933  00FDDE  0ED4               	movlw	low (STR_7+10)
  2934  00FDE0  6E0F               	movwf	sprintf@f,c
  2935  00FDE2  0EFF               	movlw	high (STR_7+10)
  2936  00FDE4  6E10               	movwf	sprintf@f+1,c
  2937  00FDE6  C04B  F011         	movff	ManejaMovimientos@hora_tr,?_sprintf+4
  2938  00FDEA  6A12               	clrf	?_sprintf+5,c
  2939  00FDEC  ECEC  F07A         	call	_sprintf	;wreg free
  2940                           
  2941                           ;main.c: 465: Lcd_Out(4, 0, buffer1);
  2942  00FDF0  0E00               	movlw	0
  2943  00FDF2  6E40               	movwf	Lcd_Out@x,c
  2944  00FDF4  0E88               	movlw	low _buffer1
  2945  00FDF6  6E41               	movwf	Lcd_Out@buffer,c
  2946  00FDF8  0E00               	movlw	high _buffer1
  2947  00FDFA  6E42               	movwf	Lcd_Out@buffer+1,c
  2948  00FDFC  0E04               	movlw	4
  2949  00FDFE  EC3C  F074         	call	_Lcd_Out
  2950                           
  2951                           ;main.c: 466: Lcd_Out(4, 0, "" );
  2952  00FE02  0E00               	movlw	0
  2953  00FE04  6E40               	movwf	Lcd_Out@x,c
  2954  00FE06  0EEB               	movlw	low (STR_6+20)
  2955  00FE08  6E41               	movwf	Lcd_Out@buffer,c
  2956  00FE0A  0EFE               	movlw	high (STR_6+20)
  2957  00FE0C  6E42               	movwf	Lcd_Out@buffer+1,c
  2958  00FE0E  0E04               	movlw	4
  2959  00FE10  EC3C  F074         	call	_Lcd_Out
  2960                           
  2961                           ;main.c: 467: }else if(posicion == 10){
  2962  00FE14  D02A               	goto	l2903
  2963  00FE16                     l2891:
  2964  00FE16  0E0A               	movlw	10
  2965  00FE18  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2966  00FE1A  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2967  00FE1C  A4D8               	btfss	status,2,c
  2968  00FE1E  D025               	goto	l2903
  2969                           
  2970                           ;main.c: 468: if(minuto_tr>0){minuto_tr--;}
  2971  00FE20  504C               	movf	ManejaMovimientos@minuto_tr,w,c
  2972  00FE22  B4D8               	btfsc	status,2,c
  2973  00FE24  D002               	goto	l2897
  2974  00FE26  064C               	decf	ManejaMovimientos@minuto_tr,f,c
  2975  00FE28  D000               	goto	l2897
  2976  00FE2A                     l2897:
  2977                           
  2978                           ;main.c: 469: sprintf(buffer1,"%02u",minuto_tr);
  2979  00FE2A  0E88               	movlw	low _buffer1
  2980  00FE2C  6E0D               	movwf	sprintf@sp,c
  2981  00FE2E  0E00               	movlw	high _buffer1
  2982  00FE30  6E0E               	movwf	sprintf@sp+1,c
  2983  00FE32  0ED4               	movlw	low (STR_7+10)
  2984  00FE34  6E0F               	movwf	sprintf@f,c
  2985  00FE36  0EFF               	movlw	high (STR_7+10)
  2986  00FE38  6E10               	movwf	sprintf@f+1,c
  2987  00FE3A  C04C  F011         	movff	ManejaMovimientos@minuto_tr,?_sprintf+4
  2988  00FE3E  6A12               	clrf	?_sprintf+5,c
  2989  00FE40  ECEC  F07A         	call	_sprintf	;wreg free
  2990                           
  2991                           ;main.c: 470: Lcd_Out(4, 3, buffer1);
  2992  00FE44  0E03               	movlw	3
  2993  00FE46  6E40               	movwf	Lcd_Out@x,c
  2994  00FE48  0E88               	movlw	low _buffer1
  2995  00FE4A  6E41               	movwf	Lcd_Out@buffer,c
  2996  00FE4C  0E00               	movlw	high _buffer1
  2997  00FE4E  6E42               	movwf	Lcd_Out@buffer+1,c
  2998  00FE50  0E04               	movlw	4
  2999  00FE52  EC3C  F074         	call	_Lcd_Out
  3000                           
  3001                           ;main.c: 471: Lcd_Out(4, 3, "" );
  3002  00FE56  0E03               	movlw	3
  3003  00FE58  6E40               	movwf	Lcd_Out@x,c
  3004  00FE5A  0EEB               	movlw	low (STR_6+20)
  3005  00FE5C  6E41               	movwf	Lcd_Out@buffer,c
  3006  00FE5E  0EFE               	movlw	high (STR_6+20)
  3007  00FE60  6E42               	movwf	Lcd_Out@buffer+1,c
  3008  00FE62  0E04               	movlw	4
  3009  00FE64  EC3C  F074         	call	_Lcd_Out
  3010  00FE68  D000               	goto	l2903
  3011  00FE6A                     l2903:
  3012                           
  3013                           ;main.c: 472: }
  3014                           ;main.c: 473: }
  3015                           ;main.c: 475: if(Sw_Center = PORTAbits.RA5 == 0){
  3016  00FE6A  BA80               	btfsc	3968,5,c	;volatile
  3017  00FE6C  D002               	goto	u2370
  3018  00FE6E  0E01               	movlw	1
  3019  00FE70  D001               	goto	u2380
  3020  00FE72                     u2370:
  3021  00FE72  0E00               	movlw	0
  3022  00FE74                     u2380:
  3023  00FE74  0100               	movlb	0	; () banked
  3024  00FE76  6F82               	movwf	_Sw_Center& (0+255),b
  3025  00FE78  0100               	movlb	0	; () banked
  3026  00FE7A  5182               	movf	_Sw_Center& (0+255),w,b
  3027  00FE7C  B4D8               	btfsc	status,2,c
  3028  00FE7E  D017               	goto	l2909
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;main.c: 476: diasem = diasem_tr;
  3032  00FE80  C047  F050         	movff	ManejaMovimientos@diasem_tr,_diasem
  3033  00FE84  6A51               	clrf	_diasem+1,c
  3034                           
  3035                           ;main.c: 477: dia = dia_tr;
  3036  00FE86  C048  F05C         	movff	ManejaMovimientos@dia_tr,_dia
  3037  00FE8A  6A5D               	clrf	_dia+1,c
  3038                           
  3039                           ;main.c: 478: mes = mes_tr;
  3040  00FE8C  C049  F05E         	movff	ManejaMovimientos@mes_tr,_mes
  3041  00FE90  6A5F               	clrf	_mes+1,c
  3042                           
  3043                           ;main.c: 479: anio = anio_tr;
  3044  00FE92  C04A  F05A         	movff	ManejaMovimientos@anio_tr,_anio
  3045  00FE96  6A5B               	clrf	_anio+1,c
  3046                           
  3047                           ;main.c: 480: hora = hora_tr;
  3048  00FE98  C04B  F0BA         	movff	ManejaMovimientos@hora_tr,_hora
  3049  00FE9C  0100               	movlb	0	; () banked
  3050  00FE9E  6BBB               	clrf	(_hora+1)& (0+255),b
  3051                           
  3052                           ;main.c: 481: minuto = minuto_tr;
  3053  00FEA0  C04C  F0BC         	movff	ManejaMovimientos@minuto_tr,_minuto
  3054  00FEA4  0100               	movlb	0	; () banked
  3055  00FEA6  6BBD               	clrf	(_minuto+1)& (0+255),b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;main.c: 482: Write_RTC();
  3059  00FEA8  EC29  F079         	call	_Write_RTC	;wreg free
  3060                           
  3061                           ;main.c: 484: break;
  3062  00FEAC  D00B               	goto	l2913
  3063  00FEAE                     l2909:
  3064  00FEAE  0100               	movlb	0	; () banked
  3065  00FEB0  4B7C               	infsnz	_i& (0+255),f,b
  3066  00FEB2  2B7D               	incf	(_i+1)& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069  00FEB4  0100               	movlb	0	; () banked
  3070  00FEB6  BF7D               	btfsc	(_i+1)& (0+255),7,b
  3071  00FEB8  D55A               	goto	l2737
  3072  00FEBA  0100               	movlb	0	; () banked
  3073  00FEBC  517D               	movf	(_i+1)& (0+255),w,b
  3074  00FEBE  E102               	bnz	l2913
  3075  00FEC0  D54F               	goto	L1
  3076  00FEC2  D000               	goto	l2913
  3077  00FEC4                     l2913:
  3078                           
  3079                           ;main.c: 485: }
  3080                           ;main.c: 486: }
  3081                           ;main.c: 488: Lcd_Cmd(12);
  3082  00FEC4  0E0C               	movlw	12
  3083  00FEC6  ECD2  F076         	call	_Lcd_Cmd
  3084  00FECA  0012               	return		;funcret
  3085  00FECC                     __end_of_ManejaMovimientos:
  3086                           	opt stack 0
  3087                           tblptru	equ	0xFF8
  3088                           tblptrh	equ	0xFF7
  3089                           tblptrl	equ	0xFF6
  3090                           tablat	equ	0xFF5
  3091                           prodh	equ	0xFF4
  3092                           prodl	equ	0xFF3
  3093                           postinc0	equ	0xFEE
  3094                           wreg	equ	0xFE8
  3095                           postdec1	equ	0xFE5
  3096                           fsr1l	equ	0xFE1
  3097                           indf2	equ	0xFDF
  3098                           fsr2h	equ	0xFDA
  3099                           fsr2l	equ	0xFD9
  3100                           status	equ	0xFD8
  3101                           
  3102 ;; *************** function _Write_RTC *****************
  3103 ;; Defined at:
  3104 ;;		line 254 in file "../main.c"
  3105 ;; Parameters:    Size  Location     Type
  3106 ;;		None
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;		None
  3109 ;; Return value:  Size  Location     Type
  3110 ;;		None               void
  3111 ;; Registers used:
  3112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3113 ;; Tracked objects:
  3114 ;;		On entry : 0/0
  3115 ;;		On exit  : 0/0
  3116 ;;		Unchanged: 0/0
  3117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3122 ;;Total ram usage:        0 bytes
  3123 ;; Hardware stack levels used:    1
  3124 ;; Hardware stack levels required when called:    2
  3125 ;; This function calls:
  3126 ;;		_RtccWrOn
  3127 ;;		_RtccWriteDate
  3128 ;;		_RtccWriteTime
  3129 ;;		___awdiv
  3130 ;; This function is called by:
  3131 ;;		_main
  3132 ;;		_ManejaMovimientos
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text7
  3137  00F252                     __ptext7:
  3138                           	opt stack 0
  3139  00F252                     _Write_RTC:
  3140                           	opt stack 28
  3141                           
  3142                           ;main.c: 256: RtccWrOn();
  3143                           
  3144                           ;incstack = 0
  3145  00F252  ECEA  F072         	call	_RtccWrOn	;wreg free
  3146                           
  3147                           ;main.c: 258: PIE3bits.RTCCIE=1;
  3148  00F256  80A3               	bsf	4003,0,c	;volatile
  3149                           
  3150                           ;main.c: 259: segundo_d=segundo/10;
  3151  00F258  C07E  F001         	movff	_segundo,___awdiv@dividend
  3152  00F25C  C07F  F002         	movff	_segundo+1,___awdiv@dividend+1
  3153  00F260  0E00               	movlw	0
  3154  00F262  6E04               	movwf	___awdiv@divisor+1,c
  3155  00F264  0E0A               	movlw	10
  3156  00F266  6E03               	movwf	___awdiv@divisor,c
  3157  00F268  EC86  F074         	call	___awdiv	;wreg free
  3158  00F26C  5001               	movf	?___awdiv,w,c
  3159  00F26E  0100               	movlb	0	; () banked
  3160  00F270  6FC9               	movwf	_segundo_d& (0+255),b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 260: segundo_u=segundo-segundo_d*10;
  3164  00F272  0100               	movlb	0	; () banked
  3165  00F274  51C9               	movf	_segundo_d& (0+255),w,b
  3166  00F276  0D0A               	mullw	10
  3167  00F278  50F3               	movf	prodl,w,c
  3168  00F27A  0800               	sublw	0
  3169  00F27C  0100               	movlb	0	; () banked
  3170  00F27E  257E               	addwf	_segundo& (0+255),w,b
  3171  00F280  0100               	movlb	0	; () banked
  3172  00F282  6FCA               	movwf	_segundo_u& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;main.c: 261: RtccTime.f.sec =segundo_d*16+segundo_u;
  3176  00F284  0100               	movlb	0	; () banked
  3177  00F286  51C9               	movf	_segundo_d& (0+255),w,b
  3178  00F288  0D10               	mullw	16
  3179  00F28A  50F3               	movf	prodl,w,c
  3180  00F28C  0100               	movlb	0	; () banked
  3181  00F28E  25CA               	addwf	_segundo_u& (0+255),w,b
  3182  00F290  6E57               	movwf	_RtccTime+1,c
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;main.c: 262: minuto_d=minuto/10;
  3186  00F292  C0BC  F001         	movff	_minuto,___awdiv@dividend
  3187  00F296  C0BD  F002         	movff	_minuto+1,___awdiv@dividend+1
  3188  00F29A  0E00               	movlw	0
  3189  00F29C  6E04               	movwf	___awdiv@divisor+1,c
  3190  00F29E  0E0A               	movlw	10
  3191  00F2A0  6E03               	movwf	___awdiv@divisor,c
  3192  00F2A2  EC86  F074         	call	___awdiv	;wreg free
  3193  00F2A6  5001               	movf	?___awdiv,w,c
  3194  00F2A8  0100               	movlb	0	; () banked
  3195  00F2AA  6FC7               	movwf	_minuto_d& (0+255),b
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;main.c: 263: minuto_u=minuto-minuto_d*10;
  3199  00F2AC  0100               	movlb	0	; () banked
  3200  00F2AE  51C7               	movf	_minuto_d& (0+255),w,b
  3201  00F2B0  0D0A               	mullw	10
  3202  00F2B2  50F3               	movf	prodl,w,c
  3203  00F2B4  0800               	sublw	0
  3204  00F2B6  0100               	movlb	0	; () banked
  3205  00F2B8  25BC               	addwf	_minuto& (0+255),w,b
  3206  00F2BA  0100               	movlb	0	; () banked
  3207  00F2BC  6FC8               	movwf	_minuto_u& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;main.c: 264: RtccTime.f.min =minuto_d*16+minuto_u;
  3211  00F2BE  0100               	movlb	0	; () banked
  3212  00F2C0  51C7               	movf	_minuto_d& (0+255),w,b
  3213  00F2C2  0D10               	mullw	16
  3214  00F2C4  50F3               	movf	prodl,w,c
  3215  00F2C6  0100               	movlb	0	; () banked
  3216  00F2C8  25C8               	addwf	_minuto_u& (0+255),w,b
  3217  00F2CA  6E58               	movwf	_RtccTime+2,c
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;main.c: 265: hora_d=hora/10;
  3221  00F2CC  C0BA  F001         	movff	_hora,___awdiv@dividend
  3222  00F2D0  C0BB  F002         	movff	_hora+1,___awdiv@dividend+1
  3223  00F2D4  0E00               	movlw	0
  3224  00F2D6  6E04               	movwf	___awdiv@divisor+1,c
  3225  00F2D8  0E0A               	movlw	10
  3226  00F2DA  6E03               	movwf	___awdiv@divisor,c
  3227  00F2DC  EC86  F074         	call	___awdiv	;wreg free
  3228  00F2E0  5001               	movf	?___awdiv,w,c
  3229  00F2E2  0100               	movlb	0	; () banked
  3230  00F2E4  6FC3               	movwf	_hora_d& (0+255),b
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;main.c: 266: hora_u=hora-hora_d*10;
  3234  00F2E6  0100               	movlb	0	; () banked
  3235  00F2E8  51C3               	movf	_hora_d& (0+255),w,b
  3236  00F2EA  0D0A               	mullw	10
  3237  00F2EC  50F3               	movf	prodl,w,c
  3238  00F2EE  0800               	sublw	0
  3239  00F2F0  0100               	movlb	0	; () banked
  3240  00F2F2  25BA               	addwf	_hora& (0+255),w,b
  3241  00F2F4  0100               	movlb	0	; () banked
  3242  00F2F6  6FC4               	movwf	_hora_u& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 267: RtccTime.f.hour=hora_d*16+hora_u;
  3246  00F2F8  0100               	movlb	0	; () banked
  3247  00F2FA  51C3               	movf	_hora_d& (0+255),w,b
  3248  00F2FC  0D10               	mullw	16
  3249  00F2FE  50F3               	movf	prodl,w,c
  3250  00F300  0100               	movlb	0	; () banked
  3251  00F302  25C4               	addwf	_hora_u& (0+255),w,b
  3252  00F304  6E59               	movwf	_RtccTime+3,c
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;main.c: 268: anio_d=anio/10;
  3256  00F306  C05A  F001         	movff	_anio,___awdiv@dividend
  3257  00F30A  C05B  F002         	movff	_anio+1,___awdiv@dividend+1
  3258  00F30E  0E00               	movlw	0
  3259  00F310  6E04               	movwf	___awdiv@divisor+1,c
  3260  00F312  0E0A               	movlw	10
  3261  00F314  6E03               	movwf	___awdiv@divisor,c
  3262  00F316  EC86  F074         	call	___awdiv	;wreg free
  3263  00F31A  5001               	movf	?___awdiv,w,c
  3264  00F31C  0100               	movlb	0	; () banked
  3265  00F31E  6FBE               	movwf	_anio_d& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;main.c: 269: anio_u=anio-anio_d*10;
  3269  00F320  0100               	movlb	0	; () banked
  3270  00F322  51BE               	movf	_anio_d& (0+255),w,b
  3271  00F324  0D0A               	mullw	10
  3272  00F326  50F3               	movf	prodl,w,c
  3273  00F328  0800               	sublw	0
  3274  00F32A  245A               	addwf	_anio,w,c
  3275  00F32C  0100               	movlb	0	; () banked
  3276  00F32E  6FBF               	movwf	_anio_u& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;main.c: 270: RtccDate.f.year=anio_d*16+anio_u;
  3280  00F330  0100               	movlb	0	; () banked
  3281  00F332  51BE               	movf	_anio_d& (0+255),w,b
  3282  00F334  0D10               	mullw	16
  3283  00F336  50F3               	movf	prodl,w,c
  3284  00F338  0100               	movlb	0	; () banked
  3285  00F33A  25BF               	addwf	_anio_u& (0+255),w,b
  3286  00F33C  6E55               	movwf	_RtccDate+3,c
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;main.c: 271: mes_d=mes/10;
  3290  00F33E  C05E  F001         	movff	_mes,___awdiv@dividend
  3291  00F342  C05F  F002         	movff	_mes+1,___awdiv@dividend+1
  3292  00F346  0E00               	movlw	0
  3293  00F348  6E04               	movwf	___awdiv@divisor+1,c
  3294  00F34A  0E0A               	movlw	10
  3295  00F34C  6E03               	movwf	___awdiv@divisor,c
  3296  00F34E  EC86  F074         	call	___awdiv	;wreg free
  3297  00F352  5001               	movf	?___awdiv,w,c
  3298  00F354  0100               	movlb	0	; () banked
  3299  00F356  6FC5               	movwf	_mes_d& (0+255),b
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;main.c: 272: mes_u=mes-mes_d*10;
  3303  00F358  0100               	movlb	0	; () banked
  3304  00F35A  51C5               	movf	_mes_d& (0+255),w,b
  3305  00F35C  0D0A               	mullw	10
  3306  00F35E  50F3               	movf	prodl,w,c
  3307  00F360  0800               	sublw	0
  3308  00F362  245E               	addwf	_mes,w,c
  3309  00F364  0100               	movlb	0	; () banked
  3310  00F366  6FC6               	movwf	_mes_u& (0+255),b
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 273: RtccDate.f.mon=mes_d*16+mes_u;
  3314  00F368  0100               	movlb	0	; () banked
  3315  00F36A  51C5               	movf	_mes_d& (0+255),w,b
  3316  00F36C  0D10               	mullw	16
  3317  00F36E  50F3               	movf	prodl,w,c
  3318  00F370  0100               	movlb	0	; () banked
  3319  00F372  25C6               	addwf	_mes_u& (0+255),w,b
  3320  00F374  6E54               	movwf	_RtccDate+2,c
  3321                           
  3322                           ; BSR set to: 0
  3323                           ;main.c: 274: fecha_d=dia/10;
  3324  00F376  C05C  F001         	movff	_dia,___awdiv@dividend
  3325  00F37A  C05D  F002         	movff	_dia+1,___awdiv@dividend+1
  3326  00F37E  0E00               	movlw	0
  3327  00F380  6E04               	movwf	___awdiv@divisor+1,c
  3328  00F382  0E0A               	movlw	10
  3329  00F384  6E03               	movwf	___awdiv@divisor,c
  3330  00F386  EC86  F074         	call	___awdiv	;wreg free
  3331  00F38A  5001               	movf	?___awdiv,w,c
  3332  00F38C  0100               	movlb	0	; () banked
  3333  00F38E  6FC1               	movwf	_fecha_d& (0+255),b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;main.c: 275: fecha_u=dia-fecha_d*10;
  3337  00F390  0100               	movlb	0	; () banked
  3338  00F392  51C1               	movf	_fecha_d& (0+255),w,b
  3339  00F394  0D0A               	mullw	10
  3340  00F396  50F3               	movf	prodl,w,c
  3341  00F398  0800               	sublw	0
  3342  00F39A  245C               	addwf	_dia,w,c
  3343  00F39C  0100               	movlb	0	; () banked
  3344  00F39E  6FC2               	movwf	_fecha_u& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;main.c: 276: RtccDate.f.mday=fecha_d*16+fecha_u;
  3348  00F3A0  0100               	movlb	0	; () banked
  3349  00F3A2  51C1               	movf	_fecha_d& (0+255),w,b
  3350  00F3A4  0D10               	mullw	16
  3351  00F3A6  50F3               	movf	prodl,w,c
  3352  00F3A8  0100               	movlb	0	; () banked
  3353  00F3AA  25C2               	addwf	_fecha_u& (0+255),w,b
  3354  00F3AC  6E53               	movwf	_RtccDate+1,c
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 277: dia_semana=diasem;
  3358  00F3AE  C050  F0C0         	movff	_diasem,_dia_semana
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;main.c: 278: RtccDate.f.wday =diasem;
  3362  00F3B2  C050  F052         	movff	_diasem,_RtccDate
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;main.c: 280: RtccWriteTime(&RtccTime,1);
  3366  00F3B6  0E56               	movlw	low _RtccTime
  3367  00F3B8  6E01               	movwf	RtccWriteTime@pTm,c
  3368  00F3BA  0E00               	movlw	high _RtccTime
  3369  00F3BC  6E02               	movwf	RtccWriteTime@pTm+1,c
  3370  00F3BE  0E01               	movlw	1
  3371  00F3C0  6E03               	movwf	RtccWriteTime@di,c
  3372  00F3C2  EC30  F075         	call	_RtccWriteTime	;wreg free
  3373                           
  3374                           ;main.c: 281: RtccWriteDate(&RtccDate,1);
  3375  00F3C6  0E52               	movlw	low _RtccDate
  3376  00F3C8  6E01               	movwf	RtccWriteDate@pDt,c
  3377  00F3CA  0E00               	movlw	high _RtccDate
  3378  00F3CC  6E02               	movwf	RtccWriteDate@pDt+1,c
  3379  00F3CE  0E01               	movlw	1
  3380  00F3D0  6E03               	movwf	RtccWriteDate@di,c
  3381  00F3D2  EC86  F078         	call	_RtccWriteDate	;wreg free
  3382                           
  3383                           ;main.c: 282: (RTCCFGbits.RTCEN=1);
  3384  00F3D6  010F               	movlb	15	; () banked
  3385  00F3D8  8F3F               	bsf	63,7,b	;volatile
  3386                           
  3387                           ; BSR set to: 15
  3388  00F3DA  0012               	return		;funcret
  3389  00F3DC                     __end_of_Write_RTC:
  3390                           	opt stack 0
  3391                           tblptru	equ	0xFF8
  3392                           tblptrh	equ	0xFF7
  3393                           tblptrl	equ	0xFF6
  3394                           tablat	equ	0xFF5
  3395                           prodh	equ	0xFF4
  3396                           prodl	equ	0xFF3
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           indf2	equ	0xFDF
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function ___awdiv *****************
  3407 ;; Defined at:
  3408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  dividend        2    0[COMRAM] int 
  3411 ;;  divisor         2    2[COMRAM] int 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  quotient        2    6[COMRAM] int 
  3414 ;;  sign            1    5[COMRAM] unsigned char 
  3415 ;;  counter         1    4[COMRAM] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2    0[COMRAM] int 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3426 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3428 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3429 ;;Total ram usage:        8 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_Write_RTC
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text8
  3439  00E90C                     __ptext8:
  3440                           	opt stack 0
  3441  00E90C                     ___awdiv:
  3442                           	opt stack 29
  3443                           
  3444                           ; BSR set to: 15
  3445                           ;incstack = 0
  3446  00E90C  0E00               	movlw	0
  3447  00E90E  6E06               	movwf	___awdiv@sign,c
  3448  00E910  AE04               	btfss	___awdiv@divisor+1,7,c
  3449  00E912  D007               	goto	l2463
  3450  00E914  6C03               	negf	___awdiv@divisor,c
  3451  00E916  1E04               	comf	___awdiv@divisor+1,f,c
  3452  00E918  B0D8               	btfsc	status,0,c
  3453  00E91A  2A04               	incf	___awdiv@divisor+1,f,c
  3454  00E91C  0E01               	movlw	1
  3455  00E91E  6E06               	movwf	___awdiv@sign,c
  3456  00E920  D000               	goto	l2463
  3457  00E922                     l2463:
  3458  00E922  AE02               	btfss	___awdiv@dividend+1,7,c
  3459  00E924  D007               	goto	l2469
  3460  00E926  6C01               	negf	___awdiv@dividend,c
  3461  00E928  1E02               	comf	___awdiv@dividend+1,f,c
  3462  00E92A  B0D8               	btfsc	status,0,c
  3463  00E92C  2A02               	incf	___awdiv@dividend+1,f,c
  3464  00E92E  0E01               	movlw	1
  3465  00E930  1A06               	xorwf	___awdiv@sign,f,c
  3466  00E932  D000               	goto	l2469
  3467  00E934                     l2469:
  3468  00E934  0E00               	movlw	0
  3469  00E936  6E08               	movwf	___awdiv@quotient+1,c
  3470  00E938  0E00               	movlw	0
  3471  00E93A  6E07               	movwf	___awdiv@quotient,c
  3472  00E93C  5003               	movf	___awdiv@divisor,w,c
  3473  00E93E  1004               	iorwf	___awdiv@divisor+1,w,c
  3474  00E940  B4D8               	btfsc	status,2,c
  3475  00E942  D021               	goto	l2491
  3476  00E944  0E01               	movlw	1
  3477  00E946  6E05               	movwf	___awdiv@counter,c
  3478  00E948  D005               	goto	l2477
  3479  00E94A                     l2475:
  3480  00E94A  90D8               	bcf	status,0,c
  3481  00E94C  3603               	rlcf	___awdiv@divisor,f,c
  3482  00E94E  3604               	rlcf	___awdiv@divisor+1,f,c
  3483  00E950  2A05               	incf	___awdiv@counter,f,c
  3484  00E952  D000               	goto	l2477
  3485  00E954                     l2477:
  3486  00E954  BE04               	btfsc	___awdiv@divisor+1,7,c
  3487  00E956  D002               	goto	l2479
  3488  00E958  D7F8               	goto	l2475
  3489  00E95A  D000               	goto	l2479
  3490  00E95C                     l2479:
  3491  00E95C  90D8               	bcf	status,0,c
  3492  00E95E  3607               	rlcf	___awdiv@quotient,f,c
  3493  00E960  3608               	rlcf	___awdiv@quotient+1,f,c
  3494  00E962  5003               	movf	___awdiv@divisor,w,c
  3495  00E964  5C01               	subwf	___awdiv@dividend,w,c
  3496  00E966  5004               	movf	___awdiv@divisor+1,w,c
  3497  00E968  5802               	subwfb	___awdiv@dividend+1,w,c
  3498  00E96A  A0D8               	btfss	status,0,c
  3499  00E96C  D006               	goto	l2487
  3500  00E96E  5003               	movf	___awdiv@divisor,w,c
  3501  00E970  5E01               	subwf	___awdiv@dividend,f,c
  3502  00E972  5004               	movf	___awdiv@divisor+1,w,c
  3503  00E974  5A02               	subwfb	___awdiv@dividend+1,f,c
  3504  00E976  8007               	bsf	___awdiv@quotient,0,c
  3505  00E978  D000               	goto	l2487
  3506  00E97A                     l2487:
  3507  00E97A  90D8               	bcf	status,0,c
  3508  00E97C  3204               	rrcf	___awdiv@divisor+1,f,c
  3509  00E97E  3203               	rrcf	___awdiv@divisor,f,c
  3510  00E980  2E05               	decfsz	___awdiv@counter,f,c
  3511  00E982  D7EC               	goto	l2479
  3512  00E984  D000               	goto	l2491
  3513  00E986                     l2491:
  3514  00E986  5006               	movf	___awdiv@sign,w,c
  3515  00E988  B4D8               	btfsc	status,2,c
  3516  00E98A  D005               	goto	l2495
  3517  00E98C  6C07               	negf	___awdiv@quotient,c
  3518  00E98E  1E08               	comf	___awdiv@quotient+1,f,c
  3519  00E990  B0D8               	btfsc	status,0,c
  3520  00E992  2A08               	incf	___awdiv@quotient+1,f,c
  3521  00E994  D000               	goto	l2495
  3522  00E996                     l2495:
  3523  00E996  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3524  00E99A  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3525  00E99E  0012               	return	
  3526  00E9A0  0012               	return		;funcret
  3527  00E9A2                     __end_of___awdiv:
  3528                           	opt stack 0
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           fsr2h	equ	0xFDA
  3541                           fsr2l	equ	0xFD9
  3542                           status	equ	0xFD8
  3543                           
  3544 ;; *************** function _RtccWriteTime *****************
  3545 ;; Defined at:
  3546 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  pTm             2    0[COMRAM] PTR const struct .
  3549 ;;		 -> RtccTime(4), 
  3550 ;;  di              1    2[COMRAM] enum E7121
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  tempHourWDay    2    9[COMRAM] struct .
  3553 ;;  tempMinSec      2    7[COMRAM] struct .
  3554 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3555 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3556 ;;  wasOn           1    4[COMRAM] enum E7121
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      enum E7337
  3559 ;; Registers used:
  3560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3566 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3567 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3569 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3570 ;;Total ram usage:       11 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    1
  3573 ;; This function calls:
  3574 ;;		_RtccWrOn
  3575 ;; This function is called by:
  3576 ;;		_Write_RTC
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text9
  3581  00EA60                     __ptext9:
  3582                           	opt stack 0
  3583  00EA60                     _RtccWriteTime:
  3584                           	opt stack 28
  3585                           
  3586                           ;incstack = 0
  3587  00EA60  0E00               	movlw	0
  3588  00EA62  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3589  00EA64  EE20 F002          	lfsr	2,2
  3590  00EA68  5001               	movf	RtccWriteTime@pTm,w,c
  3591  00EA6A  26D9               	addwf	fsr2l,f,c
  3592  00EA6C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3593  00EA6E  22DA               	addwfc	fsr2h,f,c
  3594  00EA70  0E5A               	movlw	90
  3595  00EA72  60DF               	cpfslt	indf2,c
  3596  00EA74  0012               	return	
  3597  00EA76  EE20 F001          	lfsr	2,1
  3598  00EA7A  5001               	movf	RtccWriteTime@pTm,w,c
  3599  00EA7C  26D9               	addwf	fsr2l,f,c
  3600  00EA7E  5002               	movf	RtccWriteTime@pTm+1,w,c
  3601  00EA80  22DA               	addwfc	fsr2h,f,c
  3602  00EA82  0E5A               	movlw	90
  3603  00EA84  60DF               	cpfslt	indf2,c
  3604  00EA86  0012               	return	
  3605  00EA88  EE20 F003          	lfsr	2,3
  3606  00EA8C  5001               	movf	RtccWriteTime@pTm,w,c
  3607  00EA8E  26D9               	addwf	fsr2l,f,c
  3608  00EA90  5002               	movf	RtccWriteTime@pTm+1,w,c
  3609  00EA92  22DA               	addwfc	fsr2h,f,c
  3610  00EA94  0E24               	movlw	36
  3611  00EA96  64DF               	cpfsgt	indf2,c
  3612  00EA98  D002               	goto	l2269
  3613  00EA9A  0012               	return	
  3614                           
  3615                           ;	Return value of _RtccWriteTime is never used
  3616  00EA9C  0012               	return	
  3617  00EA9E                     l2269:
  3618  00EA9E  EE20 F002          	lfsr	2,2
  3619  00EAA2  5001               	movf	RtccWriteTime@pTm,w,c
  3620  00EAA4  26D9               	addwf	fsr2l,f,c
  3621  00EAA6  5002               	movf	RtccWriteTime@pTm+1,w,c
  3622  00EAA8  22DA               	addwfc	fsr2h,f,c
  3623  00EAAA  50DF               	movf	indf2,w,c
  3624  00EAAC  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3625  00EAAE  EE20 F001          	lfsr	2,1
  3626  00EAB2  5001               	movf	RtccWriteTime@pTm,w,c
  3627  00EAB4  26D9               	addwf	fsr2l,f,c
  3628  00EAB6  5002               	movf	RtccWriteTime@pTm+1,w,c
  3629  00EAB8  22DA               	addwfc	fsr2h,f,c
  3630  00EABA  50DF               	movf	indf2,w,c
  3631  00EABC  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3632  00EABE  5003               	movf	RtccWriteTime@di,w,c
  3633  00EAC0  B4D8               	btfsc	status,2,c
  3634  00EAC2  D002               	goto	l2275
  3635  00EAC4  9CF2               	bcf	intcon,6,c	;volatile
  3636  00EAC6  D000               	goto	l2275
  3637  00EAC8                     l2275:
  3638  00EAC8  0E00               	movlw	0
  3639  00EACA  BB3F               	btfsc	63,5,b	;volatile
  3640  00EACC  0E01               	movlw	1
  3641  00EACE  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3642  00EAD0  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3643  00EAD2  A4D8               	btfss	status,2,c
  3644  00EAD4  D003               	goto	l2279
  3645  00EAD6  ECEA  F072         	call	_RtccWrOn	;wreg free
  3646  00EADA  D000               	goto	l2279
  3647  00EADC                     l2279:
  3648  00EADC  0E00               	movlw	0
  3649  00EADE  BF3F               	btfsc	63,7,b	;volatile
  3650  00EAE0  0E01               	movlw	1
  3651  00EAE2  6E05               	movwf	RtccWriteTime@wasOn,c
  3652  00EAE4  5005               	movf	RtccWriteTime@wasOn,w,c
  3653  00EAE6  B4D8               	btfsc	status,2,c
  3654  00EAE8  D007               	goto	l2285
  3655  00EAEA  0E00               	movlw	0
  3656  00EAEC  BE91               	btfsc	3985,7,c	;volatile
  3657  00EAEE  0E01               	movlw	1
  3658  00EAF0  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3659  00EAF2  010F               	movlb	15	; () banked
  3660  00EAF4  9F3F               	bcf	63,7,b	;volatile
  3661  00EAF6  D000               	goto	l2285
  3662  00EAF8                     l2285:
  3663  00EAF8  0EFC               	movlw	252
  3664  00EAFA  010F               	movlb	15	; () banked
  3665  00EAFC  173F               	andwf	63,f,b	;volatile
  3666  00EAFE  010F               	movlb	15	; () banked
  3667  00EB00  813F               	bsf	63,0,b	;volatile
  3668                           
  3669                           ; BSR set to: 15
  3670  00EB02  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3671                           
  3672                           ; BSR set to: 15
  3673  00EB06  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3674                           
  3675                           ; BSR set to: 15
  3676  00EB0A  EE20 F003          	lfsr	2,3
  3677  00EB0E  5001               	movf	RtccWriteTime@pTm,w,c
  3678  00EB10  26D9               	addwf	fsr2l,f,c
  3679  00EB12  5002               	movf	RtccWriteTime@pTm+1,w,c
  3680  00EB14  22DA               	addwfc	fsr2h,f,c
  3681  00EB16  50DF               	movf	indf2,w,c
  3682  00EB18  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3683                           
  3684                           ; BSR set to: 15
  3685  00EB1A  0EFC               	movlw	252
  3686  00EB1C  010F               	movlb	15	; () banked
  3687  00EB1E  173F               	andwf	63,f,b	;volatile
  3688                           
  3689                           ; BSR set to: 15
  3690  00EB20  010F               	movlb	15	; () banked
  3691  00EB22  813F               	bsf	63,0,b	;volatile
  3692                           
  3693                           ; BSR set to: 15
  3694  00EB24  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3695                           
  3696                           ; BSR set to: 15
  3697  00EB28  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3698                           
  3699                           ; BSR set to: 15
  3700  00EB2C  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3701                           
  3702                           ; BSR set to: 15
  3703  00EB30  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3704                           
  3705                           ; BSR set to: 15
  3706  00EB34  5005               	movf	RtccWriteTime@wasOn,w,c
  3707  00EB36  B4D8               	btfsc	status,2,c
  3708  00EB38  D00D               	goto	l2317
  3709                           
  3710                           ; BSR set to: 15
  3711  00EB3A  010F               	movlb	15	; () banked
  3712  00EB3C  8F3F               	bsf	63,7,b	;volatile
  3713                           
  3714                           ; BSR set to: 15
  3715  00EB3E  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3716  00EB40  B4D8               	btfsc	status,2,c
  3717  00EB42  D002               	goto	l2313
  3718                           
  3719                           ; BSR set to: 15
  3720  00EB44  8E91               	bsf	3985,7,c	;volatile
  3721  00EB46  D000               	goto	l2313
  3722  00EB48                     l2313:
  3723                           
  3724                           ; BSR set to: 15
  3725  00EB48  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3726  00EB4A  B4D8               	btfsc	status,2,c
  3727  00EB4C  D009               	goto	l2321
  3728                           
  3729                           ; BSR set to: 15
  3730  00EB4E  ECEA  F072         	call	_RtccWrOn	;wreg free
  3731  00EB52  D006               	goto	l2321
  3732  00EB54                     l2317:
  3733  00EB54  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3734  00EB56  A4D8               	btfss	status,2,c
  3735  00EB58  D003               	goto	l2321
  3736  00EB5A  010F               	movlb	15	; () banked
  3737  00EB5C  9B3F               	bcf	63,5,b	;volatile
  3738                           
  3739                           ; BSR set to: 15
  3740  00EB5E  D000               	goto	l2321
  3741  00EB60                     l2321:
  3742  00EB60  5003               	movf	RtccWriteTime@di,w,c
  3743  00EB62  B4D8               	btfsc	status,2,c
  3744  00EB64  0012               	return	
  3745  00EB66  8CF2               	bsf	intcon,6,c	;volatile
  3746  00EB68  0012               	return	
  3747                           
  3748                           ;	Return value of _RtccWriteTime is never used
  3749  00EB6A  0012               	return		;funcret
  3750  00EB6C                     __end_of_RtccWriteTime:
  3751                           	opt stack 0
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           prodh	equ	0xFF4
  3757                           prodl	equ	0xFF3
  3758                           intcon	equ	0xFF2
  3759                           postinc0	equ	0xFEE
  3760                           wreg	equ	0xFE8
  3761                           postdec1	equ	0xFE5
  3762                           fsr1l	equ	0xFE1
  3763                           indf2	equ	0xFDF
  3764                           fsr2h	equ	0xFDA
  3765                           fsr2l	equ	0xFD9
  3766                           status	equ	0xFD8
  3767                           
  3768 ;; *************** function _RtccWriteDate *****************
  3769 ;; Defined at:
  3770 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3771 ;; Parameters:    Size  Location     Type
  3772 ;;  pDt             2    0[COMRAM] PTR const struct .
  3773 ;;		 -> RtccDate(4), 
  3774 ;;  di              1    2[COMRAM] enum E7121
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  tempHourWDay    2   11[COMRAM] struct .
  3777 ;;  tempDayMonth    2    9[COMRAM] struct .
  3778 ;;  tempYear        2    6[COMRAM] struct .
  3779 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3780 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3781 ;;  wasOn           1    4[COMRAM] enum E7121
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      enum E7337
  3784 ;; Registers used:
  3785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3791 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3792 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3794 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3795 ;;Total ram usage:       13 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    1
  3798 ;; This function calls:
  3799 ;;		_RtccWrOn
  3800 ;; This function is called by:
  3801 ;;		_Write_RTC
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text10
  3806  00F10C                     __ptext10:
  3807                           	opt stack 0
  3808  00F10C                     _RtccWriteDate:
  3809                           	opt stack 28
  3810                           
  3811                           ;incstack = 0
  3812  00F10C  0E00               	movlw	0
  3813  00F10E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3814  00F110  EE20 F002          	lfsr	2,2
  3815  00F114  5001               	movf	RtccWriteDate@pDt,w,c
  3816  00F116  26D9               	addwf	fsr2l,f,c
  3817  00F118  5002               	movf	RtccWriteDate@pDt+1,w,c
  3818  00F11A  22DA               	addwfc	fsr2h,f,c
  3819  00F11C  0E13               	movlw	19
  3820  00F11E  60DF               	cpfslt	indf2,c
  3821  00F120  0012               	return	
  3822  00F122  EE20 F002          	lfsr	2,2
  3823  00F126  5001               	movf	RtccWriteDate@pDt,w,c
  3824  00F128  26D9               	addwf	fsr2l,f,c
  3825  00F12A  5002               	movf	RtccWriteDate@pDt+1,w,c
  3826  00F12C  22DA               	addwfc	fsr2h,f,c
  3827  00F12E  50DF               	movf	indf2,w,c
  3828  00F130  B4D8               	btfsc	status,2,c
  3829  00F132  0012               	return	
  3830  00F134  EE20 F001          	lfsr	2,1
  3831  00F138  5001               	movf	RtccWriteDate@pDt,w,c
  3832  00F13A  26D9               	addwf	fsr2l,f,c
  3833  00F13C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3834  00F13E  22DA               	addwfc	fsr2h,f,c
  3835  00F140  0E32               	movlw	50
  3836  00F142  60DF               	cpfslt	indf2,c
  3837  00F144  0012               	return	
  3838  00F146  EE20 F001          	lfsr	2,1
  3839  00F14A  5001               	movf	RtccWriteDate@pDt,w,c
  3840  00F14C  26D9               	addwf	fsr2l,f,c
  3841  00F14E  5002               	movf	RtccWriteDate@pDt+1,w,c
  3842  00F150  22DA               	addwfc	fsr2h,f,c
  3843  00F152  50DF               	movf	indf2,w,c
  3844  00F154  B4D8               	btfsc	status,2,c
  3845  00F156  0012               	return	
  3846  00F158  EE20 F003          	lfsr	2,3
  3847  00F15C  5001               	movf	RtccWriteDate@pDt,w,c
  3848  00F15E  26D9               	addwf	fsr2l,f,c
  3849  00F160  5002               	movf	RtccWriteDate@pDt+1,w,c
  3850  00F162  22DA               	addwfc	fsr2h,f,c
  3851  00F164  0E99               	movlw	153
  3852  00F166  64DF               	cpfsgt	indf2,c
  3853  00F168  D002               	goto	l2337
  3854  00F16A  0012               	return	
  3855                           
  3856                           ;	Return value of _RtccWriteDate is never used
  3857  00F16C  0012               	return	
  3858  00F16E                     l2337:
  3859  00F16E  EE20 F003          	lfsr	2,3
  3860  00F172  5001               	movf	RtccWriteDate@pDt,w,c
  3861  00F174  26D9               	addwf	fsr2l,f,c
  3862  00F176  5002               	movf	RtccWriteDate@pDt+1,w,c
  3863  00F178  22DA               	addwfc	fsr2h,f,c
  3864  00F17A  50DF               	movf	indf2,w,c
  3865  00F17C  6E07               	movwf	RtccWriteDate@tempYear,c
  3866  00F17E  EE20 F001          	lfsr	2,1
  3867  00F182  5001               	movf	RtccWriteDate@pDt,w,c
  3868  00F184  26D9               	addwf	fsr2l,f,c
  3869  00F186  5002               	movf	RtccWriteDate@pDt+1,w,c
  3870  00F188  22DA               	addwfc	fsr2h,f,c
  3871  00F18A  50DF               	movf	indf2,w,c
  3872  00F18C  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  3873  00F18E  EE20 F002          	lfsr	2,2
  3874  00F192  5001               	movf	RtccWriteDate@pDt,w,c
  3875  00F194  26D9               	addwf	fsr2l,f,c
  3876  00F196  5002               	movf	RtccWriteDate@pDt+1,w,c
  3877  00F198  22DA               	addwfc	fsr2h,f,c
  3878  00F19A  50DF               	movf	indf2,w,c
  3879  00F19C  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  3880  00F19E  5003               	movf	RtccWriteDate@di,w,c
  3881  00F1A0  B4D8               	btfsc	status,2,c
  3882  00F1A2  D002               	goto	l2343
  3883  00F1A4  9CF2               	bcf	intcon,6,c	;volatile
  3884  00F1A6  D000               	goto	l2343
  3885  00F1A8                     l2343:
  3886  00F1A8  0E00               	movlw	0
  3887  00F1AA  BB3F               	btfsc	63,5,b	;volatile
  3888  00F1AC  0E01               	movlw	1
  3889  00F1AE  6E09               	movwf	RtccWriteDate@wasWrEn,c
  3890  00F1B0  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3891  00F1B2  A4D8               	btfss	status,2,c
  3892  00F1B4  D003               	goto	l2347
  3893  00F1B6  ECEA  F072         	call	_RtccWrOn	;wreg free
  3894  00F1BA  D000               	goto	l2347
  3895  00F1BC                     l2347:
  3896  00F1BC  0E00               	movlw	0
  3897  00F1BE  BF3F               	btfsc	63,7,b	;volatile
  3898  00F1C0  0E01               	movlw	1
  3899  00F1C2  6E05               	movwf	RtccWriteDate@wasOn,c
  3900  00F1C4  5005               	movf	RtccWriteDate@wasOn,w,c
  3901  00F1C6  B4D8               	btfsc	status,2,c
  3902  00F1C8  D007               	goto	l2353
  3903  00F1CA  0E00               	movlw	0
  3904  00F1CC  BE91               	btfsc	3985,7,c	;volatile
  3905  00F1CE  0E01               	movlw	1
  3906  00F1D0  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3907  00F1D2  010F               	movlb	15	; () banked
  3908  00F1D4  9F3F               	bcf	63,7,b	;volatile
  3909  00F1D6  D000               	goto	l2353
  3910  00F1D8                     l2353:
  3911  00F1D8  0EFC               	movlw	252
  3912  00F1DA  010F               	movlb	15	; () banked
  3913  00F1DC  173F               	andwf	63,f,b	;volatile
  3914  00F1DE  010F               	movlb	15	; () banked
  3915  00F1E0  813F               	bsf	63,0,b	;volatile
  3916                           
  3917                           ; BSR set to: 15
  3918  00F1E2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  3919                           
  3920                           ; BSR set to: 15
  3921  00F1E6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  3922                           
  3923                           ; BSR set to: 15
  3924  00F1EA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  3925  00F1EE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  3926  00F1F2  50DF               	movf	indf2,w,c
  3927  00F1F4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  3928                           
  3929                           ; BSR set to: 15
  3930  00F1F6  0EFC               	movlw	252
  3931  00F1F8  010F               	movlb	15	; () banked
  3932  00F1FA  173F               	andwf	63,f,b	;volatile
  3933                           
  3934                           ; BSR set to: 15
  3935  00F1FC  0E03               	movlw	3
  3936  00F1FE  010F               	movlb	15	; () banked
  3937  00F200  133F               	iorwf	63,f,b	;volatile
  3938                           
  3939                           ; BSR set to: 15
  3940  00F202  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  3941                           
  3942                           ; BSR set to: 15
  3943  00F206  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  3944                           
  3945                           ; BSR set to: 15
  3946  00F20A  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  3947                           
  3948                           ; BSR set to: 15
  3949  00F20E  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  3950                           
  3951                           ; BSR set to: 15
  3952  00F212  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  3953                           
  3954                           ; BSR set to: 15
  3955  00F216  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  3956                           
  3957                           ; BSR set to: 15
  3958  00F21A  5005               	movf	RtccWriteDate@wasOn,w,c
  3959  00F21C  B4D8               	btfsc	status,2,c
  3960  00F21E  D00D               	goto	l2389
  3961                           
  3962                           ; BSR set to: 15
  3963  00F220  010F               	movlb	15	; () banked
  3964  00F222  8F3F               	bsf	63,7,b	;volatile
  3965                           
  3966                           ; BSR set to: 15
  3967  00F224  5006               	movf	RtccWriteDate@wasAlrm,w,c
  3968  00F226  B4D8               	btfsc	status,2,c
  3969  00F228  D002               	goto	l2385
  3970                           
  3971                           ; BSR set to: 15
  3972  00F22A  8E91               	bsf	3985,7,c	;volatile
  3973  00F22C  D000               	goto	l2385
  3974  00F22E                     l2385:
  3975                           
  3976                           ; BSR set to: 15
  3977  00F22E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3978  00F230  B4D8               	btfsc	status,2,c
  3979  00F232  D009               	goto	l2393
  3980                           
  3981                           ; BSR set to: 15
  3982  00F234  ECEA  F072         	call	_RtccWrOn	;wreg free
  3983  00F238  D006               	goto	l2393
  3984  00F23A                     l2389:
  3985  00F23A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3986  00F23C  A4D8               	btfss	status,2,c
  3987  00F23E  D003               	goto	l2393
  3988  00F240  010F               	movlb	15	; () banked
  3989  00F242  9B3F               	bcf	63,5,b	;volatile
  3990                           
  3991                           ; BSR set to: 15
  3992  00F244  D000               	goto	l2393
  3993  00F246                     l2393:
  3994  00F246  5003               	movf	RtccWriteDate@di,w,c
  3995  00F248  B4D8               	btfsc	status,2,c
  3996  00F24A  0012               	return	
  3997  00F24C  9CF2               	bcf	intcon,6,c	;volatile
  3998  00F24E  0012               	return	
  3999                           
  4000                           ;	Return value of _RtccWriteDate is never used
  4001  00F250  0012               	return		;funcret
  4002  00F252                     __end_of_RtccWriteDate:
  4003                           	opt stack 0
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodh	equ	0xFF4
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           postinc0	equ	0xFEE
  4012                           wreg	equ	0xFE8
  4013                           postdec1	equ	0xFE5
  4014                           fsr1l	equ	0xFE1
  4015                           indf2	equ	0xFDF
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _RtccWrOn *****************
  4021 ;; Defined at:
  4022 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  data            2    0        unsigned int 
  4027 ;; Return value:  Size  Location     Type
  4028 ;;		None               void
  4029 ;; Registers used:
  4030 ;;		wreg, status,2
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; This function calls:
  4043 ;;		Nothing
  4044 ;; This function is called by:
  4045 ;;		_Write_RTC
  4046 ;;		_RtccWriteDate
  4047 ;;		_RtccWriteTime
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text11
  4052  00E5D4                     __ptext11:
  4053                           	opt stack 0
  4054  00E5D4                     _RtccWrOn:
  4055                           	opt stack 28
  4056                           
  4057                           ;incstack = 0
  4058  00E5D4  9CF2               	bcf	intcon,6,c	;volatile
  4059  00E5D6  0E55               	movlw	85
  4060  00E5D8  6EA7               	movwf	4007,c	;volatile
  4061  00E5DA  0EAA               	movlw	170
  4062  00E5DC  6EA7               	movwf	4007,c	;volatile
  4063  00E5DE  010F               	movlb	15	; () banked
  4064  00E5E0  8B3F               	bsf	63,5,b	;volatile
  4065                           
  4066                           ; BSR set to: 15
  4067  00E5E2  8CF2               	bsf	intcon,6,c	;volatile
  4068                           
  4069                           ; BSR set to: 15
  4070  00E5E4  0012               	return		;funcret
  4071  00E5E6                     __end_of_RtccWrOn:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           intcon	equ	0xFF2
  4080                           postinc0	equ	0xFEE
  4081                           wreg	equ	0xFE8
  4082                           postdec1	equ	0xFE5
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function _Lcd_Out *****************
  4090 ;; Defined at:
  4091 ;;		line 84 in file "../lcd.h"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  y               1    wreg     unsigned char 
  4094 ;;  x               1   63[COMRAM] unsigned char 
  4095 ;;  buffer          2   64[COMRAM] PTR const unsigned char 
  4096 ;;		 -> STR_47(1), STR_45(1), STR_43(1), STR_41(1), 
  4097 ;;		 -> STR_39(1), STR_37(1), STR_36(1), STR_35(1), 
  4098 ;;		 -> STR_34(1), STR_32(1), STR_30(1), STR_28(1), 
  4099 ;;		 -> STR_26(1), STR_24(1), STR_23(1), Convert_diasem@buffer_dia(20), 
  4100 ;;		 -> STR_6(21), STR_5(20), STR_4(18), STR_3(19), 
  4101 ;;		 -> buffer1(20), STR_1(18), 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  y               1   66[COMRAM] unsigned char 
  4104 ;;  data            1   67[COMRAM] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4114 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4117 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4118 ;;Total ram usage:        5 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    1
  4121 ;; This function calls:
  4122 ;;		_Lcd_Chr_CP
  4123 ;;		_Lcd_Cmd
  4124 ;; This function is called by:
  4125 ;;		_main
  4126 ;;		_V_Principal
  4127 ;;		_ManejaMovimientos
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text12
  4132  00E878                     __ptext12:
  4133                           	opt stack 0
  4134  00E878                     _Lcd_Out:
  4135                           	opt stack 28
  4136                           
  4137                           ; BSR set to: 15
  4138                           ;incstack = 0
  4139                           ;Lcd_Out@y stored from wreg
  4140  00E878  6E43               	movwf	Lcd_Out@y,c
  4141                           
  4142                           ;lcd.h: 86: unsigned char data;
  4143                           ;lcd.h: 87: switch (y)
  4144  00E87A  D00D               	goto	l2511
  4145  00E87C                     l2501:
  4146  00E87C  5040               	movf	Lcd_Out@x,w,c
  4147  00E87E  0F80               	addlw	128
  4148  00E880  D008               	goto	L4
  4149  00E882                     l2503:
  4150  00E882  5040               	movf	Lcd_Out@x,w,c
  4151  00E884  0FC0               	addlw	192
  4152  00E886  D005               	goto	L4
  4153  00E888                     l2505:
  4154  00E888  5040               	movf	Lcd_Out@x,w,c
  4155  00E88A  0F94               	addlw	148
  4156  00E88C  D002               	goto	L4
  4157  00E88E                     l2507:
  4158  00E88E  5040               	movf	Lcd_Out@x,w,c
  4159  00E890  0FD4               	addlw	212
  4160  00E892                     L4:
  4161  00E892  6E44               	movwf	Lcd_Out@data,c
  4162                           
  4163                           ;lcd.h: 94: }
  4164                           
  4165                           ;lcd.h: 93: default: break;
  4166  00E894  D00E               	goto	l2513
  4167  00E896                     l2511:
  4168  00E896  5043               	movf	Lcd_Out@y,w,c
  4169                           
  4170                           ; Switch size 1, requested type "space"
  4171                           ; Number of cases is 4, Range of values is 1 to 4
  4172                           ; switch strategies available:
  4173                           ; Name         Instructions Cycles
  4174                           ; simple_byte           13     7 (average)
  4175                           ;	Chosen strategy is simple_byte
  4176  00E898  0A01               	xorlw	1	; case 1
  4177  00E89A  B4D8               	btfsc	status,2,c
  4178  00E89C  D7EF               	goto	l2501
  4179  00E89E  0A03               	xorlw	3	; case 2
  4180  00E8A0  B4D8               	btfsc	status,2,c
  4181  00E8A2  D7EF               	goto	l2503
  4182  00E8A4  0A01               	xorlw	1	; case 3
  4183  00E8A6  B4D8               	btfsc	status,2,c
  4184  00E8A8  D7EF               	goto	l2505
  4185  00E8AA  0A07               	xorlw	7	; case 4
  4186  00E8AC  B4D8               	btfsc	status,2,c
  4187  00E8AE  D7EF               	goto	l2507
  4188  00E8B0  D000               	goto	l2513
  4189  00E8B2                     l2513:
  4190                           
  4191                           ;lcd.h: 95: Lcd_Cmd(data);
  4192  00E8B2  5044               	movf	Lcd_Out@data,w,c
  4193  00E8B4  ECD2  F076         	call	_Lcd_Cmd
  4194                           
  4195                           ;lcd.h: 96: while(*buffer)
  4196  00E8B8  D015               	goto	l2519
  4197  00E8BA                     l2515:
  4198                           
  4199                           ;lcd.h: 97: {
  4200                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  4201  00E8BA  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4202  00E8BE  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4203  00E8C2  6AF8               	clrf	tblptru,c
  4204  00E8C4  0E0E               	movlw	(high __ramtop+-1)
  4205  00E8C6  64F7               	cpfsgt	tblptrh,c
  4206  00E8C8  D003               	bra	u1947
  4207  00E8CA  0008               	tblrd		*
  4208  00E8CC  50F5               	movf	tablat,w,c
  4209  00E8CE  D005               	bra	u1940
  4210  00E8D0                     u1947:
  4211  00E8D0  CFF6 FFD9          	movff	tblptrl,fsr2l
  4212  00E8D4  CFF7 FFDA          	movff	tblptrh,fsr2h
  4213  00E8D8  50DF               	movf	indf2,w,c
  4214  00E8DA                     u1940:
  4215  00E8DA  ECF2  F077         	call	_Lcd_Chr_CP
  4216                           
  4217                           ;lcd.h: 99: buffer++;
  4218  00E8DE  4A41               	infsnz	Lcd_Out@buffer,f,c
  4219  00E8E0  2A42               	incf	Lcd_Out@buffer+1,f,c
  4220  00E8E2  D000               	goto	l2519
  4221  00E8E4                     l2519:
  4222  00E8E4  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4223  00E8E8  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4224  00E8EC  6AF8               	clrf	tblptru,c
  4225  00E8EE  0E0E               	movlw	(high __ramtop+-1)
  4226  00E8F0  64F7               	cpfsgt	tblptrh,c
  4227  00E8F2  D003               	bra	u1957
  4228  00E8F4  0008               	tblrd		*
  4229  00E8F6  50F5               	movf	tablat,w,c
  4230  00E8F8  D005               	bra	u1950
  4231  00E8FA                     u1957:
  4232  00E8FA  CFF6 FFD9          	movff	tblptrl,fsr2l
  4233  00E8FE  CFF7 FFDA          	movff	tblptrh,fsr2h
  4234  00E902  50DF               	movf	indf2,w,c
  4235  00E904                     u1950:
  4236  00E904  0900               	iorlw	0
  4237  00E906  A4D8               	btfss	status,2,c
  4238  00E908  D7D8               	goto	l2515
  4239                           
  4240                           ;lcd.h: 100: }
  4241                           ;lcd.h: 101: return;
  4242  00E90A  0012               	return		;funcret
  4243  00E90C                     __end_of_Lcd_Out:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           postinc0	equ	0xFEE
  4253                           wreg	equ	0xFE8
  4254                           postdec1	equ	0xFE5
  4255                           fsr1l	equ	0xFE1
  4256                           indf2	equ	0xFDF
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _Lcd_Chr_CP *****************
  4262 ;; Defined at:
  4263 ;;		line 126 in file "../lcd.h"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  data            1    wreg     unsigned char 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  data            1    2[COMRAM] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;		None               void
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4280 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4281 ;;Total ram usage:        3 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; This function calls:
  4284 ;;		Nothing
  4285 ;; This function is called by:
  4286 ;;		_Lcd_Out
  4287 ;;		_Lcd_Out2
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text13
  4292  00EFE4                     __ptext13:
  4293                           	opt stack 0
  4294  00EFE4                     _Lcd_Chr_CP:
  4295                           	opt stack 28
  4296                           
  4297                           ;incstack = 0
  4298                           ;Lcd_Chr_CP@data stored from wreg
  4299  00EFE4  6E03               	movwf	Lcd_Chr_CP@data,c
  4300                           
  4301                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  4302  00EFE6  988A               	bcf	3978,4,c	;volatile
  4303  00EFE8  8A8A               	bsf	3978,5,c	;volatile
  4304                           
  4305                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  4306  00EFEA  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  4307  00EFEC  AE03               	btfss	Lcd_Chr_CP@data,7,c
  4308  00EFEE  D001               	bra	u1405
  4309  00EFF0  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  4310  00EFF2                     u1405:
  4311  00EFF2  0E01               	movlw	1
  4312  00EFF4  1601               	andwf	??_Lcd_Chr_CP,f,c
  4313  00EFF6  508A               	movf	3978,w,c	;volatile
  4314  00EFF8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4315  00EFFA  0BFE               	andlw	-2
  4316  00EFFC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4317  00EFFE  6E8A               	movwf	3978,c	;volatile
  4318  00F000  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4319  00F004  0E06               	movlw	6
  4320  00F006  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  4321  00F008                     u1415:
  4322  00F008  90D8               	bcf	status,0,c
  4323  00F00A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4324  00F00C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  4325  00F00E  D7FC               	goto	u1415
  4326  00F010  0E01               	movlw	1
  4327  00F012  1601               	andwf	??_Lcd_Chr_CP,f,c
  4328  00F014  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4329  00F016  508A               	movf	3978,w,c	;volatile
  4330  00F018  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4331  00F01A  0BFD               	andlw	-3
  4332  00F01C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4333  00F01E  6E8A               	movwf	3978,c	;volatile
  4334                           
  4335                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  4336  00F020  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4337  00F024  0E05               	movlw	5
  4338  00F026  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  4339  00F028                     u1425:
  4340  00F028  90D8               	bcf	status,0,c
  4341  00F02A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4342  00F02C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  4343  00F02E  D7FC               	goto	u1425
  4344  00F030  0E01               	movlw	1
  4345  00F032  1601               	andwf	??_Lcd_Chr_CP,f,c
  4346  00F034  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4347  00F036  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4348  00F038  508A               	movf	3978,w,c	;volatile
  4349  00F03A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4350  00F03C  0BFB               	andlw	-5
  4351  00F03E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4352  00F040  6E8A               	movwf	3978,c	;volatile
  4353  00F042  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4354  00F046  3A01               	swapf	??_Lcd_Chr_CP,f,c
  4355  00F048  0E0F               	movlw	15
  4356  00F04A  1601               	andwf	??_Lcd_Chr_CP,f,c
  4357  00F04C  0E01               	movlw	1
  4358  00F04E  1601               	andwf	??_Lcd_Chr_CP,f,c
  4359  00F050  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4360  00F052  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4361  00F054  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4362  00F056  508A               	movf	3978,w,c	;volatile
  4363  00F058  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4364  00F05A  0BF7               	andlw	-9
  4365  00F05C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4366  00F05E  6E8A               	movwf	3978,c	;volatile
  4367                           
  4368                           ;lcd.h: 130: _delay(10);
  4369  00F060  0E03               	movlw	3
  4370  00F062                     u2697:
  4371  00F062  2EE8               	decfsz	wreg,f,c
  4372  00F064  D7FE               	goto	u2697
  4373  00F066  F000               	nop	
  4374                           
  4375                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  4376  00F068  888A               	bsf	3978,4,c	;volatile
  4377  00F06A  0E03               	movlw	3
  4378  00F06C                     u2707:
  4379  00F06C  2EE8               	decfsz	wreg,f,c
  4380  00F06E  D7FE               	goto	u2707
  4381  00F070  F000               	nop	
  4382  00F072  988A               	bcf	3978,4,c	;volatile
  4383                           
  4384                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  4385  00F074  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4386  00F078  90D8               	bcf	status,0,c
  4387  00F07A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4388  00F07C  90D8               	bcf	status,0,c
  4389  00F07E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4390  00F080  90D8               	bcf	status,0,c
  4391  00F082  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4392  00F084  0E01               	movlw	1
  4393  00F086  1601               	andwf	??_Lcd_Chr_CP,f,c
  4394  00F088  508A               	movf	3978,w,c	;volatile
  4395  00F08A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4396  00F08C  0BFE               	andlw	-2
  4397  00F08E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4398  00F090  6E8A               	movwf	3978,c	;volatile
  4399  00F092  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4400  00F096  90D8               	bcf	status,0,c
  4401  00F098  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4402  00F09A  90D8               	bcf	status,0,c
  4403  00F09C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4404  00F09E  0E01               	movlw	1
  4405  00F0A0  1601               	andwf	??_Lcd_Chr_CP,f,c
  4406  00F0A2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4407  00F0A4  508A               	movf	3978,w,c	;volatile
  4408  00F0A6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4409  00F0A8  0BFD               	andlw	-3
  4410  00F0AA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4411  00F0AC  6E8A               	movwf	3978,c	;volatile
  4412                           
  4413                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  4414  00F0AE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4415  00F0B2  90D8               	bcf	status,0,c
  4416  00F0B4  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4417  00F0B6  0E01               	movlw	1
  4418  00F0B8  1601               	andwf	??_Lcd_Chr_CP,f,c
  4419  00F0BA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4420  00F0BC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4421  00F0BE  508A               	movf	3978,w,c	;volatile
  4422  00F0C0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4423  00F0C2  0BFB               	andlw	-5
  4424  00F0C4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4425  00F0C6  6E8A               	movwf	3978,c	;volatile
  4426  00F0C8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4427  00F0CC  0E01               	movlw	1
  4428  00F0CE  1601               	andwf	??_Lcd_Chr_CP,f,c
  4429  00F0D0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4430  00F0D2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4431  00F0D4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4432  00F0D6  508A               	movf	3978,w,c	;volatile
  4433  00F0D8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4434  00F0DA  0BF7               	andlw	-9
  4435  00F0DC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4436  00F0DE  6E8A               	movwf	3978,c	;volatile
  4437                           
  4438                           ;lcd.h: 134: _delay(10);
  4439  00F0E0  0E03               	movlw	3
  4440  00F0E2                     u2717:
  4441  00F0E2  2EE8               	decfsz	wreg,f,c
  4442  00F0E4  D7FE               	goto	u2717
  4443  00F0E6  F000               	nop	
  4444                           
  4445                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  4446  00F0E8  888A               	bsf	3978,4,c	;volatile
  4447  00F0EA  0E03               	movlw	3
  4448  00F0EC                     u2727:
  4449  00F0EC  2EE8               	decfsz	wreg,f,c
  4450  00F0EE  D7FE               	goto	u2727
  4451  00F0F0  F000               	nop	
  4452  00F0F2  988A               	bcf	3978,4,c	;volatile
  4453                           
  4454                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  4455  00F0F4  0E03               	movlw	3
  4456  00F0F6                     u2737:
  4457  00F0F6  2EE8               	decfsz	wreg,f,c
  4458  00F0F8  D7FE               	goto	u2737
  4459  00F0FA  F000               	nop	
  4460  00F0FC  0E0F               	movlw	15
  4461  00F0FE  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  4462  00F100  0E48               	movlw	72
  4463  00F102                     u2747:
  4464  00F102  2EE8               	decfsz	wreg,f,c
  4465  00F104  D7FE               	goto	u2747
  4466  00F106  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  4467  00F108  D7FC               	goto	u2747
  4468  00F10A  0012               	return		;funcret
  4469  00F10C                     __end_of_Lcd_Chr_CP:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           intcon	equ	0xFF2
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           postdec1	equ	0xFE5
  4481                           fsr1l	equ	0xFE1
  4482                           indf2	equ	0xFDF
  4483                           fsr2h	equ	0xFDA
  4484                           fsr2l	equ	0xFD9
  4485                           status	equ	0xFD8
  4486                           
  4487 ;; *************** function _Convert_diasem *****************
  4488 ;; Defined at:
  4489 ;;		line 335 in file "../main.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  dia             2   39[COMRAM] int 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;  buffer_dia     20   43[COMRAM] unsigned char [20]
  4494 ;; Return value:  Size  Location     Type
  4495 ;;                  2   39[COMRAM] PTR unsigned char 
  4496 ;; Registers used:
  4497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4504 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4505 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4506 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4507 ;;Total ram usage:       24 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    2
  4510 ;; This function calls:
  4511 ;;		_sprintf
  4512 ;; This function is called by:
  4513 ;;		_V_Principal
  4514 ;;		_ManejaMovimientos
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text14
  4519  00EC86                     __ptext14:
  4520                           	opt stack 0
  4521  00EC86                     _Convert_diasem:
  4522                           	opt stack 27
  4523                           
  4524                           ;main.c: 337: unsigned char buffer_dia[20];
  4525                           ;main.c: 339: switch(dia){
  4526                           
  4527                           ;incstack = 0
  4528  00EC86  D069               	goto	l2639
  4529  00EC88                     l2623:
  4530                           
  4531                           ;main.c: 341: sprintf(buffer_dia,"%s", "Domingo             ");
  4532  00EC88  0E2C               	movlw	low Convert_diasem@buffer_dia
  4533  00EC8A  6E0D               	movwf	sprintf@sp,c
  4534  00EC8C  0E00               	movlw	high Convert_diasem@buffer_dia
  4535  00EC8E  6E0E               	movwf	sprintf@sp+1,c
  4536  00EC90  0EF4               	movlw	low STR_9
  4537  00EC92  6E0F               	movwf	sprintf@f,c
  4538  00EC94  0EFF               	movlw	high STR_9
  4539  00EC96  6E10               	movwf	sprintf@f+1,c
  4540  00EC98  0E40               	movlw	low STR_10
  4541  00EC9A  6E11               	movwf	?_sprintf+4,c
  4542  00EC9C  0EFF               	movlw	high STR_10
  4543  00EC9E  6E12               	movwf	?_sprintf+5,c
  4544  00ECA0  ECEC  F07A         	call	_sprintf	;wreg free
  4545                           
  4546                           ;main.c: 342: break;
  4547  00ECA4  D079               	goto	l2641
  4548  00ECA6                     l2625:
  4549                           
  4550                           ;main.c: 345: sprintf(buffer_dia,"%s", "Lunes               ");
  4551  00ECA6  0E2C               	movlw	low Convert_diasem@buffer_dia
  4552  00ECA8  6E0D               	movwf	sprintf@sp,c
  4553  00ECAA  0E00               	movlw	high Convert_diasem@buffer_dia
  4554  00ECAC  6E0E               	movwf	sprintf@sp+1,c
  4555  00ECAE  0EF4               	movlw	low STR_9
  4556  00ECB0  6E0F               	movwf	sprintf@f,c
  4557  00ECB2  0EFF               	movlw	high STR_9
  4558  00ECB4  6E10               	movwf	sprintf@f+1,c
  4559  00ECB6  0EEC               	movlw	low STR_12
  4560  00ECB8  6E11               	movwf	?_sprintf+4,c
  4561  00ECBA  0EFE               	movlw	high STR_12
  4562  00ECBC  6E12               	movwf	?_sprintf+5,c
  4563  00ECBE  ECEC  F07A         	call	_sprintf	;wreg free
  4564                           
  4565                           ;main.c: 346: break;
  4566  00ECC2  D06A               	goto	l2641
  4567  00ECC4                     l2627:
  4568                           
  4569                           ;main.c: 349: sprintf(buffer_dia,"%s", "Martes              ");
  4570  00ECC4  0E2C               	movlw	low Convert_diasem@buffer_dia
  4571  00ECC6  6E0D               	movwf	sprintf@sp,c
  4572  00ECC8  0E00               	movlw	high Convert_diasem@buffer_dia
  4573  00ECCA  6E0E               	movwf	sprintf@sp+1,c
  4574  00ECCC  0EF4               	movlw	low STR_9
  4575  00ECCE  6E0F               	movwf	sprintf@f,c
  4576  00ECD0  0EFF               	movlw	high STR_9
  4577  00ECD2  6E10               	movwf	sprintf@f+1,c
  4578  00ECD4  0E16               	movlw	low STR_14
  4579  00ECD6  6E11               	movwf	?_sprintf+4,c
  4580  00ECD8  0EFF               	movlw	high STR_14
  4581  00ECDA  6E12               	movwf	?_sprintf+5,c
  4582  00ECDC  ECEC  F07A         	call	_sprintf	;wreg free
  4583                           
  4584                           ;main.c: 350: break;
  4585  00ECE0  D05B               	goto	l2641
  4586  00ECE2                     l2629:
  4587                           
  4588                           ;main.c: 353: sprintf(buffer_dia,"%s", "Miercoles           ");
  4589  00ECE2  0E2C               	movlw	low Convert_diasem@buffer_dia
  4590  00ECE4  6E0D               	movwf	sprintf@sp,c
  4591  00ECE6  0E00               	movlw	high Convert_diasem@buffer_dia
  4592  00ECE8  6E0E               	movwf	sprintf@sp+1,c
  4593  00ECEA  0EF4               	movlw	low STR_9
  4594  00ECEC  6E0F               	movwf	sprintf@f,c
  4595  00ECEE  0EFF               	movlw	high STR_9
  4596  00ECF0  6E10               	movwf	sprintf@f+1,c
  4597  00ECF2  0E6A               	movlw	low STR_16
  4598  00ECF4  6E11               	movwf	?_sprintf+4,c
  4599  00ECF6  0EFF               	movlw	high STR_16
  4600  00ECF8  6E12               	movwf	?_sprintf+5,c
  4601  00ECFA  ECEC  F07A         	call	_sprintf	;wreg free
  4602                           
  4603                           ;main.c: 354: break;
  4604  00ECFE  D04C               	goto	l2641
  4605  00ED00                     l2631:
  4606                           
  4607                           ;main.c: 357: sprintf(buffer_dia,"%s", "Jueves              ");
  4608  00ED00  0E2C               	movlw	low Convert_diasem@buffer_dia
  4609  00ED02  6E0D               	movwf	sprintf@sp,c
  4610  00ED04  0E00               	movlw	high Convert_diasem@buffer_dia
  4611  00ED06  6E0E               	movwf	sprintf@sp+1,c
  4612  00ED08  0EF4               	movlw	low STR_9
  4613  00ED0A  6E0F               	movwf	sprintf@f,c
  4614  00ED0C  0EFF               	movlw	high STR_9
  4615  00ED0E  6E10               	movwf	sprintf@f+1,c
  4616  00ED10  0E2B               	movlw	low STR_18
  4617  00ED12  6E11               	movwf	?_sprintf+4,c
  4618  00ED14  0EFF               	movlw	high STR_18
  4619  00ED16  6E12               	movwf	?_sprintf+5,c
  4620  00ED18  ECEC  F07A         	call	_sprintf	;wreg free
  4621                           
  4622                           ;main.c: 358: break;
  4623  00ED1C  D03D               	goto	l2641
  4624  00ED1E                     l2633:
  4625                           
  4626                           ;main.c: 361: sprintf(buffer_dia,"%s", "Viernes             ");
  4627  00ED1E  0E2C               	movlw	low Convert_diasem@buffer_dia
  4628  00ED20  6E0D               	movwf	sprintf@sp,c
  4629  00ED22  0E00               	movlw	high Convert_diasem@buffer_dia
  4630  00ED24  6E0E               	movwf	sprintf@sp+1,c
  4631  00ED26  0EF4               	movlw	low STR_9
  4632  00ED28  6E0F               	movwf	sprintf@f,c
  4633  00ED2A  0EFF               	movlw	high STR_9
  4634  00ED2C  6E10               	movwf	sprintf@f+1,c
  4635  00ED2E  0E55               	movlw	low STR_20
  4636  00ED30  6E11               	movwf	?_sprintf+4,c
  4637  00ED32  0EFF               	movlw	high STR_20
  4638  00ED34  6E12               	movwf	?_sprintf+5,c
  4639  00ED36  ECEC  F07A         	call	_sprintf	;wreg free
  4640                           
  4641                           ;main.c: 362: break;
  4642  00ED3A  D02E               	goto	l2641
  4643  00ED3C                     l2635:
  4644                           
  4645                           ;main.c: 365: sprintf(buffer_dia,"%s", "Sabado              ");
  4646  00ED3C  0E2C               	movlw	low Convert_diasem@buffer_dia
  4647  00ED3E  6E0D               	movwf	sprintf@sp,c
  4648  00ED40  0E00               	movlw	high Convert_diasem@buffer_dia
  4649  00ED42  6E0E               	movwf	sprintf@sp+1,c
  4650  00ED44  0EF4               	movlw	low STR_9
  4651  00ED46  6E0F               	movwf	sprintf@f,c
  4652  00ED48  0EFF               	movlw	high STR_9
  4653  00ED4A  6E10               	movwf	sprintf@f+1,c
  4654  00ED4C  0E01               	movlw	low STR_22
  4655  00ED4E  6E11               	movwf	?_sprintf+4,c
  4656  00ED50  0EFF               	movlw	high STR_22
  4657  00ED52  6E12               	movwf	?_sprintf+5,c
  4658  00ED54  ECEC  F07A         	call	_sprintf	;wreg free
  4659                           
  4660                           ;main.c: 367: }
  4661                           ;main.c: 368: }
  4662                           
  4663                           ;main.c: 366: break;
  4664  00ED58  D01F               	goto	l2641
  4665  00ED5A                     l2639:
  4666  00ED5A  C028  F02A         	movff	Convert_diasem@dia,??_Convert_diasem
  4667  00ED5E  C029  F02B         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  4668                           
  4669                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4670                           ; Switch size 1, requested type "space"
  4671                           ; Number of cases is 1, Range of values is 0 to 0
  4672                           ; switch strategies available:
  4673                           ; Name         Instructions Cycles
  4674                           ; simple_byte            4     3 (average)
  4675                           ;	Chosen strategy is simple_byte
  4676  00ED62  502B               	movf	??_Convert_diasem+1,w,c
  4677  00ED64  0A00               	xorlw	0	; case 0
  4678  00ED66  A4D8               	btfss	status,2,c
  4679  00ED68  D017               	goto	l2641
  4680                           
  4681                           ; Switch size 1, requested type "space"
  4682                           ; Number of cases is 7, Range of values is 0 to 6
  4683                           ; switch strategies available:
  4684                           ; Name         Instructions Cycles
  4685                           ; simple_byte           22    12 (average)
  4686                           ;	Chosen strategy is simple_byte
  4687  00ED6A  502A               	movf	??_Convert_diasem,w,c
  4688  00ED6C  0A00               	xorlw	0	; case 0
  4689  00ED6E  B4D8               	btfsc	status,2,c
  4690  00ED70  D78B               	goto	l2623
  4691  00ED72  0A01               	xorlw	1	; case 1
  4692  00ED74  B4D8               	btfsc	status,2,c
  4693  00ED76  D797               	goto	l2625
  4694  00ED78  0A03               	xorlw	3	; case 2
  4695  00ED7A  B4D8               	btfsc	status,2,c
  4696  00ED7C  D7A3               	goto	l2627
  4697  00ED7E  0A01               	xorlw	1	; case 3
  4698  00ED80  B4D8               	btfsc	status,2,c
  4699  00ED82  D7AF               	goto	l2629
  4700  00ED84  0A07               	xorlw	7	; case 4
  4701  00ED86  B4D8               	btfsc	status,2,c
  4702  00ED88  D7BB               	goto	l2631
  4703  00ED8A  0A01               	xorlw	1	; case 5
  4704  00ED8C  B4D8               	btfsc	status,2,c
  4705  00ED8E  D7C7               	goto	l2633
  4706  00ED90  0A03               	xorlw	3	; case 6
  4707  00ED92  B4D8               	btfsc	status,2,c
  4708  00ED94  D7D3               	goto	l2635
  4709  00ED96  D000               	goto	l2641
  4710  00ED98                     l2641:
  4711                           
  4712                           ;main.c: 369: return buffer_dia;
  4713  00ED98  0E2C               	movlw	low Convert_diasem@buffer_dia
  4714  00ED9A  6E28               	movwf	?_Convert_diasem,c
  4715  00ED9C  0E00               	movlw	high Convert_diasem@buffer_dia
  4716  00ED9E  6E29               	movwf	?_Convert_diasem+1,c
  4717  00EDA0  0012               	return	
  4718  00EDA2  0012               	return		;funcret
  4719  00EDA4                     __end_of_Convert_diasem:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           postinc0	equ	0xFEE
  4729                           wreg	equ	0xFE8
  4730                           postdec1	equ	0xFE5
  4731                           fsr1l	equ	0xFE1
  4732                           indf2	equ	0xFDF
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function _sprintf *****************
  4738 ;; Defined at:
  4739 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4742 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4743 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4744 ;;		 -> STR_46(5), STR_44(5), STR_42(5), STR_40(5), 
  4745 ;;		 -> STR_38(5), STR_33(5), STR_31(5), STR_29(5), 
  4746 ;;		 -> STR_27(5), STR_25(5), STR_21(3), STR_19(3), 
  4747 ;;		 -> STR_17(3), STR_15(3), STR_13(3), STR_11(3), 
  4748 ;;		 -> STR_9(3), STR_8(15), STR_7(15), STR_2(5), 
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  tmpval          4    0        struct .
  4751 ;;  width           2   36[COMRAM] int 
  4752 ;;  len             2   34[COMRAM] unsigned int 
  4753 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  4754 ;;		 -> STR_48(7), STR_22(21), STR_20(21), STR_18(21), 
  4755 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  4756 ;;  ap              2   30[COMRAM] PTR void [1]
  4757 ;;		 -> ?_sprintf(2), 
  4758 ;;  val             2   27[COMRAM] unsigned int 
  4759 ;;  c               1   38[COMRAM] char 
  4760 ;;  prec            1   29[COMRAM] char 
  4761 ;;  flag            1   26[COMRAM] unsigned char 
  4762 ;; Return value:  Size  Location     Type
  4763 ;;                  2   12[COMRAM] int 
  4764 ;; Registers used:
  4765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4766 ;; Tracked objects:
  4767 ;;		On entry : 0/0
  4768 ;;		On exit  : 0/0
  4769 ;;		Unchanged: 0/0
  4770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4771 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4772 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4773 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4774 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4775 ;;Total ram usage:       27 bytes
  4776 ;; Hardware stack levels used:    1
  4777 ;; Hardware stack levels required when called:    1
  4778 ;; This function calls:
  4779 ;;		___lwdiv
  4780 ;;		___lwmod
  4781 ;;		___wmul
  4782 ;;		_isdigit
  4783 ;; This function is called by:
  4784 ;;		_main
  4785 ;;		_V_Principal
  4786 ;;		_Convert_diasem
  4787 ;;		_ManejaMovimientos
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text15
  4792  00F5D8                     __ptext15:
  4793                           	opt stack 0
  4794  00F5D8                     _sprintf:
  4795                           	opt stack 29
  4796                           
  4797                           ;doprnt.c: 494: va_list ap;
  4798                           ;doprnt.c: 499: signed char c;
  4799                           ;doprnt.c: 501: int width;
  4800                           ;doprnt.c: 506: signed char prec;
  4801                           ;doprnt.c: 508: unsigned char flag;
  4802                           ;doprnt.c: 523: union {
  4803                           ;doprnt.c: 524: unsigned long vd;
  4804                           ;doprnt.c: 525: double integ;
  4805                           ;doprnt.c: 526: } tmpval;
  4806                           ;doprnt.c: 528: unsigned int val;
  4807                           ;doprnt.c: 529: unsigned len;
  4808                           ;doprnt.c: 530: const char * cp;
  4809                           ;doprnt.c: 533: *ap = __va_start();
  4810                           
  4811                           ;incstack = 0
  4812  00F5D8  0E11               	movlw	low (?_sprintf+4)
  4813  00F5DA  6E1F               	movwf	sprintf@ap,c
  4814  00F5DC  0E00               	movlw	high (?_sprintf+4)
  4815  00F5DE  6E20               	movwf	sprintf@ap+1,c
  4816                           
  4817                           ;doprnt.c: 536: while(c = *f++) {
  4818  00F5E0  D182               	goto	l2255
  4819  00F5E2                     l2139:
  4820                           
  4821                           ;doprnt.c: 538: if(c != '%')
  4822  00F5E2  0E25               	movlw	37
  4823  00F5E4  1827               	xorwf	sprintf@c,w,c
  4824  00F5E6  B4D8               	btfsc	status,2,c
  4825  00F5E8  D009               	goto	l2145
  4826                           
  4827                           ;doprnt.c: 540: {
  4828                           ;doprnt.c: 541: ((*sp++ = (c)));
  4829  00F5EA  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4830  00F5EE  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4831  00F5F2  C027  FFDF         	movff	sprintf@c,indf2
  4832  00F5F6  4A0D               	infsnz	sprintf@sp,f,c
  4833  00F5F8  2A0E               	incf	sprintf@sp+1,f,c
  4834                           
  4835                           ;doprnt.c: 542: continue;
  4836  00F5FA  D175               	goto	l2255
  4837  00F5FC                     l2145:
  4838                           
  4839                           ;doprnt.c: 543: }
  4840                           ;doprnt.c: 546: width = 0;
  4841  00F5FC  0E00               	movlw	0
  4842  00F5FE  6E26               	movwf	sprintf@width+1,c
  4843  00F600  0E00               	movlw	0
  4844  00F602  6E25               	movwf	sprintf@width,c
  4845                           
  4846                           ;doprnt.c: 548: flag = 0;
  4847  00F604  0E00               	movlw	0
  4848  00F606  6E1B               	movwf	sprintf@flag,c
  4849                           
  4850                           ;doprnt.c: 551: switch(*f) {
  4851                           
  4852                           ;doprnt.c: 550: for(;;) {
  4853  00F608  D005               	goto	l2151
  4854  00F60A                     l2147:
  4855                           
  4856                           ;doprnt.c: 580: flag |= 0x04;
  4857  00F60A  841B               	bsf	sprintf@flag,2,c
  4858                           
  4859                           ;doprnt.c: 581: f++;
  4860  00F60C  4A0F               	infsnz	sprintf@f,f,c
  4861  00F60E  2A10               	incf	sprintf@f+1,f,c
  4862                           
  4863                           ;doprnt.c: 582: continue;
  4864  00F610  D001               	goto	l2151
  4865                           
  4866                           ;doprnt.c: 584: }
  4867  00F612  D00B               	goto	l2153
  4868  00F614                     l2151:
  4869  00F614  C00F  FFF6         	movff	sprintf@f,tblptrl
  4870  00F618  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4871  00F61C                     	if	0	;tblptru may be non-zero
  4872  00F61C                     	endif
  4873  00F61C                     	if	0	;tblptru may be non-zero
  4874  00F61C                     	endif
  4875  00F61C  0008               	tblrd		*
  4876  00F61E  50F5               	movf	tablat,w,c
  4877                           
  4878                           ; Switch size 1, requested type "space"
  4879                           ; Number of cases is 1, Range of values is 48 to 48
  4880                           ; switch strategies available:
  4881                           ; Name         Instructions Cycles
  4882                           ; simple_byte            4     3 (average)
  4883                           ;	Chosen strategy is simple_byte
  4884  00F620  0A30               	xorlw	48	; case 48
  4885  00F622  B4D8               	btfsc	status,2,c
  4886  00F624  D7F2               	goto	l2147
  4887                           
  4888                           ;doprnt.c: 585: break;
  4889  00F626  D001               	goto	l2153
  4890                           
  4891                           ;doprnt.c: 586: }
  4892  00F628  D7F5               	goto	l2151
  4893  00F62A                     l2153:
  4894                           
  4895                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4896  00F62A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4897  00F62E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4898  00F632                     	if	0	;tblptru may be non-zero
  4899  00F632                     	endif
  4900  00F632                     	if	0	;tblptru may be non-zero
  4901  00F632                     	endif
  4902  00F632  0008               	tblrd		*
  4903  00F634  50F5               	movf	tablat,w,c
  4904  00F636  EC03  F073         	call	_isdigit
  4905  00F63A  A0D8               	btfss	status,0,c
  4906  00F63C  D0A2               	goto	l2203
  4907                           
  4908                           ;doprnt.c: 598: width = 0;
  4909  00F63E  0E00               	movlw	0
  4910  00F640  6E26               	movwf	sprintf@width+1,c
  4911  00F642  0E00               	movlw	0
  4912  00F644  6E25               	movwf	sprintf@width,c
  4913  00F646  D000               	goto	l2157
  4914  00F648                     l2157:
  4915                           
  4916                           ;doprnt.c: 600: width *= 10;
  4917  00F648  C025  F001         	movff	sprintf@width,___wmul@multiplier
  4918  00F64C  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4919  00F650  0E00               	movlw	0
  4920  00F652  6E04               	movwf	___wmul@multiplicand+1,c
  4921  00F654  0E0A               	movlw	10
  4922  00F656  6E03               	movwf	___wmul@multiplicand,c
  4923  00F658  EC25  F073         	call	___wmul	;wreg free
  4924  00F65C  C001  F025         	movff	?___wmul,sprintf@width
  4925  00F660  C002  F026         	movff	?___wmul+1,sprintf@width+1
  4926                           
  4927                           ;doprnt.c: 601: width += *f++ - '0';
  4928  00F664  0ED0               	movlw	208
  4929  00F666  6E17               	movwf	??_sprintf& (0+255),c
  4930  00F668  0EFF               	movlw	255
  4931  00F66A  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4932  00F66C  C00F  FFF6         	movff	sprintf@f,tblptrl
  4933  00F670  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4934  00F674                     	if	0	;tblptru may be non-zero
  4935  00F674                     	endif
  4936  00F674                     	if	0	;tblptru may be non-zero
  4937  00F674                     	endif
  4938  00F674  0008               	tblrd		*
  4939  00F676  50F5               	movf	tablat,w,c
  4940  00F678  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4941  00F67A  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4942  00F67C  5017               	movf	??_sprintf,w,c
  4943  00F67E  2619               	addwf	??_sprintf+2,f,c
  4944  00F680  5018               	movf	??_sprintf+1,w,c
  4945  00F682  221A               	addwfc	??_sprintf+3,f,c
  4946  00F684  5019               	movf	??_sprintf+2,w,c
  4947  00F686  2625               	addwf	sprintf@width,f,c
  4948  00F688  501A               	movf	??_sprintf+3,w,c
  4949  00F68A  2226               	addwfc	sprintf@width+1,f,c
  4950  00F68C  4A0F               	infsnz	sprintf@f,f,c
  4951  00F68E  2A10               	incf	sprintf@f+1,f,c
  4952                           
  4953                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4954  00F690  C00F  FFF6         	movff	sprintf@f,tblptrl
  4955  00F694  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4956  00F698                     	if	0	;tblptru may be non-zero
  4957  00F698                     	endif
  4958  00F698                     	if	0	;tblptru may be non-zero
  4959  00F698                     	endif
  4960  00F698  0008               	tblrd		*
  4961  00F69A  50F5               	movf	tablat,w,c
  4962  00F69C  EC03  F073         	call	_isdigit
  4963  00F6A0  A0D8               	btfss	status,0,c
  4964  00F6A2  D06F               	goto	l2203
  4965  00F6A4  D7D1               	goto	l2157
  4966                           
  4967                           ;doprnt.c: 608: }
  4968                           ;doprnt.c: 635: switch(c = *f++) {
  4969  00F6A6  D06D               	goto	l2203
  4970                           
  4971                           ;doprnt.c: 638: goto alldone;
  4972                           
  4973                           ;doprnt.c: 637: case 0:
  4974  00F6A8  D12C               	goto	l2257
  4975  00F6AA                     l2165:
  4976                           
  4977                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4978  00F6AA  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4979  00F6AE  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4980  00F6B2  CFDE F021          	movff	postinc2,sprintf@cp
  4981  00F6B6  CFDD F022          	movff	postdec2,sprintf@cp+1
  4982  00F6BA  0E02               	movlw	2
  4983  00F6BC  261F               	addwf	sprintf@ap,f,c
  4984  00F6BE  0E00               	movlw	0
  4985  00F6C0  2220               	addwfc	sprintf@ap+1,f,c
  4986                           
  4987                           ;doprnt.c: 740: if(!cp)
  4988  00F6C2  5021               	movf	sprintf@cp,w,c
  4989  00F6C4  1022               	iorwf	sprintf@cp+1,w,c
  4990  00F6C6  A4D8               	btfss	status,2,c
  4991  00F6C8  D005               	goto	l2173
  4992                           
  4993                           ;doprnt.c: 741: cp = "(null)";
  4994  00F6CA  0EE8               	movlw	low STR_48
  4995  00F6CC  6E21               	movwf	sprintf@cp,c
  4996  00F6CE  0EFF               	movlw	high STR_48
  4997  00F6D0  6E22               	movwf	sprintf@cp+1,c
  4998  00F6D2  D000               	goto	l2173
  4999  00F6D4                     l2173:
  5000                           
  5001                           ;doprnt.c: 745: len = 0;
  5002  00F6D4  0E00               	movlw	0
  5003  00F6D6  6E24               	movwf	sprintf@len+1,c
  5004  00F6D8  0E00               	movlw	0
  5005  00F6DA  6E23               	movwf	sprintf@len,c
  5006                           
  5007                           ;doprnt.c: 746: while(cp[len])
  5008  00F6DC  D003               	goto	l2177
  5009  00F6DE                     l2175:
  5010                           
  5011                           ;doprnt.c: 747: len++;
  5012  00F6DE  4A23               	infsnz	sprintf@len,f,c
  5013  00F6E0  2A24               	incf	sprintf@len+1,f,c
  5014  00F6E2  D000               	goto	l2177
  5015  00F6E4                     l2177:
  5016  00F6E4  5023               	movf	sprintf@len,w,c
  5017  00F6E6  2421               	addwf	sprintf@cp,w,c
  5018  00F6E8  6E17               	movwf	??_sprintf& (0+255),c
  5019  00F6EA  5024               	movf	sprintf@len+1,w,c
  5020  00F6EC  2022               	addwfc	sprintf@cp+1,w,c
  5021  00F6EE  6E18               	movwf	(??_sprintf+1)& (0+255),c
  5022  00F6F0  C017  FFF6         	movff	??_sprintf,tblptrl
  5023  00F6F4  C018  FFF7         	movff	??_sprintf+1,tblptrh
  5024  00F6F8                     	if	0	;tblptru may be non-zero
  5025  00F6F8                     	endif
  5026  00F6F8                     	if	0	;tblptru may be non-zero
  5027  00F6F8                     	endif
  5028  00F6F8  0008               	tblrd		*
  5029  00F6FA  50F5               	movf	tablat,w,c
  5030  00F6FC  0900               	iorlw	0
  5031  00F6FE  A4D8               	btfss	status,2,c
  5032  00F700  D7EE               	goto	l2175
  5033                           
  5034                           ;doprnt.c: 757: if(width > len)
  5035  00F702  5025               	movf	sprintf@width,w,c
  5036  00F704  5C23               	subwf	sprintf@len,w,c
  5037  00F706  5026               	movf	sprintf@width+1,w,c
  5038  00F708  5824               	subwfb	sprintf@len+1,w,c
  5039  00F70A  B0D8               	btfsc	status,0,c
  5040  00F70C  D005               	goto	l2183
  5041                           
  5042                           ;doprnt.c: 758: width -= len;
  5043  00F70E  5023               	movf	sprintf@len,w,c
  5044  00F710  5E25               	subwf	sprintf@width,f,c
  5045  00F712  5024               	movf	sprintf@len+1,w,c
  5046  00F714  5A26               	subwfb	sprintf@width+1,f,c
  5047  00F716  D00E               	goto	l2189
  5048  00F718                     l2183:
  5049                           
  5050                           ;doprnt.c: 759: else
  5051                           ;doprnt.c: 760: width = 0;
  5052  00F718  0E00               	movlw	0
  5053  00F71A  6E26               	movwf	sprintf@width+1,c
  5054  00F71C  0E00               	movlw	0
  5055  00F71E  6E25               	movwf	sprintf@width,c
  5056                           
  5057                           ;doprnt.c: 764: while(width--)
  5058  00F720  D009               	goto	l2189
  5059  00F722                     l2185:
  5060                           
  5061                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5062  00F722  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5063  00F726  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5064  00F72A  0E20               	movlw	32
  5065  00F72C  6EDF               	movwf	indf2,c
  5066  00F72E  4A0D               	infsnz	sprintf@sp,f,c
  5067  00F730  2A0E               	incf	sprintf@sp+1,f,c
  5068  00F732  D000               	goto	l2189
  5069  00F734                     l2189:
  5070  00F734  0625               	decf	sprintf@width,f,c
  5071  00F736  A0D8               	btfss	status,0,c
  5072  00F738  0626               	decf	sprintf@width+1,f,c
  5073  00F73A  2825               	incf	sprintf@width,w,c
  5074  00F73C  E1F2               	bnz	l2185
  5075  00F73E  2826               	incf	sprintf@width+1,w,c
  5076  00F740  B4D8               	btfsc	status,2,c
  5077  00F742  D012               	goto	l2197
  5078  00F744  D7EE               	goto	l2185
  5079                           
  5080                           ;doprnt.c: 767: while(len--)
  5081  00F746  D010               	goto	l2197
  5082  00F748                     l2191:
  5083                           
  5084                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5085  00F748  C021  FFF6         	movff	sprintf@cp,tblptrl
  5086  00F74C  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  5087  00F750                     	if	0	;tblptru may be non-zero
  5088  00F750                     	endif
  5089  00F750                     	if	0	;tblptru may be non-zero
  5090  00F750                     	endif
  5091  00F750  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5092  00F754  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5093  00F758  0008               	tblrd		*
  5094  00F75A  CFF5 FFDF          	movff	tablat,indf2
  5095  00F75E  4A21               	infsnz	sprintf@cp,f,c
  5096  00F760  2A22               	incf	sprintf@cp+1,f,c
  5097  00F762  4A0D               	infsnz	sprintf@sp,f,c
  5098  00F764  2A0E               	incf	sprintf@sp+1,f,c
  5099  00F766  D000               	goto	l2197
  5100  00F768                     l2197:
  5101  00F768  0623               	decf	sprintf@len,f,c
  5102  00F76A  A0D8               	btfss	status,0,c
  5103  00F76C  0624               	decf	sprintf@len+1,f,c
  5104  00F76E  2823               	incf	sprintf@len,w,c
  5105  00F770  E1EB               	bnz	l2191
  5106  00F772  2824               	incf	sprintf@len+1,w,c
  5107  00F774  B4D8               	btfsc	status,2,c
  5108  00F776  D0B7               	goto	l2255
  5109  00F778  D7E7               	goto	l2191
  5110                           
  5111                           ;doprnt.c: 813: continue;
  5112                           
  5113                           ;doprnt.c: 802: default:
  5114                           
  5115                           ;doprnt.c: 774: continue;
  5116  00F77A  D0B5               	goto	l2255
  5117  00F77C                     l2199:
  5118                           
  5119                           ;doprnt.c: 818: flag |= 0xC0;
  5120  00F77C  0EC0               	movlw	192
  5121  00F77E  121B               	iorwf	sprintf@flag,f,c
  5122                           
  5123                           ;doprnt.c: 822: }
  5124                           
  5125                           ;doprnt.c: 819: break;
  5126  00F780  D014               	goto	l2205
  5127  00F782                     l2203:
  5128  00F782  C00F  FFF6         	movff	sprintf@f,tblptrl
  5129  00F786  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5130  00F78A  4A0F               	infsnz	sprintf@f,f,c
  5131  00F78C  2A10               	incf	sprintf@f+1,f,c
  5132  00F78E                     	if	0	;tblptru may be non-zero
  5133  00F78E                     	endif
  5134  00F78E                     	if	0	;tblptru may be non-zero
  5135  00F78E                     	endif
  5136  00F78E  0008               	tblrd		*
  5137  00F790  CFF5 F027          	movff	tablat,sprintf@c
  5138  00F794  5027               	movf	sprintf@c,w,c
  5139                           
  5140                           ; Switch size 1, requested type "space"
  5141                           ; Number of cases is 3, Range of values is 0 to 117
  5142                           ; switch strategies available:
  5143                           ; Name         Instructions Cycles
  5144                           ; simple_byte           10     6 (average)
  5145                           ;	Chosen strategy is simple_byte
  5146  00F796  0A00               	xorlw	0	; case 0
  5147  00F798  B4D8               	btfsc	status,2,c
  5148  00F79A  D0B3               	goto	l2257
  5149  00F79C  0A73               	xorlw	115	; case 115
  5150  00F79E  B4D8               	btfsc	status,2,c
  5151  00F7A0  D784               	goto	l2165
  5152  00F7A2  0A06               	xorlw	6	; case 117
  5153  00F7A4  B4D8               	btfsc	status,2,c
  5154  00F7A6  D7EA               	goto	l2199
  5155  00F7A8  D09E               	goto	l2255
  5156  00F7AA                     l2205:
  5157                           
  5158                           ;doprnt.c: 1273: {
  5159                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5160  00F7AA  C01F  FFD9         	movff	sprintf@ap,fsr2l
  5161  00F7AE  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  5162  00F7B2  CFDE F01C          	movff	postinc2,sprintf@val
  5163  00F7B6  CFDD F01D          	movff	postdec2,sprintf@val+1
  5164  00F7BA  0E02               	movlw	2
  5165  00F7BC  261F               	addwf	sprintf@ap,f,c
  5166  00F7BE  0E00               	movlw	0
  5167  00F7C0  2220               	addwfc	sprintf@ap+1,f,c
  5168                           
  5169                           ;doprnt.c: 1287: }
  5170                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5171  00F7C2  0E01               	movlw	1
  5172  00F7C4  6E27               	movwf	sprintf@c,c
  5173  00F7C6                     l2211:
  5174  00F7C6  0E05               	movlw	5
  5175  00F7C8  1827               	xorwf	sprintf@c,w,c
  5176  00F7CA  B4D8               	btfsc	status,2,c
  5177  00F7CC  D016               	goto	l2223
  5178  00F7CE  D001               	goto	l2215
  5179  00F7D0  D014               	goto	l2223
  5180  00F7D2                     l2215:
  5181                           
  5182                           ;doprnt.c: 1306: if(val < dpowers[c])
  5183  00F7D2  5027               	movf	sprintf@c,w,c
  5184  00F7D4  0D02               	mullw	2
  5185  00F7D6  0ECD               	movlw	low _dpowers
  5186  00F7D8  24F3               	addwf	prodl,w,c
  5187  00F7DA  6EF6               	movwf	tblptrl,c
  5188  00F7DC  0EFE               	movlw	high _dpowers
  5189  00F7DE  20F4               	addwfc	prodh,w,c
  5190  00F7E0  6EF7               	movwf	tblptrh,c
  5191  00F7E2                     	if	0	;There are less than 3 active tblptr bytes
  5192  00F7E2                     	endif
  5193  00F7E2  0009               	tblrd		*+
  5194  00F7E4  50F5               	movf	tablat,w,c
  5195  00F7E6  5C1C               	subwf	sprintf@val,w,c
  5196  00F7E8  0009               	tblrd		*+
  5197  00F7EA  50F5               	movf	tablat,w,c
  5198  00F7EC  581D               	subwfb	sprintf@val+1,w,c
  5199  00F7EE  A0D8               	btfss	status,0,c
  5200  00F7F0  D004               	goto	l2223
  5201  00F7F2  D001               	goto	l2219
  5202                           
  5203                           ;doprnt.c: 1307: break;
  5204  00F7F4  D002               	goto	l2223
  5205  00F7F6                     l2219:
  5206  00F7F6  2A27               	incf	sprintf@c,f,c
  5207  00F7F8  D7E6               	goto	l2211
  5208  00F7FA                     l2223:
  5209                           
  5210                           ;doprnt.c: 1381: if(width > c)
  5211  00F7FA  0E80               	movlw	128
  5212  00F7FC  BE27               	btfsc	sprintf@c,7,c
  5213  00F7FE  0E7F               	movlw	127
  5214  00F800  6E17               	movwf	??_sprintf& (0+255),c
  5215  00F802  5025               	movf	sprintf@width,w,c
  5216  00F804  5C27               	subwf	sprintf@c,w,c
  5217  00F806  5026               	movf	sprintf@width+1,w,c
  5218  00F808  0A80               	xorlw	128
  5219  00F80A  5817               	subwfb	??_sprintf& (0+255),w,c
  5220  00F80C  B0D8               	btfsc	status,0,c
  5221  00F80E  D007               	goto	l2227
  5222                           
  5223                           ;doprnt.c: 1382: width -= c;
  5224  00F810  5027               	movf	sprintf@c,w,c
  5225  00F812  5E25               	subwf	sprintf@width,f,c
  5226  00F814  0E00               	movlw	0
  5227  00F816  BE27               	btfsc	sprintf@c,7,c
  5228  00F818  0EFF               	movlw	255
  5229  00F81A  5A26               	subwfb	sprintf@width+1,f,c
  5230  00F81C  D005               	goto	l2229
  5231  00F81E                     l2227:
  5232                           
  5233                           ;doprnt.c: 1383: else
  5234                           ;doprnt.c: 1384: width = 0;
  5235  00F81E  0E00               	movlw	0
  5236  00F820  6E26               	movwf	sprintf@width+1,c
  5237  00F822  0E00               	movlw	0
  5238  00F824  6E25               	movwf	sprintf@width,c
  5239  00F826  D000               	goto	l2229
  5240  00F828                     l2229:
  5241                           
  5242                           ;doprnt.c: 1387: if(flag & 0x04) {
  5243  00F828  A41B               	btfss	sprintf@flag,2,c
  5244  00F82A  D015               	goto	l2239
  5245                           
  5246                           ;doprnt.c: 1415: if(width)
  5247  00F82C  5025               	movf	sprintf@width,w,c
  5248  00F82E  1026               	iorwf	sprintf@width+1,w,c
  5249  00F830  B4D8               	btfsc	status,2,c
  5250  00F832  D026               	goto	l319
  5251  00F834                     l2233:
  5252                           
  5253                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5254  00F834  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5255  00F838  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5256  00F83C  0E30               	movlw	48
  5257  00F83E  6EDF               	movwf	indf2,c
  5258  00F840  4A0D               	infsnz	sprintf@sp,f,c
  5259  00F842  2A0E               	incf	sprintf@sp+1,f,c
  5260                           
  5261                           ;doprnt.c: 1418: while(--width);
  5262  00F844  0625               	decf	sprintf@width,f,c
  5263  00F846  A0D8               	btfss	status,0,c
  5264  00F848  0626               	decf	sprintf@width+1,f,c
  5265  00F84A  5025               	movf	sprintf@width,w,c
  5266  00F84C  1026               	iorwf	sprintf@width+1,w,c
  5267  00F84E  B4D8               	btfsc	status,2,c
  5268  00F850  D017               	goto	l319
  5269  00F852  D7F0               	goto	l2233
  5270                           
  5271                           ;doprnt.c: 1420: } else
  5272  00F854  D015               	goto	l319
  5273  00F856                     l2239:
  5274                           
  5275                           ;doprnt.c: 1422: {
  5276                           ;doprnt.c: 1424: if(width
  5277                           ;doprnt.c: 1428: )
  5278  00F856  5025               	movf	sprintf@width,w,c
  5279  00F858  1026               	iorwf	sprintf@width+1,w,c
  5280  00F85A  B4D8               	btfsc	status,2,c
  5281  00F85C  D011               	goto	l319
  5282  00F85E                     l2241:
  5283                           
  5284                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5285  00F85E  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5286  00F862  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5287  00F866  0E20               	movlw	32
  5288  00F868  6EDF               	movwf	indf2,c
  5289  00F86A  4A0D               	infsnz	sprintf@sp,f,c
  5290  00F86C  2A0E               	incf	sprintf@sp+1,f,c
  5291                           
  5292                           ;doprnt.c: 1431: while(--width);
  5293  00F86E  0625               	decf	sprintf@width,f,c
  5294  00F870  A0D8               	btfss	status,0,c
  5295  00F872  0626               	decf	sprintf@width+1,f,c
  5296  00F874  5025               	movf	sprintf@width,w,c
  5297  00F876  1026               	iorwf	sprintf@width+1,w,c
  5298  00F878  B4D8               	btfsc	status,2,c
  5299  00F87A  D002               	goto	l319
  5300  00F87C  D7F0               	goto	l2241
  5301  00F87E  D000               	goto	l319
  5302  00F880                     l319:
  5303                           
  5304                           ;doprnt.c: 1469: }
  5305                           ;doprnt.c: 1472: prec = c;
  5306  00F880  C027  F01E         	movff	sprintf@c,sprintf@prec
  5307                           
  5308                           ;doprnt.c: 1474: while(prec--) {
  5309  00F884  D02A               	goto	l2253
  5310  00F886                     l2247:
  5311                           
  5312                           ;doprnt.c: 1478: {
  5313                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5314  00F886  501E               	movf	sprintf@prec,w,c
  5315  00F888  0D02               	mullw	2
  5316  00F88A  0ECD               	movlw	low _dpowers
  5317  00F88C  24F3               	addwf	prodl,w,c
  5318  00F88E  6EF6               	movwf	tblptrl,c
  5319  00F890  0EFE               	movlw	high _dpowers
  5320  00F892  20F4               	addwfc	prodh,w,c
  5321  00F894  6EF7               	movwf	tblptrh,c
  5322  00F896                     	if	0	;There are less than 3 active tblptr bytes
  5323  00F896                     	endif
  5324  00F896  0009               	tblrd		*+
  5325  00F898  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5326  00F89C  000A               	tblrd		*-
  5327  00F89E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5328  00F8A2  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  5329  00F8A6  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  5330  00F8AA  EC5F  F073         	call	___lwdiv	;wreg free
  5331  00F8AE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5332  00F8B2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5333  00F8B6  0E00               	movlw	0
  5334  00F8B8  6E0B               	movwf	___lwmod@divisor+1,c
  5335  00F8BA  0E0A               	movlw	10
  5336  00F8BC  6E0A               	movwf	___lwmod@divisor,c
  5337  00F8BE  EC39  F073         	call	___lwmod	;wreg free
  5338  00F8C2  5008               	movf	?___lwmod,w,c
  5339  00F8C4  0F30               	addlw	48
  5340  00F8C6  6E27               	movwf	sprintf@c,c
  5341                           
  5342                           ;doprnt.c: 1523: }
  5343                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5344  00F8C8  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5345  00F8CC  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5346  00F8D0  C027  FFDF         	movff	sprintf@c,indf2
  5347  00F8D4  4A0D               	infsnz	sprintf@sp,f,c
  5348  00F8D6  2A0E               	incf	sprintf@sp+1,f,c
  5349  00F8D8  D000               	goto	l2253
  5350  00F8DA                     l2253:
  5351  00F8DA  061E               	decf	sprintf@prec,f,c
  5352  00F8DC  281E               	incf	sprintf@prec,w,c
  5353  00F8DE  B4D8               	btfsc	status,2,c
  5354  00F8E0  D002               	goto	l2255
  5355  00F8E2  D7D1               	goto	l2247
  5356  00F8E4  D000               	goto	l2255
  5357  00F8E6                     l2255:
  5358  00F8E6  C00F  FFF6         	movff	sprintf@f,tblptrl
  5359  00F8EA  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5360  00F8EE  4A0F               	infsnz	sprintf@f,f,c
  5361  00F8F0  2A10               	incf	sprintf@f+1,f,c
  5362  00F8F2                     	if	0	;tblptru may be non-zero
  5363  00F8F2                     	endif
  5364  00F8F2                     	if	0	;tblptru may be non-zero
  5365  00F8F2                     	endif
  5366  00F8F2  0008               	tblrd		*
  5367  00F8F4  CFF5 F027          	movff	tablat,sprintf@c
  5368  00F8F8  5027               	movf	sprintf@c,w,c
  5369  00F8FA  B4D8               	btfsc	status,2,c
  5370  00F8FC  D002               	goto	l2257
  5371  00F8FE  D671               	goto	l2139
  5372  00F900  D000               	goto	l2257
  5373  00F902                     l2257:
  5374                           
  5375                           ;doprnt.c: 1538: *sp = 0;
  5376  00F902  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5377  00F906  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5378  00F90A  0E00               	movlw	0
  5379  00F90C  6EDF               	movwf	indf2,c
  5380  00F90E  0012               	return	
  5381                           
  5382                           ;doprnt.c: 1540: return 0;
  5383                           ;	Return value of _sprintf is never used
  5384  00F910  0012               	return		;funcret
  5385  00F912                     __end_of_sprintf:
  5386                           	opt stack 0
  5387                           tblptru	equ	0xFF8
  5388                           tblptrh	equ	0xFF7
  5389                           tblptrl	equ	0xFF6
  5390                           tablat	equ	0xFF5
  5391                           prodh	equ	0xFF4
  5392                           prodl	equ	0xFF3
  5393                           intcon	equ	0xFF2
  5394                           postinc0	equ	0xFEE
  5395                           wreg	equ	0xFE8
  5396                           postdec1	equ	0xFE5
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _isdigit *****************
  5406 ;; Defined at:
  5407 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  c               1    wreg     unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  c               1    2[COMRAM] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5425 ;;Total ram usage:        3 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		_sprintf
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	text16
  5435  00E606                     __ptext16:
  5436                           	opt stack 0
  5437  00E606                     _isdigit:
  5438                           	opt stack 29
  5439                           
  5440                           ;incstack = 0
  5441                           ;isdigit@c stored from wreg
  5442  00E606  6E03               	movwf	isdigit@c,c
  5443  00E608  0E00               	movlw	0
  5444  00E60A  6E02               	movwf	_isdigit$2097,c
  5445  00E60C  0E3A               	movlw	58
  5446  00E60E  6003               	cpfslt	isdigit@c,c
  5447  00E610  D006               	goto	l2043
  5448  00E612  0E2F               	movlw	47
  5449  00E614  6403               	cpfsgt	isdigit@c,c
  5450  00E616  D003               	goto	l2043
  5451  00E618  0E01               	movlw	1
  5452  00E61A  6E02               	movwf	_isdigit$2097,c
  5453  00E61C  D000               	goto	l2043
  5454  00E61E                     l2043:
  5455  00E61E  C002  F001         	movff	_isdigit$2097,??_isdigit
  5456  00E622  3001               	rrcf	??_isdigit,w,c
  5457  00E624  0012               	return	
  5458  00E626  0012               	return		;funcret
  5459  00E628                     __end_of_isdigit:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           postinc0	equ	0xFEE
  5469                           wreg	equ	0xFE8
  5470                           postdec1	equ	0xFE5
  5471                           fsr1l	equ	0xFE1
  5472                           indf2	equ	0xFDF
  5473                           postinc2	equ	0xFDE
  5474                           postdec2	equ	0xFDD
  5475                           fsr2h	equ	0xFDA
  5476                           fsr2l	equ	0xFD9
  5477                           status	equ	0xFD8
  5478                           
  5479 ;; *************** function ___wmul *****************
  5480 ;; Defined at:
  5481 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  multiplier      2    0[COMRAM] unsigned int 
  5484 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  product         2    4[COMRAM] unsigned int 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;                  2    0[COMRAM] unsigned int 
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0, prodl, prodh
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5496 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5497 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5499 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5500 ;;Total ram usage:        6 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_sprintf
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text17
  5510  00E64A                     __ptext17:
  5511                           	opt stack 0
  5512  00E64A                     ___wmul:
  5513                           	opt stack 29
  5514                           
  5515                           ;incstack = 0
  5516  00E64A  5001               	movf	___wmul@multiplier,w,c
  5517  00E64C  0203               	mulwf	___wmul@multiplicand,c
  5518  00E64E  CFF3 F005          	movff	prodl,___wmul@product
  5519  00E652  CFF4 F006          	movff	prodh,___wmul@product+1
  5520  00E656  5001               	movf	___wmul@multiplier,w,c
  5521  00E658  0204               	mulwf	___wmul@multiplicand+1,c
  5522  00E65A  50F3               	movf	prodl,w,c
  5523  00E65C  2606               	addwf	___wmul@product+1,f,c
  5524  00E65E  5002               	movf	___wmul@multiplier+1,w,c
  5525  00E660  0203               	mulwf	___wmul@multiplicand,c
  5526  00E662  50F3               	movf	prodl,w,c
  5527  00E664  2606               	addwf	___wmul@product+1,f,c
  5528  00E666  C005  F001         	movff	___wmul@product,?___wmul
  5529  00E66A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5530  00E66E  0012               	return	
  5531  00E670  0012               	return		;funcret
  5532  00E672                     __end_of___wmul:
  5533                           	opt stack 0
  5534                           tblptru	equ	0xFF8
  5535                           tblptrh	equ	0xFF7
  5536                           tblptrl	equ	0xFF6
  5537                           tablat	equ	0xFF5
  5538                           prodh	equ	0xFF4
  5539                           prodl	equ	0xFF3
  5540                           intcon	equ	0xFF2
  5541                           postinc0	equ	0xFEE
  5542                           wreg	equ	0xFE8
  5543                           postdec1	equ	0xFE5
  5544                           fsr1l	equ	0xFE1
  5545                           indf2	equ	0xFDF
  5546                           postinc2	equ	0xFDE
  5547                           postdec2	equ	0xFDD
  5548                           fsr2h	equ	0xFDA
  5549                           fsr2l	equ	0xFD9
  5550                           status	equ	0xFD8
  5551                           
  5552 ;; *************** function ___lwmod *****************
  5553 ;; Defined at:
  5554 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5555 ;; Parameters:    Size  Location     Type
  5556 ;;  dividend        2    7[COMRAM] unsigned int 
  5557 ;;  divisor         2    9[COMRAM] unsigned int 
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;  counter         1   11[COMRAM] unsigned char 
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  2    7[COMRAM] unsigned int 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5569 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5570 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5572 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5573 ;;Total ram usage:        5 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; This function calls:
  5576 ;;		Nothing
  5577 ;; This function is called by:
  5578 ;;		_sprintf
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text18
  5583  00E672                     __ptext18:
  5584                           	opt stack 0
  5585  00E672                     ___lwmod:
  5586                           	opt stack 29
  5587                           
  5588                           ;incstack = 0
  5589  00E672  500A               	movf	___lwmod@divisor,w,c
  5590  00E674  100B               	iorwf	___lwmod@divisor+1,w,c
  5591  00E676  B4D8               	btfsc	status,2,c
  5592  00E678  D01D               	goto	l952
  5593  00E67A  0E01               	movlw	1
  5594  00E67C  6E0C               	movwf	___lwmod@counter,c
  5595  00E67E  D005               	goto	l2081
  5596  00E680                     l2079:
  5597  00E680  90D8               	bcf	status,0,c
  5598  00E682  360A               	rlcf	___lwmod@divisor,f,c
  5599  00E684  360B               	rlcf	___lwmod@divisor+1,f,c
  5600  00E686  2A0C               	incf	___lwmod@counter,f,c
  5601  00E688  D000               	goto	l2081
  5602  00E68A                     l2081:
  5603  00E68A  BE0B               	btfsc	___lwmod@divisor+1,7,c
  5604  00E68C  D002               	goto	l2083
  5605  00E68E  D7F8               	goto	l2079
  5606  00E690  D000               	goto	l2083
  5607  00E692                     l2083:
  5608  00E692  500A               	movf	___lwmod@divisor,w,c
  5609  00E694  5C08               	subwf	___lwmod@dividend,w,c
  5610  00E696  500B               	movf	___lwmod@divisor+1,w,c
  5611  00E698  5809               	subwfb	___lwmod@dividend+1,w,c
  5612  00E69A  A0D8               	btfss	status,0,c
  5613  00E69C  D005               	goto	l2087
  5614  00E69E  500A               	movf	___lwmod@divisor,w,c
  5615  00E6A0  5E08               	subwf	___lwmod@dividend,f,c
  5616  00E6A2  500B               	movf	___lwmod@divisor+1,w,c
  5617  00E6A4  5A09               	subwfb	___lwmod@dividend+1,f,c
  5618  00E6A6  D000               	goto	l2087
  5619  00E6A8                     l2087:
  5620  00E6A8  90D8               	bcf	status,0,c
  5621  00E6AA  320B               	rrcf	___lwmod@divisor+1,f,c
  5622  00E6AC  320A               	rrcf	___lwmod@divisor,f,c
  5623  00E6AE  2E0C               	decfsz	___lwmod@counter,f,c
  5624  00E6B0  D7F0               	goto	l2083
  5625  00E6B2  D000               	goto	l952
  5626  00E6B4                     l952:
  5627  00E6B4  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5628  00E6B8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5629  00E6BC  0012               	return		;funcret
  5630  00E6BE                     __end_of___lwmod:
  5631                           	opt stack 0
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           intcon	equ	0xFF2
  5639                           postinc0	equ	0xFEE
  5640                           wreg	equ	0xFE8
  5641                           postdec1	equ	0xFE5
  5642                           fsr1l	equ	0xFE1
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function ___lwdiv *****************
  5651 ;; Defined at:
  5652 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  dividend        2    0[COMRAM] unsigned int 
  5655 ;;  divisor         2    2[COMRAM] unsigned int 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  quotient        2    4[COMRAM] unsigned int 
  5658 ;;  counter         1    6[COMRAM] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  2    0[COMRAM] unsigned int 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5668 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5669 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5671 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5672 ;;Total ram usage:        7 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_sprintf
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text19
  5682  00E6BE                     __ptext19:
  5683                           	opt stack 0
  5684  00E6BE                     ___lwdiv:
  5685                           	opt stack 29
  5686                           
  5687                           ;incstack = 0
  5688  00E6BE  0E00               	movlw	0
  5689  00E6C0  6E06               	movwf	___lwdiv@quotient+1,c
  5690  00E6C2  0E00               	movlw	0
  5691  00E6C4  6E05               	movwf	___lwdiv@quotient,c
  5692  00E6C6  5003               	movf	___lwdiv@divisor,w,c
  5693  00E6C8  1004               	iorwf	___lwdiv@divisor+1,w,c
  5694  00E6CA  B4D8               	btfsc	status,2,c
  5695  00E6CC  D021               	goto	l942
  5696  00E6CE  0E01               	movlw	1
  5697  00E6D0  6E07               	movwf	___lwdiv@counter,c
  5698  00E6D2  D005               	goto	l2061
  5699  00E6D4                     l2059:
  5700  00E6D4  90D8               	bcf	status,0,c
  5701  00E6D6  3603               	rlcf	___lwdiv@divisor,f,c
  5702  00E6D8  3604               	rlcf	___lwdiv@divisor+1,f,c
  5703  00E6DA  2A07               	incf	___lwdiv@counter,f,c
  5704  00E6DC  D000               	goto	l2061
  5705  00E6DE                     l2061:
  5706  00E6DE  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5707  00E6E0  D002               	goto	l2063
  5708  00E6E2  D7F8               	goto	l2059
  5709  00E6E4  D000               	goto	l2063
  5710  00E6E6                     l2063:
  5711  00E6E6  90D8               	bcf	status,0,c
  5712  00E6E8  3605               	rlcf	___lwdiv@quotient,f,c
  5713  00E6EA  3606               	rlcf	___lwdiv@quotient+1,f,c
  5714  00E6EC  5003               	movf	___lwdiv@divisor,w,c
  5715  00E6EE  5C01               	subwf	___lwdiv@dividend,w,c
  5716  00E6F0  5004               	movf	___lwdiv@divisor+1,w,c
  5717  00E6F2  5802               	subwfb	___lwdiv@dividend+1,w,c
  5718  00E6F4  A0D8               	btfss	status,0,c
  5719  00E6F6  D006               	goto	l2071
  5720  00E6F8  5003               	movf	___lwdiv@divisor,w,c
  5721  00E6FA  5E01               	subwf	___lwdiv@dividend,f,c
  5722  00E6FC  5004               	movf	___lwdiv@divisor+1,w,c
  5723  00E6FE  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5724  00E700  8005               	bsf	___lwdiv@quotient,0,c
  5725  00E702  D000               	goto	l2071
  5726  00E704                     l2071:
  5727  00E704  90D8               	bcf	status,0,c
  5728  00E706  3204               	rrcf	___lwdiv@divisor+1,f,c
  5729  00E708  3203               	rrcf	___lwdiv@divisor,f,c
  5730  00E70A  2E07               	decfsz	___lwdiv@counter,f,c
  5731  00E70C  D7EC               	goto	l2063
  5732  00E70E  D000               	goto	l942
  5733  00E710                     l942:
  5734  00E710  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5735  00E714  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5736  00E718  0012               	return		;funcret
  5737  00E71A                     __end_of___lwdiv:
  5738                           	opt stack 0
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           postinc0	equ	0xFEE
  5747                           wreg	equ	0xFE8
  5748                           postdec1	equ	0xFE5
  5749                           fsr1l	equ	0xFE1
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _Lcd_Init *****************
  5758 ;; Defined at:
  5759 ;;		line 42 in file "../lcd.h"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  data            1    4[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;		None               void
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0, cstack
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5776 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5777 ;;Total ram usage:        2 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    1
  5780 ;; This function calls:
  5781 ;;		_Lcd_Cmd
  5782 ;; This function is called by:
  5783 ;;		_main
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text20
  5788  00EB6C                     __ptext20:
  5789                           	opt stack 0
  5790  00EB6C                     _Lcd_Init:
  5791                           	opt stack 29
  5792                           
  5793                           ;lcd.h: 43: unsigned char data;
  5794                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  5795                           
  5796                           ;incstack = 0
  5797  00EB6C  9093               	bcf	3987,0,c	;volatile
  5798                           
  5799                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  5800  00EB6E  9293               	bcf	3987,1,c	;volatile
  5801                           
  5802                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  5803  00EB70  9493               	bcf	3987,2,c	;volatile
  5804                           
  5805                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  5806  00EB72  9693               	bcf	3987,3,c	;volatile
  5807                           
  5808                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  5809  00EB74  9893               	bcf	3987,4,c	;volatile
  5810                           
  5811                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  5812  00EB76  9A93               	bcf	3987,5,c	;volatile
  5813                           
  5814                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  5815  00EB78  908A               	bcf	3978,0,c	;volatile
  5816                           
  5817                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  5818  00EB7A  928A               	bcf	3978,1,c	;volatile
  5819                           
  5820                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  5821  00EB7C  948A               	bcf	3978,2,c	;volatile
  5822                           
  5823                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  5824  00EB7E  968A               	bcf	3978,3,c	;volatile
  5825                           
  5826                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  5827  00EB80  988A               	bcf	3978,4,c	;volatile
  5828                           
  5829                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  5830  00EB82  9A8A               	bcf	3978,5,c	;volatile
  5831                           
  5832                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5833  00EB84  0E0F               	movlw	15
  5834  00EB86  6E04               	movwf	??_Lcd_Init& (0+255),c
  5835  00EB88  0E48               	movlw	72
  5836  00EB8A                     u2757:
  5837  00EB8A  2EE8               	decfsz	wreg,f,c
  5838  00EB8C  D7FE               	goto	u2757
  5839  00EB8E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5840  00EB90  D7FC               	goto	u2757
  5841                           
  5842                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5843  00EB92  0E0F               	movlw	15
  5844  00EB94  6E04               	movwf	??_Lcd_Init& (0+255),c
  5845  00EB96  0E48               	movlw	72
  5846  00EB98                     u2767:
  5847  00EB98  2EE8               	decfsz	wreg,f,c
  5848  00EB9A  D7FE               	goto	u2767
  5849  00EB9C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5850  00EB9E  D7FC               	goto	u2767
  5851                           
  5852                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5853  00EBA0  0E0F               	movlw	15
  5854  00EBA2  6E04               	movwf	??_Lcd_Init& (0+255),c
  5855  00EBA4  0E48               	movlw	72
  5856  00EBA6                     u2777:
  5857  00EBA6  2EE8               	decfsz	wreg,f,c
  5858  00EBA8  D7FE               	goto	u2777
  5859  00EBAA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5860  00EBAC  D7FC               	goto	u2777
  5861                           
  5862                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5863  00EBAE  0E0F               	movlw	15
  5864  00EBB0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5865  00EBB2  0E48               	movlw	72
  5866  00EBB4                     u2787:
  5867  00EBB4  2EE8               	decfsz	wreg,f,c
  5868  00EBB6  D7FE               	goto	u2787
  5869  00EBB8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5870  00EBBA  D7FC               	goto	u2787
  5871                           
  5872                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5873  00EBBC  0E0F               	movlw	15
  5874  00EBBE  6E04               	movwf	??_Lcd_Init& (0+255),c
  5875  00EBC0  0E48               	movlw	72
  5876  00EBC2                     u2797:
  5877  00EBC2  2EE8               	decfsz	wreg,f,c
  5878  00EBC4  D7FE               	goto	u2797
  5879  00EBC6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5880  00EBC8  D7FC               	goto	u2797
  5881                           
  5882                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5883  00EBCA  0E0F               	movlw	15
  5884  00EBCC  6E04               	movwf	??_Lcd_Init& (0+255),c
  5885  00EBCE  0E48               	movlw	72
  5886  00EBD0                     u2807:
  5887  00EBD0  2EE8               	decfsz	wreg,f,c
  5888  00EBD2  D7FE               	goto	u2807
  5889  00EBD4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5890  00EBD6  D7FC               	goto	u2807
  5891                           
  5892                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5893  00EBD8  0E01               	movlw	1
  5894  00EBDA  6E05               	movwf	Lcd_Init@data,c
  5895  00EBDC  D01F               	goto	L5
  5896  00EBDE  D021               	goto	l72
  5897  00EBE0                     l71:
  5898                           
  5899                           ;lcd.h: 63: {
  5900                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5901  00EBE0  908A               	bcf	3978,0,c	;volatile
  5902  00EBE2  928A               	bcf	3978,1,c	;volatile
  5903  00EBE4  848A               	bsf	3978,2,c	;volatile
  5904  00EBE6  868A               	bsf	3978,3,c	;volatile
  5905  00EBE8  988A               	bcf	3978,4,c	;volatile
  5906                           
  5907                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5908  00EBEA  9A8A               	bcf	3978,5,c	;volatile
  5909  00EBEC  908A               	bcf	3978,0,c	;volatile
  5910  00EBEE  928A               	bcf	3978,1,c	;volatile
  5911  00EBF0  848A               	bsf	3978,2,c	;volatile
  5912  00EBF2  868A               	bsf	3978,3,c	;volatile
  5913                           
  5914                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5915  00EBF4  888A               	bsf	3978,4,c	;volatile
  5916  00EBF6  9A8A               	bcf	3978,5,c	;volatile
  5917                           
  5918                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5919  00EBF8  0E03               	movlw	3
  5920  00EBFA                     u2817:
  5921  00EBFA  2EE8               	decfsz	wreg,f,c
  5922  00EBFC  D7FE               	goto	u2817
  5923  00EBFE  F000               	nop	
  5924                           
  5925                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5926  00EC00  908A               	bcf	3978,0,c	;volatile
  5927  00EC02  928A               	bcf	3978,1,c	;volatile
  5928  00EC04  848A               	bsf	3978,2,c	;volatile
  5929  00EC06  868A               	bsf	3978,3,c	;volatile
  5930  00EC08  988A               	bcf	3978,4,c	;volatile
  5931                           
  5932                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5933  00EC0A  9A8A               	bcf	3978,5,c	;volatile
  5934                           
  5935                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5936  00EC0C  0E0F               	movlw	15
  5937  00EC0E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5938  00EC10  0E48               	movlw	72
  5939  00EC12                     u2827:
  5940  00EC12  2EE8               	decfsz	wreg,f,c
  5941  00EC14  D7FE               	goto	u2827
  5942  00EC16  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5943  00EC18  D7FC               	goto	u2827
  5944  00EC1A  2A05               	incf	Lcd_Init@data,f,c
  5945  00EC1C                     L5:
  5946  00EC1C  0E03               	movlw	3
  5947  00EC1E  6405               	cpfsgt	Lcd_Init@data,c
  5948  00EC20  D7DF               	goto	l71
  5949  00EC22                     l72:
  5950                           
  5951                           ;lcd.h: 71: }
  5952                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5953  00EC22  908A               	bcf	3978,0,c	;volatile
  5954  00EC24  928A               	bcf	3978,1,c	;volatile
  5955  00EC26  848A               	bsf	3978,2,c	;volatile
  5956  00EC28  968A               	bcf	3978,3,c	;volatile
  5957  00EC2A  988A               	bcf	3978,4,c	;volatile
  5958  00EC2C  9A8A               	bcf	3978,5,c	;volatile
  5959                           
  5960                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5961  00EC2E  908A               	bcf	3978,0,c	;volatile
  5962  00EC30  928A               	bcf	3978,1,c	;volatile
  5963  00EC32  848A               	bsf	3978,2,c	;volatile
  5964  00EC34  968A               	bcf	3978,3,c	;volatile
  5965  00EC36  888A               	bsf	3978,4,c	;volatile
  5966  00EC38  9A8A               	bcf	3978,5,c	;volatile
  5967                           
  5968                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5969  00EC3A  0E03               	movlw	3
  5970  00EC3C                     u2837:
  5971  00EC3C  2EE8               	decfsz	wreg,f,c
  5972  00EC3E  D7FE               	goto	u2837
  5973  00EC40  F000               	nop	
  5974                           
  5975                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5976  00EC42  908A               	bcf	3978,0,c	;volatile
  5977  00EC44  928A               	bcf	3978,1,c	;volatile
  5978  00EC46  848A               	bsf	3978,2,c	;volatile
  5979  00EC48  968A               	bcf	3978,3,c	;volatile
  5980  00EC4A  988A               	bcf	3978,4,c	;volatile
  5981  00EC4C  9A8A               	bcf	3978,5,c	;volatile
  5982                           
  5983                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5984  00EC4E  0E0F               	movlw	15
  5985  00EC50  6E04               	movwf	??_Lcd_Init& (0+255),c
  5986  00EC52  0E48               	movlw	72
  5987  00EC54                     u2847:
  5988  00EC54  2EE8               	decfsz	wreg,f,c
  5989  00EC56  D7FE               	goto	u2847
  5990  00EC58  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5991  00EC5A  D7FC               	goto	u2847
  5992                           
  5993                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5994  00EC5C  0E28               	movlw	40
  5995  00EC5E  6E05               	movwf	Lcd_Init@data,c
  5996  00EC60  5005               	movf	Lcd_Init@data,w,c
  5997  00EC62  ECD2  F076         	call	_Lcd_Cmd
  5998                           
  5999                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  6000  00EC66  0E10               	movlw	16
  6001  00EC68  6E05               	movwf	Lcd_Init@data,c
  6002  00EC6A  5005               	movf	Lcd_Init@data,w,c
  6003  00EC6C  ECD2  F076         	call	_Lcd_Cmd
  6004                           
  6005                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  6006  00EC70  0E01               	movlw	1
  6007  00EC72  6E05               	movwf	Lcd_Init@data,c
  6008  00EC74  5005               	movf	Lcd_Init@data,w,c
  6009  00EC76  ECD2  F076         	call	_Lcd_Cmd
  6010                           
  6011                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  6012  00EC7A  0E0F               	movlw	15
  6013  00EC7C  6E05               	movwf	Lcd_Init@data,c
  6014  00EC7E  5005               	movf	Lcd_Init@data,w,c
  6015  00EC80  ECD2  F076         	call	_Lcd_Cmd
  6016  00EC84  0012               	return		;funcret
  6017  00EC86                     __end_of_Lcd_Init:
  6018                           	opt stack 0
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           postinc0	equ	0xFEE
  6027                           wreg	equ	0xFE8
  6028                           postdec1	equ	0xFE5
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           postdec2	equ	0xFDD
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _Lcd_Cmd *****************
  6038 ;; Defined at:
  6039 ;;		line 140 in file "../lcd.h"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  data            1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  data            1    2[COMRAM] unsigned char 
  6044 ;; Return value:  Size  Location     Type
  6045 ;;		None               void
  6046 ;; Registers used:
  6047 ;;		wreg, status,2, status,0
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6055 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6056 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6057 ;;Total ram usage:        3 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_Lcd_Init
  6063 ;;		_Lcd_Out
  6064 ;;		_main
  6065 ;;		_ManejaMovimientos
  6066 ;;		_Lcd_Out2
  6067 ;; This function uses a non-reentrant model
  6068 ;;
  6069                           
  6070                           	psect	text21
  6071  00EDA4                     __ptext21:
  6072                           	opt stack 0
  6073  00EDA4                     _Lcd_Cmd:
  6074                           	opt stack 28
  6075                           
  6076                           ;incstack = 0
  6077                           ;Lcd_Cmd@data stored from wreg
  6078  00EDA4  6E03               	movwf	Lcd_Cmd@data,c
  6079                           
  6080                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  6081  00EDA6  988A               	bcf	3978,4,c	;volatile
  6082  00EDA8  9A8A               	bcf	3978,5,c	;volatile
  6083                           
  6084                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  6085  00EDAA  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6086  00EDAC  AE03               	btfss	Lcd_Cmd@data,7,c
  6087  00EDAE  D001               	bra	u1375
  6088  00EDB0  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6089  00EDB2                     u1375:
  6090  00EDB2  0E01               	movlw	1
  6091  00EDB4  1601               	andwf	??_Lcd_Cmd,f,c
  6092  00EDB6  508A               	movf	3978,w,c	;volatile
  6093  00EDB8  1801               	xorwf	??_Lcd_Cmd,w,c
  6094  00EDBA  0BFE               	andlw	-2
  6095  00EDBC  1801               	xorwf	??_Lcd_Cmd,w,c
  6096  00EDBE  6E8A               	movwf	3978,c	;volatile
  6097  00EDC0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6098  00EDC4  0E06               	movlw	6
  6099  00EDC6  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6100  00EDC8                     u1385:
  6101  00EDC8  90D8               	bcf	status,0,c
  6102  00EDCA  3201               	rrcf	??_Lcd_Cmd,f,c
  6103  00EDCC  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6104  00EDCE  D7FC               	goto	u1385
  6105  00EDD0  0E01               	movlw	1
  6106  00EDD2  1601               	andwf	??_Lcd_Cmd,f,c
  6107  00EDD4  4601               	rlncf	??_Lcd_Cmd,f,c
  6108  00EDD6  508A               	movf	3978,w,c	;volatile
  6109  00EDD8  1801               	xorwf	??_Lcd_Cmd,w,c
  6110  00EDDA  0BFD               	andlw	-3
  6111  00EDDC  1801               	xorwf	??_Lcd_Cmd,w,c
  6112  00EDDE  6E8A               	movwf	3978,c	;volatile
  6113                           
  6114                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  6115  00EDE0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6116  00EDE4  0E05               	movlw	5
  6117  00EDE6  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6118  00EDE8                     u1395:
  6119  00EDE8  90D8               	bcf	status,0,c
  6120  00EDEA  3201               	rrcf	??_Lcd_Cmd,f,c
  6121  00EDEC  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6122  00EDEE  D7FC               	goto	u1395
  6123  00EDF0  0E01               	movlw	1
  6124  00EDF2  1601               	andwf	??_Lcd_Cmd,f,c
  6125  00EDF4  4601               	rlncf	??_Lcd_Cmd,f,c
  6126  00EDF6  4601               	rlncf	??_Lcd_Cmd,f,c
  6127  00EDF8  508A               	movf	3978,w,c	;volatile
  6128  00EDFA  1801               	xorwf	??_Lcd_Cmd,w,c
  6129  00EDFC  0BFB               	andlw	-5
  6130  00EDFE  1801               	xorwf	??_Lcd_Cmd,w,c
  6131  00EE00  6E8A               	movwf	3978,c	;volatile
  6132  00EE02  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6133  00EE06  3A01               	swapf	??_Lcd_Cmd,f,c
  6134  00EE08  0E0F               	movlw	15
  6135  00EE0A  1601               	andwf	??_Lcd_Cmd,f,c
  6136  00EE0C  0E01               	movlw	1
  6137  00EE0E  1601               	andwf	??_Lcd_Cmd,f,c
  6138  00EE10  4601               	rlncf	??_Lcd_Cmd,f,c
  6139  00EE12  4601               	rlncf	??_Lcd_Cmd,f,c
  6140  00EE14  4601               	rlncf	??_Lcd_Cmd,f,c
  6141  00EE16  508A               	movf	3978,w,c	;volatile
  6142  00EE18  1801               	xorwf	??_Lcd_Cmd,w,c
  6143  00EE1A  0BF7               	andlw	-9
  6144  00EE1C  1801               	xorwf	??_Lcd_Cmd,w,c
  6145  00EE1E  6E8A               	movwf	3978,c	;volatile
  6146                           
  6147                           ;lcd.h: 144: _delay(10);
  6148  00EE20  0E03               	movlw	3
  6149  00EE22                     u2857:
  6150  00EE22  2EE8               	decfsz	wreg,f,c
  6151  00EE24  D7FE               	goto	u2857
  6152  00EE26  F000               	nop	
  6153                           
  6154                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6155  00EE28  888A               	bsf	3978,4,c	;volatile
  6156  00EE2A  0E03               	movlw	3
  6157  00EE2C                     u2867:
  6158  00EE2C  2EE8               	decfsz	wreg,f,c
  6159  00EE2E  D7FE               	goto	u2867
  6160  00EE30  F000               	nop	
  6161  00EE32  988A               	bcf	3978,4,c	;volatile
  6162                           
  6163                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  6164  00EE34  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6165  00EE38  90D8               	bcf	status,0,c
  6166  00EE3A  3201               	rrcf	??_Lcd_Cmd,f,c
  6167  00EE3C  90D8               	bcf	status,0,c
  6168  00EE3E  3201               	rrcf	??_Lcd_Cmd,f,c
  6169  00EE40  90D8               	bcf	status,0,c
  6170  00EE42  3201               	rrcf	??_Lcd_Cmd,f,c
  6171  00EE44  0E01               	movlw	1
  6172  00EE46  1601               	andwf	??_Lcd_Cmd,f,c
  6173  00EE48  508A               	movf	3978,w,c	;volatile
  6174  00EE4A  1801               	xorwf	??_Lcd_Cmd,w,c
  6175  00EE4C  0BFE               	andlw	-2
  6176  00EE4E  1801               	xorwf	??_Lcd_Cmd,w,c
  6177  00EE50  6E8A               	movwf	3978,c	;volatile
  6178  00EE52  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6179  00EE56  90D8               	bcf	status,0,c
  6180  00EE58  3201               	rrcf	??_Lcd_Cmd,f,c
  6181  00EE5A  90D8               	bcf	status,0,c
  6182  00EE5C  3201               	rrcf	??_Lcd_Cmd,f,c
  6183  00EE5E  0E01               	movlw	1
  6184  00EE60  1601               	andwf	??_Lcd_Cmd,f,c
  6185  00EE62  4601               	rlncf	??_Lcd_Cmd,f,c
  6186  00EE64  508A               	movf	3978,w,c	;volatile
  6187  00EE66  1801               	xorwf	??_Lcd_Cmd,w,c
  6188  00EE68  0BFD               	andlw	-3
  6189  00EE6A  1801               	xorwf	??_Lcd_Cmd,w,c
  6190  00EE6C  6E8A               	movwf	3978,c	;volatile
  6191                           
  6192                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  6193  00EE6E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6194  00EE72  90D8               	bcf	status,0,c
  6195  00EE74  3201               	rrcf	??_Lcd_Cmd,f,c
  6196  00EE76  0E01               	movlw	1
  6197  00EE78  1601               	andwf	??_Lcd_Cmd,f,c
  6198  00EE7A  4601               	rlncf	??_Lcd_Cmd,f,c
  6199  00EE7C  4601               	rlncf	??_Lcd_Cmd,f,c
  6200  00EE7E  508A               	movf	3978,w,c	;volatile
  6201  00EE80  1801               	xorwf	??_Lcd_Cmd,w,c
  6202  00EE82  0BFB               	andlw	-5
  6203  00EE84  1801               	xorwf	??_Lcd_Cmd,w,c
  6204  00EE86  6E8A               	movwf	3978,c	;volatile
  6205  00EE88  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6206  00EE8C  0E01               	movlw	1
  6207  00EE8E  1601               	andwf	??_Lcd_Cmd,f,c
  6208  00EE90  4601               	rlncf	??_Lcd_Cmd,f,c
  6209  00EE92  4601               	rlncf	??_Lcd_Cmd,f,c
  6210  00EE94  4601               	rlncf	??_Lcd_Cmd,f,c
  6211  00EE96  508A               	movf	3978,w,c	;volatile
  6212  00EE98  1801               	xorwf	??_Lcd_Cmd,w,c
  6213  00EE9A  0BF7               	andlw	-9
  6214  00EE9C  1801               	xorwf	??_Lcd_Cmd,w,c
  6215  00EE9E  6E8A               	movwf	3978,c	;volatile
  6216                           
  6217                           ;lcd.h: 148: _delay(10);
  6218  00EEA0  0E03               	movlw	3
  6219  00EEA2                     u2877:
  6220  00EEA2  2EE8               	decfsz	wreg,f,c
  6221  00EEA4  D7FE               	goto	u2877
  6222  00EEA6  F000               	nop	
  6223                           
  6224                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6225  00EEA8  888A               	bsf	3978,4,c	;volatile
  6226  00EEAA  0E03               	movlw	3
  6227  00EEAC                     u2887:
  6228  00EEAC  2EE8               	decfsz	wreg,f,c
  6229  00EEAE  D7FE               	goto	u2887
  6230  00EEB0  F000               	nop	
  6231  00EEB2  988A               	bcf	3978,4,c	;volatile
  6232                           
  6233                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6234  00EEB4  0E0F               	movlw	15
  6235  00EEB6  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6236  00EEB8  0E48               	movlw	72
  6237  00EEBA                     u2897:
  6238  00EEBA  2EE8               	decfsz	wreg,f,c
  6239  00EEBC  D7FE               	goto	u2897
  6240  00EEBE  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6241  00EEC0  D7FC               	goto	u2897
  6242  00EEC2  0012               	return		;funcret
  6243  00EEC4                     __end_of_Lcd_Cmd:
  6244                           	opt stack 0
  6245                           tblptru	equ	0xFF8
  6246                           tblptrh	equ	0xFF7
  6247                           tblptrl	equ	0xFF6
  6248                           tablat	equ	0xFF5
  6249                           prodh	equ	0xFF4
  6250                           prodl	equ	0xFF3
  6251                           intcon	equ	0xFF2
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           postdec1	equ	0xFE5
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280                           	psect	rparam
  6281  0000                     tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           postinc0	equ	0xFEE
  6289                           wreg	equ	0xFE8
  6290                           postdec1	equ	0xFE5
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        40
    BSS         70
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      95
    BANK0           160      0     107
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_48(CODE[7]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), STR_40(CODE[5]), 
		 -> STR_38(CODE[5]), STR_33(CODE[5]), STR_31(CODE[5]), STR_29(CODE[5]), 
		 -> STR_27(CODE[5]), STR_25(CODE[5]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[3]), STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[15]), STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_47(CODE[1]), STR_45(CODE[1]), STR_43(CODE[1]), STR_41(CODE[1]), 
		 -> STR_39(CODE[1]), STR_37(CODE[1]), STR_36(CODE[1]), STR_35(CODE[1]), 
		 -> STR_34(CODE[1]), STR_32(CODE[1]), STR_30(CODE[1]), STR_28(CODE[1]), 
		 -> STR_26(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), Convert_diasem@buffer_dia(COMRAM[20]), 
		 -> STR_6(CODE[21]), STR_5(CODE[20]), STR_4(CODE[18]), STR_3(CODE[19]), 
		 -> buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_ManejaMovimientos
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _ManejaMovimientos->_Lcd_Out
    _Write_RTC->_RtccWriteDate
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   45949
                                             78 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                  _ManejaMovimientos
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0   15526
                                             68 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _ManejaMovimientos                                   10    10      0   18021
                                             68 COMRAM    10    10      0
                     _Convert_diasem
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3    5141
                                             63 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    4900
                                             39 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    4494
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _ManejaMovimientos
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _V_Principal
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6B       5       66.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CA       6        0.0%
DATA                 0      0      CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 26 00:49:37 2020

            V_Principal@cte 0045                           _i 007C                          l71 EBE0  
                        l72 EC22                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                         l209 E5EC                         l319 F880  
                       l942 E710                         l952 E6B4   ManejaMovimientos@posicion 004D  
ManejaMovimientos@minuto_tr 004C                         _dia 005C                         _mes 005E  
                       wreg 000FE8             RtccReadDate@pDt 0001                        l2043 E61E  
                      l2211 F7C6                        l2203 F782                        l2061 E6DE  
                      l2205 F7AA                        l2071 E704                        l2063 E6E6  
                      l2223 F7FA                        l2215 F7D2                        l2151 F614  
                      l2081 E68A                        l2241 F85E                        l2233 F834  
                      l2153 F62A                        l2145 F5FC                        l2321 EB60  
                      l2313 EB48                        l2059 E6D4                        l2083 E692  
                      l2227 F81E                        l2219 F7F6                        l2147 F60A  
                      l2139 F5E2                        l2253 F8DA                        l2229 F828  
                      l2173 F6D4                        l2165 F6AA                        l2157 F648  
                      l2501 E87C                        l2317 EB54                        l2087 E6A8  
                      l2079 E680                        l2247 F886                        l2239 F856  
                      l2191 F748                        l2183 F718                        l2175 F6DE  
                      l2255 F8E6                        l2503 E882                        l2511 E896  
                      l2343 F1A8                        l2423 E7EA                        l2185 F722  
                      l2177 F6E4                        l2257 F902                        l2505 E888  
                      l2513 E8B2                        l2353 F1D8                        l2337 F16E  
                      l2515 E8BA                        l2507 E88E                        l2347 F1BC  
                      l2275 EAC8                        l2197 F768                        l2189 F734  
                      l2285 EAF8                        l2269 EA9E                        l2199 F77C  
                      l2631 ED00                        l2623 EC88                        l2519 E8E4  
                      l2279 EADC                        l2463 E922                        l2633 ED1E  
                      l2625 ECA6                        l2641 ED98                        l2393 F246  
                      l2385 F22E                        l2801 FB30                        l2635 ED3C  
                      l2627 ECC4                        l2475 E94A                        l2491 E986  
                      l2629 ECE2                        l2389 F23A                        l2477 E954  
                      l2469 E934                        l2821 FBF4                        l2813 FB84  
                      l2397 E77C                        l2639 ED5A                        l2495 E996  
                      l2487 E97A                        l2479 E95C                        l2903 FE6A  
                      l2807 FB44                        l2753 F9E0                        l2913 FEC4  
                      l2737 F96E                        l2843 FCC6                        l2771 FA48  
                      l2909 FEAE                        l2861 FD2E                        l2829 FC64  
                      l2765 FA34                        l2749 F9B0                        l2855 FD1A  
                      l2839 FC96                        l2783 FA9C                        l2759 F9F4  
                      l2873 FD82                        l2849 FCDA                        l2777 FA88  
                      l2891 FE16                        l2867 FD6E                        l2795 FAF0  
                      l2971 F4AC                        l2885 FDD6                        l2789 FADC  
                      l2879 FDC2                        l2897 FE2A                        l2993 F576  
                      l2985 F522                        l2979 F4DE                        l2989 F54C  
                      l2999 F5A6                        STR_1 FFB8                        STR_2 FFEF  
                      STR_3 FF93                        STR_4 FFA6                        STR_5 FF7F  
                      STR_6 FED7                        STR_7 FFCA                        STR_8 FFD9  
                      STR_9 FFF4                        u2000 F96C                        u2010 F986  
                      u2020 F988                        u2200 FBFE                        u2220 FC6C  
                      u1405 EFF2                        u2230 FC6E                        u1415 F008  
                      u2160 FB8C                        u1425 F028                        u2170 FB8E  
                      u2420 F4B8                        u2190 FBFC                        u2510 F554  
                      u2430 F4BA                        u1375 EDB2                        u2520 F556  
                      u1385 EDC8                        u2370 FE72                        u2450 F4E6  
                      u1395 EDE8                        u2380 FE74                        u2540 F57E  
                      u2460 F4E8                        u2550 F580                        u2607 F45A  
                      u2480 F52A                        u2617 F46A                        u2490 F52C  
                      u2707 F06C                        u2627 F47A                        u1940 E8DA  
                      u2717 F0E2                        u2637 F48A                        u1950 E904  
                      u2807 EBD0                        u2727 F0EC                        u2647 F49A  
                      u2817 EBFA                        u2737 F0F6                        u2657 F5B2  
                      u2577 F42A                        u2827 EC12                        u2747 F102  
                      u1947 E8D0                        u2667 F5C8                        u2587 F43A  
                      u2837 EC3C                        u2757 EB8A                        u1957 E8FA  
                      u2677 E5F6                        u2597 F44A                        u2847 EC54  
                      u2767 EB98                        u2687 F974                        u2857 EE22  
                      u2777 EBA6                        u2697 F062                        u2867 EE2C  
                      u2787 EBB4                        u2877 EEA2                        u2797 EBC2  
                      u2887 EEAC                        u2897 EEBA                        _anio 005A  
                      _main F3DC                        _hora 00BA                        fsr2h 000FDA  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
             __CFG_T1DIG$ON 000000                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000            RtccReadDate@rTD0 000B  
          RtccReadDate@rTD1 0003             __end_of_Lcd_Cmd EEC4             __end_of_Lcd_Out E90C  
              ___param_bank 000010             RtccReadTime@pTm 0001                  _Lcd_Chr_CP EFE4  
             ??_V_Principal 0045               __CFG_PLLDIV$1 000000                       ?_main 0001  
           __end_of___awdiv E9A2                       STR_10 FF40                       STR_11 FFF4  
                     STR_20 FF55                       STR_12 FEEC                       STR_21 FFF4  
                     STR_13 FFF4                       STR_30 FEEB                       STR_14 FF16  
                     STR_22 FF01                       STR_23 FEEB                       STR_15 FFF4  
                     STR_31 FFD4                       STR_32 FEEB                       STR_24 FEEB  
                     STR_40 FFD4                       STR_16 FF6A                       STR_41 FEEB  
                     STR_17 FFF4                       STR_33 FFD4                       STR_25 FFD4  
                     STR_34 FEEB                       STR_26 FEEB                       STR_42 FFD4  
                     STR_18 FF2B                       STR_43 FEEB                       STR_35 FEEB  
                     STR_19 FFF4                       STR_27 FFD4                       STR_36 FEEB  
                     STR_28 FEEB                       STR_44 FFD4                       STR_45 FEEB  
                     STR_37 FEEB                       STR_29 FFD4                       STR_46 FFD4  
                     STR_38 FFD4                       STR_47 FEEB                       STR_39 FEEB  
                     STR_48 FFE8             ___awdiv@divisor 0003             __end_of___lwdiv E71A  
           __end_of___lwmod E6BE             ___awdiv@counter 0005                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94              __CFG_FCMEN$OFF 000000  
                     _Sw_Up 0086             __end_of_dpowers FED7                       _mes_d 00C5  
                     _mes_u 00C6             __end_of_isdigit E628                       tablat 000FF5  
                _CuentamSeg 0080  __size_of_ManejaMovimientos 05BA                       status 000FD8  
           __end_of_sprintf F912            __end_of_Lcd_Init EC86     __CFG_DSWDTOSC$INTOSCREF 000000  
           __initialization E71A                __end_of_main F5D8            RtccReadTime@rTD0 000B  
          RtccReadTime@rTD1 0003            __end_of_Read_RTC EFE4                      ??_main 004F  
             __activetblptr 000002         __end_of_V_Principal EA60            __end_of_RtccWrOn E5E6  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADRESH 000FC4  
                    _EECON2 000FA7                      _ANCON0 000F48                      _ANCON1 000F49  
          ___awdiv@dividend 0001              __CFG_WDTEN$OFF 000000             _lee_temperatura E5E6  
                 ??_Lcd_Cmd 0001            RtccWriteDate@pDt 0001                      _RTCCFG 000F3F  
                 ??_Lcd_Out 0043              __CFG_WPCFG$OFF 000000                      _Flag_1 0081  
            __CFG_WPDIS$OFF 000000                      _Grados 00B4              __CFG_XINST$OFF 000000  
               ?_Lcd_Chr_CP 0001                      ___wmul E64A                   ??___awdiv 0005  
            __CFG_STVREN$ON 000000                      _diasem 0050                      _anio_d 00BE  
                    _anio_u 00BF            ??_Convert_diasem 002A                   ??___lwdiv 0005  
                 ??___lwmod 000C                      _hora_d 00C3                      _hora_u 00C4  
                    clear_0 E720                      clear_1 E72C            ___awdiv@quotient 0007  
                    _minuto 00BC       __end_of_RtccWriteDate F252       __end_of_RtccWriteTime EB6C  
          RtccWriteTime@pTm 0001                __pdataCOMRAM 005A                   ??_isdigit 0001  
              __mediumconst FECC                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0017                  __accesstop 0060  
   __end_of__initialization E772          __size_of_Write_RTC 018A               ___rparam_used 000001  
            __pcstackCOMRAM 0001                __pidataBANK0 E628                 _V_Principal E9A2  
           __CFG_DSWDTPS$G2 000000             __CFG_OSC$INTOSC 000000     __end_of_lee_temperatura E606  
                 ?_Lcd_Init 0001                sprintf@width 0025         __size_of_Lcd_Chr_CP 0128  
                __pbssBANK0 0060                   ?_Read_RTC 0001                  _dia_semana 00C0  
 RtccWriteTime@tempHourWDay 000A                   ?_RtccWrOn 0001                     ?___wmul 0001  
             ?_RtccReadDate 0001               ?_RtccReadTime 0001           __end_of_Write_RTC F3DC  
                ??_Lcd_Init 0004                     _RTCVALH 000F99                     _RTCVALL 000F98  
                ??_Read_RTC 0013                     _Lcd_Cmd EDA4                     _Lcd_Out E878  
                   __Hparam 0000                     __Lparam 0000                     _Sw_Left 0084  
                   _Sw_Down 0083                  ??_RtccWrOn 0001              ??_RtccReadDate 0003  
            ??_RtccReadTime 0003                     ___awdiv E90C             __size_of___wmul 0028  
                   ___lwdiv E6BE                     ___lwmod E672                 _RtccTimeVal 0078  
                   __pcinit E71A                     _fecha_d 00C1                     _fecha_u 00C2  
                   __ramtop 0F00                     __ptext0 F3DC                     __ptext1 E9A2  
                   __ptext2 E5E6                     __ptext3 EEC4                     __ptext4 E77C  
                   __ptext5 E7EA                     __ptext6 F912                     __ptext7 F252  
                   __ptext8 E90C                     __ptext9 EA60                     _buffer1 0088  
                 _T1CONbits 000FCD                     _lectura 0087                     _dpowers FECD  
                   _isdigit E606                     _segundo 007E            ?_lee_temperatura 0001  
                   _sprintf F5D8        end_of_initialization E772               __Lmediumconst FECC  
              ??_Lcd_Chr_CP 0001                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTAbits 000F80  
                 _PORTCbits 000F82            __CFG_DSBOREN$OFF 000000            __CFG_CPUDIV$OSC1 000000  
                 _TRISBbits 000F93          __end_of_Lcd_Chr_CP F10C            __CFG_IOL1WAY$OFF 000000  
 RtccWriteDate@tempDayMonth 000A         __CFG_MSSP7B_EN$MSK7 000000                ?_V_Principal 0001  
            __end_of___wmul E672               __pidataCOMRAM E5CE   RtccWriteDate@tempHourWDay 000C  
          __CFG_DSWDTEN$OFF 000000         start_initialization E71A        __end_of_RtccReadDate E878  
             Lcd_Out@buffer 0041        __end_of_RtccReadTime E7EA           __size_of_Lcd_Init 011A  
      RtccWriteTime@wasAlrm 0006        RtccWriteTime@wasWrEn 0007      __size_of_RtccWriteDate 0146  
           RtccWriteDate@di 0003      __size_of_RtccWriteTime 010C           __size_of_Read_RTC 0120  
                 _Sw_Center 0082                   _Temp_prog 00B7                    ??___wmul 0005  
               __pdataBANK0 009C           __size_of_RtccWrOn 0012             RtccWriteTime@di 0003  
          __CFG_LPT1OSC$OFF 000000           Convert_diasem@dia 0028                 _ALRMCFGbits 000F91  
               __pbssCOMRAM 0050     __size_of_Convert_diasem 011E                   _Write_RTC F252  
              _isdigit$2097 0002                    ?_Lcd_Cmd 0001                 sprintf@flag 001B  
                  ?_Lcd_Out 0040                 sprintf@prec 001E                   __pnvBANK0 00BE  
          ___lwdiv@dividend 0001               __pmediumconst FECC                    ?___awdiv 0001  
                  ?___lwdiv 0001                    ?___lwmod 0008     RtccWriteTime@tempMinSec 0008  
             _RtccWriteDate F10C               _RtccWriteTime EA60                    ?_isdigit 0001  
      __CFG_RTCOSC$T1OSCREF 000000    ManejaMovimientos@anio_tr 004A    Convert_diasem@buffer_dia 002C  
                ?_Write_RTC 0001            ___lwdiv@quotient 0005    ManejaMovimientos@hora_tr 004B  
                  ?_sprintf 000D            _RtccAlrmTimeDate 0060              ___wmul@product 0005  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _PIE3bits 000FA3  
                 _segundo_d 00C9                   _segundo_u 00CA                    Lcd_Out@x 0040  
          __CFG_WDTPS$32768 000000                    Lcd_Out@y 0043          RtccWriteDate@wasOn 0005  
        _Rtcc_read_TimeDate 0070                Lcd_Init@data 0005              ?_RtccWriteDate 0001  
                _ADCON0bits 000FC2           ___wmul@multiplier 0001        __size_of_V_Principal 00BE  
            ?_RtccWriteTime 0001       __size_of_RtccReadDate 008E       __size_of_RtccReadTime 006E  
                  _Lcd_Init EB6C                   copy_data0 E746                   copy_data1 E766  
                  _Read_RTC EEC4    __size_of_lee_temperatura 0020            __size_of_Lcd_Cmd 0120  
          __size_of_Lcd_Out 0094                    __Hrparam 0000                    _RtccDate 0052  
                  __Lrparam 0000                    _RtccTime 0056                    _RtccWrOn E5D4  
                  _Sw_Right 0085                _RtccReadDate E7EA            __size_of___awdiv 0096  
              _RtccReadTime E77C            __size_of___lwdiv 005C            __size_of___lwmod 004C  
            _posicionesLeft 009C                _RtccTimeDate 0068                  sprintf@len 0023  
                sprintf@val 001C              _Convert_diasem EC86            __size_of_isdigit 0022  
            Lcd_Chr_CP@data 0003             ___lwdiv@divisor 0003                 ??_Write_RTC 000E  
           ___lwdiv@counter 0007                    __ptext10 F10C                    __ptext11 E5D4  
                  __ptext20 EB6C                    __ptext12 E878                    __ptext21 EDA4  
                  __ptext13 EFE4                    __ptext14 EC86                    __ptext15 F5D8  
                  __ptext16 E606                    __ptext17 E64A                    __ptext18 E672  
                  __ptext19 E6BE            __size_of_sprintf 033A     ManejaMovimientos@dia_tr 0048  
               Lcd_Cmd@data 0003               __size_of_main 01FC     ManejaMovimientos@mes_tr 0049  
                  _minuto_d 00C7                    _minuto_u 00C8             ??_RtccWriteDate 0004  
           ??_RtccWriteTime 0004      __end_of_Convert_diasem EDA4                 Lcd_Out@data 0044  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2          RtccWriteTime@wasOn 0005  
                  isdigit@c 0003                   sprintf@ap 001F                   sprintf@cp 0021  
                 sprintf@sp 000D            ___lwmod@dividend 0008           _ManejaMovimientos F912  
                _OSCCONbits 000FD3          ?_ManejaMovimientos 0001       RtccWriteDate@tempYear 0007  
         ??_lee_temperatura 0001         ??_ManejaMovimientos 0045                  _RTCCFGbits 000F3F  
                  sprintf@c 0027                    sprintf@f 000F             ?_Convert_diasem 0028  
           ___lwmod@divisor 000A             ___lwmod@counter 000C        RtccWriteDate@wasAlrm 0006  
      RtccWriteDate@wasWrEn 0009  ManejaMovimientos@diasem_tr 0047   __end_of_ManejaMovimientos FECC  
