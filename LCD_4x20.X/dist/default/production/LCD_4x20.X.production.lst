

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 25 10:51:13 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           	psect	idataCOMRAM
    40  00EAF2                     __pidataCOMRAM:
    41                           	opt stack 0
    42                           
    43                           ;initializer for _anio
    44  00EAF2  0014               	dw	20
    45                           
    46                           ;initializer for _dia
    47  00EAF4  0010               	dw	16
    48                           
    49                           ;initializer for _diasem
    50  00EAF6  0002               	dw	2
    51                           
    52                           ;initializer for _hora
    53  00EAF8  0012               	dw	18
    54                           
    55                           ;initializer for _mes
    56  00EAFA  000B               	dw	11
    57                           
    58                           ;initializer for _minuto
    59  00EAFC  0037               	dw	55
    60                           
    61                           	psect	idataBANK0
    62  00EAEC                     __pidataBANK0:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _Grados
    66  00EAEC  00                 	db	0
    67  00EAED  A0                 	db	160
    68  00EAEE  41                 	db	65
    69                           
    70                           ;initializer for _Temp_prog
    71  00EAEF  00                 	db	0
    72  00EAF0  B4                 	db	180
    73  00EAF1  41                 	db	65
    74                           
    75                           	psect	mediumconst
    76  00FECC                     __pmediumconst:
    77                           	opt stack 0
    78  00FECC  00                 	db	0
    79  00FECD                     _dpowers:
    80                           	opt stack 0
    81  00FECD  0001               	dw	1
    82  00FECF  000A               	dw	10
    83  00FED1  0064               	dw	100
    84  00FED3  03E8               	dw	1000
    85  00FED5  2710               	dw	10000
    86  00FED7                     __end_of_dpowers:
    87                           	opt stack 0
    88  00FED7                     STR_6:
    89  00FED7  20                 	db	32
    90  00FED8  20                 	db	32
    91  00FED9  20                 	db	32
    92  00FEDA  20                 	db	32
    93  00FEDB  20                 	db	32
    94  00FEDC  20                 	db	32
    95  00FEDD  20                 	db	32
    96  00FEDE  20                 	db	32
    97  00FEDF  20                 	db	32
    98  00FEE0  20                 	db	32
    99  00FEE1  20                 	db	32
   100  00FEE2  20                 	db	32
   101  00FEE3  20                 	db	32
   102  00FEE4  20                 	db	32
   103  00FEE5  20                 	db	32
   104  00FEE6  20                 	db	32
   105  00FEE7  20                 	db	32
   106  00FEE8  20                 	db	32
   107  00FEE9  20                 	db	32
   108  00FEEA  20                 	db	32
   109  00FEEB  00                 	db	0
   110  00FEEC                     STR_12:
   111  00FEEC  4C                 	db	76	;'L'
   112  00FEED  75                 	db	117	;'u'
   113  00FEEE  6E                 	db	110	;'n'
   114  00FEEF  65                 	db	101	;'e'
   115  00FEF0  73                 	db	115	;'s'
   116  00FEF1  20                 	db	32
   117  00FEF2  20                 	db	32
   118  00FEF3  20                 	db	32
   119  00FEF4  20                 	db	32
   120  00FEF5  20                 	db	32
   121  00FEF6  20                 	db	32
   122  00FEF7  20                 	db	32
   123  00FEF8  20                 	db	32
   124  00FEF9  20                 	db	32
   125  00FEFA  20                 	db	32
   126  00FEFB  20                 	db	32
   127  00FEFC  20                 	db	32
   128  00FEFD  20                 	db	32
   129  00FEFE  20                 	db	32
   130  00FEFF  20                 	db	32
   131  00FF00  00                 	db	0
   132  00FF01                     STR_22:
   133  00FF01  53                 	db	83	;'S'
   134  00FF02  61                 	db	97	;'a'
   135  00FF03  62                 	db	98	;'b'
   136  00FF04  61                 	db	97	;'a'
   137  00FF05  64                 	db	100	;'d'
   138  00FF06  6F                 	db	111	;'o'
   139  00FF07  20                 	db	32
   140  00FF08  20                 	db	32
   141  00FF09  20                 	db	32
   142  00FF0A  20                 	db	32
   143  00FF0B  20                 	db	32
   144  00FF0C  20                 	db	32
   145  00FF0D  20                 	db	32
   146  00FF0E  20                 	db	32
   147  00FF0F  20                 	db	32
   148  00FF10  20                 	db	32
   149  00FF11  20                 	db	32
   150  00FF12  20                 	db	32
   151  00FF13  20                 	db	32
   152  00FF14  20                 	db	32
   153  00FF15  00                 	db	0
   154  00FF16                     STR_14:
   155  00FF16  4D                 	db	77	;'M'
   156  00FF17  61                 	db	97	;'a'
   157  00FF18  72                 	db	114	;'r'
   158  00FF19  74                 	db	116	;'t'
   159  00FF1A  65                 	db	101	;'e'
   160  00FF1B  73                 	db	115	;'s'
   161  00FF1C  20                 	db	32
   162  00FF1D  20                 	db	32
   163  00FF1E  20                 	db	32
   164  00FF1F  20                 	db	32
   165  00FF20  20                 	db	32
   166  00FF21  20                 	db	32
   167  00FF22  20                 	db	32
   168  00FF23  20                 	db	32
   169  00FF24  20                 	db	32
   170  00FF25  20                 	db	32
   171  00FF26  20                 	db	32
   172  00FF27  20                 	db	32
   173  00FF28  20                 	db	32
   174  00FF29  20                 	db	32
   175  00FF2A  00                 	db	0
   176  00FF2B                     STR_18:
   177  00FF2B  4A                 	db	74	;'J'
   178  00FF2C  75                 	db	117	;'u'
   179  00FF2D  65                 	db	101	;'e'
   180  00FF2E  76                 	db	118	;'v'
   181  00FF2F  65                 	db	101	;'e'
   182  00FF30  73                 	db	115	;'s'
   183  00FF31  20                 	db	32
   184  00FF32  20                 	db	32
   185  00FF33  20                 	db	32
   186  00FF34  20                 	db	32
   187  00FF35  20                 	db	32
   188  00FF36  20                 	db	32
   189  00FF37  20                 	db	32
   190  00FF38  20                 	db	32
   191  00FF39  20                 	db	32
   192  00FF3A  20                 	db	32
   193  00FF3B  20                 	db	32
   194  00FF3C  20                 	db	32
   195  00FF3D  20                 	db	32
   196  00FF3E  20                 	db	32
   197  00FF3F  00                 	db	0
   198  00FF40                     STR_10:
   199  00FF40  44                 	db	68	;'D'
   200  00FF41  6F                 	db	111	;'o'
   201  00FF42  6D                 	db	109	;'m'
   202  00FF43  69                 	db	105	;'i'
   203  00FF44  6E                 	db	110	;'n'
   204  00FF45  67                 	db	103	;'g'
   205  00FF46  6F                 	db	111	;'o'
   206  00FF47  20                 	db	32
   207  00FF48  20                 	db	32
   208  00FF49  20                 	db	32
   209  00FF4A  20                 	db	32
   210  00FF4B  20                 	db	32
   211  00FF4C  20                 	db	32
   212  00FF4D  20                 	db	32
   213  00FF4E  20                 	db	32
   214  00FF4F  20                 	db	32
   215  00FF50  20                 	db	32
   216  00FF51  20                 	db	32
   217  00FF52  20                 	db	32
   218  00FF53  20                 	db	32
   219  00FF54  00                 	db	0
   220  00FF55                     STR_20:
   221  00FF55  56                 	db	86	;'V'
   222  00FF56  69                 	db	105	;'i'
   223  00FF57  65                 	db	101	;'e'
   224  00FF58  72                 	db	114	;'r'
   225  00FF59  6E                 	db	110	;'n'
   226  00FF5A  65                 	db	101	;'e'
   227  00FF5B  73                 	db	115	;'s'
   228  00FF5C  20                 	db	32
   229  00FF5D  20                 	db	32
   230  00FF5E  20                 	db	32
   231  00FF5F  20                 	db	32
   232  00FF60  20                 	db	32
   233  00FF61  20                 	db	32
   234  00FF62  20                 	db	32
   235  00FF63  20                 	db	32
   236  00FF64  20                 	db	32
   237  00FF65  20                 	db	32
   238  00FF66  20                 	db	32
   239  00FF67  20                 	db	32
   240  00FF68  20                 	db	32
   241  00FF69  00                 	db	0
   242  00FF6A                     STR_16:
   243  00FF6A  4D                 	db	77	;'M'
   244  00FF6B  69                 	db	105	;'i'
   245  00FF6C  65                 	db	101	;'e'
   246  00FF6D  72                 	db	114	;'r'
   247  00FF6E  63                 	db	99	;'c'
   248  00FF6F  6F                 	db	111	;'o'
   249  00FF70  6C                 	db	108	;'l'
   250  00FF71  65                 	db	101	;'e'
   251  00FF72  73                 	db	115	;'s'
   252  00FF73  20                 	db	32
   253  00FF74  20                 	db	32
   254  00FF75  20                 	db	32
   255  00FF76  20                 	db	32
   256  00FF77  20                 	db	32
   257  00FF78  20                 	db	32
   258  00FF79  20                 	db	32
   259  00FF7A  20                 	db	32
   260  00FF7B  20                 	db	32
   261  00FF7C  20                 	db	32
   262  00FF7D  20                 	db	32
   263  00FF7E  00                 	db	0
   264  00FF7F                     STR_5:
   265  00FF7F  43                 	db	67	;'C'
   266  00FF80  45                 	db	69	;'E'
   267  00FF81  4E                 	db	78	;'N'
   268  00FF82  54                 	db	84	;'T'
   269  00FF83  45                 	db	69	;'E'
   270  00FF84  52                 	db	82	;'R'
   271  00FF85  20                 	db	32
   272  00FF86  20                 	db	32
   273  00FF87  20                 	db	32
   274  00FF88  20                 	db	32
   275  00FF89  20                 	db	32
   276  00FF8A  20                 	db	32
   277  00FF8B  20                 	db	32
   278  00FF8C  20                 	db	32
   279  00FF8D  20                 	db	32
   280  00FF8E  20                 	db	32
   281  00FF8F  20                 	db	32
   282  00FF90  20                 	db	32
   283  00FF91  20                 	db	32
   284  00FF92  00                 	db	0
   285  00FF93                     STR_3:
   286  00FF93  52                 	db	82	;'R'
   287  00FF94  49                 	db	73	;'I'
   288  00FF95  47                 	db	71	;'G'
   289  00FF96  48                 	db	72	;'H'
   290  00FF97  54                 	db	84	;'T'
   291  00FF98  20                 	db	32
   292  00FF99  20                 	db	32
   293  00FF9A  20                 	db	32
   294  00FF9B  20                 	db	32
   295  00FF9C  20                 	db	32
   296  00FF9D  20                 	db	32
   297  00FF9E  20                 	db	32
   298  00FF9F  20                 	db	32
   299  00FFA0  20                 	db	32
   300  00FFA1  20                 	db	32
   301  00FFA2  20                 	db	32
   302  00FFA3  20                 	db	32
   303  00FFA4  20                 	db	32
   304  00FFA5  00                 	db	0
   305  00FFA6                     STR_4:
   306  00FFA6  55                 	db	85	;'U'
   307  00FFA7  50                 	db	80	;'P'
   308  00FFA8  20                 	db	32
   309  00FFA9  20                 	db	32
   310  00FFAA  20                 	db	32
   311  00FFAB  20                 	db	32
   312  00FFAC  20                 	db	32
   313  00FFAD  20                 	db	32
   314  00FFAE  20                 	db	32
   315  00FFAF  20                 	db	32
   316  00FFB0  20                 	db	32
   317  00FFB1  20                 	db	32
   318  00FFB2  20                 	db	32
   319  00FFB3  20                 	db	32
   320  00FFB4  20                 	db	32
   321  00FFB5  20                 	db	32
   322  00FFB6  20                 	db	32
   323  00FFB7  00                 	db	0
   324  00FFB8                     STR_1:
   325  00FFB8  50                 	db	80	;'P'
   326  00FFB9  72                 	db	114	;'r'
   327  00FFBA  6F                 	db	111	;'o'
   328  00FFBB  67                 	db	103	;'g'
   329  00FFBC  72                 	db	114	;'r'
   330  00FFBD  61                 	db	97	;'a'
   331  00FFBE  6D                 	db	109	;'m'
   332  00FFBF  20                 	db	32
   333  00FFC0  64                 	db	100	;'d'
   334  00FFC1  65                 	db	101	;'e'
   335  00FFC2  6C                 	db	108	;'l'
   336  00FFC3  20                 	db	32
   337  00FFC4  72                 	db	114	;'r'
   338  00FFC5  65                 	db	101	;'e'
   339  00FFC6  6C                 	db	108	;'l'
   340  00FFC7  6F                 	db	111	;'o'
   341  00FFC8  6A                 	db	106	;'j'
   342  00FFC9  00                 	db	0
   343  00FFCA                     STR_7:
   344  00FFCA  25                 	db	37
   345  00FFCB  30                 	db	48	;'0'
   346  00FFCC  32                 	db	50	;'2'
   347  00FFCD  75                 	db	117	;'u'
   348  00FFCE  2F                 	db	47
   349  00FFCF  25                 	db	37
   350  00FFD0  30                 	db	48	;'0'
   351  00FFD1  32                 	db	50	;'2'
   352  00FFD2  75                 	db	117	;'u'
   353  00FFD3  2F                 	db	47
   354  00FFD4  25                 	db	37
   355  00FFD5  30                 	db	48	;'0'
   356  00FFD6  32                 	db	50	;'2'
   357  00FFD7  75                 	db	117	;'u'
   358  00FFD8  00                 	db	0
   359  00FFD9                     STR_8:
   360  00FFD9  25                 	db	37
   361  00FFDA  30                 	db	48	;'0'
   362  00FFDB  32                 	db	50	;'2'
   363  00FFDC  75                 	db	117	;'u'
   364  00FFDD  3A                 	db	58	;':'
   365  00FFDE  25                 	db	37
   366  00FFDF  30                 	db	48	;'0'
   367  00FFE0  32                 	db	50	;'2'
   368  00FFE1  75                 	db	117	;'u'
   369  00FFE2  3A                 	db	58	;':'
   370  00FFE3  25                 	db	37
   371  00FFE4  30                 	db	48	;'0'
   372  00FFE5  32                 	db	50	;'2'
   373  00FFE6  75                 	db	117	;'u'
   374  00FFE7  00                 	db	0
   375  00FFE8                     STR_23:
   376  00FFE8  28                 	db	40
   377  00FFE9  6E                 	db	110	;'n'
   378  00FFEA  75                 	db	117	;'u'
   379  00FFEB  6C                 	db	108	;'l'
   380  00FFEC  6C                 	db	108	;'l'
   381  00FFED  29                 	db	41
   382  00FFEE  00                 	db	0
   383  00FFEF                     STR_2:
   384  00FFEF  25                 	db	37
   385  00FFF0  30                 	db	48	;'0'
   386  00FFF1  33                 	db	51	;'3'
   387  00FFF2  75                 	db	117	;'u'
   388  00FFF3  00                 	db	0
   389  00FFF4                     STR_9:
   390  00FFF4  25                 	db	37
   391  00FFF5  73                 	db	115	;'s'
   392  00FFF6  00                 	db	0
   393  0000                     
   394                           ; #config settings
   395  00FFF7  00                 	db	0	; dummy byte at the end
   396  0000                     
   397                           	psect	nvBANK0
   398  000099                     __pnvBANK0:
   399                           	opt stack 0
   400  000099                     _anio_d:
   401                           	opt stack 0
   402  000099                     	ds	1
   403  00009A                     _anio_u:
   404                           	opt stack 0
   405  00009A                     	ds	1
   406  00009B                     _dia_semana:
   407                           	opt stack 0
   408  00009B                     	ds	1
   409  00009C                     _fecha_d:
   410                           	opt stack 0
   411  00009C                     	ds	1
   412  00009D                     _fecha_u:
   413                           	opt stack 0
   414  00009D                     	ds	1
   415  00009E                     _hora_d:
   416                           	opt stack 0
   417  00009E                     	ds	1
   418  00009F                     _hora_u:
   419                           	opt stack 0
   420  00009F                     	ds	1
   421  0000A0                     _mes_d:
   422                           	opt stack 0
   423  0000A0                     	ds	1
   424  0000A1                     _mes_u:
   425                           	opt stack 0
   426  0000A1                     	ds	1
   427  0000A2                     _minuto_d:
   428                           	opt stack 0
   429  0000A2                     	ds	1
   430  0000A3                     _minuto_u:
   431                           	opt stack 0
   432  0000A3                     	ds	1
   433  0000A4                     _segundo_d:
   434                           	opt stack 0
   435  0000A4                     	ds	1
   436  0000A5                     _segundo_u:
   437                           	opt stack 0
   438  0000A5                     	ds	1
   439  0000                     _ANCON0	set	3912
   440  0000                     _ANCON1	set	3913
   441  0000                     _RTCCFG	set	3903
   442  0000                     _RTCCFGbits	set	3903
   443  0000                     _ADCON0	set	4034
   444  0000                     _ADCON0bits	set	4034
   445  0000                     _ADCON1	set	4033
   446  0000                     _ADRESH	set	4036
   447  0000                     _ALRMCFGbits	set	3985
   448  0000                     _EECON2	set	4007
   449  0000                     _INTCONbits	set	4082
   450  0000                     _LATAbits	set	3977
   451  0000                     _LATBbits	set	3978
   452  0000                     _OSCCONbits	set	4051
   453  0000                     _OSCTUNEbits	set	3995
   454  0000                     _PIE3bits	set	4003
   455  0000                     _PORTAbits	set	3968
   456  0000                     _PORTCbits	set	3970
   457  0000                     _RTCVALH	set	3993
   458  0000                     _RTCVALL	set	3992
   459  0000                     _T1CONbits	set	4045
   460  0000                     _TRISA	set	3986
   461  0000                     _TRISB	set	3987
   462  0000                     _TRISBbits	set	3987
   463  0000                     _TRISC	set	3988
   464                           
   465                           	psect	cinit
   466  00EC22                     __pcinit:
   467                           	opt stack 0
   468  00EC22                     start_initialization:
   469                           	opt stack 0
   470  00EC22                     __initialization:
   471                           	opt stack 0
   472                           
   473                           ; Clear objects allocated to BANK0 (57 bytes)
   474  00EC22  EE00  F060         	lfsr	0,__pbssBANK0
   475  00EC26  0E39               	movlw	57
   476  00EC28                     clear_0:
   477  00EC28  6AEE               	clrf	postinc0,c
   478  00EC2A  06E8               	decf	wreg,f,c
   479  00EC2C  E1FD               	bnz	clear_0
   480                           
   481                           ; Clear objects allocated to COMRAM (11 bytes)
   482  00EC2E  EE00  F055         	lfsr	0,__pbssCOMRAM
   483  00EC32  0E0B               	movlw	11
   484  00EC34                     clear_1:
   485  00EC34  6AEE               	clrf	postinc0,c
   486  00EC36  06E8               	decf	wreg,f,c
   487  00EC38  E1FD               	bnz	clear_1
   488                           
   489                           ; Initialize objects allocated to BANK0 (6 bytes)
   490                           ; load TBLPTR registers with __pidataBANK0
   491  00EC3A  0EEC               	movlw	low __pidataBANK0
   492  00EC3C  6EF6               	movwf	tblptrl,c
   493  00EC3E  0EEA               	movlw	high __pidataBANK0
   494  00EC40  6EF7               	movwf	tblptrh,c
   495  00EC42  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   496  00EC44  6EF8               	movwf	tblptru,c
   497  00EC46  EE00  F0A6         	lfsr	0,__pdataBANK0
   498  00EC4A  EE10 F006          	lfsr	1,6
   499  00EC4E                     copy_data0:
   500  00EC4E  0009               	tblrd		*+
   501  00EC50  CFF5 FFEE          	movff	tablat,postinc0
   502  00EC54  50E5               	movf	postdec1,w,c
   503  00EC56  50E1               	movf	fsr1l,w,c
   504  00EC58  E1FA               	bnz	copy_data0
   505                           
   506                           ; Initialize objects allocated to COMRAM (12 bytes)
   507                           ; load TBLPTR registers with __pidataCOMRAM
   508  00EC5A  0EF2               	movlw	low __pidataCOMRAM
   509  00EC5C  6EF6               	movwf	tblptrl,c
   510  00EC5E  0EEA               	movlw	high __pidataCOMRAM
   511  00EC60  6EF7               	movwf	tblptrh,c
   512  00EC62  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   513  00EC64  6EF8               	movwf	tblptru,c
   514  00EC66  EE00  F049         	lfsr	0,__pdataCOMRAM
   515  00EC6A  EE10 F00C          	lfsr	1,12
   516  00EC6E                     copy_data1:
   517  00EC6E  0009               	tblrd		*+
   518  00EC70  CFF5 FFEE          	movff	tablat,postinc0
   519  00EC74  50E5               	movf	postdec1,w,c
   520  00EC76  50E1               	movf	fsr1l,w,c
   521  00EC78  E1FA               	bnz	copy_data1
   522  00EC7A                     end_of_initialization:
   523                           	opt stack 0
   524  00EC7A                     __end_of__initialization:
   525                           	opt stack 0
   526  00EC7A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   527  00EC7C  6EF8               	movwf	tblptru,c
   528  00EC7E  0100               	movlb	0
   529  00EC80  EF6C  F07C         	goto	_main	;jump to C main() function
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           	psect	bssCOMRAM
   540  000055                     __pbssCOMRAM:
   541                           	opt stack 0
   542  000055                     _i:
   543                           	opt stack 0
   544  000055                     	ds	2
   545  000057                     _lectura:
   546                           	opt stack 0
   547  000057                     	ds	1
   548  000058                     _RtccDate:
   549                           	opt stack 0
   550  000058                     	ds	4
   551  00005C                     _RtccTime:
   552                           	opt stack 0
   553  00005C                     	ds	4
   554                           tblptru	equ	0xFF8
   555                           tblptrh	equ	0xFF7
   556                           tblptrl	equ	0xFF6
   557                           tablat	equ	0xFF5
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1l	equ	0xFE1
   562                           
   563                           	psect	dataCOMRAM
   564  000049                     __pdataCOMRAM:
   565                           	opt stack 0
   566  000049                     _anio:
   567                           	opt stack 0
   568  000049                     	ds	2
   569  00004B                     _dia:
   570                           	opt stack 0
   571  00004B                     	ds	2
   572  00004D                     _diasem:
   573                           	opt stack 0
   574  00004D                     	ds	2
   575  00004F                     _hora:
   576                           	opt stack 0
   577  00004F                     	ds	2
   578  000051                     _mes:
   579                           	opt stack 0
   580  000051                     	ds	2
   581  000053                     _minuto:
   582                           	opt stack 0
   583  000053                     	ds	2
   584                           tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	bssBANK0
   594  000060                     __pbssBANK0:
   595                           	opt stack 0
   596  000060                     _RtccAlrmTimeDate:
   597                           	opt stack 0
   598  000060                     	ds	8
   599  000068                     _RtccTimeDate:
   600                           	opt stack 0
   601  000068                     	ds	8
   602  000070                     _Rtcc_read_TimeDate:
   603                           	opt stack 0
   604  000070                     	ds	8
   605  000078                     _RtccTimeVal:
   606                           	opt stack 0
   607  000078                     	ds	4
   608  00007C                     _segundo:
   609                           	opt stack 0
   610  00007C                     	ds	2
   611  00007E                     _CuentamSeg:
   612                           	opt stack 0
   613  00007E                     	ds	1
   614  00007F                     _Flag_1:
   615                           	opt stack 0
   616  00007F                     	ds	1
   617  000080                     _Sw_Center:
   618                           	opt stack 0
   619  000080                     	ds	1
   620  000081                     _Sw_Down:
   621                           	opt stack 0
   622  000081                     	ds	1
   623  000082                     _Sw_Left:
   624                           	opt stack 0
   625  000082                     	ds	1
   626  000083                     _Sw_Right:
   627                           	opt stack 0
   628  000083                     	ds	1
   629  000084                     _Sw_Up:
   630                           	opt stack 0
   631  000084                     	ds	1
   632  000085                     _buffer1:
   633                           	opt stack 0
   634  000085                     	ds	20
   635                           tblptru	equ	0xFF8
   636                           tblptrh	equ	0xFF7
   637                           tblptrl	equ	0xFF6
   638                           tablat	equ	0xFF5
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1l	equ	0xFE1
   643                           
   644                           	psect	dataBANK0
   645  0000A6                     __pdataBANK0:
   646                           	opt stack 0
   647  0000A6                     _Grados:
   648                           	opt stack 0
   649  0000A6                     	ds	3
   650  0000A9                     _Temp_prog:
   651                           	opt stack 0
   652  0000A9                     	ds	3
   653                           tblptru	equ	0xFF8
   654                           tblptrh	equ	0xFF7
   655                           tblptrl	equ	0xFF6
   656                           tablat	equ	0xFF5
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           postdec1	equ	0xFE5
   660                           fsr1l	equ	0xFE1
   661                           
   662                           	psect	cstackCOMRAM
   663  000001                     __pcstackCOMRAM:
   664                           	opt stack 0
   665  000001                     ??_Lcd_Cmd:
   666  000001                     ??_Lcd_Chr_CP:
   667  000001                     ??_lee_temperatura:
   668  000001                     ??_isdigit:
   669  000001                     ?___wmul:
   670                           	opt stack 0
   671  000001                     ?___awdiv:
   672                           	opt stack 0
   673  000001                     ?___lwdiv:
   674                           	opt stack 0
   675  000001                     RtccReadDate@pDt:
   676                           	opt stack 0
   677  000001                     RtccReadTime@pTm:
   678                           	opt stack 0
   679  000001                     RtccWriteDate@pDt:
   680                           	opt stack 0
   681  000001                     RtccWriteTime@pTm:
   682                           	opt stack 0
   683  000001                     ___wmul@multiplier:
   684                           	opt stack 0
   685  000001                     ___awdiv@dividend:
   686                           	opt stack 0
   687  000001                     ___lwdiv@dividend:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x0
   691  000001                     	ds	1
   692  000002                     _isdigit$2061:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x1
   696  000002                     	ds	1
   697  000003                     Lcd_Chr_CP@data:
   698                           	opt stack 0
   699  000003                     Lcd_Cmd@data:
   700                           	opt stack 0
   701  000003                     RtccWriteDate@di:
   702                           	opt stack 0
   703  000003                     RtccWriteTime@di:
   704                           	opt stack 0
   705  000003                     isdigit@c:
   706                           	opt stack 0
   707  000003                     ___wmul@multiplicand:
   708                           	opt stack 0
   709  000003                     ___awdiv@divisor:
   710                           	opt stack 0
   711  000003                     ___lwdiv@divisor:
   712                           	opt stack 0
   713  000003                     RtccReadDate@rTD1:
   714                           	opt stack 0
   715  000003                     RtccReadTime@rTD1:
   716                           	opt stack 0
   717                           
   718                           ; 8 bytes @ 0x2
   719  000003                     	ds	1
   720  000004                     ??_Lcd_Init:
   721                           
   722                           ; 0 bytes @ 0x3
   723  000004                     	ds	1
   724  000005                     Lcd_Init@data:
   725                           	opt stack 0
   726  000005                     RtccWriteDate@wasOn:
   727                           	opt stack 0
   728  000005                     RtccWriteTime@wasOn:
   729                           	opt stack 0
   730  000005                     ___awdiv@counter:
   731                           	opt stack 0
   732  000005                     ___wmul@product:
   733                           	opt stack 0
   734  000005                     ___lwdiv@quotient:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x4
   738  000005                     	ds	1
   739  000006                     RtccWriteDate@wasAlrm:
   740                           	opt stack 0
   741  000006                     RtccWriteTime@wasAlrm:
   742                           	opt stack 0
   743  000006                     ___awdiv@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x5
   747  000006                     	ds	1
   748  000007                     RtccWriteTime@wasWrEn:
   749                           	opt stack 0
   750  000007                     ___lwdiv@counter:
   751                           	opt stack 0
   752  000007                     RtccWriteDate@tempYear:
   753                           	opt stack 0
   754  000007                     ___awdiv@quotient:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x6
   758  000007                     	ds	1
   759  000008                     ?___lwmod:
   760                           	opt stack 0
   761  000008                     RtccWriteTime@tempMinSec:
   762                           	opt stack 0
   763  000008                     ___lwmod@dividend:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x7
   767  000008                     	ds	1
   768  000009                     RtccWriteDate@wasWrEn:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x8
   772  000009                     	ds	1
   773  00000A                     RtccWriteDate@tempDayMonth:
   774                           	opt stack 0
   775  00000A                     RtccWriteTime@tempHourWDay:
   776                           	opt stack 0
   777  00000A                     ___lwmod@divisor:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x9
   781  00000A                     	ds	1
   782  00000B                     RtccReadDate@rTD0:
   783                           	opt stack 0
   784  00000B                     RtccReadTime@rTD0:
   785                           	opt stack 0
   786                           
   787                           ; 8 bytes @ 0xA
   788  00000B                     	ds	1
   789  00000C                     ___lwmod@counter:
   790                           	opt stack 0
   791  00000C                     RtccWriteDate@tempHourWDay:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0xB
   795  00000C                     	ds	1
   796  00000D                     ?_sprintf:
   797                           	opt stack 0
   798  00000D                     sprintf@sp:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0xC
   802  00000D                     	ds	1
   803  00000E                     
   804                           ; 0 bytes @ 0xD
   805  00000E                     	ds	1
   806  00000F                     sprintf@f:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0xE
   810  00000F                     	ds	4
   811  000013                     
   812                           ; 0 bytes @ 0x12
   813  000013                     	ds	4
   814  000017                     ??_sprintf:
   815                           
   816                           ; 0 bytes @ 0x16
   817  000017                     	ds	4
   818  00001B                     sprintf@flag:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x1A
   822  00001B                     	ds	1
   823  00001C                     sprintf@val:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x1B
   827  00001C                     	ds	2
   828  00001E                     sprintf@prec:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x1D
   832  00001E                     	ds	1
   833  00001F                     sprintf@ap:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x1E
   837  00001F                     	ds	2
   838  000021                     sprintf@cp:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x20
   842  000021                     	ds	2
   843  000023                     sprintf@len:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x22
   847  000023                     	ds	2
   848  000025                     sprintf@width:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x24
   852  000025                     	ds	2
   853  000027                     sprintf@c:
   854                           	opt stack 0
   855                           
   856                           ; 1 bytes @ 0x26
   857  000027                     	ds	1
   858  000028                     ?_Convert_diasem:
   859                           	opt stack 0
   860  000028                     Convert_diasem@dia:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x27
   864  000028                     	ds	2
   865  00002A                     ??_Convert_diasem:
   866                           
   867                           ; 0 bytes @ 0x29
   868  00002A                     	ds	2
   869  00002C                     Convert_diasem@buffer_dia:
   870                           	opt stack 0
   871                           
   872                           ; 20 bytes @ 0x2B
   873  00002C                     	ds	20
   874  000040                     Lcd_Out@x:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x3F
   878  000040                     	ds	1
   879  000041                     Lcd_Out@buffer:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x40
   883  000041                     	ds	2
   884  000043                     Lcd_Out@y:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x42
   888  000043                     	ds	1
   889  000044                     Lcd_Out@data:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x43
   893  000044                     	ds	1
   894  000045                     V_Principal@cte:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x44
   898  000045                     	ds	2
   899  000047                     ??_main:
   900                           
   901                           ; 0 bytes @ 0x46
   902  000047                     	ds	1
   903  000048                     main@diasem_tr:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x47
   907  000048                     	ds	1
   908                           tblptru	equ	0xFF8
   909                           tblptrh	equ	0xFF7
   910                           tblptrl	equ	0xFF6
   911                           tablat	equ	0xFF5
   912                           postinc0	equ	0xFEE
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1l	equ	0xFE1
   916                           
   917 ;;
   918 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   919 ;;
   920 ;; *************** function _main *****************
   921 ;; Defined at:
   922 ;;		line 123 in file "../main.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  diasem_tr       1   71[COMRAM] unsigned char 
   927 ;; Return value:  Size  Location     Type
   928 ;;		None               void
   929 ;; Registers used:
   930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : 0/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   937 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   939 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   940 ;;Total ram usage:        2 bytes
   941 ;; Hardware stack levels required when called:    4
   942 ;; This function calls:
   943 ;;		_Convert_diasem
   944 ;;		_Lcd_Cmd
   945 ;;		_Lcd_Init
   946 ;;		_Lcd_Out
   947 ;;		_V_Principal
   948 ;;		_Write_RTC
   949 ;;		_sprintf
   950 ;; This function is called by:
   951 ;;		Startup code after reset
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text0
   956  00F8D8                     __ptext0:
   957                           	opt stack 0
   958  00F8D8                     _main:
   959                           	opt stack 27
   960                           
   961                           ;main.c: 125: OSCTUNEbits.INTSRC=1;
   962                           
   963                           ;incstack = 0
   964  00F8D8  8E9B               	bsf	3995,7,c	;volatile
   965                           
   966                           ;main.c: 126: OSCTUNEbits.PLLEN=0;
   967  00F8DA  9C9B               	bcf	3995,6,c	;volatile
   968                           
   969                           ;main.c: 127: OSCCONbits.IRCF0=1;
   970  00F8DC  88D3               	bsf	4051,4,c	;volatile
   971                           
   972                           ;main.c: 128: OSCCONbits.IRCF1=1;
   973  00F8DE  8AD3               	bsf	4051,5,c	;volatile
   974                           
   975                           ;main.c: 129: OSCCONbits.IRCF2=1;
   976  00F8E0  8CD3               	bsf	4051,6,c	;volatile
   977                           
   978                           ;main.c: 130: OSCCONbits.SCS0=0;
   979  00F8E2  90D3               	bcf	4051,0,c	;volatile
   980                           
   981                           ;main.c: 131: OSCCONbits.SCS1=0;
   982  00F8E4  92D3               	bcf	4051,1,c	;volatile
   983                           
   984                           ;main.c: 133: RTCCFGbits.RTCEN=1;
   985  00F8E6  010F               	movlb	15	; () banked
   986  00F8E8  8F3F               	bsf	63,7,b	;volatile
   987                           
   988                           ;main.c: 134: RTCCFGbits.RTCWREN=1;
   989  00F8EA  010F               	movlb	15	; () banked
   990  00F8EC  8B3F               	bsf	63,5,b	;volatile
   991                           
   992                           ;main.c: 135: T1CONbits.T1OSCEN=1;
   993  00F8EE  86CD               	bsf	4045,3,c	;volatile
   994                           
   995                           ; BSR set to: 15
   996                           ;main.c: 137: TRISA = 0b11111101;
   997  00F8F0  0EFD               	movlw	253
   998  00F8F2  6E92               	movwf	3986,c	;volatile
   999                           
  1000                           ;main.c: 138: TRISB = 0;
  1001  00F8F4  0E00               	movlw	0
  1002  00F8F6  6E93               	movwf	3987,c	;volatile
  1003                           
  1004                           ; BSR set to: 15
  1005                           ;main.c: 139: TRISC = 0b11111111;
  1006  00F8F8  6894               	setf	3988,c	;volatile
  1007                           
  1008                           ; BSR set to: 15
  1009                           ;main.c: 140: ANCON0 = 0b11111111;
  1010  00F8FA  010F               	movlb	15	; () banked
  1011  00F8FC  6948               	setf	72,b	;volatile
  1012                           
  1013                           ;main.c: 141: ANCON1 = 0b11110111;
  1014  00F8FE  0EF7               	movlw	247
  1015  00F900  010F               	movlb	15	; () banked
  1016  00F902  6F49               	movwf	73,b	;volatile
  1017                           
  1018                           ;main.c: 142: ADCON0 = 0b00101111;
  1019  00F904  0E2F               	movlw	47
  1020  00F906  6EC2               	movwf	4034,c	;volatile
  1021                           
  1022                           ;main.c: 143: ADCON1 = 0b00111001;
  1023  00F908  0E39               	movlw	57
  1024  00F90A  6EC1               	movwf	4033,c	;volatile
  1025                           
  1026                           ; BSR set to: 15
  1027                           ;main.c: 145: Write_RTC();
  1028  00F90C  ECA9  F07B         	call	_Write_RTC	;wreg free
  1029                           
  1030                           ;main.c: 146: Lcd_Init();
  1031  00F910  ECC6  F078         	call	_Lcd_Init	;wreg free
  1032                           
  1033                           ;main.c: 147: Lcd_Cmd(1);
  1034  00F914  0E01               	movlw	1
  1035  00F916  ECE2  F079         	call	_Lcd_Cmd
  1036                           
  1037                           ;main.c: 148: Lcd_Cmd(12);
  1038  00F91A  0E0C               	movlw	12
  1039  00F91C  ECE2  F079         	call	_Lcd_Cmd
  1040                           
  1041                           ;main.c: 149: _delay((unsigned long)((98)*(8000000/4000.0)));
  1042  00F920  0EFF               	movlw	255
  1043  00F922  6E47               	movwf	??_main& (0+255),c
  1044  00F924  0E8A               	movlw	138
  1045  00F926                     u1977:
  1046  00F926  2EE8               	decfsz	wreg,f,c
  1047  00F928  D7FE               	goto	u1977
  1048  00F92A  2E47               	decfsz	??_main& (0+255),f,c
  1049  00F92C  D7FC               	goto	u1977
  1050  00F92E  D000               	nop2	
  1051                           
  1052                           ;main.c: 156: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1053  00F930  0EFF               	movlw	255
  1054  00F932  6E47               	movwf	??_main& (0+255),c
  1055  00F934  0E8A               	movlw	138
  1056  00F936                     u1987:
  1057  00F936  2EE8               	decfsz	wreg,f,c
  1058  00F938  D7FE               	goto	u1987
  1059  00F93A  2E47               	decfsz	??_main& (0+255),f,c
  1060  00F93C  D7FC               	goto	u1987
  1061  00F93E  D000               	nop2	
  1062  00F940  0EFF               	movlw	255
  1063  00F942  6E47               	movwf	??_main& (0+255),c
  1064  00F944  0E8A               	movlw	138
  1065  00F946                     u1997:
  1066  00F946  2EE8               	decfsz	wreg,f,c
  1067  00F948  D7FE               	goto	u1997
  1068  00F94A  2E47               	decfsz	??_main& (0+255),f,c
  1069  00F94C  D7FC               	goto	u1997
  1070  00F94E  D000               	nop2	
  1071  00F950  0EFF               	movlw	255
  1072  00F952  6E47               	movwf	??_main& (0+255),c
  1073  00F954  0E8A               	movlw	138
  1074  00F956                     u2007:
  1075  00F956  2EE8               	decfsz	wreg,f,c
  1076  00F958  D7FE               	goto	u2007
  1077  00F95A  2E47               	decfsz	??_main& (0+255),f,c
  1078  00F95C  D7FC               	goto	u2007
  1079  00F95E  D000               	nop2	
  1080  00F960  0EFF               	movlw	255
  1081  00F962  6E47               	movwf	??_main& (0+255),c
  1082  00F964  0E8A               	movlw	138
  1083  00F966                     u2017:
  1084  00F966  2EE8               	decfsz	wreg,f,c
  1085  00F968  D7FE               	goto	u2017
  1086  00F96A  2E47               	decfsz	??_main& (0+255),f,c
  1087  00F96C  D7FC               	goto	u2017
  1088  00F96E  D000               	nop2	
  1089  00F970  0EFF               	movlw	255
  1090  00F972  6E47               	movwf	??_main& (0+255),c
  1091  00F974  0E8A               	movlw	138
  1092  00F976                     u2027:
  1093  00F976  2EE8               	decfsz	wreg,f,c
  1094  00F978  D7FE               	goto	u2027
  1095  00F97A  2E47               	decfsz	??_main& (0+255),f,c
  1096  00F97C  D7FC               	goto	u2027
  1097  00F97E  D000               	nop2	
  1098  00F980  0EFF               	movlw	255
  1099  00F982  6E47               	movwf	??_main& (0+255),c
  1100  00F984  0E8A               	movlw	138
  1101  00F986                     u2037:
  1102  00F986  2EE8               	decfsz	wreg,f,c
  1103  00F988  D7FE               	goto	u2037
  1104  00F98A  2E47               	decfsz	??_main& (0+255),f,c
  1105  00F98C  D7FC               	goto	u2037
  1106  00F98E  D000               	nop2	
  1107  00F990  0EFF               	movlw	255
  1108  00F992  6E47               	movwf	??_main& (0+255),c
  1109  00F994  0E8A               	movlw	138
  1110  00F996                     u2047:
  1111  00F996  2EE8               	decfsz	wreg,f,c
  1112  00F998  D7FE               	goto	u2047
  1113  00F99A  2E47               	decfsz	??_main& (0+255),f,c
  1114  00F99C  D7FC               	goto	u2047
  1115  00F99E  D000               	nop2	
  1116  00F9A0  0EFF               	movlw	255
  1117  00F9A2  6E47               	movwf	??_main& (0+255),c
  1118  00F9A4  0E8A               	movlw	138
  1119  00F9A6                     u2057:
  1120  00F9A6  2EE8               	decfsz	wreg,f,c
  1121  00F9A8  D7FE               	goto	u2057
  1122  00F9AA  2E47               	decfsz	??_main& (0+255),f,c
  1123  00F9AC  D7FC               	goto	u2057
  1124  00F9AE  D000               	nop2	
  1125                           
  1126                           ;main.c: 157: Lcd_Cmd(1);
  1127  00F9B0  0E01               	movlw	1
  1128  00F9B2  ECE2  F079         	call	_Lcd_Cmd
  1129  00F9B6  D000               	goto	l2595
  1130  00F9B8                     l2595:
  1131                           
  1132                           ;main.c: 163: V_Principal();
  1133  00F9B8  EC55  F077         	call	_V_Principal	;wreg free
  1134                           
  1135                           ;main.c: 164: if(Sw_Left = PORTAbits.RA0 == 0){
  1136  00F9BC  B080               	btfsc	3968,0,c	;volatile
  1137  00F9BE  D002               	goto	u1720
  1138  00F9C0  0E01               	movlw	1
  1139  00F9C2  D001               	goto	u1730
  1140  00F9C4                     u1720:
  1141  00F9C4  0E00               	movlw	0
  1142  00F9C6                     u1730:
  1143  00F9C6  0100               	movlb	0	; () banked
  1144  00F9C8  6F82               	movwf	_Sw_Left& (0+255),b
  1145  00F9CA  0100               	movlb	0	; () banked
  1146  00F9CC  5182               	movf	_Sw_Left& (0+255),w,b
  1147  00F9CE  B4D8               	btfsc	status,2,c
  1148  00F9D0  D063               	goto	l2635
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;main.c: 166: Lcd_Out(1, 0, "Program del reloj");
  1152  00F9D2  0E00               	movlw	0
  1153  00F9D4  6E40               	movwf	Lcd_Out@x,c
  1154  00F9D6  0EB8               	movlw	low STR_1
  1155  00F9D8  6E41               	movwf	Lcd_Out@buffer,c
  1156  00F9DA  0EFF               	movlw	high STR_1
  1157  00F9DC  6E42               	movwf	Lcd_Out@buffer+1,c
  1158  00F9DE  0E01               	movlw	1
  1159  00F9E0  ECC0  F076         	call	_Lcd_Out
  1160                           
  1161                           ;main.c: 167: char diasem_tr = diasem;
  1162  00F9E4  C04D  F048         	movff	_diasem,main@diasem_tr
  1163                           
  1164                           ;main.c: 168: for(i=0 ;i<30;i++){
  1165  00F9E8  0E00               	movlw	0
  1166  00F9EA  6E56               	movwf	_i+1,c
  1167  00F9EC  0E00               	movlw	0
  1168  00F9EE  6E55               	movwf	_i,c
  1169  00F9F0                     l2605:
  1170  00F9F0  BE56               	btfsc	_i+1,7,c
  1171  00F9F2  D008               	goto	l2609
  1172  00F9F4  5056               	movf	_i+1,w,c
  1173  00F9F6  E150               	bnz	l2635
  1174  00F9F8  0E1E               	movlw	30
  1175  00F9FA  5C55               	subwf	_i,w,c
  1176  00F9FC  B0D8               	btfsc	status,0,c
  1177  00F9FE  D04C               	goto	l2635
  1178  00FA00  D001               	goto	l2609
  1179  00FA02  D04A               	goto	l2635
  1180  00FA04                     l2609:
  1181                           
  1182                           ;main.c: 169: _delay((unsigned long)((90)*(8000000/4000.0)));
  1183  00FA04  0EEA               	movlw	234
  1184  00FA06  6E47               	movwf	??_main& (0+255),c
  1185  00FA08  0EC3               	movlw	195
  1186  00FA0A                     u2067:
  1187  00FA0A  2EE8               	decfsz	wreg,f,c
  1188  00FA0C  D7FE               	goto	u2067
  1189  00FA0E  2E47               	decfsz	??_main& (0+255),f,c
  1190  00FA10  D7FC               	goto	u2067
  1191  00FA12  F000               	nop	
  1192                           
  1193                           ;main.c: 170: if(Sw_Up = PORTAbits.RA3 == 0){
  1194  00FA14  B680               	btfsc	3968,3,c	;volatile
  1195  00FA16  D002               	goto	u1760
  1196  00FA18  0E01               	movlw	1
  1197  00FA1A  D001               	goto	u1770
  1198  00FA1C                     u1760:
  1199  00FA1C  0E00               	movlw	0
  1200  00FA1E                     u1770:
  1201  00FA1E  0100               	movlb	0	; () banked
  1202  00FA20  6F84               	movwf	_Sw_Up& (0+255),b
  1203  00FA22  0100               	movlb	0	; () banked
  1204  00FA24  5184               	movf	_Sw_Up& (0+255),w,b
  1205  00FA26  B4D8               	btfsc	status,2,c
  1206  00FA28  D014               	goto	l2619
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 171: i=0;
  1210  00FA2A  0E00               	movlw	0
  1211  00FA2C  6E56               	movwf	_i+1,c
  1212  00FA2E  0E00               	movlw	0
  1213  00FA30  6E55               	movwf	_i,c
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 172: diasem_tr++;
  1217  00FA32  2A48               	incf	main@diasem_tr,f,c
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;main.c: 173: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  1221  00FA34  0E00               	movlw	0
  1222  00FA36  6E40               	movwf	Lcd_Out@x,c
  1223  00FA38  C048  F028         	movff	main@diasem_tr,Convert_diasem@dia
  1224  00FA3C  6A29               	clrf	Convert_diasem@dia+1,c
  1225  00FA3E  EC53  F079         	call	_Convert_diasem	;wreg free
  1226  00FA42  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  1227  00FA46  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  1228  00FA4A  0E02               	movlw	2
  1229  00FA4C  ECC0  F076         	call	_Lcd_Out
  1230  00FA50  D000               	goto	l2619
  1231  00FA52                     l2619:
  1232                           
  1233                           ;main.c: 175: }
  1234                           ;main.c: 176: if(Sw_Right = PORTAbits.RA2 == 0){
  1235  00FA52  B480               	btfsc	3968,2,c	;volatile
  1236  00FA54  D002               	goto	u1790
  1237  00FA56  0E01               	movlw	1
  1238  00FA58  D001               	goto	u1800
  1239  00FA5A                     u1790:
  1240  00FA5A  0E00               	movlw	0
  1241  00FA5C                     u1800:
  1242  00FA5C  0100               	movlb	0	; () banked
  1243  00FA5E  6F83               	movwf	_Sw_Right& (0+255),b
  1244  00FA60  D000               	goto	l2621
  1245  00FA62                     l2621:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 178: }
  1249                           ;main.c: 179: if(Sw_Center = PORTAbits.RA5 == 0){
  1250  00FA62  BA80               	btfsc	3968,5,c	;volatile
  1251  00FA64  D002               	goto	u1810
  1252  00FA66  0E01               	movlw	1
  1253  00FA68  D001               	goto	u1820
  1254  00FA6A                     u1810:
  1255  00FA6A  0E00               	movlw	0
  1256  00FA6C                     u1820:
  1257  00FA6C  0100               	movlb	0	; () banked
  1258  00FA6E  6F80               	movwf	_Sw_Center& (0+255),b
  1259  00FA70  0100               	movlb	0	; () banked
  1260  00FA72  5180               	movf	_Sw_Center& (0+255),w,b
  1261  00FA74  B4D8               	btfsc	status,2,c
  1262  00FA76  D009               	goto	l2629
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 180: diasem = diasem_tr;
  1266  00FA78  C048  F04D         	movff	main@diasem_tr,_diasem
  1267  00FA7C  6A4E               	clrf	_diasem+1,c
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 181: Write_RTC();
  1271  00FA7E  ECA9  F07B         	call	_Write_RTC	;wreg free
  1272                           
  1273                           ;main.c: 182: CuentamSeg = 26;
  1274  00FA82  0E1A               	movlw	26
  1275  00FA84  0100               	movlb	0	; () banked
  1276  00FA86  6F7E               	movwf	_CuentamSeg& (0+255),b
  1277                           
  1278                           ;main.c: 183: break;
  1279  00FA88  D007               	goto	l2635
  1280  00FA8A                     l2629:
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 184: }
  1284                           ;main.c: 185: CuentamSeg = 26;
  1285  00FA8A  0E1A               	movlw	26
  1286  00FA8C  0100               	movlb	0	; () banked
  1287  00FA8E  6F7E               	movwf	_CuentamSeg& (0+255),b
  1288                           
  1289                           ; BSR set to: 0
  1290  00FA90  4A55               	infsnz	_i,f,c
  1291  00FA92  2A56               	incf	_i+1,f,c
  1292  00FA94  D7AD               	goto	l2605
  1293                           
  1294                           ; BSR set to: 0
  1295                           
  1296                           ; BSR set to: 0
  1297  00FA96  D000               	goto	l2635
  1298  00FA98                     l2635:
  1299                           
  1300                           ;main.c: 186: }
  1301                           ;main.c: 188: }
  1302                           ;main.c: 190: if(Sw_Down = PORTCbits.RC4 == 0){
  1303  00FA98  B882               	btfsc	3970,4,c	;volatile
  1304  00FA9A  D002               	goto	u1850
  1305  00FA9C  0E01               	movlw	1
  1306  00FA9E  D001               	goto	u1860
  1307  00FAA0                     u1850:
  1308  00FAA0  0E00               	movlw	0
  1309  00FAA2                     u1860:
  1310  00FAA2  0100               	movlb	0	; () banked
  1311  00FAA4  6F81               	movwf	_Sw_Down& (0+255),b
  1312  00FAA6  0100               	movlb	0	; () banked
  1313  00FAA8  5181               	movf	_Sw_Down& (0+255),w,b
  1314  00FAAA  B4D8               	btfsc	status,2,c
  1315  00FAAC  D017               	goto	l2641
  1316                           
  1317                           ; BSR set to: 0
  1318                           ;main.c: 192: sprintf(buffer1,"%03u",lectura);
  1319  00FAAE  0E85               	movlw	low _buffer1
  1320  00FAB0  6E0D               	movwf	sprintf@sp,c
  1321  00FAB2  0E00               	movlw	high _buffer1
  1322  00FAB4  6E0E               	movwf	sprintf@sp+1,c
  1323  00FAB6  0EEF               	movlw	low STR_2
  1324  00FAB8  6E0F               	movwf	sprintf@f,c
  1325  00FABA  0EFF               	movlw	high STR_2
  1326  00FABC  6E10               	movwf	sprintf@f+1,c
  1327  00FABE  C057  F011         	movff	_lectura,?_sprintf+4
  1328  00FAC2  6A12               	clrf	?_sprintf+5,c
  1329  00FAC4  ECC9  F07D         	call	_sprintf	;wreg free
  1330                           
  1331                           ;main.c: 193: Lcd_Out(4,0,buffer1);
  1332  00FAC8  0E00               	movlw	0
  1333  00FACA  6E40               	movwf	Lcd_Out@x,c
  1334  00FACC  0E85               	movlw	low _buffer1
  1335  00FACE  6E41               	movwf	Lcd_Out@buffer,c
  1336  00FAD0  0E00               	movlw	high _buffer1
  1337  00FAD2  6E42               	movwf	Lcd_Out@buffer+1,c
  1338  00FAD4  0E04               	movlw	4
  1339  00FAD6  ECC0  F076         	call	_Lcd_Out
  1340  00FADA  D000               	goto	l2641
  1341  00FADC                     l2641:
  1342                           
  1343                           ;main.c: 194: }
  1344                           ;main.c: 196: if(Sw_Right = PORTAbits.RA2 == 0){
  1345  00FADC  B480               	btfsc	3968,2,c	;volatile
  1346  00FADE  D002               	goto	u1880
  1347  00FAE0  0E01               	movlw	1
  1348  00FAE2  D001               	goto	u1890
  1349  00FAE4                     u1880:
  1350  00FAE4  0E00               	movlw	0
  1351  00FAE6                     u1890:
  1352  00FAE6  0100               	movlb	0	; () banked
  1353  00FAE8  6F83               	movwf	_Sw_Right& (0+255),b
  1354  00FAEA  0100               	movlb	0	; () banked
  1355  00FAEC  5183               	movf	_Sw_Right& (0+255),w,b
  1356  00FAEE  B4D8               	btfsc	status,2,c
  1357  00FAF0  D00A               	goto	l2645
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 197: Lcd_Out(3, 0, "RIGHT             ");
  1361  00FAF2  0E00               	movlw	0
  1362  00FAF4  6E40               	movwf	Lcd_Out@x,c
  1363  00FAF6  0E93               	movlw	low STR_3
  1364  00FAF8  6E41               	movwf	Lcd_Out@buffer,c
  1365  00FAFA  0EFF               	movlw	high STR_3
  1366  00FAFC  6E42               	movwf	Lcd_Out@buffer+1,c
  1367  00FAFE  0E03               	movlw	3
  1368  00FB00  ECC0  F076         	call	_Lcd_Out
  1369  00FB04  D000               	goto	l2645
  1370  00FB06                     l2645:
  1371                           
  1372                           ;main.c: 198: }
  1373                           ;main.c: 200: if(Sw_Up = PORTAbits.RA3 == 0){
  1374  00FB06  B680               	btfsc	3968,3,c	;volatile
  1375  00FB08  D002               	goto	u1910
  1376  00FB0A  0E01               	movlw	1
  1377  00FB0C  D001               	goto	u1920
  1378  00FB0E                     u1910:
  1379  00FB0E  0E00               	movlw	0
  1380  00FB10                     u1920:
  1381  00FB10  0100               	movlb	0	; () banked
  1382  00FB12  6F84               	movwf	_Sw_Up& (0+255),b
  1383  00FB14  0100               	movlb	0	; () banked
  1384  00FB16  5184               	movf	_Sw_Up& (0+255),w,b
  1385  00FB18  B4D8               	btfsc	status,2,c
  1386  00FB1A  D00A               	goto	l2649
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;main.c: 201: Lcd_Out(4, 0, "UP               ");
  1390  00FB1C  0E00               	movlw	0
  1391  00FB1E  6E40               	movwf	Lcd_Out@x,c
  1392  00FB20  0EA6               	movlw	low STR_4
  1393  00FB22  6E41               	movwf	Lcd_Out@buffer,c
  1394  00FB24  0EFF               	movlw	high STR_4
  1395  00FB26  6E42               	movwf	Lcd_Out@buffer+1,c
  1396  00FB28  0E04               	movlw	4
  1397  00FB2A  ECC0  F076         	call	_Lcd_Out
  1398  00FB2E  D000               	goto	l2649
  1399  00FB30                     l2649:
  1400                           
  1401                           ;main.c: 202: }
  1402                           ;main.c: 204: if(Sw_Center = PORTAbits.RA5 == 0){
  1403  00FB30  BA80               	btfsc	3968,5,c	;volatile
  1404  00FB32  D002               	goto	u1940
  1405  00FB34  0E01               	movlw	1
  1406  00FB36  D001               	goto	u1950
  1407  00FB38                     u1940:
  1408  00FB38  0E00               	movlw	0
  1409  00FB3A                     u1950:
  1410  00FB3A  0100               	movlb	0	; () banked
  1411  00FB3C  6F80               	movwf	_Sw_Center& (0+255),b
  1412  00FB3E  0100               	movlb	0	; () banked
  1413  00FB40  5180               	movf	_Sw_Center& (0+255),w,b
  1414  00FB42  B4D8               	btfsc	status,2,c
  1415  00FB44  D00D               	goto	l2655
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;main.c: 205: Lcd_Cmd(1);
  1419  00FB46  0E01               	movlw	1
  1420  00FB48  ECE2  F079         	call	_Lcd_Cmd
  1421                           
  1422                           ;main.c: 206: Lcd_Out(2, 0, "CENTER             ");
  1423  00FB4C  0E00               	movlw	0
  1424  00FB4E  6E40               	movwf	Lcd_Out@x,c
  1425  00FB50  0E7F               	movlw	low STR_5
  1426  00FB52  6E41               	movwf	Lcd_Out@buffer,c
  1427  00FB54  0EFF               	movlw	high STR_5
  1428  00FB56  6E42               	movwf	Lcd_Out@buffer+1,c
  1429  00FB58  0E02               	movlw	2
  1430  00FB5A  ECC0  F076         	call	_Lcd_Out
  1431  00FB5E  D000               	goto	l2655
  1432  00FB60                     l2655:
  1433                           
  1434                           ;main.c: 207: }
  1435                           ;main.c: 209: LATBbits.LATB7 = 1;
  1436  00FB60  8E8A               	bsf	3978,7,c	;volatile
  1437                           
  1438                           ;main.c: 210: LATBbits.LATB6 = 1;
  1439  00FB62  8C8A               	bsf	3978,6,c	;volatile
  1440                           
  1441                           ;main.c: 211: LATAbits.LA1 = 1;
  1442  00FB64  8289               	bsf	3977,1,c	;volatile
  1443                           
  1444                           ;main.c: 212: _delay((unsigned long)((10)*(8000000/4000.0)));
  1445  00FB66  0E1A               	movlw	26
  1446  00FB68  6E47               	movwf	??_main& (0+255),c
  1447  00FB6A  0EF8               	movlw	248
  1448  00FB6C                     u2077:
  1449  00FB6C  2EE8               	decfsz	wreg,f,c
  1450  00FB6E  D7FE               	goto	u2077
  1451  00FB70  2E47               	decfsz	??_main& (0+255),f,c
  1452  00FB72  D7FC               	goto	u2077
  1453  00FB74  D000               	nop2	
  1454                           
  1455                           ;main.c: 213: LATBbits.LATB7 = 0;
  1456  00FB76  9E8A               	bcf	3978,7,c	;volatile
  1457                           
  1458                           ;main.c: 214: LATBbits.LATB6 = 0;
  1459  00FB78  9C8A               	bcf	3978,6,c	;volatile
  1460                           
  1461                           ;main.c: 215: LATAbits.LA1 = 0;
  1462  00FB7A  9289               	bcf	3977,1,c	;volatile
  1463                           
  1464                           ;main.c: 216: _delay((unsigned long)((10)*(8000000/4000.0)));
  1465  00FB7C  0E1A               	movlw	26
  1466  00FB7E  6E47               	movwf	??_main& (0+255),c
  1467  00FB80  0EF8               	movlw	248
  1468  00FB82                     u2087:
  1469  00FB82  2EE8               	decfsz	wreg,f,c
  1470  00FB84  D7FE               	goto	u2087
  1471  00FB86  2E47               	decfsz	??_main& (0+255),f,c
  1472  00FB88  D7FC               	goto	u2087
  1473  00FB8A  D000               	nop2	
  1474  00FB8C  D715               	goto	l2595
  1475  00FB8E  EF00  F000         	goto	start
  1476  00FB92                     __end_of_main:
  1477                           	opt stack 0
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           status	equ	0xFD8
  1487                           
  1488 ;; *************** function _Write_RTC *****************
  1489 ;; Defined at:
  1490 ;;		line 257 in file "../main.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;		None               void
  1497 ;; Registers used:
  1498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1508 ;;Total ram usage:        0 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:    2
  1511 ;; This function calls:
  1512 ;;		_RtccWrOn
  1513 ;;		_RtccWriteDate
  1514 ;;		_RtccWriteTime
  1515 ;;		___awdiv
  1516 ;; This function is called by:
  1517 ;;		_main
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text1
  1522  00F752                     __ptext1:
  1523                           	opt stack 0
  1524  00F752                     _Write_RTC:
  1525                           	opt stack 28
  1526                           
  1527                           ;main.c: 259: RtccWrOn();
  1528                           
  1529                           ;incstack = 0
  1530  00F752  EC7F  F075         	call	_RtccWrOn	;wreg free
  1531                           
  1532                           ;main.c: 261: PIE3bits.RTCCIE=1;
  1533  00F756  80A3               	bsf	4003,0,c	;volatile
  1534                           
  1535                           ;main.c: 262: segundo_d=segundo/10;
  1536  00F758  C07C  F001         	movff	_segundo,___awdiv@dividend
  1537  00F75C  C07D  F002         	movff	_segundo+1,___awdiv@dividend+1
  1538  00F760  0E00               	movlw	0
  1539  00F762  6E04               	movwf	___awdiv@divisor+1,c
  1540  00F764  0E0A               	movlw	10
  1541  00F766  6E03               	movwf	___awdiv@divisor,c
  1542  00F768  EC0A  F077         	call	___awdiv	;wreg free
  1543  00F76C  5001               	movf	?___awdiv,w,c
  1544  00F76E  0100               	movlb	0	; () banked
  1545  00F770  6FA4               	movwf	_segundo_d& (0+255),b
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;main.c: 263: segundo_u=segundo-segundo_d*10;
  1549  00F772  0100               	movlb	0	; () banked
  1550  00F774  51A4               	movf	_segundo_d& (0+255),w,b
  1551  00F776  0D0A               	mullw	10
  1552  00F778  50F3               	movf	prodl,w,c
  1553  00F77A  0800               	sublw	0
  1554  00F77C  0100               	movlb	0	; () banked
  1555  00F77E  257C               	addwf	_segundo& (0+255),w,b
  1556  00F780  0100               	movlb	0	; () banked
  1557  00F782  6FA5               	movwf	_segundo_u& (0+255),b
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 264: RtccTime.f.sec =segundo_d*16+segundo_u;
  1561  00F784  0100               	movlb	0	; () banked
  1562  00F786  51A4               	movf	_segundo_d& (0+255),w,b
  1563  00F788  0D10               	mullw	16
  1564  00F78A  50F3               	movf	prodl,w,c
  1565  00F78C  0100               	movlb	0	; () banked
  1566  00F78E  25A5               	addwf	_segundo_u& (0+255),w,b
  1567  00F790  6E5D               	movwf	_RtccTime+1,c
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 265: minuto_d=minuto/10;
  1571  00F792  C053  F001         	movff	_minuto,___awdiv@dividend
  1572  00F796  C054  F002         	movff	_minuto+1,___awdiv@dividend+1
  1573  00F79A  0E00               	movlw	0
  1574  00F79C  6E04               	movwf	___awdiv@divisor+1,c
  1575  00F79E  0E0A               	movlw	10
  1576  00F7A0  6E03               	movwf	___awdiv@divisor,c
  1577  00F7A2  EC0A  F077         	call	___awdiv	;wreg free
  1578  00F7A6  5001               	movf	?___awdiv,w,c
  1579  00F7A8  0100               	movlb	0	; () banked
  1580  00F7AA  6FA2               	movwf	_minuto_d& (0+255),b
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 266: minuto_u=minuto-minuto_d*10;
  1584  00F7AC  0100               	movlb	0	; () banked
  1585  00F7AE  51A2               	movf	_minuto_d& (0+255),w,b
  1586  00F7B0  0D0A               	mullw	10
  1587  00F7B2  50F3               	movf	prodl,w,c
  1588  00F7B4  0800               	sublw	0
  1589  00F7B6  2453               	addwf	_minuto,w,c
  1590  00F7B8  0100               	movlb	0	; () banked
  1591  00F7BA  6FA3               	movwf	_minuto_u& (0+255),b
  1592                           
  1593                           ; BSR set to: 0
  1594                           ;main.c: 267: RtccTime.f.min =minuto_d*16+minuto_u;
  1595  00F7BC  0100               	movlb	0	; () banked
  1596  00F7BE  51A2               	movf	_minuto_d& (0+255),w,b
  1597  00F7C0  0D10               	mullw	16
  1598  00F7C2  50F3               	movf	prodl,w,c
  1599  00F7C4  0100               	movlb	0	; () banked
  1600  00F7C6  25A3               	addwf	_minuto_u& (0+255),w,b
  1601  00F7C8  6E5E               	movwf	_RtccTime+2,c
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;main.c: 268: hora_d=hora/10;
  1605  00F7CA  C04F  F001         	movff	_hora,___awdiv@dividend
  1606  00F7CE  C050  F002         	movff	_hora+1,___awdiv@dividend+1
  1607  00F7D2  0E00               	movlw	0
  1608  00F7D4  6E04               	movwf	___awdiv@divisor+1,c
  1609  00F7D6  0E0A               	movlw	10
  1610  00F7D8  6E03               	movwf	___awdiv@divisor,c
  1611  00F7DA  EC0A  F077         	call	___awdiv	;wreg free
  1612  00F7DE  5001               	movf	?___awdiv,w,c
  1613  00F7E0  0100               	movlb	0	; () banked
  1614  00F7E2  6F9E               	movwf	_hora_d& (0+255),b
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;main.c: 269: hora_u=hora-hora_d*10;
  1618  00F7E4  0100               	movlb	0	; () banked
  1619  00F7E6  519E               	movf	_hora_d& (0+255),w,b
  1620  00F7E8  0D0A               	mullw	10
  1621  00F7EA  50F3               	movf	prodl,w,c
  1622  00F7EC  0800               	sublw	0
  1623  00F7EE  244F               	addwf	_hora,w,c
  1624  00F7F0  0100               	movlb	0	; () banked
  1625  00F7F2  6F9F               	movwf	_hora_u& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 270: RtccTime.f.hour=hora_d*16+hora_u;
  1629  00F7F4  0100               	movlb	0	; () banked
  1630  00F7F6  519E               	movf	_hora_d& (0+255),w,b
  1631  00F7F8  0D10               	mullw	16
  1632  00F7FA  50F3               	movf	prodl,w,c
  1633  00F7FC  0100               	movlb	0	; () banked
  1634  00F7FE  259F               	addwf	_hora_u& (0+255),w,b
  1635  00F800  6E5F               	movwf	_RtccTime+3,c
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;main.c: 271: anio_d=anio/10;
  1639  00F802  C049  F001         	movff	_anio,___awdiv@dividend
  1640  00F806  C04A  F002         	movff	_anio+1,___awdiv@dividend+1
  1641  00F80A  0E00               	movlw	0
  1642  00F80C  6E04               	movwf	___awdiv@divisor+1,c
  1643  00F80E  0E0A               	movlw	10
  1644  00F810  6E03               	movwf	___awdiv@divisor,c
  1645  00F812  EC0A  F077         	call	___awdiv	;wreg free
  1646  00F816  5001               	movf	?___awdiv,w,c
  1647  00F818  0100               	movlb	0	; () banked
  1648  00F81A  6F99               	movwf	_anio_d& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;main.c: 272: anio_u=anio-anio_d*10;
  1652  00F81C  0100               	movlb	0	; () banked
  1653  00F81E  5199               	movf	_anio_d& (0+255),w,b
  1654  00F820  0D0A               	mullw	10
  1655  00F822  50F3               	movf	prodl,w,c
  1656  00F824  0800               	sublw	0
  1657  00F826  2449               	addwf	_anio,w,c
  1658  00F828  0100               	movlb	0	; () banked
  1659  00F82A  6F9A               	movwf	_anio_u& (0+255),b
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 273: RtccDate.f.year=anio_d*16+anio_u;
  1663  00F82C  0100               	movlb	0	; () banked
  1664  00F82E  5199               	movf	_anio_d& (0+255),w,b
  1665  00F830  0D10               	mullw	16
  1666  00F832  50F3               	movf	prodl,w,c
  1667  00F834  0100               	movlb	0	; () banked
  1668  00F836  259A               	addwf	_anio_u& (0+255),w,b
  1669  00F838  6E5B               	movwf	_RtccDate+3,c
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;main.c: 274: mes_d=mes/10;
  1673  00F83A  C051  F001         	movff	_mes,___awdiv@dividend
  1674  00F83E  C052  F002         	movff	_mes+1,___awdiv@dividend+1
  1675  00F842  0E00               	movlw	0
  1676  00F844  6E04               	movwf	___awdiv@divisor+1,c
  1677  00F846  0E0A               	movlw	10
  1678  00F848  6E03               	movwf	___awdiv@divisor,c
  1679  00F84A  EC0A  F077         	call	___awdiv	;wreg free
  1680  00F84E  5001               	movf	?___awdiv,w,c
  1681  00F850  0100               	movlb	0	; () banked
  1682  00F852  6FA0               	movwf	_mes_d& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 275: mes_u=mes-mes_d*10;
  1686  00F854  0100               	movlb	0	; () banked
  1687  00F856  51A0               	movf	_mes_d& (0+255),w,b
  1688  00F858  0D0A               	mullw	10
  1689  00F85A  50F3               	movf	prodl,w,c
  1690  00F85C  0800               	sublw	0
  1691  00F85E  2451               	addwf	_mes,w,c
  1692  00F860  0100               	movlb	0	; () banked
  1693  00F862  6FA1               	movwf	_mes_u& (0+255),b
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 276: RtccDate.f.mon=mes_d*16+mes_u;
  1697  00F864  0100               	movlb	0	; () banked
  1698  00F866  51A0               	movf	_mes_d& (0+255),w,b
  1699  00F868  0D10               	mullw	16
  1700  00F86A  50F3               	movf	prodl,w,c
  1701  00F86C  0100               	movlb	0	; () banked
  1702  00F86E  25A1               	addwf	_mes_u& (0+255),w,b
  1703  00F870  6E5A               	movwf	_RtccDate+2,c
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;main.c: 277: fecha_d=dia/10;
  1707  00F872  C04B  F001         	movff	_dia,___awdiv@dividend
  1708  00F876  C04C  F002         	movff	_dia+1,___awdiv@dividend+1
  1709  00F87A  0E00               	movlw	0
  1710  00F87C  6E04               	movwf	___awdiv@divisor+1,c
  1711  00F87E  0E0A               	movlw	10
  1712  00F880  6E03               	movwf	___awdiv@divisor,c
  1713  00F882  EC0A  F077         	call	___awdiv	;wreg free
  1714  00F886  5001               	movf	?___awdiv,w,c
  1715  00F888  0100               	movlb	0	; () banked
  1716  00F88A  6F9C               	movwf	_fecha_d& (0+255),b
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;main.c: 278: fecha_u=dia-fecha_d*10;
  1720  00F88C  0100               	movlb	0	; () banked
  1721  00F88E  519C               	movf	_fecha_d& (0+255),w,b
  1722  00F890  0D0A               	mullw	10
  1723  00F892  50F3               	movf	prodl,w,c
  1724  00F894  0800               	sublw	0
  1725  00F896  244B               	addwf	_dia,w,c
  1726  00F898  0100               	movlb	0	; () banked
  1727  00F89A  6F9D               	movwf	_fecha_u& (0+255),b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 279: RtccDate.f.mday=fecha_d*16+fecha_u;
  1731  00F89C  0100               	movlb	0	; () banked
  1732  00F89E  519C               	movf	_fecha_d& (0+255),w,b
  1733  00F8A0  0D10               	mullw	16
  1734  00F8A2  50F3               	movf	prodl,w,c
  1735  00F8A4  0100               	movlb	0	; () banked
  1736  00F8A6  259D               	addwf	_fecha_u& (0+255),w,b
  1737  00F8A8  6E59               	movwf	_RtccDate+1,c
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 280: dia_semana=diasem;
  1741  00F8AA  C04D  F09B         	movff	_diasem,_dia_semana
  1742                           
  1743                           ; BSR set to: 0
  1744                           ;main.c: 281: RtccDate.f.wday =diasem;
  1745  00F8AE  C04D  F058         	movff	_diasem,_RtccDate
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 283: RtccWriteTime(&RtccTime,1);
  1749  00F8B2  0E5C               	movlw	low _RtccTime
  1750  00F8B4  6E01               	movwf	RtccWriteTime@pTm,c
  1751  00F8B6  0E00               	movlw	high _RtccTime
  1752  00F8B8  6E02               	movwf	RtccWriteTime@pTm+1,c
  1753  00F8BA  0E01               	movlw	1
  1754  00F8BC  6E03               	movwf	RtccWriteTime@di,c
  1755  00F8BE  ECB4  F077         	call	_RtccWriteTime	;wreg free
  1756                           
  1757                           ;main.c: 284: RtccWriteDate(&RtccDate,1);
  1758  00F8C2  0E58               	movlw	low _RtccDate
  1759  00F8C4  6E01               	movwf	RtccWriteDate@pDt,c
  1760  00F8C6  0E00               	movlw	high _RtccDate
  1761  00F8C8  6E02               	movwf	RtccWriteDate@pDt+1,c
  1762  00F8CA  0E01               	movlw	1
  1763  00F8CC  6E03               	movwf	RtccWriteDate@di,c
  1764  00F8CE  EC06  F07B         	call	_RtccWriteDate	;wreg free
  1765                           
  1766                           ;main.c: 285: (RTCCFGbits.RTCEN=1);
  1767  00F8D2  010F               	movlb	15	; () banked
  1768  00F8D4  8F3F               	bsf	63,7,b	;volatile
  1769                           
  1770                           ; BSR set to: 15
  1771  00F8D6  0012               	return		;funcret
  1772  00F8D8                     __end_of_Write_RTC:
  1773                           	opt stack 0
  1774                           tblptru	equ	0xFF8
  1775                           tblptrh	equ	0xFF7
  1776                           tblptrl	equ	0xFF6
  1777                           tablat	equ	0xFF5
  1778                           prodl	equ	0xFF3
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function ___awdiv *****************
  1786 ;; Defined at:
  1787 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  dividend        2    0[COMRAM] int 
  1790 ;;  divisor         2    2[COMRAM] int 
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;  quotient        2    6[COMRAM] int 
  1793 ;;  sign            1    5[COMRAM] unsigned char 
  1794 ;;  counter         1    4[COMRAM] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2    0[COMRAM] int 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1805 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1807 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1808 ;;Total ram usage:        8 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; This function calls:
  1811 ;;		Nothing
  1812 ;; This function is called by:
  1813 ;;		_Write_RTC
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text2
  1818  00EE14                     __ptext2:
  1819                           	opt stack 0
  1820  00EE14                     ___awdiv:
  1821                           	opt stack 29
  1822                           
  1823                           ; BSR set to: 15
  1824                           ;incstack = 0
  1825  00EE14  0E00               	movlw	0
  1826  00EE16  6E06               	movwf	___awdiv@sign,c
  1827  00EE18  AE04               	btfss	___awdiv@divisor+1,7,c
  1828  00EE1A  D007               	goto	l2377
  1829  00EE1C  6C03               	negf	___awdiv@divisor,c
  1830  00EE1E  1E04               	comf	___awdiv@divisor+1,f,c
  1831  00EE20  B0D8               	btfsc	status,0,c
  1832  00EE22  2A04               	incf	___awdiv@divisor+1,f,c
  1833  00EE24  0E01               	movlw	1
  1834  00EE26  6E06               	movwf	___awdiv@sign,c
  1835  00EE28  D000               	goto	l2377
  1836  00EE2A                     l2377:
  1837  00EE2A  AE02               	btfss	___awdiv@dividend+1,7,c
  1838  00EE2C  D007               	goto	l2383
  1839  00EE2E  6C01               	negf	___awdiv@dividend,c
  1840  00EE30  1E02               	comf	___awdiv@dividend+1,f,c
  1841  00EE32  B0D8               	btfsc	status,0,c
  1842  00EE34  2A02               	incf	___awdiv@dividend+1,f,c
  1843  00EE36  0E01               	movlw	1
  1844  00EE38  1A06               	xorwf	___awdiv@sign,f,c
  1845  00EE3A  D000               	goto	l2383
  1846  00EE3C                     l2383:
  1847  00EE3C  0E00               	movlw	0
  1848  00EE3E  6E08               	movwf	___awdiv@quotient+1,c
  1849  00EE40  0E00               	movlw	0
  1850  00EE42  6E07               	movwf	___awdiv@quotient,c
  1851  00EE44  5003               	movf	___awdiv@divisor,w,c
  1852  00EE46  1004               	iorwf	___awdiv@divisor+1,w,c
  1853  00EE48  B4D8               	btfsc	status,2,c
  1854  00EE4A  D021               	goto	l2405
  1855  00EE4C  0E01               	movlw	1
  1856  00EE4E  6E05               	movwf	___awdiv@counter,c
  1857  00EE50  D005               	goto	l2391
  1858  00EE52                     l2389:
  1859  00EE52  90D8               	bcf	status,0,c
  1860  00EE54  3603               	rlcf	___awdiv@divisor,f,c
  1861  00EE56  3604               	rlcf	___awdiv@divisor+1,f,c
  1862  00EE58  2A05               	incf	___awdiv@counter,f,c
  1863  00EE5A  D000               	goto	l2391
  1864  00EE5C                     l2391:
  1865  00EE5C  BE04               	btfsc	___awdiv@divisor+1,7,c
  1866  00EE5E  D002               	goto	l2393
  1867  00EE60  D7F8               	goto	l2389
  1868  00EE62  D000               	goto	l2393
  1869  00EE64                     l2393:
  1870  00EE64  90D8               	bcf	status,0,c
  1871  00EE66  3607               	rlcf	___awdiv@quotient,f,c
  1872  00EE68  3608               	rlcf	___awdiv@quotient+1,f,c
  1873  00EE6A  5003               	movf	___awdiv@divisor,w,c
  1874  00EE6C  5C01               	subwf	___awdiv@dividend,w,c
  1875  00EE6E  5004               	movf	___awdiv@divisor+1,w,c
  1876  00EE70  5802               	subwfb	___awdiv@dividend+1,w,c
  1877  00EE72  A0D8               	btfss	status,0,c
  1878  00EE74  D006               	goto	l2401
  1879  00EE76  5003               	movf	___awdiv@divisor,w,c
  1880  00EE78  5E01               	subwf	___awdiv@dividend,f,c
  1881  00EE7A  5004               	movf	___awdiv@divisor+1,w,c
  1882  00EE7C  5A02               	subwfb	___awdiv@dividend+1,f,c
  1883  00EE7E  8007               	bsf	___awdiv@quotient,0,c
  1884  00EE80  D000               	goto	l2401
  1885  00EE82                     l2401:
  1886  00EE82  90D8               	bcf	status,0,c
  1887  00EE84  3204               	rrcf	___awdiv@divisor+1,f,c
  1888  00EE86  3203               	rrcf	___awdiv@divisor,f,c
  1889  00EE88  2E05               	decfsz	___awdiv@counter,f,c
  1890  00EE8A  D7EC               	goto	l2393
  1891  00EE8C  D000               	goto	l2405
  1892  00EE8E                     l2405:
  1893  00EE8E  5006               	movf	___awdiv@sign,w,c
  1894  00EE90  B4D8               	btfsc	status,2,c
  1895  00EE92  D005               	goto	l2409
  1896  00EE94  6C07               	negf	___awdiv@quotient,c
  1897  00EE96  1E08               	comf	___awdiv@quotient+1,f,c
  1898  00EE98  B0D8               	btfsc	status,0,c
  1899  00EE9A  2A08               	incf	___awdiv@quotient+1,f,c
  1900  00EE9C  D000               	goto	l2409
  1901  00EE9E                     l2409:
  1902  00EE9E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1903  00EEA2  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1904  00EEA6  0012               	return	
  1905  00EEA8  0012               	return		;funcret
  1906  00EEAA                     __end_of___awdiv:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           prodl	equ	0xFF3
  1913                           postinc0	equ	0xFEE
  1914                           wreg	equ	0xFE8
  1915                           postdec1	equ	0xFE5
  1916                           fsr1l	equ	0xFE1
  1917                           status	equ	0xFD8
  1918                           
  1919 ;; *************** function _RtccWriteTime *****************
  1920 ;; Defined at:
  1921 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;  pTm             2    0[COMRAM] PTR const struct .
  1924 ;;		 -> RtccTime(4), 
  1925 ;;  di              1    2[COMRAM] enum E7121
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  tempHourWDay    2    9[COMRAM] struct .
  1928 ;;  tempMinSec      2    7[COMRAM] struct .
  1929 ;;  wasWrEn         1    6[COMRAM] enum E7121
  1930 ;;  wasAlrm         1    5[COMRAM] enum E7121
  1931 ;;  wasOn           1    4[COMRAM] enum E7121
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      enum E7337
  1934 ;; Registers used:
  1935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1941 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1942 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1944 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1945 ;;Total ram usage:       11 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    1
  1948 ;; This function calls:
  1949 ;;		_RtccWrOn
  1950 ;; This function is called by:
  1951 ;;		_Write_RTC
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text3
  1956  00EF68                     __ptext3:
  1957                           	opt stack 0
  1958  00EF68                     _RtccWriteTime:
  1959                           	opt stack 28
  1960                           
  1961                           ;incstack = 0
  1962  00EF68  0E00               	movlw	0
  1963  00EF6A  6E06               	movwf	RtccWriteTime@wasAlrm,c
  1964  00EF6C  EE20 F002          	lfsr	2,2
  1965  00EF70  5001               	movf	RtccWriteTime@pTm,w,c
  1966  00EF72  26D9               	addwf	fsr2l,f,c
  1967  00EF74  5002               	movf	RtccWriteTime@pTm+1,w,c
  1968  00EF76  22DA               	addwfc	fsr2h,f,c
  1969  00EF78  0E5A               	movlw	90
  1970  00EF7A  60DF               	cpfslt	indf2,c
  1971  00EF7C  0012               	return	
  1972  00EF7E  EE20 F001          	lfsr	2,1
  1973  00EF82  5001               	movf	RtccWriteTime@pTm,w,c
  1974  00EF84  26D9               	addwf	fsr2l,f,c
  1975  00EF86  5002               	movf	RtccWriteTime@pTm+1,w,c
  1976  00EF88  22DA               	addwfc	fsr2h,f,c
  1977  00EF8A  0E5A               	movlw	90
  1978  00EF8C  60DF               	cpfslt	indf2,c
  1979  00EF8E  0012               	return	
  1980  00EF90  EE20 F003          	lfsr	2,3
  1981  00EF94  5001               	movf	RtccWriteTime@pTm,w,c
  1982  00EF96  26D9               	addwf	fsr2l,f,c
  1983  00EF98  5002               	movf	RtccWriteTime@pTm+1,w,c
  1984  00EF9A  22DA               	addwfc	fsr2h,f,c
  1985  00EF9C  0E24               	movlw	36
  1986  00EF9E  64DF               	cpfsgt	indf2,c
  1987  00EFA0  D002               	goto	l2241
  1988  00EFA2  0012               	return	
  1989                           
  1990                           ;	Return value of _RtccWriteTime is never used
  1991  00EFA4  0012               	return	
  1992  00EFA6                     l2241:
  1993  00EFA6  EE20 F002          	lfsr	2,2
  1994  00EFAA  5001               	movf	RtccWriteTime@pTm,w,c
  1995  00EFAC  26D9               	addwf	fsr2l,f,c
  1996  00EFAE  5002               	movf	RtccWriteTime@pTm+1,w,c
  1997  00EFB0  22DA               	addwfc	fsr2h,f,c
  1998  00EFB2  50DF               	movf	indf2,w,c
  1999  00EFB4  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  2000  00EFB6  EE20 F001          	lfsr	2,1
  2001  00EFBA  5001               	movf	RtccWriteTime@pTm,w,c
  2002  00EFBC  26D9               	addwf	fsr2l,f,c
  2003  00EFBE  5002               	movf	RtccWriteTime@pTm+1,w,c
  2004  00EFC0  22DA               	addwfc	fsr2h,f,c
  2005  00EFC2  50DF               	movf	indf2,w,c
  2006  00EFC4  6E08               	movwf	RtccWriteTime@tempMinSec,c
  2007  00EFC6  5003               	movf	RtccWriteTime@di,w,c
  2008  00EFC8  B4D8               	btfsc	status,2,c
  2009  00EFCA  D002               	goto	l2247
  2010  00EFCC  9CF2               	bcf	intcon,6,c	;volatile
  2011  00EFCE  D000               	goto	l2247
  2012  00EFD0                     l2247:
  2013  00EFD0  0E00               	movlw	0
  2014  00EFD2  BB3F               	btfsc	63,5,b	;volatile
  2015  00EFD4  0E01               	movlw	1
  2016  00EFD6  6E07               	movwf	RtccWriteTime@wasWrEn,c
  2017  00EFD8  5007               	movf	RtccWriteTime@wasWrEn,w,c
  2018  00EFDA  A4D8               	btfss	status,2,c
  2019  00EFDC  D003               	goto	l2251
  2020  00EFDE  EC7F  F075         	call	_RtccWrOn	;wreg free
  2021  00EFE2  D000               	goto	l2251
  2022  00EFE4                     l2251:
  2023  00EFE4  0E00               	movlw	0
  2024  00EFE6  BF3F               	btfsc	63,7,b	;volatile
  2025  00EFE8  0E01               	movlw	1
  2026  00EFEA  6E05               	movwf	RtccWriteTime@wasOn,c
  2027  00EFEC  5005               	movf	RtccWriteTime@wasOn,w,c
  2028  00EFEE  B4D8               	btfsc	status,2,c
  2029  00EFF0  D007               	goto	l2257
  2030  00EFF2  0E00               	movlw	0
  2031  00EFF4  BE91               	btfsc	3985,7,c	;volatile
  2032  00EFF6  0E01               	movlw	1
  2033  00EFF8  6E06               	movwf	RtccWriteTime@wasAlrm,c
  2034  00EFFA  010F               	movlb	15	; () banked
  2035  00EFFC  9F3F               	bcf	63,7,b	;volatile
  2036  00EFFE  D000               	goto	l2257
  2037  00F000                     l2257:
  2038  00F000  0EFC               	movlw	252
  2039  00F002  010F               	movlb	15	; () banked
  2040  00F004  173F               	andwf	63,f,b	;volatile
  2041  00F006  010F               	movlb	15	; () banked
  2042  00F008  813F               	bsf	63,0,b	;volatile
  2043                           
  2044                           ; BSR set to: 15
  2045  00F00A  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  2046                           
  2047                           ; BSR set to: 15
  2048  00F00E  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  2049                           
  2050                           ; BSR set to: 15
  2051  00F012  EE20 F003          	lfsr	2,3
  2052  00F016  5001               	movf	RtccWriteTime@pTm,w,c
  2053  00F018  26D9               	addwf	fsr2l,f,c
  2054  00F01A  5002               	movf	RtccWriteTime@pTm+1,w,c
  2055  00F01C  22DA               	addwfc	fsr2h,f,c
  2056  00F01E  50DF               	movf	indf2,w,c
  2057  00F020  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  2058                           
  2059                           ; BSR set to: 15
  2060  00F022  0EFC               	movlw	252
  2061  00F024  010F               	movlb	15	; () banked
  2062  00F026  173F               	andwf	63,f,b	;volatile
  2063                           
  2064                           ; BSR set to: 15
  2065  00F028  010F               	movlb	15	; () banked
  2066  00F02A  813F               	bsf	63,0,b	;volatile
  2067                           
  2068                           ; BSR set to: 15
  2069  00F02C  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  2070                           
  2071                           ; BSR set to: 15
  2072  00F030  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  2073                           
  2074                           ; BSR set to: 15
  2075  00F034  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  2076                           
  2077                           ; BSR set to: 15
  2078  00F038  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  2079                           
  2080                           ; BSR set to: 15
  2081  00F03C  5005               	movf	RtccWriteTime@wasOn,w,c
  2082  00F03E  B4D8               	btfsc	status,2,c
  2083  00F040  D00D               	goto	l2289
  2084                           
  2085                           ; BSR set to: 15
  2086  00F042  010F               	movlb	15	; () banked
  2087  00F044  8F3F               	bsf	63,7,b	;volatile
  2088                           
  2089                           ; BSR set to: 15
  2090  00F046  5006               	movf	RtccWriteTime@wasAlrm,w,c
  2091  00F048  B4D8               	btfsc	status,2,c
  2092  00F04A  D002               	goto	l2285
  2093                           
  2094                           ; BSR set to: 15
  2095  00F04C  8E91               	bsf	3985,7,c	;volatile
  2096  00F04E  D000               	goto	l2285
  2097  00F050                     l2285:
  2098                           
  2099                           ; BSR set to: 15
  2100  00F050  5007               	movf	RtccWriteTime@wasWrEn,w,c
  2101  00F052  B4D8               	btfsc	status,2,c
  2102  00F054  D009               	goto	l2293
  2103                           
  2104                           ; BSR set to: 15
  2105  00F056  EC7F  F075         	call	_RtccWrOn	;wreg free
  2106  00F05A  D006               	goto	l2293
  2107  00F05C                     l2289:
  2108  00F05C  5007               	movf	RtccWriteTime@wasWrEn,w,c
  2109  00F05E  A4D8               	btfss	status,2,c
  2110  00F060  D003               	goto	l2293
  2111  00F062  010F               	movlb	15	; () banked
  2112  00F064  9B3F               	bcf	63,5,b	;volatile
  2113                           
  2114                           ; BSR set to: 15
  2115  00F066  D000               	goto	l2293
  2116  00F068                     l2293:
  2117  00F068  5003               	movf	RtccWriteTime@di,w,c
  2118  00F06A  B4D8               	btfsc	status,2,c
  2119  00F06C  0012               	return	
  2120  00F06E  8CF2               	bsf	intcon,6,c	;volatile
  2121  00F070  0012               	return	
  2122                           
  2123                           ;	Return value of _RtccWriteTime is never used
  2124  00F072  0012               	return		;funcret
  2125  00F074                     __end_of_RtccWriteTime:
  2126                           	opt stack 0
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           indf2	equ	0xFDF
  2138                           fsr2h	equ	0xFDA
  2139                           fsr2l	equ	0xFD9
  2140                           status	equ	0xFD8
  2141                           
  2142 ;; *************** function _RtccWriteDate *****************
  2143 ;; Defined at:
  2144 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  2145 ;; Parameters:    Size  Location     Type
  2146 ;;  pDt             2    0[COMRAM] PTR const struct .
  2147 ;;		 -> RtccDate(4), 
  2148 ;;  di              1    2[COMRAM] enum E7121
  2149 ;; Auto vars:     Size  Location     Type
  2150 ;;  tempHourWDay    2   11[COMRAM] struct .
  2151 ;;  tempDayMonth    2    9[COMRAM] struct .
  2152 ;;  tempYear        2    6[COMRAM] struct .
  2153 ;;  wasWrEn         1    8[COMRAM] enum E7121
  2154 ;;  wasAlrm         1    5[COMRAM] enum E7121
  2155 ;;  wasOn           1    4[COMRAM] enum E7121
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      enum E7337
  2158 ;; Registers used:
  2159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2165 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2168 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2169 ;;Total ram usage:       13 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    1
  2172 ;; This function calls:
  2173 ;;		_RtccWrOn
  2174 ;; This function is called by:
  2175 ;;		_Write_RTC
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text4
  2180  00F60C                     __ptext4:
  2181                           	opt stack 0
  2182  00F60C                     _RtccWriteDate:
  2183                           	opt stack 28
  2184                           
  2185                           ;incstack = 0
  2186  00F60C  0E00               	movlw	0
  2187  00F60E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  2188  00F610  EE20 F002          	lfsr	2,2
  2189  00F614  5001               	movf	RtccWriteDate@pDt,w,c
  2190  00F616  26D9               	addwf	fsr2l,f,c
  2191  00F618  5002               	movf	RtccWriteDate@pDt+1,w,c
  2192  00F61A  22DA               	addwfc	fsr2h,f,c
  2193  00F61C  0E13               	movlw	19
  2194  00F61E  60DF               	cpfslt	indf2,c
  2195  00F620  0012               	return	
  2196  00F622  EE20 F002          	lfsr	2,2
  2197  00F626  5001               	movf	RtccWriteDate@pDt,w,c
  2198  00F628  26D9               	addwf	fsr2l,f,c
  2199  00F62A  5002               	movf	RtccWriteDate@pDt+1,w,c
  2200  00F62C  22DA               	addwfc	fsr2h,f,c
  2201  00F62E  50DF               	movf	indf2,w,c
  2202  00F630  B4D8               	btfsc	status,2,c
  2203  00F632  0012               	return	
  2204  00F634  EE20 F001          	lfsr	2,1
  2205  00F638  5001               	movf	RtccWriteDate@pDt,w,c
  2206  00F63A  26D9               	addwf	fsr2l,f,c
  2207  00F63C  5002               	movf	RtccWriteDate@pDt+1,w,c
  2208  00F63E  22DA               	addwfc	fsr2h,f,c
  2209  00F640  0E32               	movlw	50
  2210  00F642  60DF               	cpfslt	indf2,c
  2211  00F644  0012               	return	
  2212  00F646  EE20 F001          	lfsr	2,1
  2213  00F64A  5001               	movf	RtccWriteDate@pDt,w,c
  2214  00F64C  26D9               	addwf	fsr2l,f,c
  2215  00F64E  5002               	movf	RtccWriteDate@pDt+1,w,c
  2216  00F650  22DA               	addwfc	fsr2h,f,c
  2217  00F652  50DF               	movf	indf2,w,c
  2218  00F654  B4D8               	btfsc	status,2,c
  2219  00F656  0012               	return	
  2220  00F658  EE20 F003          	lfsr	2,3
  2221  00F65C  5001               	movf	RtccWriteDate@pDt,w,c
  2222  00F65E  26D9               	addwf	fsr2l,f,c
  2223  00F660  5002               	movf	RtccWriteDate@pDt+1,w,c
  2224  00F662  22DA               	addwfc	fsr2h,f,c
  2225  00F664  0E99               	movlw	153
  2226  00F666  64DF               	cpfsgt	indf2,c
  2227  00F668  D002               	goto	l2309
  2228  00F66A  0012               	return	
  2229                           
  2230                           ;	Return value of _RtccWriteDate is never used
  2231  00F66C  0012               	return	
  2232  00F66E                     l2309:
  2233  00F66E  EE20 F003          	lfsr	2,3
  2234  00F672  5001               	movf	RtccWriteDate@pDt,w,c
  2235  00F674  26D9               	addwf	fsr2l,f,c
  2236  00F676  5002               	movf	RtccWriteDate@pDt+1,w,c
  2237  00F678  22DA               	addwfc	fsr2h,f,c
  2238  00F67A  50DF               	movf	indf2,w,c
  2239  00F67C  6E07               	movwf	RtccWriteDate@tempYear,c
  2240  00F67E  EE20 F001          	lfsr	2,1
  2241  00F682  5001               	movf	RtccWriteDate@pDt,w,c
  2242  00F684  26D9               	addwf	fsr2l,f,c
  2243  00F686  5002               	movf	RtccWriteDate@pDt+1,w,c
  2244  00F688  22DA               	addwfc	fsr2h,f,c
  2245  00F68A  50DF               	movf	indf2,w,c
  2246  00F68C  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  2247  00F68E  EE20 F002          	lfsr	2,2
  2248  00F692  5001               	movf	RtccWriteDate@pDt,w,c
  2249  00F694  26D9               	addwf	fsr2l,f,c
  2250  00F696  5002               	movf	RtccWriteDate@pDt+1,w,c
  2251  00F698  22DA               	addwfc	fsr2h,f,c
  2252  00F69A  50DF               	movf	indf2,w,c
  2253  00F69C  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  2254  00F69E  5003               	movf	RtccWriteDate@di,w,c
  2255  00F6A0  B4D8               	btfsc	status,2,c
  2256  00F6A2  D002               	goto	l2315
  2257  00F6A4  9CF2               	bcf	intcon,6,c	;volatile
  2258  00F6A6  D000               	goto	l2315
  2259  00F6A8                     l2315:
  2260  00F6A8  0E00               	movlw	0
  2261  00F6AA  BB3F               	btfsc	63,5,b	;volatile
  2262  00F6AC  0E01               	movlw	1
  2263  00F6AE  6E09               	movwf	RtccWriteDate@wasWrEn,c
  2264  00F6B0  5009               	movf	RtccWriteDate@wasWrEn,w,c
  2265  00F6B2  A4D8               	btfss	status,2,c
  2266  00F6B4  D003               	goto	l2319
  2267  00F6B6  EC7F  F075         	call	_RtccWrOn	;wreg free
  2268  00F6BA  D000               	goto	l2319
  2269  00F6BC                     l2319:
  2270  00F6BC  0E00               	movlw	0
  2271  00F6BE  BF3F               	btfsc	63,7,b	;volatile
  2272  00F6C0  0E01               	movlw	1
  2273  00F6C2  6E05               	movwf	RtccWriteDate@wasOn,c
  2274  00F6C4  5005               	movf	RtccWriteDate@wasOn,w,c
  2275  00F6C6  B4D8               	btfsc	status,2,c
  2276  00F6C8  D007               	goto	l2325
  2277  00F6CA  0E00               	movlw	0
  2278  00F6CC  BE91               	btfsc	3985,7,c	;volatile
  2279  00F6CE  0E01               	movlw	1
  2280  00F6D0  6E06               	movwf	RtccWriteDate@wasAlrm,c
  2281  00F6D2  010F               	movlb	15	; () banked
  2282  00F6D4  9F3F               	bcf	63,7,b	;volatile
  2283  00F6D6  D000               	goto	l2325
  2284  00F6D8                     l2325:
  2285  00F6D8  0EFC               	movlw	252
  2286  00F6DA  010F               	movlb	15	; () banked
  2287  00F6DC  173F               	andwf	63,f,b	;volatile
  2288  00F6DE  010F               	movlb	15	; () banked
  2289  00F6E0  813F               	bsf	63,0,b	;volatile
  2290                           
  2291                           ; BSR set to: 15
  2292  00F6E2  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  2293                           
  2294                           ; BSR set to: 15
  2295  00F6E6  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  2296                           
  2297                           ; BSR set to: 15
  2298  00F6EA  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  2299  00F6EE  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  2300  00F6F2  50DF               	movf	indf2,w,c
  2301  00F6F4  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  2302                           
  2303                           ; BSR set to: 15
  2304  00F6F6  0EFC               	movlw	252
  2305  00F6F8  010F               	movlb	15	; () banked
  2306  00F6FA  173F               	andwf	63,f,b	;volatile
  2307                           
  2308                           ; BSR set to: 15
  2309  00F6FC  0E03               	movlw	3
  2310  00F6FE  010F               	movlb	15	; () banked
  2311  00F700  133F               	iorwf	63,f,b	;volatile
  2312                           
  2313                           ; BSR set to: 15
  2314  00F702  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  2315                           
  2316                           ; BSR set to: 15
  2317  00F706  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  2318                           
  2319                           ; BSR set to: 15
  2320  00F70A  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  2321                           
  2322                           ; BSR set to: 15
  2323  00F70E  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  2324                           
  2325                           ; BSR set to: 15
  2326  00F712  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  2327                           
  2328                           ; BSR set to: 15
  2329  00F716  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  2330                           
  2331                           ; BSR set to: 15
  2332  00F71A  5005               	movf	RtccWriteDate@wasOn,w,c
  2333  00F71C  B4D8               	btfsc	status,2,c
  2334  00F71E  D00D               	goto	l2361
  2335                           
  2336                           ; BSR set to: 15
  2337  00F720  010F               	movlb	15	; () banked
  2338  00F722  8F3F               	bsf	63,7,b	;volatile
  2339                           
  2340                           ; BSR set to: 15
  2341  00F724  5006               	movf	RtccWriteDate@wasAlrm,w,c
  2342  00F726  B4D8               	btfsc	status,2,c
  2343  00F728  D002               	goto	l2357
  2344                           
  2345                           ; BSR set to: 15
  2346  00F72A  8E91               	bsf	3985,7,c	;volatile
  2347  00F72C  D000               	goto	l2357
  2348  00F72E                     l2357:
  2349                           
  2350                           ; BSR set to: 15
  2351  00F72E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  2352  00F730  B4D8               	btfsc	status,2,c
  2353  00F732  D009               	goto	l2365
  2354                           
  2355                           ; BSR set to: 15
  2356  00F734  EC7F  F075         	call	_RtccWrOn	;wreg free
  2357  00F738  D006               	goto	l2365
  2358  00F73A                     l2361:
  2359  00F73A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  2360  00F73C  A4D8               	btfss	status,2,c
  2361  00F73E  D003               	goto	l2365
  2362  00F740  010F               	movlb	15	; () banked
  2363  00F742  9B3F               	bcf	63,5,b	;volatile
  2364                           
  2365                           ; BSR set to: 15
  2366  00F744  D000               	goto	l2365
  2367  00F746                     l2365:
  2368  00F746  5003               	movf	RtccWriteDate@di,w,c
  2369  00F748  B4D8               	btfsc	status,2,c
  2370  00F74A  0012               	return	
  2371  00F74C  9CF2               	bcf	intcon,6,c	;volatile
  2372  00F74E  0012               	return	
  2373                           
  2374                           ;	Return value of _RtccWriteDate is never used
  2375  00F750  0012               	return		;funcret
  2376  00F752                     __end_of_RtccWriteDate:
  2377                           	opt stack 0
  2378                           tblptru	equ	0xFF8
  2379                           tblptrh	equ	0xFF7
  2380                           tblptrl	equ	0xFF6
  2381                           tablat	equ	0xFF5
  2382                           prodl	equ	0xFF3
  2383                           intcon	equ	0xFF2
  2384                           postinc0	equ	0xFEE
  2385                           wreg	equ	0xFE8
  2386                           postdec1	equ	0xFE5
  2387                           fsr1l	equ	0xFE1
  2388                           indf2	equ	0xFDF
  2389                           fsr2h	equ	0xFDA
  2390                           fsr2l	equ	0xFD9
  2391                           status	equ	0xFD8
  2392                           
  2393 ;; *************** function _RtccWrOn *****************
  2394 ;; Defined at:
  2395 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  data            2    0        unsigned int 
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg, status,2
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2413 ;;Total ram usage:        0 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; This function calls:
  2416 ;;		Nothing
  2417 ;; This function is called by:
  2418 ;;		_Write_RTC
  2419 ;;		_RtccWriteDate
  2420 ;;		_RtccWriteTime
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text5
  2425  00EAFE                     __ptext5:
  2426                           	opt stack 0
  2427  00EAFE                     _RtccWrOn:
  2428                           	opt stack 28
  2429                           
  2430                           ;incstack = 0
  2431  00EAFE  9CF2               	bcf	intcon,6,c	;volatile
  2432  00EB00  0E55               	movlw	85
  2433  00EB02  6EA7               	movwf	4007,c	;volatile
  2434  00EB04  0EAA               	movlw	170
  2435  00EB06  6EA7               	movwf	4007,c	;volatile
  2436  00EB08  010F               	movlb	15	; () banked
  2437  00EB0A  8B3F               	bsf	63,5,b	;volatile
  2438                           
  2439                           ; BSR set to: 15
  2440  00EB0C  8CF2               	bsf	intcon,6,c	;volatile
  2441                           
  2442                           ; BSR set to: 15
  2443  00EB0E  0012               	return		;funcret
  2444  00EB10                     __end_of_RtccWrOn:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodl	equ	0xFF3
  2451                           intcon	equ	0xFF2
  2452                           postinc0	equ	0xFEE
  2453                           wreg	equ	0xFE8
  2454                           postdec1	equ	0xFE5
  2455                           fsr1l	equ	0xFE1
  2456                           indf2	equ	0xFDF
  2457                           fsr2h	equ	0xFDA
  2458                           fsr2l	equ	0xFD9
  2459                           status	equ	0xFD8
  2460                           
  2461 ;; *************** function _V_Principal *****************
  2462 ;; Defined at:
  2463 ;;		line 224 in file "../main.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;		None
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  cte             2   68[COMRAM] PTR unsigned char 
  2468 ;;		 -> Convert_diasem@buffer_dia(20), 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;		None               void
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2482 ;;Total ram usage:        2 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    3
  2485 ;; This function calls:
  2486 ;;		_Convert_diasem
  2487 ;;		_Lcd_Out
  2488 ;;		_Read_RTC
  2489 ;;		_lee_temperatura
  2490 ;;		_sprintf
  2491 ;; This function is called by:
  2492 ;;		_main
  2493 ;; This function uses a non-reentrant model
  2494 ;;
  2495                           
  2496                           	psect	text6
  2497  00EEAA                     __ptext6:
  2498                           	opt stack 0
  2499  00EEAA                     _V_Principal:
  2500                           	opt stack 27
  2501                           
  2502                           ;main.c: 226: Read_RTC();
  2503                           
  2504                           ; BSR set to: 15
  2505                           ;incstack = 0
  2506  00EEAA  EC3A  F078         	call	_Read_RTC	;wreg free
  2507                           
  2508                           ;main.c: 227: lee_temperatura();
  2509  00EEAE  EC88  F075         	call	_lee_temperatura	;wreg free
  2510                           
  2511                           ;main.c: 228: Lcd_Out(1, 0, "                    ");
  2512  00EEB2  0E00               	movlw	0
  2513  00EEB4  6E40               	movwf	Lcd_Out@x,c
  2514  00EEB6  0ED7               	movlw	low STR_6
  2515  00EEB8  6E41               	movwf	Lcd_Out@buffer,c
  2516  00EEBA  0EFE               	movlw	high STR_6
  2517  00EEBC  6E42               	movwf	Lcd_Out@buffer+1,c
  2518  00EEBE  0E01               	movlw	1
  2519  00EEC0  ECC0  F076         	call	_Lcd_Out
  2520                           
  2521                           ;main.c: 229: char* cte = Convert_diasem(diasem);
  2522  00EEC4  C04D  F028         	movff	_diasem,Convert_diasem@dia
  2523  00EEC8  C04E  F029         	movff	_diasem+1,Convert_diasem@dia+1
  2524  00EECC  EC53  F079         	call	_Convert_diasem	;wreg free
  2525  00EED0  C028  F045         	movff	?_Convert_diasem,V_Principal@cte
  2526  00EED4  C029  F046         	movff	?_Convert_diasem+1,V_Principal@cte+1
  2527                           
  2528                           ;main.c: 231: Lcd_Out(2, 0, cte);
  2529  00EED8  0E00               	movlw	0
  2530  00EEDA  6E40               	movwf	Lcd_Out@x,c
  2531  00EEDC  C045  F041         	movff	V_Principal@cte,Lcd_Out@buffer
  2532  00EEE0  C046  F042         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  2533  00EEE4  0E02               	movlw	2
  2534  00EEE6  ECC0  F076         	call	_Lcd_Out
  2535                           
  2536                           ;main.c: 234: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  2537  00EEEA  0E85               	movlw	low _buffer1
  2538  00EEEC  6E0D               	movwf	sprintf@sp,c
  2539  00EEEE  0E00               	movlw	high _buffer1
  2540  00EEF0  6E0E               	movwf	sprintf@sp+1,c
  2541  00EEF2  0ECA               	movlw	low STR_7
  2542  00EEF4  6E0F               	movwf	sprintf@f,c
  2543  00EEF6  0EFF               	movlw	high STR_7
  2544  00EEF8  6E10               	movwf	sprintf@f+1,c
  2545  00EEFA  C04B  F011         	movff	_dia,?_sprintf+4
  2546  00EEFE  C04C  F012         	movff	_dia+1,?_sprintf+5
  2547  00EF02  C051  F013         	movff	_mes,?_sprintf+6
  2548  00EF06  C052  F014         	movff	_mes+1,?_sprintf+7
  2549  00EF0A  C049  F015         	movff	_anio,?_sprintf+8
  2550  00EF0E  C04A  F016         	movff	_anio+1,?_sprintf+9
  2551  00EF12  ECC9  F07D         	call	_sprintf	;wreg free
  2552                           
  2553                           ;main.c: 235: Lcd_Out(3,0,buffer1);
  2554  00EF16  0E00               	movlw	0
  2555  00EF18  6E40               	movwf	Lcd_Out@x,c
  2556  00EF1A  0E85               	movlw	low _buffer1
  2557  00EF1C  6E41               	movwf	Lcd_Out@buffer,c
  2558  00EF1E  0E00               	movlw	high _buffer1
  2559  00EF20  6E42               	movwf	Lcd_Out@buffer+1,c
  2560  00EF22  0E03               	movlw	3
  2561  00EF24  ECC0  F076         	call	_Lcd_Out
  2562                           
  2563                           ;main.c: 236: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  2564  00EF28  0E85               	movlw	low _buffer1
  2565  00EF2A  6E0D               	movwf	sprintf@sp,c
  2566  00EF2C  0E00               	movlw	high _buffer1
  2567  00EF2E  6E0E               	movwf	sprintf@sp+1,c
  2568  00EF30  0ED9               	movlw	low STR_8
  2569  00EF32  6E0F               	movwf	sprintf@f,c
  2570  00EF34  0EFF               	movlw	high STR_8
  2571  00EF36  6E10               	movwf	sprintf@f+1,c
  2572  00EF38  C04F  F011         	movff	_hora,?_sprintf+4
  2573  00EF3C  C050  F012         	movff	_hora+1,?_sprintf+5
  2574  00EF40  C053  F013         	movff	_minuto,?_sprintf+6
  2575  00EF44  C054  F014         	movff	_minuto+1,?_sprintf+7
  2576  00EF48  C07C  F015         	movff	_segundo,?_sprintf+8
  2577  00EF4C  C07D  F016         	movff	_segundo+1,?_sprintf+9
  2578  00EF50  ECC9  F07D         	call	_sprintf	;wreg free
  2579                           
  2580                           ;main.c: 237: Lcd_Out(4,0,buffer1);
  2581  00EF54  0E00               	movlw	0
  2582  00EF56  6E40               	movwf	Lcd_Out@x,c
  2583  00EF58  0E85               	movlw	low _buffer1
  2584  00EF5A  6E41               	movwf	Lcd_Out@buffer,c
  2585  00EF5C  0E00               	movlw	high _buffer1
  2586  00EF5E  6E42               	movwf	Lcd_Out@buffer+1,c
  2587  00EF60  0E04               	movlw	4
  2588  00EF62  ECC0  F076         	call	_Lcd_Out
  2589  00EF66  0012               	return		;funcret
  2590  00EF68                     __end_of_V_Principal:
  2591                           	opt stack 0
  2592                           tblptru	equ	0xFF8
  2593                           tblptrh	equ	0xFF7
  2594                           tblptrl	equ	0xFF6
  2595                           tablat	equ	0xFF5
  2596                           prodl	equ	0xFF3
  2597                           intcon	equ	0xFF2
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1l	equ	0xFE1
  2602                           indf2	equ	0xFDF
  2603                           fsr2h	equ	0xFDA
  2604                           fsr2l	equ	0xFD9
  2605                           status	equ	0xFD8
  2606                           
  2607 ;; *************** function _lee_temperatura *****************
  2608 ;; Defined at:
  2609 ;;		line 328 in file "../main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2625 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2626 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2627 ;;Total ram usage:        1 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		_V_Principal
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636                           	psect	text7
  2637  00EB10                     __ptext7:
  2638                           	opt stack 0
  2639  00EB10                     _lee_temperatura:
  2640                           	opt stack 29
  2641                           
  2642                           ;main.c: 330: ADCON0bits.ADON = 1;
  2643                           
  2644                           ;incstack = 0
  2645  00EB10  80C2               	bsf	4034,0,c	;volatile
  2646                           
  2647                           ;main.c: 331: ADCON0bits.GO = 1;
  2648  00EB12  82C2               	bsf	4034,1,c	;volatile
  2649                           
  2650                           ;main.c: 332: while(ADCON0bits.GO);
  2651  00EB14  D000               	goto	l210
  2652  00EB16                     l210:
  2653  00EB16  B2C2               	btfsc	4034,1,c	;volatile
  2654  00EB18  D7FE               	goto	l210
  2655                           
  2656                           ;main.c: 333: _delay((unsigned long)((1)*(8000000/4000.0)));
  2657  00EB1A  0E03               	movlw	3
  2658  00EB1C  6E01               	movwf	??_lee_temperatura& (0+255),c
  2659  00EB1E  0E98               	movlw	152
  2660  00EB20                     u2097:
  2661  00EB20  2EE8               	decfsz	wreg,f,c
  2662  00EB22  D7FE               	goto	u2097
  2663  00EB24  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  2664  00EB26  D7FC               	goto	u2097
  2665                           
  2666                           ;main.c: 334: lectura = ADRESH;
  2667  00EB28  CFC4 F057          	movff	4036,_lectura	;volatile
  2668                           
  2669                           ;main.c: 335: ADCON0bits.ADON = 0;
  2670  00EB2C  90C2               	bcf	4034,0,c	;volatile
  2671  00EB2E  0012               	return		;funcret
  2672  00EB30                     __end_of_lee_temperatura:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           prodl	equ	0xFF3
  2679                           intcon	equ	0xFF2
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           postdec1	equ	0xFE5
  2683                           fsr1l	equ	0xFE1
  2684                           indf2	equ	0xFDF
  2685                           fsr2h	equ	0xFDA
  2686                           fsr2l	equ	0xFD9
  2687                           status	equ	0xFD8
  2688                           
  2689 ;; *************** function _Read_RTC *****************
  2690 ;; Defined at:
  2691 ;;		line 295 in file "../main.c"
  2692 ;; Parameters:    Size  Location     Type
  2693 ;;		None
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;		None
  2696 ;; Return value:  Size  Location     Type
  2697 ;;		None               void
  2698 ;; Registers used:
  2699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2709 ;;Total ram usage:        0 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    1
  2712 ;; This function calls:
  2713 ;;		_RtccReadDate
  2714 ;;		_RtccReadTime
  2715 ;; This function is called by:
  2716 ;;		_V_Principal
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text8
  2721  00F074                     __ptext8:
  2722                           	opt stack 0
  2723  00F074                     _Read_RTC:
  2724                           	opt stack 28
  2725                           
  2726                           ;main.c: 298: RtccReadTime(&RtccTime);
  2727                           
  2728                           ;incstack = 0
  2729  00F074  0E5C               	movlw	low _RtccTime
  2730  00F076  6E01               	movwf	RtccReadTime@pTm,c
  2731  00F078  0E00               	movlw	high _RtccTime
  2732  00F07A  6E02               	movwf	RtccReadTime@pTm+1,c
  2733  00F07C  EC42  F076         	call	_RtccReadTime	;wreg free
  2734                           
  2735                           ;main.c: 299: segundo_u=(RtccTime.f.sec & 0x0F);
  2736  00F080  505D               	movf	_RtccTime+1,w,c
  2737  00F082  0B0F               	andlw	15
  2738  00F084  0100               	movlb	0	; () banked
  2739  00F086  6FA5               	movwf	_segundo_u& (0+255),b
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 300: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  2743  00F088  385D               	swapf	_RtccTime+1,w,c
  2744  00F08A  0B0F               	andlw	15
  2745  00F08C  0B0F               	andlw	15
  2746  00F08E  0100               	movlb	0	; () banked
  2747  00F090  6FA4               	movwf	_segundo_d& (0+255),b
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;main.c: 301: minuto_u=(RtccTime.f.min & 0x0F);
  2751  00F092  505E               	movf	_RtccTime+2,w,c
  2752  00F094  0B0F               	andlw	15
  2753  00F096  0100               	movlb	0	; () banked
  2754  00F098  6FA3               	movwf	_minuto_u& (0+255),b
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;main.c: 302: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  2758  00F09A  385E               	swapf	_RtccTime+2,w,c
  2759  00F09C  0B0F               	andlw	15
  2760  00F09E  0B0F               	andlw	15
  2761  00F0A0  0100               	movlb	0	; () banked
  2762  00F0A2  6FA2               	movwf	_minuto_d& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 303: hora_u=(RtccTime.f.hour & 0x0F);
  2766  00F0A4  505F               	movf	_RtccTime+3,w,c
  2767  00F0A6  0B0F               	andlw	15
  2768  00F0A8  0100               	movlb	0	; () banked
  2769  00F0AA  6F9F               	movwf	_hora_u& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 304: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  2773  00F0AC  385F               	swapf	_RtccTime+3,w,c
  2774  00F0AE  0B0F               	andlw	15
  2775  00F0B0  0B0F               	andlw	15
  2776  00F0B2  0100               	movlb	0	; () banked
  2777  00F0B4  6F9E               	movwf	_hora_d& (0+255),b
  2778                           
  2779                           ;main.c: 305: RtccReadDate(&RtccDate);
  2780  00F0B6  0E58               	movlw	low _RtccDate
  2781  00F0B8  6E01               	movwf	RtccReadDate@pDt,c
  2782  00F0BA  0E00               	movlw	high _RtccDate
  2783  00F0BC  6E02               	movwf	RtccReadDate@pDt+1,c
  2784  00F0BE  EC79  F076         	call	_RtccReadDate	;wreg free
  2785                           
  2786                           ;main.c: 306: fecha_u=(RtccDate.f.mday & 0x0F);
  2787  00F0C2  5059               	movf	_RtccDate+1,w,c
  2788  00F0C4  0B0F               	andlw	15
  2789  00F0C6  0100               	movlb	0	; () banked
  2790  00F0C8  6F9D               	movwf	_fecha_u& (0+255),b
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 307: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  2794  00F0CA  3859               	swapf	_RtccDate+1,w,c
  2795  00F0CC  0B0F               	andlw	15
  2796  00F0CE  0B0F               	andlw	15
  2797  00F0D0  0100               	movlb	0	; () banked
  2798  00F0D2  6F9C               	movwf	_fecha_d& (0+255),b
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;main.c: 308: mes_u=(RtccDate.f.mon & 0x0F);
  2802  00F0D4  505A               	movf	_RtccDate+2,w,c
  2803  00F0D6  0B0F               	andlw	15
  2804  00F0D8  0100               	movlb	0	; () banked
  2805  00F0DA  6FA1               	movwf	_mes_u& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 309: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  2809  00F0DC  385A               	swapf	_RtccDate+2,w,c
  2810  00F0DE  0B0F               	andlw	15
  2811  00F0E0  0B0F               	andlw	15
  2812  00F0E2  0100               	movlb	0	; () banked
  2813  00F0E4  6FA0               	movwf	_mes_d& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 310: dia_semana=RtccDate.f.wday;
  2817  00F0E6  C058  F09B         	movff	_RtccDate,_dia_semana
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 311: anio_u=(RtccDate.f.year & 0x0F);
  2821  00F0EA  505B               	movf	_RtccDate+3,w,c
  2822  00F0EC  0B0F               	andlw	15
  2823  00F0EE  0100               	movlb	0	; () banked
  2824  00F0F0  6F9A               	movwf	_anio_u& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 312: anio_d=((RtccDate.f.year & 0xF0)>>4);
  2828  00F0F2  385B               	swapf	_RtccDate+3,w,c
  2829  00F0F4  0B0F               	andlw	15
  2830  00F0F6  0B0F               	andlw	15
  2831  00F0F8  0100               	movlb	0	; () banked
  2832  00F0FA  6F99               	movwf	_anio_d& (0+255),b
  2833                           
  2834                           ; BSR set to: 0
  2835                           ;main.c: 313: segundo=segundo_d*10+segundo_u;
  2836  00F0FC  0100               	movlb	0	; () banked
  2837  00F0FE  51A4               	movf	_segundo_d& (0+255),w,b
  2838  00F100  0D0A               	mullw	10
  2839  00F102  0100               	movlb	0	; () banked
  2840  00F104  51A5               	movf	_segundo_u& (0+255),w,b
  2841  00F106  24F3               	addwf	prodl,w,c
  2842  00F108  0100               	movlb	0	; () banked
  2843  00F10A  6F7C               	movwf	_segundo& (0+255),b
  2844  00F10C  0100               	movlb	0	; () banked
  2845  00F10E  0E00               	movlw	0
  2846  00F110  20F4               	addwfc	prodh,w,c
  2847  00F112  0100               	movlb	0	; () banked
  2848  00F114  6F7D               	movwf	(_segundo+1)& (0+255),b
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;main.c: 314: minuto=minuto_d*10+minuto_u;
  2852  00F116  0100               	movlb	0	; () banked
  2853  00F118  51A2               	movf	_minuto_d& (0+255),w,b
  2854  00F11A  0D0A               	mullw	10
  2855  00F11C  0100               	movlb	0	; () banked
  2856  00F11E  51A3               	movf	_minuto_u& (0+255),w,b
  2857  00F120  24F3               	addwf	prodl,w,c
  2858  00F122  6E53               	movwf	_minuto,c
  2859  00F124  0100               	movlb	0	; () banked
  2860  00F126  0E00               	movlw	0
  2861  00F128  20F4               	addwfc	prodh,w,c
  2862  00F12A  6E54               	movwf	_minuto+1,c
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 315: hora=hora_d*10+hora_u;
  2866  00F12C  0100               	movlb	0	; () banked
  2867  00F12E  519E               	movf	_hora_d& (0+255),w,b
  2868  00F130  0D0A               	mullw	10
  2869  00F132  0100               	movlb	0	; () banked
  2870  00F134  519F               	movf	_hora_u& (0+255),w,b
  2871  00F136  24F3               	addwf	prodl,w,c
  2872  00F138  6E4F               	movwf	_hora,c
  2873  00F13A  0100               	movlb	0	; () banked
  2874  00F13C  0E00               	movlw	0
  2875  00F13E  20F4               	addwfc	prodh,w,c
  2876  00F140  6E50               	movwf	_hora+1,c
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;main.c: 316: dia=fecha_d*10+fecha_u;
  2880  00F142  0100               	movlb	0	; () banked
  2881  00F144  519C               	movf	_fecha_d& (0+255),w,b
  2882  00F146  0D0A               	mullw	10
  2883  00F148  0100               	movlb	0	; () banked
  2884  00F14A  519D               	movf	_fecha_u& (0+255),w,b
  2885  00F14C  24F3               	addwf	prodl,w,c
  2886  00F14E  6E4B               	movwf	_dia,c
  2887  00F150  0100               	movlb	0	; () banked
  2888  00F152  0E00               	movlw	0
  2889  00F154  20F4               	addwfc	prodh,w,c
  2890  00F156  6E4C               	movwf	_dia+1,c
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;main.c: 317: diasem=dia_semana;
  2894  00F158  C09B  F04D         	movff	_dia_semana,_diasem
  2895  00F15C  6A4E               	clrf	_diasem+1,c
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;main.c: 318: mes=mes_d*10+mes_u;
  2899  00F15E  0100               	movlb	0	; () banked
  2900  00F160  51A0               	movf	_mes_d& (0+255),w,b
  2901  00F162  0D0A               	mullw	10
  2902  00F164  0100               	movlb	0	; () banked
  2903  00F166  51A1               	movf	_mes_u& (0+255),w,b
  2904  00F168  24F3               	addwf	prodl,w,c
  2905  00F16A  6E51               	movwf	_mes,c
  2906  00F16C  0100               	movlb	0	; () banked
  2907  00F16E  0E00               	movlw	0
  2908  00F170  20F4               	addwfc	prodh,w,c
  2909  00F172  6E52               	movwf	_mes+1,c
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 319: anio=anio_d*10+anio_u;
  2913  00F174  0100               	movlb	0	; () banked
  2914  00F176  5199               	movf	_anio_d& (0+255),w,b
  2915  00F178  0D0A               	mullw	10
  2916  00F17A  0100               	movlb	0	; () banked
  2917  00F17C  519A               	movf	_anio_u& (0+255),w,b
  2918  00F17E  24F3               	addwf	prodl,w,c
  2919  00F180  6E49               	movwf	_anio,c
  2920  00F182  0100               	movlb	0	; () banked
  2921  00F184  0E00               	movlw	0
  2922  00F186  20F4               	addwfc	prodh,w,c
  2923  00F188  6E4A               	movwf	_anio+1,c
  2924                           
  2925                           ; BSR set to: 0
  2926  00F18A  0012               	return		;funcret
  2927  00F18C                     __end_of_Read_RTC:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _RtccReadTime *****************
  2946 ;; Defined at:
  2947 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  pTm             2    0[COMRAM] PTR struct .
  2950 ;;		 -> RtccTime(4), 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  rTD0            8   10[COMRAM] struct .
  2953 ;;  rTD1            8    2[COMRAM] struct .
  2954 ;; Return value:  Size  Location     Type
  2955 ;;		None               void
  2956 ;; Registers used:
  2957 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2964 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2966 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2967 ;;Total ram usage:       18 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_Read_RTC
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text9
  2977  00EC84                     __ptext9:
  2978                           	opt stack 0
  2979  00EC84                     _RtccReadTime:
  2980                           	opt stack 28
  2981  00EC84  0EFC               	movlw	252
  2982  00EC86  010F               	movlb	15	; () banked
  2983  00EC88  173F               	andwf	63,f,b	;volatile
  2984                           
  2985                           ; BSR set to: 15
  2986  00EC8A  010F               	movlb	15	; () banked
  2987  00EC8C  813F               	bsf	63,0,b	;volatile
  2988                           
  2989                           ; BSR set to: 15
  2990  00EC8E  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  2991                           
  2992                           ; BSR set to: 15
  2993  00EC92  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  2994                           
  2995                           ; BSR set to: 15
  2996  00EC96  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  2997                           
  2998                           ; BSR set to: 15
  2999  00EC9A  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  3000                           
  3001                           ; BSR set to: 15
  3002  00EC9E  0EFC               	movlw	252
  3003  00ECA0  010F               	movlb	15	; () banked
  3004  00ECA2  173F               	andwf	63,f,b	;volatile
  3005  00ECA4  010F               	movlb	15	; () banked
  3006  00ECA6  813F               	bsf	63,0,b	;volatile
  3007                           
  3008                           ; BSR set to: 15
  3009  00ECA8  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  3010                           
  3011                           ; BSR set to: 15
  3012  00ECAC  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  3013                           
  3014                           ; BSR set to: 15
  3015  00ECB0  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  3016                           
  3017                           ; BSR set to: 15
  3018  00ECB4  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  3019                           
  3020                           ; BSR set to: 15
  3021  00ECB8  5009               	movf	RtccReadTime@rTD1+6,w,c
  3022  00ECBA  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  3023  00ECBC  A4D8               	btfss	status,2,c
  3024  00ECBE  D7E2               	goto	l2075
  3025                           
  3026                           ; BSR set to: 15
  3027                           
  3028                           ; BSR set to: 15
  3029  00ECC0  EE20 F003          	lfsr	2,3
  3030  00ECC4  5001               	movf	RtccReadTime@pTm,w,c
  3031  00ECC6  26D9               	addwf	fsr2l,f,c
  3032  00ECC8  5002               	movf	RtccReadTime@pTm+1,w,c
  3033  00ECCA  22DA               	addwfc	fsr2h,f,c
  3034  00ECCC  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  3035  00ECD0  EE20 F002          	lfsr	2,2
  3036  00ECD4  5001               	movf	RtccReadTime@pTm,w,c
  3037  00ECD6  26D9               	addwf	fsr2l,f,c
  3038  00ECD8  5002               	movf	RtccReadTime@pTm+1,w,c
  3039  00ECDA  22DA               	addwfc	fsr2h,f,c
  3040  00ECDC  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  3041  00ECE0  EE20 F001          	lfsr	2,1
  3042  00ECE4  5001               	movf	RtccReadTime@pTm,w,c
  3043  00ECE6  26D9               	addwf	fsr2l,f,c
  3044  00ECE8  5002               	movf	RtccReadTime@pTm+1,w,c
  3045  00ECEA  22DA               	addwfc	fsr2h,f,c
  3046  00ECEC  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  3047                           
  3048                           ; BSR set to: 15
  3049  00ECF0  0012               	return		;funcret
  3050  00ECF2                     __end_of_RtccReadTime:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           intcon	equ	0xFF2
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1l	equ	0xFE1
  3063                           indf2	equ	0xFDF
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _RtccReadDate *****************
  3069 ;; Defined at:
  3070 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  pDt             2    0[COMRAM] PTR struct .
  3073 ;;		 -> RtccDate(4), 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  rTD0            8   10[COMRAM] struct .
  3076 ;;  rTD1            8    2[COMRAM] struct .
  3077 ;; Return value:  Size  Location     Type
  3078 ;;		None               void
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3087 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3089 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3090 ;;Total ram usage:       18 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; This function calls:
  3093 ;;		Nothing
  3094 ;; This function is called by:
  3095 ;;		_Read_RTC
  3096 ;; This function uses a non-reentrant model
  3097 ;;
  3098                           
  3099                           	psect	text10
  3100  00ECF2                     __ptext10:
  3101                           	opt stack 0
  3102  00ECF2                     _RtccReadDate:
  3103                           	opt stack 28
  3104  00ECF2  0EFC               	movlw	252
  3105  00ECF4  010F               	movlb	15	; () banked
  3106  00ECF6  173F               	andwf	63,f,b	;volatile
  3107  00ECF8  0E03               	movlw	3
  3108  00ECFA  010F               	movlb	15	; () banked
  3109  00ECFC  133F               	iorwf	63,f,b	;volatile
  3110                           
  3111                           ; BSR set to: 15
  3112  00ECFE  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  3113                           
  3114                           ; BSR set to: 15
  3115  00ED02  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  3116                           
  3117                           ; BSR set to: 15
  3118  00ED06  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  3119                           
  3120                           ; BSR set to: 15
  3121  00ED0A  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  3122                           
  3123                           ; BSR set to: 15
  3124  00ED0E  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  3125                           
  3126                           ; BSR set to: 15
  3127  00ED12  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  3128  00ED16  0EFC               	movlw	252
  3129  00ED18  010F               	movlb	15	; () banked
  3130  00ED1A  173F               	andwf	63,f,b	;volatile
  3131  00ED1C  0E03               	movlw	3
  3132  00ED1E  010F               	movlb	15	; () banked
  3133  00ED20  133F               	iorwf	63,f,b	;volatile
  3134                           
  3135                           ; BSR set to: 15
  3136  00ED22  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  3137                           
  3138                           ; BSR set to: 15
  3139  00ED26  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  3140                           
  3141                           ; BSR set to: 15
  3142  00ED2A  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  3143                           
  3144                           ; BSR set to: 15
  3145  00ED2E  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  3146                           
  3147                           ; BSR set to: 15
  3148  00ED32  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  3149                           
  3150                           ; BSR set to: 15
  3151  00ED36  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  3152  00ED3A  5005               	movf	RtccReadDate@rTD1+2,w,c
  3153  00ED3C  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  3154  00ED3E  A4D8               	btfss	status,2,c
  3155  00ED40  D7D8               	goto	l2101
  3156                           
  3157                           ; BSR set to: 15
  3158                           
  3159                           ; BSR set to: 15
  3160  00ED42  EE20 F001          	lfsr	2,1
  3161  00ED46  5001               	movf	RtccReadDate@pDt,w,c
  3162  00ED48  26D9               	addwf	fsr2l,f,c
  3163  00ED4A  5002               	movf	RtccReadDate@pDt+1,w,c
  3164  00ED4C  22DA               	addwfc	fsr2h,f,c
  3165  00ED4E  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  3166  00ED52  EE20 F002          	lfsr	2,2
  3167  00ED56  5001               	movf	RtccReadDate@pDt,w,c
  3168  00ED58  26D9               	addwf	fsr2l,f,c
  3169  00ED5A  5002               	movf	RtccReadDate@pDt+1,w,c
  3170  00ED5C  22DA               	addwfc	fsr2h,f,c
  3171  00ED5E  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  3172                           
  3173                           ; BSR set to: 15
  3174  00ED62  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  3175  00ED66  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  3176  00ED6A  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  3177                           
  3178                           ; BSR set to: 15
  3179  00ED6E  EE20 F003          	lfsr	2,3
  3180  00ED72  5001               	movf	RtccReadDate@pDt,w,c
  3181  00ED74  26D9               	addwf	fsr2l,f,c
  3182  00ED76  5002               	movf	RtccReadDate@pDt+1,w,c
  3183  00ED78  22DA               	addwfc	fsr2h,f,c
  3184  00ED7A  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  3185                           
  3186                           ; BSR set to: 15
  3187  00ED7E  0012               	return		;funcret
  3188  00ED80                     __end_of_RtccReadDate:
  3189                           	opt stack 0
  3190                           tblptru	equ	0xFF8
  3191                           tblptrh	equ	0xFF7
  3192                           tblptrl	equ	0xFF6
  3193                           tablat	equ	0xFF5
  3194                           prodh	equ	0xFF4
  3195                           prodl	equ	0xFF3
  3196                           intcon	equ	0xFF2
  3197                           postinc0	equ	0xFEE
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           fsr2h	equ	0xFDA
  3203                           fsr2l	equ	0xFD9
  3204                           status	equ	0xFD8
  3205                           
  3206 ;; *************** function _Lcd_Out *****************
  3207 ;; Defined at:
  3208 ;;		line 84 in file "../lcd.h"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  y               1    wreg     unsigned char 
  3211 ;;  x               1   63[COMRAM] unsigned char 
  3212 ;;  buffer          2   64[COMRAM] PTR const unsigned char 
  3213 ;;		 -> Convert_diasem@buffer_dia(20), STR_6(21), STR_5(20), STR_4(18), 
  3214 ;;		 -> STR_3(19), buffer1(20), STR_1(18), 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  y               1   66[COMRAM] unsigned char 
  3217 ;;  data            1   67[COMRAM] unsigned char 
  3218 ;; Return value:  Size  Location     Type
  3219 ;;		None               void
  3220 ;; Registers used:
  3221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3222 ;; Tracked objects:
  3223 ;;		On entry : 0/0
  3224 ;;		On exit  : 0/0
  3225 ;;		Unchanged: 0/0
  3226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3227 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3230 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3231 ;;Total ram usage:        5 bytes
  3232 ;; Hardware stack levels used:    1
  3233 ;; Hardware stack levels required when called:    1
  3234 ;; This function calls:
  3235 ;;		_Lcd_Chr_CP
  3236 ;;		_Lcd_Cmd
  3237 ;; This function is called by:
  3238 ;;		_main
  3239 ;;		_V_Principal
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text11
  3244  00ED80                     __ptext11:
  3245                           	opt stack 0
  3246  00ED80                     _Lcd_Out:
  3247                           	opt stack 28
  3248                           
  3249                           ; BSR set to: 15
  3250                           ;incstack = 0
  3251                           ;Lcd_Out@y stored from wreg
  3252  00ED80  6E43               	movwf	Lcd_Out@y,c
  3253                           
  3254                           ;lcd.h: 86: unsigned char data;
  3255                           ;lcd.h: 87: switch (y)
  3256  00ED82  D00D               	goto	l2145
  3257  00ED84                     l2135:
  3258  00ED84  5040               	movf	Lcd_Out@x,w,c
  3259  00ED86  0F80               	addlw	128
  3260  00ED88  D008               	goto	L3
  3261  00ED8A                     l2137:
  3262  00ED8A  5040               	movf	Lcd_Out@x,w,c
  3263  00ED8C  0FC0               	addlw	192
  3264  00ED8E  D005               	goto	L3
  3265  00ED90                     l2139:
  3266  00ED90  5040               	movf	Lcd_Out@x,w,c
  3267  00ED92  0F94               	addlw	148
  3268  00ED94  D002               	goto	L3
  3269  00ED96                     l2141:
  3270  00ED96  5040               	movf	Lcd_Out@x,w,c
  3271  00ED98  0FD4               	addlw	212
  3272  00ED9A                     L3:
  3273  00ED9A  6E44               	movwf	Lcd_Out@data,c
  3274                           
  3275                           ;lcd.h: 94: }
  3276                           
  3277                           ;lcd.h: 93: default: break;
  3278  00ED9C  D00E               	goto	l2147
  3279  00ED9E                     l2145:
  3280  00ED9E  5043               	movf	Lcd_Out@y,w,c
  3281                           
  3282                           ; Switch size 1, requested type "space"
  3283                           ; Number of cases is 4, Range of values is 1 to 4
  3284                           ; switch strategies available:
  3285                           ; Name         Instructions Cycles
  3286                           ; simple_byte           13     7 (average)
  3287                           ;	Chosen strategy is simple_byte
  3288  00EDA0  0A01               	xorlw	1	; case 1
  3289  00EDA2  B4D8               	btfsc	status,2,c
  3290  00EDA4  D7EF               	goto	l2135
  3291  00EDA6  0A03               	xorlw	3	; case 2
  3292  00EDA8  B4D8               	btfsc	status,2,c
  3293  00EDAA  D7EF               	goto	l2137
  3294  00EDAC  0A01               	xorlw	1	; case 3
  3295  00EDAE  B4D8               	btfsc	status,2,c
  3296  00EDB0  D7EF               	goto	l2139
  3297  00EDB2  0A07               	xorlw	7	; case 4
  3298  00EDB4  B4D8               	btfsc	status,2,c
  3299  00EDB6  D7EF               	goto	l2141
  3300  00EDB8  D000               	goto	l2147
  3301  00EDBA                     l2147:
  3302                           
  3303                           ;lcd.h: 95: Lcd_Cmd(data);
  3304  00EDBA  5044               	movf	Lcd_Out@data,w,c
  3305  00EDBC  ECE2  F079         	call	_Lcd_Cmd
  3306                           
  3307                           ;lcd.h: 96: while(*buffer)
  3308  00EDC0  D015               	goto	l2153
  3309  00EDC2                     l2149:
  3310                           
  3311                           ;lcd.h: 97: {
  3312                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  3313  00EDC2  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3314  00EDC6  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3315  00EDCA  6AF8               	clrf	tblptru,c
  3316  00EDCC  0E0E               	movlw	(high __ramtop+-1)
  3317  00EDCE  64F7               	cpfsgt	tblptrh,c
  3318  00EDD0  D003               	bra	u1357
  3319  00EDD2  0008               	tblrd		*
  3320  00EDD4  50F5               	movf	tablat,w,c
  3321  00EDD6  D005               	bra	u1350
  3322  00EDD8                     u1357:
  3323  00EDD8  CFF6 FFD9          	movff	tblptrl,fsr2l
  3324  00EDDC  CFF7 FFDA          	movff	tblptrh,fsr2h
  3325  00EDE0  50DF               	movf	indf2,w,c
  3326  00EDE2                     u1350:
  3327  00EDE2  EC72  F07A         	call	_Lcd_Chr_CP
  3328                           
  3329                           ;lcd.h: 99: buffer++;
  3330  00EDE6  4A41               	infsnz	Lcd_Out@buffer,f,c
  3331  00EDE8  2A42               	incf	Lcd_Out@buffer+1,f,c
  3332  00EDEA  D000               	goto	l2153
  3333  00EDEC                     l2153:
  3334  00EDEC  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3335  00EDF0  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3336  00EDF4  6AF8               	clrf	tblptru,c
  3337  00EDF6  0E0E               	movlw	(high __ramtop+-1)
  3338  00EDF8  64F7               	cpfsgt	tblptrh,c
  3339  00EDFA  D003               	bra	u1367
  3340  00EDFC  0008               	tblrd		*
  3341  00EDFE  50F5               	movf	tablat,w,c
  3342  00EE00  D005               	bra	u1360
  3343  00EE02                     u1367:
  3344  00EE02  CFF6 FFD9          	movff	tblptrl,fsr2l
  3345  00EE06  CFF7 FFDA          	movff	tblptrh,fsr2h
  3346  00EE0A  50DF               	movf	indf2,w,c
  3347  00EE0C                     u1360:
  3348  00EE0C  0900               	iorlw	0
  3349  00EE0E  A4D8               	btfss	status,2,c
  3350  00EE10  D7D8               	goto	l2149
  3351                           
  3352                           ;lcd.h: 100: }
  3353                           ;lcd.h: 101: return;
  3354  00EE12  0012               	return		;funcret
  3355  00EE14                     __end_of_Lcd_Out:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1l	equ	0xFE1
  3368                           indf2	equ	0xFDF
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _Lcd_Chr_CP *****************
  3374 ;; Defined at:
  3375 ;;		line 126 in file "../lcd.h"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  data            1    wreg     unsigned char 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  data            1    2[COMRAM] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;		None               void
  3382 ;; Registers used:
  3383 ;;		wreg, status,2, status,0
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3391 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3392 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3393 ;;Total ram usage:        3 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_Lcd_Out
  3399 ;;		_Lcd_Out2
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text12
  3404  00F4E4                     __ptext12:
  3405                           	opt stack 0
  3406  00F4E4                     _Lcd_Chr_CP:
  3407                           	opt stack 28
  3408                           
  3409                           ;incstack = 0
  3410                           ;Lcd_Chr_CP@data stored from wreg
  3411  00F4E4  6E03               	movwf	Lcd_Chr_CP@data,c
  3412                           
  3413                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  3414  00F4E6  988A               	bcf	3978,4,c	;volatile
  3415  00F4E8  8A8A               	bsf	3978,5,c	;volatile
  3416                           
  3417                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  3418  00F4EA  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  3419  00F4EC  AE03               	btfss	Lcd_Chr_CP@data,7,c
  3420  00F4EE  D001               	bra	u1115
  3421  00F4F0  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  3422  00F4F2                     u1115:
  3423  00F4F2  0E01               	movlw	1
  3424  00F4F4  1601               	andwf	??_Lcd_Chr_CP,f,c
  3425  00F4F6  508A               	movf	3978,w,c	;volatile
  3426  00F4F8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3427  00F4FA  0BFE               	andlw	-2
  3428  00F4FC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3429  00F4FE  6E8A               	movwf	3978,c	;volatile
  3430  00F500  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3431  00F504  0E06               	movlw	6
  3432  00F506  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3433  00F508                     u1125:
  3434  00F508  90D8               	bcf	status,0,c
  3435  00F50A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3436  00F50C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3437  00F50E  D7FC               	goto	u1125
  3438  00F510  0E01               	movlw	1
  3439  00F512  1601               	andwf	??_Lcd_Chr_CP,f,c
  3440  00F514  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3441  00F516  508A               	movf	3978,w,c	;volatile
  3442  00F518  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3443  00F51A  0BFD               	andlw	-3
  3444  00F51C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3445  00F51E  6E8A               	movwf	3978,c	;volatile
  3446                           
  3447                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  3448  00F520  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3449  00F524  0E05               	movlw	5
  3450  00F526  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3451  00F528                     u1135:
  3452  00F528  90D8               	bcf	status,0,c
  3453  00F52A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3454  00F52C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3455  00F52E  D7FC               	goto	u1135
  3456  00F530  0E01               	movlw	1
  3457  00F532  1601               	andwf	??_Lcd_Chr_CP,f,c
  3458  00F534  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3459  00F536  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3460  00F538  508A               	movf	3978,w,c	;volatile
  3461  00F53A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3462  00F53C  0BFB               	andlw	-5
  3463  00F53E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3464  00F540  6E8A               	movwf	3978,c	;volatile
  3465  00F542  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3466  00F546  3A01               	swapf	??_Lcd_Chr_CP,f,c
  3467  00F548  0E0F               	movlw	15
  3468  00F54A  1601               	andwf	??_Lcd_Chr_CP,f,c
  3469  00F54C  0E01               	movlw	1
  3470  00F54E  1601               	andwf	??_Lcd_Chr_CP,f,c
  3471  00F550  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3472  00F552  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3473  00F554  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3474  00F556  508A               	movf	3978,w,c	;volatile
  3475  00F558  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3476  00F55A  0BF7               	andlw	-9
  3477  00F55C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3478  00F55E  6E8A               	movwf	3978,c	;volatile
  3479                           
  3480                           ;lcd.h: 130: _delay(10);
  3481  00F560  0E03               	movlw	3
  3482  00F562                     u2107:
  3483  00F562  2EE8               	decfsz	wreg,f,c
  3484  00F564  D7FE               	goto	u2107
  3485  00F566  F000               	nop	
  3486                           
  3487                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3488  00F568  888A               	bsf	3978,4,c	;volatile
  3489  00F56A  0E03               	movlw	3
  3490  00F56C                     u2117:
  3491  00F56C  2EE8               	decfsz	wreg,f,c
  3492  00F56E  D7FE               	goto	u2117
  3493  00F570  F000               	nop	
  3494  00F572  988A               	bcf	3978,4,c	;volatile
  3495                           
  3496                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  3497  00F574  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3498  00F578  90D8               	bcf	status,0,c
  3499  00F57A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3500  00F57C  90D8               	bcf	status,0,c
  3501  00F57E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3502  00F580  90D8               	bcf	status,0,c
  3503  00F582  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3504  00F584  0E01               	movlw	1
  3505  00F586  1601               	andwf	??_Lcd_Chr_CP,f,c
  3506  00F588  508A               	movf	3978,w,c	;volatile
  3507  00F58A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3508  00F58C  0BFE               	andlw	-2
  3509  00F58E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3510  00F590  6E8A               	movwf	3978,c	;volatile
  3511  00F592  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3512  00F596  90D8               	bcf	status,0,c
  3513  00F598  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3514  00F59A  90D8               	bcf	status,0,c
  3515  00F59C  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3516  00F59E  0E01               	movlw	1
  3517  00F5A0  1601               	andwf	??_Lcd_Chr_CP,f,c
  3518  00F5A2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3519  00F5A4  508A               	movf	3978,w,c	;volatile
  3520  00F5A6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3521  00F5A8  0BFD               	andlw	-3
  3522  00F5AA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3523  00F5AC  6E8A               	movwf	3978,c	;volatile
  3524                           
  3525                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  3526  00F5AE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3527  00F5B2  90D8               	bcf	status,0,c
  3528  00F5B4  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3529  00F5B6  0E01               	movlw	1
  3530  00F5B8  1601               	andwf	??_Lcd_Chr_CP,f,c
  3531  00F5BA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3532  00F5BC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3533  00F5BE  508A               	movf	3978,w,c	;volatile
  3534  00F5C0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3535  00F5C2  0BFB               	andlw	-5
  3536  00F5C4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3537  00F5C6  6E8A               	movwf	3978,c	;volatile
  3538  00F5C8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3539  00F5CC  0E01               	movlw	1
  3540  00F5CE  1601               	andwf	??_Lcd_Chr_CP,f,c
  3541  00F5D0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3542  00F5D2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3543  00F5D4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3544  00F5D6  508A               	movf	3978,w,c	;volatile
  3545  00F5D8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3546  00F5DA  0BF7               	andlw	-9
  3547  00F5DC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3548  00F5DE  6E8A               	movwf	3978,c	;volatile
  3549                           
  3550                           ;lcd.h: 134: _delay(10);
  3551  00F5E0  0E03               	movlw	3
  3552  00F5E2                     u2127:
  3553  00F5E2  2EE8               	decfsz	wreg,f,c
  3554  00F5E4  D7FE               	goto	u2127
  3555  00F5E6  F000               	nop	
  3556                           
  3557                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3558  00F5E8  888A               	bsf	3978,4,c	;volatile
  3559  00F5EA  0E03               	movlw	3
  3560  00F5EC                     u2137:
  3561  00F5EC  2EE8               	decfsz	wreg,f,c
  3562  00F5EE  D7FE               	goto	u2137
  3563  00F5F0  F000               	nop	
  3564  00F5F2  988A               	bcf	3978,4,c	;volatile
  3565                           
  3566                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  3567  00F5F4  0E03               	movlw	3
  3568  00F5F6                     u2147:
  3569  00F5F6  2EE8               	decfsz	wreg,f,c
  3570  00F5F8  D7FE               	goto	u2147
  3571  00F5FA  F000               	nop	
  3572  00F5FC  0E0F               	movlw	15
  3573  00F5FE  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  3574  00F600  0E48               	movlw	72
  3575  00F602                     u2157:
  3576  00F602  2EE8               	decfsz	wreg,f,c
  3577  00F604  D7FE               	goto	u2157
  3578  00F606  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  3579  00F608  D7FC               	goto	u2157
  3580  00F60A  0012               	return		;funcret
  3581  00F60C                     __end_of_Lcd_Chr_CP:
  3582                           	opt stack 0
  3583                           tblptru	equ	0xFF8
  3584                           tblptrh	equ	0xFF7
  3585                           tblptrl	equ	0xFF6
  3586                           tablat	equ	0xFF5
  3587                           prodh	equ	0xFF4
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           postinc0	equ	0xFEE
  3591                           wreg	equ	0xFE8
  3592                           postdec1	equ	0xFE5
  3593                           fsr1l	equ	0xFE1
  3594                           indf2	equ	0xFDF
  3595                           fsr2h	equ	0xFDA
  3596                           fsr2l	equ	0xFD9
  3597                           status	equ	0xFD8
  3598                           
  3599 ;; *************** function _Convert_diasem *****************
  3600 ;; Defined at:
  3601 ;;		line 345 in file "../main.c"
  3602 ;; Parameters:    Size  Location     Type
  3603 ;;  dia             2   39[COMRAM] int 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  buffer_dia     20   43[COMRAM] unsigned char [20]
  3606 ;; Return value:  Size  Location     Type
  3607 ;;                  2   39[COMRAM] PTR unsigned char 
  3608 ;; Registers used:
  3609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3610 ;; Tracked objects:
  3611 ;;		On entry : 0/0
  3612 ;;		On exit  : 0/0
  3613 ;;		Unchanged: 0/0
  3614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3615 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3616 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3617 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3618 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3619 ;;Total ram usage:       24 bytes
  3620 ;; Hardware stack levels used:    1
  3621 ;; Hardware stack levels required when called:    2
  3622 ;; This function calls:
  3623 ;;		_sprintf
  3624 ;; This function is called by:
  3625 ;;		_main
  3626 ;;		_V_Principal
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           	psect	text13
  3631  00F2A6                     __ptext13:
  3632                           	opt stack 0
  3633  00F2A6                     _Convert_diasem:
  3634                           	opt stack 27
  3635                           
  3636                           ;main.c: 347: unsigned char buffer_dia[20];
  3637                           ;main.c: 349: switch(dia){
  3638                           
  3639                           ;incstack = 0
  3640  00F2A6  D069               	goto	l2173
  3641  00F2A8                     l2157:
  3642                           
  3643                           ;main.c: 351: sprintf(buffer_dia,"%s", "Domingo             ");
  3644  00F2A8  0E2C               	movlw	low Convert_diasem@buffer_dia
  3645  00F2AA  6E0D               	movwf	sprintf@sp,c
  3646  00F2AC  0E00               	movlw	high Convert_diasem@buffer_dia
  3647  00F2AE  6E0E               	movwf	sprintf@sp+1,c
  3648  00F2B0  0EF4               	movlw	low STR_9
  3649  00F2B2  6E0F               	movwf	sprintf@f,c
  3650  00F2B4  0EFF               	movlw	high STR_9
  3651  00F2B6  6E10               	movwf	sprintf@f+1,c
  3652  00F2B8  0E40               	movlw	low STR_10
  3653  00F2BA  6E11               	movwf	?_sprintf+4,c
  3654  00F2BC  0EFF               	movlw	high STR_10
  3655  00F2BE  6E12               	movwf	?_sprintf+5,c
  3656  00F2C0  ECC9  F07D         	call	_sprintf	;wreg free
  3657                           
  3658                           ;main.c: 352: break;
  3659  00F2C4  D079               	goto	l2175
  3660  00F2C6                     l2159:
  3661                           
  3662                           ;main.c: 355: sprintf(buffer_dia,"%s", "Lunes               ");
  3663  00F2C6  0E2C               	movlw	low Convert_diasem@buffer_dia
  3664  00F2C8  6E0D               	movwf	sprintf@sp,c
  3665  00F2CA  0E00               	movlw	high Convert_diasem@buffer_dia
  3666  00F2CC  6E0E               	movwf	sprintf@sp+1,c
  3667  00F2CE  0EF4               	movlw	low STR_9
  3668  00F2D0  6E0F               	movwf	sprintf@f,c
  3669  00F2D2  0EFF               	movlw	high STR_9
  3670  00F2D4  6E10               	movwf	sprintf@f+1,c
  3671  00F2D6  0EEC               	movlw	low STR_12
  3672  00F2D8  6E11               	movwf	?_sprintf+4,c
  3673  00F2DA  0EFE               	movlw	high STR_12
  3674  00F2DC  6E12               	movwf	?_sprintf+5,c
  3675  00F2DE  ECC9  F07D         	call	_sprintf	;wreg free
  3676                           
  3677                           ;main.c: 356: break;
  3678  00F2E2  D06A               	goto	l2175
  3679  00F2E4                     l2161:
  3680                           
  3681                           ;main.c: 359: sprintf(buffer_dia,"%s", "Martes              ");
  3682  00F2E4  0E2C               	movlw	low Convert_diasem@buffer_dia
  3683  00F2E6  6E0D               	movwf	sprintf@sp,c
  3684  00F2E8  0E00               	movlw	high Convert_diasem@buffer_dia
  3685  00F2EA  6E0E               	movwf	sprintf@sp+1,c
  3686  00F2EC  0EF4               	movlw	low STR_9
  3687  00F2EE  6E0F               	movwf	sprintf@f,c
  3688  00F2F0  0EFF               	movlw	high STR_9
  3689  00F2F2  6E10               	movwf	sprintf@f+1,c
  3690  00F2F4  0E16               	movlw	low STR_14
  3691  00F2F6  6E11               	movwf	?_sprintf+4,c
  3692  00F2F8  0EFF               	movlw	high STR_14
  3693  00F2FA  6E12               	movwf	?_sprintf+5,c
  3694  00F2FC  ECC9  F07D         	call	_sprintf	;wreg free
  3695                           
  3696                           ;main.c: 360: break;
  3697  00F300  D05B               	goto	l2175
  3698  00F302                     l2163:
  3699                           
  3700                           ;main.c: 363: sprintf(buffer_dia,"%s", "Miercoles           ");
  3701  00F302  0E2C               	movlw	low Convert_diasem@buffer_dia
  3702  00F304  6E0D               	movwf	sprintf@sp,c
  3703  00F306  0E00               	movlw	high Convert_diasem@buffer_dia
  3704  00F308  6E0E               	movwf	sprintf@sp+1,c
  3705  00F30A  0EF4               	movlw	low STR_9
  3706  00F30C  6E0F               	movwf	sprintf@f,c
  3707  00F30E  0EFF               	movlw	high STR_9
  3708  00F310  6E10               	movwf	sprintf@f+1,c
  3709  00F312  0E6A               	movlw	low STR_16
  3710  00F314  6E11               	movwf	?_sprintf+4,c
  3711  00F316  0EFF               	movlw	high STR_16
  3712  00F318  6E12               	movwf	?_sprintf+5,c
  3713  00F31A  ECC9  F07D         	call	_sprintf	;wreg free
  3714                           
  3715                           ;main.c: 364: break;
  3716  00F31E  D04C               	goto	l2175
  3717  00F320                     l2165:
  3718                           
  3719                           ;main.c: 367: sprintf(buffer_dia,"%s", "Jueves              ");
  3720  00F320  0E2C               	movlw	low Convert_diasem@buffer_dia
  3721  00F322  6E0D               	movwf	sprintf@sp,c
  3722  00F324  0E00               	movlw	high Convert_diasem@buffer_dia
  3723  00F326  6E0E               	movwf	sprintf@sp+1,c
  3724  00F328  0EF4               	movlw	low STR_9
  3725  00F32A  6E0F               	movwf	sprintf@f,c
  3726  00F32C  0EFF               	movlw	high STR_9
  3727  00F32E  6E10               	movwf	sprintf@f+1,c
  3728  00F330  0E2B               	movlw	low STR_18
  3729  00F332  6E11               	movwf	?_sprintf+4,c
  3730  00F334  0EFF               	movlw	high STR_18
  3731  00F336  6E12               	movwf	?_sprintf+5,c
  3732  00F338  ECC9  F07D         	call	_sprintf	;wreg free
  3733                           
  3734                           ;main.c: 368: break;
  3735  00F33C  D03D               	goto	l2175
  3736  00F33E                     l2167:
  3737                           
  3738                           ;main.c: 371: sprintf(buffer_dia,"%s", "Viernes             ");
  3739  00F33E  0E2C               	movlw	low Convert_diasem@buffer_dia
  3740  00F340  6E0D               	movwf	sprintf@sp,c
  3741  00F342  0E00               	movlw	high Convert_diasem@buffer_dia
  3742  00F344  6E0E               	movwf	sprintf@sp+1,c
  3743  00F346  0EF4               	movlw	low STR_9
  3744  00F348  6E0F               	movwf	sprintf@f,c
  3745  00F34A  0EFF               	movlw	high STR_9
  3746  00F34C  6E10               	movwf	sprintf@f+1,c
  3747  00F34E  0E55               	movlw	low STR_20
  3748  00F350  6E11               	movwf	?_sprintf+4,c
  3749  00F352  0EFF               	movlw	high STR_20
  3750  00F354  6E12               	movwf	?_sprintf+5,c
  3751  00F356  ECC9  F07D         	call	_sprintf	;wreg free
  3752                           
  3753                           ;main.c: 372: break;
  3754  00F35A  D02E               	goto	l2175
  3755  00F35C                     l2169:
  3756                           
  3757                           ;main.c: 375: sprintf(buffer_dia,"%s", "Sabado              ");
  3758  00F35C  0E2C               	movlw	low Convert_diasem@buffer_dia
  3759  00F35E  6E0D               	movwf	sprintf@sp,c
  3760  00F360  0E00               	movlw	high Convert_diasem@buffer_dia
  3761  00F362  6E0E               	movwf	sprintf@sp+1,c
  3762  00F364  0EF4               	movlw	low STR_9
  3763  00F366  6E0F               	movwf	sprintf@f,c
  3764  00F368  0EFF               	movlw	high STR_9
  3765  00F36A  6E10               	movwf	sprintf@f+1,c
  3766  00F36C  0E01               	movlw	low STR_22
  3767  00F36E  6E11               	movwf	?_sprintf+4,c
  3768  00F370  0EFF               	movlw	high STR_22
  3769  00F372  6E12               	movwf	?_sprintf+5,c
  3770  00F374  ECC9  F07D         	call	_sprintf	;wreg free
  3771                           
  3772                           ;main.c: 377: }
  3773                           ;main.c: 378: }
  3774                           
  3775                           ;main.c: 376: break;
  3776  00F378  D01F               	goto	l2175
  3777  00F37A                     l2173:
  3778  00F37A  C028  F02A         	movff	Convert_diasem@dia,??_Convert_diasem
  3779  00F37E  C029  F02B         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  3780                           
  3781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3782                           ; Switch size 1, requested type "space"
  3783                           ; Number of cases is 1, Range of values is 0 to 0
  3784                           ; switch strategies available:
  3785                           ; Name         Instructions Cycles
  3786                           ; simple_byte            4     3 (average)
  3787                           ;	Chosen strategy is simple_byte
  3788  00F382  502B               	movf	??_Convert_diasem+1,w,c
  3789  00F384  0A00               	xorlw	0	; case 0
  3790  00F386  A4D8               	btfss	status,2,c
  3791  00F388  D017               	goto	l2175
  3792                           
  3793                           ; Switch size 1, requested type "space"
  3794                           ; Number of cases is 7, Range of values is 0 to 6
  3795                           ; switch strategies available:
  3796                           ; Name         Instructions Cycles
  3797                           ; simple_byte           22    12 (average)
  3798                           ;	Chosen strategy is simple_byte
  3799  00F38A  502A               	movf	??_Convert_diasem,w,c
  3800  00F38C  0A00               	xorlw	0	; case 0
  3801  00F38E  B4D8               	btfsc	status,2,c
  3802  00F390  D78B               	goto	l2157
  3803  00F392  0A01               	xorlw	1	; case 1
  3804  00F394  B4D8               	btfsc	status,2,c
  3805  00F396  D797               	goto	l2159
  3806  00F398  0A03               	xorlw	3	; case 2
  3807  00F39A  B4D8               	btfsc	status,2,c
  3808  00F39C  D7A3               	goto	l2161
  3809  00F39E  0A01               	xorlw	1	; case 3
  3810  00F3A0  B4D8               	btfsc	status,2,c
  3811  00F3A2  D7AF               	goto	l2163
  3812  00F3A4  0A07               	xorlw	7	; case 4
  3813  00F3A6  B4D8               	btfsc	status,2,c
  3814  00F3A8  D7BB               	goto	l2165
  3815  00F3AA  0A01               	xorlw	1	; case 5
  3816  00F3AC  B4D8               	btfsc	status,2,c
  3817  00F3AE  D7C7               	goto	l2167
  3818  00F3B0  0A03               	xorlw	3	; case 6
  3819  00F3B2  B4D8               	btfsc	status,2,c
  3820  00F3B4  D7D3               	goto	l2169
  3821  00F3B6  D000               	goto	l2175
  3822  00F3B8                     l2175:
  3823                           
  3824                           ;main.c: 379: return buffer_dia;
  3825  00F3B8  0E2C               	movlw	low Convert_diasem@buffer_dia
  3826  00F3BA  6E28               	movwf	?_Convert_diasem,c
  3827  00F3BC  0E00               	movlw	high Convert_diasem@buffer_dia
  3828  00F3BE  6E29               	movwf	?_Convert_diasem+1,c
  3829  00F3C0  0012               	return	
  3830  00F3C2  0012               	return		;funcret
  3831  00F3C4                     __end_of_Convert_diasem:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           prodh	equ	0xFF4
  3838                           prodl	equ	0xFF3
  3839                           intcon	equ	0xFF2
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _sprintf *****************
  3850 ;; Defined at:
  3851 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  sp              2   12[COMRAM] PTR unsigned char 
  3854 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  3855 ;;  f               2   14[COMRAM] PTR const unsigned char 
  3856 ;;		 -> STR_21(3), STR_19(3), STR_17(3), STR_15(3), 
  3857 ;;		 -> STR_13(3), STR_11(3), STR_9(3), STR_8(15), 
  3858 ;;		 -> STR_7(15), STR_2(5), 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  tmpval          4    0        struct .
  3861 ;;  width           2   36[COMRAM] int 
  3862 ;;  len             2   34[COMRAM] unsigned int 
  3863 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  3864 ;;		 -> STR_23(7), STR_22(21), STR_20(21), STR_18(21), 
  3865 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  3866 ;;  ap              2   30[COMRAM] PTR void [1]
  3867 ;;		 -> ?_sprintf(2), 
  3868 ;;  val             2   27[COMRAM] unsigned int 
  3869 ;;  c               1   38[COMRAM] char 
  3870 ;;  prec            1   29[COMRAM] char 
  3871 ;;  flag            1   26[COMRAM] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  2   12[COMRAM] int 
  3874 ;; Registers used:
  3875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3881 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3883 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3884 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3885 ;;Total ram usage:       27 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    1
  3888 ;; This function calls:
  3889 ;;		___lwdiv
  3890 ;;		___lwmod
  3891 ;;		___wmul
  3892 ;;		_isdigit
  3893 ;; This function is called by:
  3894 ;;		_main
  3895 ;;		_V_Principal
  3896 ;;		_Convert_diasem
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text14
  3901  00FB92                     __ptext14:
  3902                           	opt stack 0
  3903  00FB92                     _sprintf:
  3904                           	opt stack 29
  3905                           
  3906                           ;doprnt.c: 494: va_list ap;
  3907                           ;doprnt.c: 499: signed char c;
  3908                           ;doprnt.c: 501: int width;
  3909                           ;doprnt.c: 506: signed char prec;
  3910                           ;doprnt.c: 508: unsigned char flag;
  3911                           ;doprnt.c: 523: union {
  3912                           ;doprnt.c: 524: unsigned long vd;
  3913                           ;doprnt.c: 525: double integ;
  3914                           ;doprnt.c: 526: } tmpval;
  3915                           ;doprnt.c: 528: unsigned int val;
  3916                           ;doprnt.c: 529: unsigned len;
  3917                           ;doprnt.c: 530: const char * cp;
  3918                           ;doprnt.c: 533: *ap = __va_start();
  3919                           
  3920                           ;incstack = 0
  3921  00FB92  0E11               	movlw	low (?_sprintf+4)
  3922  00FB94  6E1F               	movwf	sprintf@ap,c
  3923  00FB96  0E00               	movlw	high (?_sprintf+4)
  3924  00FB98  6E20               	movwf	sprintf@ap+1,c
  3925                           
  3926                           ;doprnt.c: 536: while(c = *f++) {
  3927  00FB9A  D182               	goto	l2061
  3928  00FB9C                     l1945:
  3929                           
  3930                           ;doprnt.c: 538: if(c != '%')
  3931  00FB9C  0E25               	movlw	37
  3932  00FB9E  1827               	xorwf	sprintf@c,w,c
  3933  00FBA0  B4D8               	btfsc	status,2,c
  3934  00FBA2  D009               	goto	l1951
  3935                           
  3936                           ;doprnt.c: 540: {
  3937                           ;doprnt.c: 541: ((*sp++ = (c)));
  3938  00FBA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  3939  00FBA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  3940  00FBAC  C027  FFDF         	movff	sprintf@c,indf2
  3941  00FBB0  4A0D               	infsnz	sprintf@sp,f,c
  3942  00FBB2  2A0E               	incf	sprintf@sp+1,f,c
  3943                           
  3944                           ;doprnt.c: 542: continue;
  3945  00FBB4  D175               	goto	l2061
  3946  00FBB6                     l1951:
  3947                           
  3948                           ;doprnt.c: 543: }
  3949                           ;doprnt.c: 546: width = 0;
  3950  00FBB6  0E00               	movlw	0
  3951  00FBB8  6E26               	movwf	sprintf@width+1,c
  3952  00FBBA  0E00               	movlw	0
  3953  00FBBC  6E25               	movwf	sprintf@width,c
  3954                           
  3955                           ;doprnt.c: 548: flag = 0;
  3956  00FBBE  0E00               	movlw	0
  3957  00FBC0  6E1B               	movwf	sprintf@flag,c
  3958                           
  3959                           ;doprnt.c: 551: switch(*f) {
  3960                           
  3961                           ;doprnt.c: 550: for(;;) {
  3962  00FBC2  D005               	goto	l1957
  3963  00FBC4                     l1953:
  3964                           
  3965                           ;doprnt.c: 580: flag |= 0x04;
  3966  00FBC4  841B               	bsf	sprintf@flag,2,c
  3967                           
  3968                           ;doprnt.c: 581: f++;
  3969  00FBC6  4A0F               	infsnz	sprintf@f,f,c
  3970  00FBC8  2A10               	incf	sprintf@f+1,f,c
  3971                           
  3972                           ;doprnt.c: 582: continue;
  3973  00FBCA  D001               	goto	l1957
  3974                           
  3975                           ;doprnt.c: 584: }
  3976  00FBCC  D00B               	goto	l1959
  3977  00FBCE                     l1957:
  3978  00FBCE  C00F  FFF6         	movff	sprintf@f,tblptrl
  3979  00FBD2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  3980  00FBD6                     	if	0	;tblptru may be non-zero
  3981  00FBD6                     	endif
  3982  00FBD6                     	if	0	;tblptru may be non-zero
  3983  00FBD6                     	endif
  3984  00FBD6  0008               	tblrd		*
  3985  00FBD8  50F5               	movf	tablat,w,c
  3986                           
  3987                           ; Switch size 1, requested type "space"
  3988                           ; Number of cases is 1, Range of values is 48 to 48
  3989                           ; switch strategies available:
  3990                           ; Name         Instructions Cycles
  3991                           ; simple_byte            4     3 (average)
  3992                           ;	Chosen strategy is simple_byte
  3993  00FBDA  0A30               	xorlw	48	; case 48
  3994  00FBDC  B4D8               	btfsc	status,2,c
  3995  00FBDE  D7F2               	goto	l1953
  3996                           
  3997                           ;doprnt.c: 585: break;
  3998  00FBE0  D001               	goto	l1959
  3999                           
  4000                           ;doprnt.c: 586: }
  4001  00FBE2  D7F5               	goto	l1957
  4002  00FBE4                     l1959:
  4003                           
  4004                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4005  00FBE4  C00F  FFF6         	movff	sprintf@f,tblptrl
  4006  00FBE8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4007  00FBEC                     	if	0	;tblptru may be non-zero
  4008  00FBEC                     	endif
  4009  00FBEC                     	if	0	;tblptru may be non-zero
  4010  00FBEC                     	endif
  4011  00FBEC  0008               	tblrd		*
  4012  00FBEE  50F5               	movf	tablat,w,c
  4013  00FBF0  EC98  F075         	call	_isdigit
  4014  00FBF4  A0D8               	btfss	status,0,c
  4015  00FBF6  D0A2               	goto	l2009
  4016                           
  4017                           ;doprnt.c: 598: width = 0;
  4018  00FBF8  0E00               	movlw	0
  4019  00FBFA  6E26               	movwf	sprintf@width+1,c
  4020  00FBFC  0E00               	movlw	0
  4021  00FBFE  6E25               	movwf	sprintf@width,c
  4022  00FC00  D000               	goto	l1963
  4023  00FC02                     l1963:
  4024                           
  4025                           ;doprnt.c: 600: width *= 10;
  4026  00FC02  C025  F001         	movff	sprintf@width,___wmul@multiplier
  4027  00FC06  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4028  00FC0A  0E00               	movlw	0
  4029  00FC0C  6E04               	movwf	___wmul@multiplicand+1,c
  4030  00FC0E  0E0A               	movlw	10
  4031  00FC10  6E03               	movwf	___wmul@multiplicand,c
  4032  00FC12  ECA9  F075         	call	___wmul	;wreg free
  4033  00FC16  C001  F025         	movff	?___wmul,sprintf@width
  4034  00FC1A  C002  F026         	movff	?___wmul+1,sprintf@width+1
  4035                           
  4036                           ;doprnt.c: 601: width += *f++ - '0';
  4037  00FC1E  0ED0               	movlw	208
  4038  00FC20  6E17               	movwf	??_sprintf& (0+255),c
  4039  00FC22  0EFF               	movlw	255
  4040  00FC24  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4041  00FC26  C00F  FFF6         	movff	sprintf@f,tblptrl
  4042  00FC2A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4043  00FC2E                     	if	0	;tblptru may be non-zero
  4044  00FC2E                     	endif
  4045  00FC2E                     	if	0	;tblptru may be non-zero
  4046  00FC2E                     	endif
  4047  00FC2E  0008               	tblrd		*
  4048  00FC30  50F5               	movf	tablat,w,c
  4049  00FC32  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4050  00FC34  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4051  00FC36  5017               	movf	??_sprintf,w,c
  4052  00FC38  2619               	addwf	??_sprintf+2,f,c
  4053  00FC3A  5018               	movf	??_sprintf+1,w,c
  4054  00FC3C  221A               	addwfc	??_sprintf+3,f,c
  4055  00FC3E  5019               	movf	??_sprintf+2,w,c
  4056  00FC40  2625               	addwf	sprintf@width,f,c
  4057  00FC42  501A               	movf	??_sprintf+3,w,c
  4058  00FC44  2226               	addwfc	sprintf@width+1,f,c
  4059  00FC46  4A0F               	infsnz	sprintf@f,f,c
  4060  00FC48  2A10               	incf	sprintf@f+1,f,c
  4061                           
  4062                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4063  00FC4A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4064  00FC4E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4065  00FC52                     	if	0	;tblptru may be non-zero
  4066  00FC52                     	endif
  4067  00FC52                     	if	0	;tblptru may be non-zero
  4068  00FC52                     	endif
  4069  00FC52  0008               	tblrd		*
  4070  00FC54  50F5               	movf	tablat,w,c
  4071  00FC56  EC98  F075         	call	_isdigit
  4072  00FC5A  A0D8               	btfss	status,0,c
  4073  00FC5C  D06F               	goto	l2009
  4074  00FC5E  D7D1               	goto	l1963
  4075                           
  4076                           ;doprnt.c: 608: }
  4077                           ;doprnt.c: 635: switch(c = *f++) {
  4078  00FC60  D06D               	goto	l2009
  4079                           
  4080                           ;doprnt.c: 638: goto alldone;
  4081                           
  4082                           ;doprnt.c: 637: case 0:
  4083  00FC62  D12C               	goto	l2063
  4084  00FC64                     l1971:
  4085                           
  4086                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4087  00FC64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4088  00FC68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4089  00FC6C  CFDE F021          	movff	postinc2,sprintf@cp
  4090  00FC70  CFDD F022          	movff	postdec2,sprintf@cp+1
  4091  00FC74  0E02               	movlw	2
  4092  00FC76  261F               	addwf	sprintf@ap,f,c
  4093  00FC78  0E00               	movlw	0
  4094  00FC7A  2220               	addwfc	sprintf@ap+1,f,c
  4095                           
  4096                           ;doprnt.c: 740: if(!cp)
  4097  00FC7C  5021               	movf	sprintf@cp,w,c
  4098  00FC7E  1022               	iorwf	sprintf@cp+1,w,c
  4099  00FC80  A4D8               	btfss	status,2,c
  4100  00FC82  D005               	goto	l1979
  4101                           
  4102                           ;doprnt.c: 741: cp = "(null)";
  4103  00FC84  0EE8               	movlw	low STR_23
  4104  00FC86  6E21               	movwf	sprintf@cp,c
  4105  00FC88  0EFF               	movlw	high STR_23
  4106  00FC8A  6E22               	movwf	sprintf@cp+1,c
  4107  00FC8C  D000               	goto	l1979
  4108  00FC8E                     l1979:
  4109                           
  4110                           ;doprnt.c: 745: len = 0;
  4111  00FC8E  0E00               	movlw	0
  4112  00FC90  6E24               	movwf	sprintf@len+1,c
  4113  00FC92  0E00               	movlw	0
  4114  00FC94  6E23               	movwf	sprintf@len,c
  4115                           
  4116                           ;doprnt.c: 746: while(cp[len])
  4117  00FC96  D003               	goto	l1983
  4118  00FC98                     l1981:
  4119                           
  4120                           ;doprnt.c: 747: len++;
  4121  00FC98  4A23               	infsnz	sprintf@len,f,c
  4122  00FC9A  2A24               	incf	sprintf@len+1,f,c
  4123  00FC9C  D000               	goto	l1983
  4124  00FC9E                     l1983:
  4125  00FC9E  5023               	movf	sprintf@len,w,c
  4126  00FCA0  2421               	addwf	sprintf@cp,w,c
  4127  00FCA2  6E17               	movwf	??_sprintf& (0+255),c
  4128  00FCA4  5024               	movf	sprintf@len+1,w,c
  4129  00FCA6  2022               	addwfc	sprintf@cp+1,w,c
  4130  00FCA8  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4131  00FCAA  C017  FFF6         	movff	??_sprintf,tblptrl
  4132  00FCAE  C018  FFF7         	movff	??_sprintf+1,tblptrh
  4133  00FCB2                     	if	0	;tblptru may be non-zero
  4134  00FCB2                     	endif
  4135  00FCB2                     	if	0	;tblptru may be non-zero
  4136  00FCB2                     	endif
  4137  00FCB2  0008               	tblrd		*
  4138  00FCB4  50F5               	movf	tablat,w,c
  4139  00FCB6  0900               	iorlw	0
  4140  00FCB8  A4D8               	btfss	status,2,c
  4141  00FCBA  D7EE               	goto	l1981
  4142                           
  4143                           ;doprnt.c: 757: if(width > len)
  4144  00FCBC  5025               	movf	sprintf@width,w,c
  4145  00FCBE  5C23               	subwf	sprintf@len,w,c
  4146  00FCC0  5026               	movf	sprintf@width+1,w,c
  4147  00FCC2  5824               	subwfb	sprintf@len+1,w,c
  4148  00FCC4  B0D8               	btfsc	status,0,c
  4149  00FCC6  D005               	goto	l1989
  4150                           
  4151                           ;doprnt.c: 758: width -= len;
  4152  00FCC8  5023               	movf	sprintf@len,w,c
  4153  00FCCA  5E25               	subwf	sprintf@width,f,c
  4154  00FCCC  5024               	movf	sprintf@len+1,w,c
  4155  00FCCE  5A26               	subwfb	sprintf@width+1,f,c
  4156  00FCD0  D00E               	goto	l1995
  4157  00FCD2                     l1989:
  4158                           
  4159                           ;doprnt.c: 759: else
  4160                           ;doprnt.c: 760: width = 0;
  4161  00FCD2  0E00               	movlw	0
  4162  00FCD4  6E26               	movwf	sprintf@width+1,c
  4163  00FCD6  0E00               	movlw	0
  4164  00FCD8  6E25               	movwf	sprintf@width,c
  4165                           
  4166                           ;doprnt.c: 764: while(width--)
  4167  00FCDA  D009               	goto	l1995
  4168  00FCDC                     l1991:
  4169                           
  4170                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4171  00FCDC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4172  00FCE0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4173  00FCE4  0E20               	movlw	32
  4174  00FCE6  6EDF               	movwf	indf2,c
  4175  00FCE8  4A0D               	infsnz	sprintf@sp,f,c
  4176  00FCEA  2A0E               	incf	sprintf@sp+1,f,c
  4177  00FCEC  D000               	goto	l1995
  4178  00FCEE                     l1995:
  4179  00FCEE  0625               	decf	sprintf@width,f,c
  4180  00FCF0  A0D8               	btfss	status,0,c
  4181  00FCF2  0626               	decf	sprintf@width+1,f,c
  4182  00FCF4  2825               	incf	sprintf@width,w,c
  4183  00FCF6  E1F2               	bnz	l1991
  4184  00FCF8  2826               	incf	sprintf@width+1,w,c
  4185  00FCFA  B4D8               	btfsc	status,2,c
  4186  00FCFC  D012               	goto	l2003
  4187  00FCFE  D7EE               	goto	l1991
  4188                           
  4189                           ;doprnt.c: 767: while(len--)
  4190  00FD00  D010               	goto	l2003
  4191  00FD02                     l1997:
  4192                           
  4193                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4194  00FD02  C021  FFF6         	movff	sprintf@cp,tblptrl
  4195  00FD06  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  4196  00FD0A                     	if	0	;tblptru may be non-zero
  4197  00FD0A                     	endif
  4198  00FD0A                     	if	0	;tblptru may be non-zero
  4199  00FD0A                     	endif
  4200  00FD0A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4201  00FD0E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4202  00FD12  0008               	tblrd		*
  4203  00FD14  CFF5 FFDF          	movff	tablat,indf2
  4204  00FD18  4A21               	infsnz	sprintf@cp,f,c
  4205  00FD1A  2A22               	incf	sprintf@cp+1,f,c
  4206  00FD1C  4A0D               	infsnz	sprintf@sp,f,c
  4207  00FD1E  2A0E               	incf	sprintf@sp+1,f,c
  4208  00FD20  D000               	goto	l2003
  4209  00FD22                     l2003:
  4210  00FD22  0623               	decf	sprintf@len,f,c
  4211  00FD24  A0D8               	btfss	status,0,c
  4212  00FD26  0624               	decf	sprintf@len+1,f,c
  4213  00FD28  2823               	incf	sprintf@len,w,c
  4214  00FD2A  E1EB               	bnz	l1997
  4215  00FD2C  2824               	incf	sprintf@len+1,w,c
  4216  00FD2E  B4D8               	btfsc	status,2,c
  4217  00FD30  D0B7               	goto	l2061
  4218  00FD32  D7E7               	goto	l1997
  4219                           
  4220                           ;doprnt.c: 813: continue;
  4221                           
  4222                           ;doprnt.c: 802: default:
  4223                           
  4224                           ;doprnt.c: 774: continue;
  4225  00FD34  D0B5               	goto	l2061
  4226  00FD36                     l2005:
  4227                           
  4228                           ;doprnt.c: 818: flag |= 0xC0;
  4229  00FD36  0EC0               	movlw	192
  4230  00FD38  121B               	iorwf	sprintf@flag,f,c
  4231                           
  4232                           ;doprnt.c: 822: }
  4233                           
  4234                           ;doprnt.c: 819: break;
  4235  00FD3A  D014               	goto	l2011
  4236  00FD3C                     l2009:
  4237  00FD3C  C00F  FFF6         	movff	sprintf@f,tblptrl
  4238  00FD40  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4239  00FD44  4A0F               	infsnz	sprintf@f,f,c
  4240  00FD46  2A10               	incf	sprintf@f+1,f,c
  4241  00FD48                     	if	0	;tblptru may be non-zero
  4242  00FD48                     	endif
  4243  00FD48                     	if	0	;tblptru may be non-zero
  4244  00FD48                     	endif
  4245  00FD48  0008               	tblrd		*
  4246  00FD4A  CFF5 F027          	movff	tablat,sprintf@c
  4247  00FD4E  5027               	movf	sprintf@c,w,c
  4248                           
  4249                           ; Switch size 1, requested type "space"
  4250                           ; Number of cases is 3, Range of values is 0 to 117
  4251                           ; switch strategies available:
  4252                           ; Name         Instructions Cycles
  4253                           ; simple_byte           10     6 (average)
  4254                           ;	Chosen strategy is simple_byte
  4255  00FD50  0A00               	xorlw	0	; case 0
  4256  00FD52  B4D8               	btfsc	status,2,c
  4257  00FD54  D0B3               	goto	l2063
  4258  00FD56  0A73               	xorlw	115	; case 115
  4259  00FD58  B4D8               	btfsc	status,2,c
  4260  00FD5A  D784               	goto	l1971
  4261  00FD5C  0A06               	xorlw	6	; case 117
  4262  00FD5E  B4D8               	btfsc	status,2,c
  4263  00FD60  D7EA               	goto	l2005
  4264  00FD62  D09E               	goto	l2061
  4265  00FD64                     l2011:
  4266                           
  4267                           ;doprnt.c: 1273: {
  4268                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4269  00FD64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4270  00FD68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4271  00FD6C  CFDE F01C          	movff	postinc2,sprintf@val
  4272  00FD70  CFDD F01D          	movff	postdec2,sprintf@val+1
  4273  00FD74  0E02               	movlw	2
  4274  00FD76  261F               	addwf	sprintf@ap,f,c
  4275  00FD78  0E00               	movlw	0
  4276  00FD7A  2220               	addwfc	sprintf@ap+1,f,c
  4277                           
  4278                           ;doprnt.c: 1287: }
  4279                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4280  00FD7C  0E01               	movlw	1
  4281  00FD7E  6E27               	movwf	sprintf@c,c
  4282  00FD80                     l2017:
  4283  00FD80  0E05               	movlw	5
  4284  00FD82  1827               	xorwf	sprintf@c,w,c
  4285  00FD84  B4D8               	btfsc	status,2,c
  4286  00FD86  D016               	goto	l2029
  4287  00FD88  D001               	goto	l2021
  4288  00FD8A  D014               	goto	l2029
  4289  00FD8C                     l2021:
  4290                           
  4291                           ;doprnt.c: 1306: if(val < dpowers[c])
  4292  00FD8C  5027               	movf	sprintf@c,w,c
  4293  00FD8E  0D02               	mullw	2
  4294  00FD90  0ECD               	movlw	low _dpowers
  4295  00FD92  24F3               	addwf	prodl,w,c
  4296  00FD94  6EF6               	movwf	tblptrl,c
  4297  00FD96  0EFE               	movlw	high _dpowers
  4298  00FD98  20F4               	addwfc	prodh,w,c
  4299  00FD9A  6EF7               	movwf	tblptrh,c
  4300  00FD9C                     	if	0	;There are less than 3 active tblptr bytes
  4301  00FD9C                     	endif
  4302  00FD9C  0009               	tblrd		*+
  4303  00FD9E  50F5               	movf	tablat,w,c
  4304  00FDA0  5C1C               	subwf	sprintf@val,w,c
  4305  00FDA2  0009               	tblrd		*+
  4306  00FDA4  50F5               	movf	tablat,w,c
  4307  00FDA6  581D               	subwfb	sprintf@val+1,w,c
  4308  00FDA8  A0D8               	btfss	status,0,c
  4309  00FDAA  D004               	goto	l2029
  4310  00FDAC  D001               	goto	l2025
  4311                           
  4312                           ;doprnt.c: 1307: break;
  4313  00FDAE  D002               	goto	l2029
  4314  00FDB0                     l2025:
  4315  00FDB0  2A27               	incf	sprintf@c,f,c
  4316  00FDB2  D7E6               	goto	l2017
  4317  00FDB4                     l2029:
  4318                           
  4319                           ;doprnt.c: 1381: if(width > c)
  4320  00FDB4  0E80               	movlw	128
  4321  00FDB6  BE27               	btfsc	sprintf@c,7,c
  4322  00FDB8  0E7F               	movlw	127
  4323  00FDBA  6E17               	movwf	??_sprintf& (0+255),c
  4324  00FDBC  5025               	movf	sprintf@width,w,c
  4325  00FDBE  5C27               	subwf	sprintf@c,w,c
  4326  00FDC0  5026               	movf	sprintf@width+1,w,c
  4327  00FDC2  0A80               	xorlw	128
  4328  00FDC4  5817               	subwfb	??_sprintf& (0+255),w,c
  4329  00FDC6  B0D8               	btfsc	status,0,c
  4330  00FDC8  D007               	goto	l2033
  4331                           
  4332                           ;doprnt.c: 1382: width -= c;
  4333  00FDCA  5027               	movf	sprintf@c,w,c
  4334  00FDCC  5E25               	subwf	sprintf@width,f,c
  4335  00FDCE  0E00               	movlw	0
  4336  00FDD0  BE27               	btfsc	sprintf@c,7,c
  4337  00FDD2  0EFF               	movlw	255
  4338  00FDD4  5A26               	subwfb	sprintf@width+1,f,c
  4339  00FDD6  D005               	goto	l2035
  4340  00FDD8                     l2033:
  4341                           
  4342                           ;doprnt.c: 1383: else
  4343                           ;doprnt.c: 1384: width = 0;
  4344  00FDD8  0E00               	movlw	0
  4345  00FDDA  6E26               	movwf	sprintf@width+1,c
  4346  00FDDC  0E00               	movlw	0
  4347  00FDDE  6E25               	movwf	sprintf@width,c
  4348  00FDE0  D000               	goto	l2035
  4349  00FDE2                     l2035:
  4350                           
  4351                           ;doprnt.c: 1387: if(flag & 0x04) {
  4352  00FDE2  A41B               	btfss	sprintf@flag,2,c
  4353  00FDE4  D015               	goto	l2045
  4354                           
  4355                           ;doprnt.c: 1415: if(width)
  4356  00FDE6  5025               	movf	sprintf@width,w,c
  4357  00FDE8  1026               	iorwf	sprintf@width+1,w,c
  4358  00FDEA  B4D8               	btfsc	status,2,c
  4359  00FDEC  D026               	goto	l281
  4360  00FDEE                     l2039:
  4361                           
  4362                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4363  00FDEE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4364  00FDF2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4365  00FDF6  0E30               	movlw	48
  4366  00FDF8  6EDF               	movwf	indf2,c
  4367  00FDFA  4A0D               	infsnz	sprintf@sp,f,c
  4368  00FDFC  2A0E               	incf	sprintf@sp+1,f,c
  4369                           
  4370                           ;doprnt.c: 1418: while(--width);
  4371  00FDFE  0625               	decf	sprintf@width,f,c
  4372  00FE00  A0D8               	btfss	status,0,c
  4373  00FE02  0626               	decf	sprintf@width+1,f,c
  4374  00FE04  5025               	movf	sprintf@width,w,c
  4375  00FE06  1026               	iorwf	sprintf@width+1,w,c
  4376  00FE08  B4D8               	btfsc	status,2,c
  4377  00FE0A  D017               	goto	l281
  4378  00FE0C  D7F0               	goto	l2039
  4379                           
  4380                           ;doprnt.c: 1420: } else
  4381  00FE0E  D015               	goto	l281
  4382  00FE10                     l2045:
  4383                           
  4384                           ;doprnt.c: 1422: {
  4385                           ;doprnt.c: 1424: if(width
  4386                           ;doprnt.c: 1428: )
  4387  00FE10  5025               	movf	sprintf@width,w,c
  4388  00FE12  1026               	iorwf	sprintf@width+1,w,c
  4389  00FE14  B4D8               	btfsc	status,2,c
  4390  00FE16  D011               	goto	l281
  4391  00FE18                     l2047:
  4392                           
  4393                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4394  00FE18  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4395  00FE1C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4396  00FE20  0E20               	movlw	32
  4397  00FE22  6EDF               	movwf	indf2,c
  4398  00FE24  4A0D               	infsnz	sprintf@sp,f,c
  4399  00FE26  2A0E               	incf	sprintf@sp+1,f,c
  4400                           
  4401                           ;doprnt.c: 1431: while(--width);
  4402  00FE28  0625               	decf	sprintf@width,f,c
  4403  00FE2A  A0D8               	btfss	status,0,c
  4404  00FE2C  0626               	decf	sprintf@width+1,f,c
  4405  00FE2E  5025               	movf	sprintf@width,w,c
  4406  00FE30  1026               	iorwf	sprintf@width+1,w,c
  4407  00FE32  B4D8               	btfsc	status,2,c
  4408  00FE34  D002               	goto	l281
  4409  00FE36  D7F0               	goto	l2047
  4410  00FE38  D000               	goto	l281
  4411  00FE3A                     l281:
  4412                           
  4413                           ;doprnt.c: 1469: }
  4414                           ;doprnt.c: 1472: prec = c;
  4415  00FE3A  C027  F01E         	movff	sprintf@c,sprintf@prec
  4416                           
  4417                           ;doprnt.c: 1474: while(prec--) {
  4418  00FE3E  D02A               	goto	l2059
  4419  00FE40                     l2053:
  4420                           
  4421                           ;doprnt.c: 1478: {
  4422                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4423  00FE40  501E               	movf	sprintf@prec,w,c
  4424  00FE42  0D02               	mullw	2
  4425  00FE44  0ECD               	movlw	low _dpowers
  4426  00FE46  24F3               	addwf	prodl,w,c
  4427  00FE48  6EF6               	movwf	tblptrl,c
  4428  00FE4A  0EFE               	movlw	high _dpowers
  4429  00FE4C  20F4               	addwfc	prodh,w,c
  4430  00FE4E  6EF7               	movwf	tblptrh,c
  4431  00FE50                     	if	0	;There are less than 3 active tblptr bytes
  4432  00FE50                     	endif
  4433  00FE50  0009               	tblrd		*+
  4434  00FE52  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4435  00FE56  000A               	tblrd		*-
  4436  00FE58  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4437  00FE5C  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  4438  00FE60  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  4439  00FE64  ECE3  F075         	call	___lwdiv	;wreg free
  4440  00FE68  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4441  00FE6C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4442  00FE70  0E00               	movlw	0
  4443  00FE72  6E0B               	movwf	___lwmod@divisor+1,c
  4444  00FE74  0E0A               	movlw	10
  4445  00FE76  6E0A               	movwf	___lwmod@divisor,c
  4446  00FE78  ECBD  F075         	call	___lwmod	;wreg free
  4447  00FE7C  5008               	movf	?___lwmod,w,c
  4448  00FE7E  0F30               	addlw	48
  4449  00FE80  6E27               	movwf	sprintf@c,c
  4450                           
  4451                           ;doprnt.c: 1523: }
  4452                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4453  00FE82  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4454  00FE86  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4455  00FE8A  C027  FFDF         	movff	sprintf@c,indf2
  4456  00FE8E  4A0D               	infsnz	sprintf@sp,f,c
  4457  00FE90  2A0E               	incf	sprintf@sp+1,f,c
  4458  00FE92  D000               	goto	l2059
  4459  00FE94                     l2059:
  4460  00FE94  061E               	decf	sprintf@prec,f,c
  4461  00FE96  281E               	incf	sprintf@prec,w,c
  4462  00FE98  B4D8               	btfsc	status,2,c
  4463  00FE9A  D002               	goto	l2061
  4464  00FE9C  D7D1               	goto	l2053
  4465  00FE9E  D000               	goto	l2061
  4466  00FEA0                     l2061:
  4467  00FEA0  C00F  FFF6         	movff	sprintf@f,tblptrl
  4468  00FEA4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4469  00FEA8  4A0F               	infsnz	sprintf@f,f,c
  4470  00FEAA  2A10               	incf	sprintf@f+1,f,c
  4471  00FEAC                     	if	0	;tblptru may be non-zero
  4472  00FEAC                     	endif
  4473  00FEAC                     	if	0	;tblptru may be non-zero
  4474  00FEAC                     	endif
  4475  00FEAC  0008               	tblrd		*
  4476  00FEAE  CFF5 F027          	movff	tablat,sprintf@c
  4477  00FEB2  5027               	movf	sprintf@c,w,c
  4478  00FEB4  B4D8               	btfsc	status,2,c
  4479  00FEB6  D002               	goto	l2063
  4480  00FEB8  D671               	goto	l1945
  4481  00FEBA  D000               	goto	l2063
  4482  00FEBC                     l2063:
  4483                           
  4484                           ;doprnt.c: 1538: *sp = 0;
  4485  00FEBC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4486  00FEC0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4487  00FEC4  0E00               	movlw	0
  4488  00FEC6  6EDF               	movwf	indf2,c
  4489  00FEC8  0012               	return	
  4490                           
  4491                           ;doprnt.c: 1540: return 0;
  4492                           ;	Return value of _sprintf is never used
  4493  00FECA  0012               	return		;funcret
  4494  00FECC                     __end_of_sprintf:
  4495                           	opt stack 0
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           intcon	equ	0xFF2
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           postdec1	equ	0xFE5
  4506                           fsr1l	equ	0xFE1
  4507                           indf2	equ	0xFDF
  4508                           postinc2	equ	0xFDE
  4509                           postdec2	equ	0xFDD
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _isdigit *****************
  4515 ;; Defined at:
  4516 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;  c               1    wreg     unsigned char 
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;  c               1    2[COMRAM] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4531 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4533 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4534 ;;Total ram usage:        3 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_sprintf
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text15
  4544  00EB30                     __ptext15:
  4545                           	opt stack 0
  4546  00EB30                     _isdigit:
  4547                           	opt stack 29
  4548                           
  4549                           ;incstack = 0
  4550                           ;isdigit@c stored from wreg
  4551  00EB30  6E03               	movwf	isdigit@c,c
  4552  00EB32  0E00               	movlw	0
  4553  00EB34  6E02               	movwf	_isdigit$2061,c
  4554  00EB36  0E3A               	movlw	58
  4555  00EB38  6003               	cpfslt	isdigit@c,c
  4556  00EB3A  D006               	goto	l1849
  4557  00EB3C  0E2F               	movlw	47
  4558  00EB3E  6403               	cpfsgt	isdigit@c,c
  4559  00EB40  D003               	goto	l1849
  4560  00EB42  0E01               	movlw	1
  4561  00EB44  6E02               	movwf	_isdigit$2061,c
  4562  00EB46  D000               	goto	l1849
  4563  00EB48                     l1849:
  4564  00EB48  C002  F001         	movff	_isdigit$2061,??_isdigit
  4565  00EB4C  3001               	rrcf	??_isdigit,w,c
  4566  00EB4E  0012               	return	
  4567  00EB50  0012               	return		;funcret
  4568  00EB52                     __end_of_isdigit:
  4569                           	opt stack 0
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           intcon	equ	0xFF2
  4577                           postinc0	equ	0xFEE
  4578                           wreg	equ	0xFE8
  4579                           postdec1	equ	0xFE5
  4580                           fsr1l	equ	0xFE1
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           fsr2h	equ	0xFDA
  4585                           fsr2l	equ	0xFD9
  4586                           status	equ	0xFD8
  4587                           
  4588 ;; *************** function ___wmul *****************
  4589 ;; Defined at:
  4590 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4591 ;; Parameters:    Size  Location     Type
  4592 ;;  multiplier      2    0[COMRAM] unsigned int 
  4593 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  product         2    4[COMRAM] unsigned int 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2    0[COMRAM] unsigned int 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0, prodl, prodh
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4606 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4608 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4609 ;;Total ram usage:        6 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; This function calls:
  4612 ;;		Nothing
  4613 ;; This function is called by:
  4614 ;;		_sprintf
  4615 ;; This function uses a non-reentrant model
  4616 ;;
  4617                           
  4618                           	psect	text16
  4619  00EB52                     __ptext16:
  4620                           	opt stack 0
  4621  00EB52                     ___wmul:
  4622                           	opt stack 29
  4623                           
  4624                           ;incstack = 0
  4625  00EB52  5001               	movf	___wmul@multiplier,w,c
  4626  00EB54  0203               	mulwf	___wmul@multiplicand,c
  4627  00EB56  CFF3 F005          	movff	prodl,___wmul@product
  4628  00EB5A  CFF4 F006          	movff	prodh,___wmul@product+1
  4629  00EB5E  5001               	movf	___wmul@multiplier,w,c
  4630  00EB60  0204               	mulwf	___wmul@multiplicand+1,c
  4631  00EB62  50F3               	movf	prodl,w,c
  4632  00EB64  2606               	addwf	___wmul@product+1,f,c
  4633  00EB66  5002               	movf	___wmul@multiplier+1,w,c
  4634  00EB68  0203               	mulwf	___wmul@multiplicand,c
  4635  00EB6A  50F3               	movf	prodl,w,c
  4636  00EB6C  2606               	addwf	___wmul@product+1,f,c
  4637  00EB6E  C005  F001         	movff	___wmul@product,?___wmul
  4638  00EB72  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4639  00EB76  0012               	return	
  4640  00EB78  0012               	return		;funcret
  4641  00EB7A                     __end_of___wmul:
  4642                           	opt stack 0
  4643                           tblptru	equ	0xFF8
  4644                           tblptrh	equ	0xFF7
  4645                           tblptrl	equ	0xFF6
  4646                           tablat	equ	0xFF5
  4647                           prodh	equ	0xFF4
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           postinc0	equ	0xFEE
  4651                           wreg	equ	0xFE8
  4652                           postdec1	equ	0xFE5
  4653                           fsr1l	equ	0xFE1
  4654                           indf2	equ	0xFDF
  4655                           postinc2	equ	0xFDE
  4656                           postdec2	equ	0xFDD
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function ___lwmod *****************
  4662 ;; Defined at:
  4663 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  dividend        2    7[COMRAM] unsigned int 
  4666 ;;  divisor         2    9[COMRAM] unsigned int 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  counter         1   11[COMRAM] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  2    7[COMRAM] unsigned int 
  4671 ;; Registers used:
  4672 ;;		wreg, status,2, status,0
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4678 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4681 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4682 ;;Total ram usage:        5 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; This function calls:
  4685 ;;		Nothing
  4686 ;; This function is called by:
  4687 ;;		_sprintf
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text17
  4692  00EB7A                     __ptext17:
  4693                           	opt stack 0
  4694  00EB7A                     ___lwmod:
  4695                           	opt stack 29
  4696                           
  4697                           ;incstack = 0
  4698  00EB7A  500A               	movf	___lwmod@divisor,w,c
  4699  00EB7C  100B               	iorwf	___lwmod@divisor+1,w,c
  4700  00EB7E  B4D8               	btfsc	status,2,c
  4701  00EB80  D01D               	goto	l914
  4702  00EB82  0E01               	movlw	1
  4703  00EB84  6E0C               	movwf	___lwmod@counter,c
  4704  00EB86  D005               	goto	l1887
  4705  00EB88                     l1885:
  4706  00EB88  90D8               	bcf	status,0,c
  4707  00EB8A  360A               	rlcf	___lwmod@divisor,f,c
  4708  00EB8C  360B               	rlcf	___lwmod@divisor+1,f,c
  4709  00EB8E  2A0C               	incf	___lwmod@counter,f,c
  4710  00EB90  D000               	goto	l1887
  4711  00EB92                     l1887:
  4712  00EB92  BE0B               	btfsc	___lwmod@divisor+1,7,c
  4713  00EB94  D002               	goto	l1889
  4714  00EB96  D7F8               	goto	l1885
  4715  00EB98  D000               	goto	l1889
  4716  00EB9A                     l1889:
  4717  00EB9A  500A               	movf	___lwmod@divisor,w,c
  4718  00EB9C  5C08               	subwf	___lwmod@dividend,w,c
  4719  00EB9E  500B               	movf	___lwmod@divisor+1,w,c
  4720  00EBA0  5809               	subwfb	___lwmod@dividend+1,w,c
  4721  00EBA2  A0D8               	btfss	status,0,c
  4722  00EBA4  D005               	goto	l1893
  4723  00EBA6  500A               	movf	___lwmod@divisor,w,c
  4724  00EBA8  5E08               	subwf	___lwmod@dividend,f,c
  4725  00EBAA  500B               	movf	___lwmod@divisor+1,w,c
  4726  00EBAC  5A09               	subwfb	___lwmod@dividend+1,f,c
  4727  00EBAE  D000               	goto	l1893
  4728  00EBB0                     l1893:
  4729  00EBB0  90D8               	bcf	status,0,c
  4730  00EBB2  320B               	rrcf	___lwmod@divisor+1,f,c
  4731  00EBB4  320A               	rrcf	___lwmod@divisor,f,c
  4732  00EBB6  2E0C               	decfsz	___lwmod@counter,f,c
  4733  00EBB8  D7F0               	goto	l1889
  4734  00EBBA  D000               	goto	l914
  4735  00EBBC                     l914:
  4736  00EBBC  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4737  00EBC0  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4738  00EBC4  0012               	return		;funcret
  4739  00EBC6                     __end_of___lwmod:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           postdec1	equ	0xFE5
  4751                           fsr1l	equ	0xFE1
  4752                           indf2	equ	0xFDF
  4753                           postinc2	equ	0xFDE
  4754                           postdec2	equ	0xFDD
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function ___lwdiv *****************
  4760 ;; Defined at:
  4761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;  dividend        2    0[COMRAM] unsigned int 
  4764 ;;  divisor         2    2[COMRAM] unsigned int 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  quotient        2    4[COMRAM] unsigned int 
  4767 ;;  counter         1    6[COMRAM] unsigned char 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  2    0[COMRAM] unsigned int 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2, status,0
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4778 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4780 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4781 ;;Total ram usage:        7 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_sprintf
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text18
  4791  00EBC6                     __ptext18:
  4792                           	opt stack 0
  4793  00EBC6                     ___lwdiv:
  4794                           	opt stack 29
  4795                           
  4796                           ;incstack = 0
  4797  00EBC6  0E00               	movlw	0
  4798  00EBC8  6E06               	movwf	___lwdiv@quotient+1,c
  4799  00EBCA  0E00               	movlw	0
  4800  00EBCC  6E05               	movwf	___lwdiv@quotient,c
  4801  00EBCE  5003               	movf	___lwdiv@divisor,w,c
  4802  00EBD0  1004               	iorwf	___lwdiv@divisor+1,w,c
  4803  00EBD2  B4D8               	btfsc	status,2,c
  4804  00EBD4  D021               	goto	l904
  4805  00EBD6  0E01               	movlw	1
  4806  00EBD8  6E07               	movwf	___lwdiv@counter,c
  4807  00EBDA  D005               	goto	l1867
  4808  00EBDC                     l1865:
  4809  00EBDC  90D8               	bcf	status,0,c
  4810  00EBDE  3603               	rlcf	___lwdiv@divisor,f,c
  4811  00EBE0  3604               	rlcf	___lwdiv@divisor+1,f,c
  4812  00EBE2  2A07               	incf	___lwdiv@counter,f,c
  4813  00EBE4  D000               	goto	l1867
  4814  00EBE6                     l1867:
  4815  00EBE6  BE04               	btfsc	___lwdiv@divisor+1,7,c
  4816  00EBE8  D002               	goto	l1869
  4817  00EBEA  D7F8               	goto	l1865
  4818  00EBEC  D000               	goto	l1869
  4819  00EBEE                     l1869:
  4820  00EBEE  90D8               	bcf	status,0,c
  4821  00EBF0  3605               	rlcf	___lwdiv@quotient,f,c
  4822  00EBF2  3606               	rlcf	___lwdiv@quotient+1,f,c
  4823  00EBF4  5003               	movf	___lwdiv@divisor,w,c
  4824  00EBF6  5C01               	subwf	___lwdiv@dividend,w,c
  4825  00EBF8  5004               	movf	___lwdiv@divisor+1,w,c
  4826  00EBFA  5802               	subwfb	___lwdiv@dividend+1,w,c
  4827  00EBFC  A0D8               	btfss	status,0,c
  4828  00EBFE  D006               	goto	l1877
  4829  00EC00  5003               	movf	___lwdiv@divisor,w,c
  4830  00EC02  5E01               	subwf	___lwdiv@dividend,f,c
  4831  00EC04  5004               	movf	___lwdiv@divisor+1,w,c
  4832  00EC06  5A02               	subwfb	___lwdiv@dividend+1,f,c
  4833  00EC08  8005               	bsf	___lwdiv@quotient,0,c
  4834  00EC0A  D000               	goto	l1877
  4835  00EC0C                     l1877:
  4836  00EC0C  90D8               	bcf	status,0,c
  4837  00EC0E  3204               	rrcf	___lwdiv@divisor+1,f,c
  4838  00EC10  3203               	rrcf	___lwdiv@divisor,f,c
  4839  00EC12  2E07               	decfsz	___lwdiv@counter,f,c
  4840  00EC14  D7EC               	goto	l1869
  4841  00EC16  D000               	goto	l904
  4842  00EC18                     l904:
  4843  00EC18  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  4844  00EC1C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4845  00EC20  0012               	return		;funcret
  4846  00EC22                     __end_of___lwdiv:
  4847                           	opt stack 0
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           postinc0	equ	0xFEE
  4856                           wreg	equ	0xFE8
  4857                           postdec1	equ	0xFE5
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function _Lcd_Init *****************
  4867 ;; Defined at:
  4868 ;;		line 42 in file "../lcd.h"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  data            1    4[COMRAM] unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;		None               void
  4875 ;; Registers used:
  4876 ;;		wreg, status,2, status,0, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4883 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;Total ram usage:        2 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    1
  4889 ;; This function calls:
  4890 ;;		_Lcd_Cmd
  4891 ;; This function is called by:
  4892 ;;		_main
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           	psect	text19
  4897  00F18C                     __ptext19:
  4898                           	opt stack 0
  4899  00F18C                     _Lcd_Init:
  4900                           	opt stack 29
  4901                           
  4902                           ;lcd.h: 43: unsigned char data;
  4903                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  4904                           
  4905                           ;incstack = 0
  4906  00F18C  9093               	bcf	3987,0,c	;volatile
  4907                           
  4908                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  4909  00F18E  9293               	bcf	3987,1,c	;volatile
  4910                           
  4911                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  4912  00F190  9493               	bcf	3987,2,c	;volatile
  4913                           
  4914                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  4915  00F192  9693               	bcf	3987,3,c	;volatile
  4916                           
  4917                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  4918  00F194  9893               	bcf	3987,4,c	;volatile
  4919                           
  4920                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  4921  00F196  9A93               	bcf	3987,5,c	;volatile
  4922                           
  4923                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  4924  00F198  908A               	bcf	3978,0,c	;volatile
  4925                           
  4926                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  4927  00F19A  928A               	bcf	3978,1,c	;volatile
  4928                           
  4929                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  4930  00F19C  948A               	bcf	3978,2,c	;volatile
  4931                           
  4932                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  4933  00F19E  968A               	bcf	3978,3,c	;volatile
  4934                           
  4935                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  4936  00F1A0  988A               	bcf	3978,4,c	;volatile
  4937                           
  4938                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  4939  00F1A2  9A8A               	bcf	3978,5,c	;volatile
  4940                           
  4941                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4942  00F1A4  0E0F               	movlw	15
  4943  00F1A6  6E04               	movwf	??_Lcd_Init& (0+255),c
  4944  00F1A8  0E48               	movlw	72
  4945  00F1AA                     u2167:
  4946  00F1AA  2EE8               	decfsz	wreg,f,c
  4947  00F1AC  D7FE               	goto	u2167
  4948  00F1AE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4949  00F1B0  D7FC               	goto	u2167
  4950                           
  4951                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4952  00F1B2  0E0F               	movlw	15
  4953  00F1B4  6E04               	movwf	??_Lcd_Init& (0+255),c
  4954  00F1B6  0E48               	movlw	72
  4955  00F1B8                     u2177:
  4956  00F1B8  2EE8               	decfsz	wreg,f,c
  4957  00F1BA  D7FE               	goto	u2177
  4958  00F1BC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4959  00F1BE  D7FC               	goto	u2177
  4960                           
  4961                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4962  00F1C0  0E0F               	movlw	15
  4963  00F1C2  6E04               	movwf	??_Lcd_Init& (0+255),c
  4964  00F1C4  0E48               	movlw	72
  4965  00F1C6                     u2187:
  4966  00F1C6  2EE8               	decfsz	wreg,f,c
  4967  00F1C8  D7FE               	goto	u2187
  4968  00F1CA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4969  00F1CC  D7FC               	goto	u2187
  4970                           
  4971                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4972  00F1CE  0E0F               	movlw	15
  4973  00F1D0  6E04               	movwf	??_Lcd_Init& (0+255),c
  4974  00F1D2  0E48               	movlw	72
  4975  00F1D4                     u2197:
  4976  00F1D4  2EE8               	decfsz	wreg,f,c
  4977  00F1D6  D7FE               	goto	u2197
  4978  00F1D8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4979  00F1DA  D7FC               	goto	u2197
  4980                           
  4981                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4982  00F1DC  0E0F               	movlw	15
  4983  00F1DE  6E04               	movwf	??_Lcd_Init& (0+255),c
  4984  00F1E0  0E48               	movlw	72
  4985  00F1E2                     u2207:
  4986  00F1E2  2EE8               	decfsz	wreg,f,c
  4987  00F1E4  D7FE               	goto	u2207
  4988  00F1E6  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4989  00F1E8  D7FC               	goto	u2207
  4990                           
  4991                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  4992  00F1EA  0E0F               	movlw	15
  4993  00F1EC  6E04               	movwf	??_Lcd_Init& (0+255),c
  4994  00F1EE  0E48               	movlw	72
  4995  00F1F0                     u2217:
  4996  00F1F0  2EE8               	decfsz	wreg,f,c
  4997  00F1F2  D7FE               	goto	u2217
  4998  00F1F4  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  4999  00F1F6  D7FC               	goto	u2217
  5000                           
  5001                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5002  00F1F8  0E01               	movlw	1
  5003  00F1FA  6E05               	movwf	Lcd_Init@data,c
  5004  00F1FC  D01F               	goto	L4
  5005  00F1FE  D021               	goto	l70
  5006  00F200                     l69:
  5007                           
  5008                           ;lcd.h: 63: {
  5009                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5010  00F200  908A               	bcf	3978,0,c	;volatile
  5011  00F202  928A               	bcf	3978,1,c	;volatile
  5012  00F204  848A               	bsf	3978,2,c	;volatile
  5013  00F206  868A               	bsf	3978,3,c	;volatile
  5014  00F208  988A               	bcf	3978,4,c	;volatile
  5015                           
  5016                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5017  00F20A  9A8A               	bcf	3978,5,c	;volatile
  5018  00F20C  908A               	bcf	3978,0,c	;volatile
  5019  00F20E  928A               	bcf	3978,1,c	;volatile
  5020  00F210  848A               	bsf	3978,2,c	;volatile
  5021  00F212  868A               	bsf	3978,3,c	;volatile
  5022                           
  5023                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5024  00F214  888A               	bsf	3978,4,c	;volatile
  5025  00F216  9A8A               	bcf	3978,5,c	;volatile
  5026                           
  5027                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5028  00F218  0E03               	movlw	3
  5029  00F21A                     u2227:
  5030  00F21A  2EE8               	decfsz	wreg,f,c
  5031  00F21C  D7FE               	goto	u2227
  5032  00F21E  F000               	nop	
  5033                           
  5034                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5035  00F220  908A               	bcf	3978,0,c	;volatile
  5036  00F222  928A               	bcf	3978,1,c	;volatile
  5037  00F224  848A               	bsf	3978,2,c	;volatile
  5038  00F226  868A               	bsf	3978,3,c	;volatile
  5039  00F228  988A               	bcf	3978,4,c	;volatile
  5040                           
  5041                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5042  00F22A  9A8A               	bcf	3978,5,c	;volatile
  5043                           
  5044                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5045  00F22C  0E0F               	movlw	15
  5046  00F22E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5047  00F230  0E48               	movlw	72
  5048  00F232                     u2237:
  5049  00F232  2EE8               	decfsz	wreg,f,c
  5050  00F234  D7FE               	goto	u2237
  5051  00F236  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5052  00F238  D7FC               	goto	u2237
  5053  00F23A  2A05               	incf	Lcd_Init@data,f,c
  5054  00F23C                     L4:
  5055  00F23C  0E03               	movlw	3
  5056  00F23E  6405               	cpfsgt	Lcd_Init@data,c
  5057  00F240  D7DF               	goto	l69
  5058  00F242                     l70:
  5059                           
  5060                           ;lcd.h: 71: }
  5061                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5062  00F242  908A               	bcf	3978,0,c	;volatile
  5063  00F244  928A               	bcf	3978,1,c	;volatile
  5064  00F246  848A               	bsf	3978,2,c	;volatile
  5065  00F248  968A               	bcf	3978,3,c	;volatile
  5066  00F24A  988A               	bcf	3978,4,c	;volatile
  5067  00F24C  9A8A               	bcf	3978,5,c	;volatile
  5068                           
  5069                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5070  00F24E  908A               	bcf	3978,0,c	;volatile
  5071  00F250  928A               	bcf	3978,1,c	;volatile
  5072  00F252  848A               	bsf	3978,2,c	;volatile
  5073  00F254  968A               	bcf	3978,3,c	;volatile
  5074  00F256  888A               	bsf	3978,4,c	;volatile
  5075  00F258  9A8A               	bcf	3978,5,c	;volatile
  5076                           
  5077                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5078  00F25A  0E03               	movlw	3
  5079  00F25C                     u2247:
  5080  00F25C  2EE8               	decfsz	wreg,f,c
  5081  00F25E  D7FE               	goto	u2247
  5082  00F260  F000               	nop	
  5083                           
  5084                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5085  00F262  908A               	bcf	3978,0,c	;volatile
  5086  00F264  928A               	bcf	3978,1,c	;volatile
  5087  00F266  848A               	bsf	3978,2,c	;volatile
  5088  00F268  968A               	bcf	3978,3,c	;volatile
  5089  00F26A  988A               	bcf	3978,4,c	;volatile
  5090  00F26C  9A8A               	bcf	3978,5,c	;volatile
  5091                           
  5092                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5093  00F26E  0E0F               	movlw	15
  5094  00F270  6E04               	movwf	??_Lcd_Init& (0+255),c
  5095  00F272  0E48               	movlw	72
  5096  00F274                     u2257:
  5097  00F274  2EE8               	decfsz	wreg,f,c
  5098  00F276  D7FE               	goto	u2257
  5099  00F278  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5100  00F27A  D7FC               	goto	u2257
  5101                           
  5102                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5103  00F27C  0E28               	movlw	40
  5104  00F27E  6E05               	movwf	Lcd_Init@data,c
  5105  00F280  5005               	movf	Lcd_Init@data,w,c
  5106  00F282  ECE2  F079         	call	_Lcd_Cmd
  5107                           
  5108                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  5109  00F286  0E10               	movlw	16
  5110  00F288  6E05               	movwf	Lcd_Init@data,c
  5111  00F28A  5005               	movf	Lcd_Init@data,w,c
  5112  00F28C  ECE2  F079         	call	_Lcd_Cmd
  5113                           
  5114                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  5115  00F290  0E01               	movlw	1
  5116  00F292  6E05               	movwf	Lcd_Init@data,c
  5117  00F294  5005               	movf	Lcd_Init@data,w,c
  5118  00F296  ECE2  F079         	call	_Lcd_Cmd
  5119                           
  5120                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  5121  00F29A  0E0F               	movlw	15
  5122  00F29C  6E05               	movwf	Lcd_Init@data,c
  5123  00F29E  5005               	movf	Lcd_Init@data,w,c
  5124  00F2A0  ECE2  F079         	call	_Lcd_Cmd
  5125  00F2A4  0012               	return		;funcret
  5126  00F2A6                     __end_of_Lcd_Init:
  5127                           	opt stack 0
  5128                           tblptru	equ	0xFF8
  5129                           tblptrh	equ	0xFF7
  5130                           tblptrl	equ	0xFF6
  5131                           tablat	equ	0xFF5
  5132                           prodh	equ	0xFF4
  5133                           prodl	equ	0xFF3
  5134                           intcon	equ	0xFF2
  5135                           postinc0	equ	0xFEE
  5136                           wreg	equ	0xFE8
  5137                           postdec1	equ	0xFE5
  5138                           fsr1l	equ	0xFE1
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           postdec2	equ	0xFDD
  5142                           fsr2h	equ	0xFDA
  5143                           fsr2l	equ	0xFD9
  5144                           status	equ	0xFD8
  5145                           
  5146 ;; *************** function _Lcd_Cmd *****************
  5147 ;; Defined at:
  5148 ;;		line 140 in file "../lcd.h"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  data            1    wreg     unsigned char 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  data            1    2[COMRAM] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;		None               void
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5164 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5165 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5166 ;;Total ram usage:        3 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_Lcd_Init
  5172 ;;		_Lcd_Out
  5173 ;;		_main
  5174 ;;		_Lcd_Out2
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           	psect	text20
  5179  00F3C4                     __ptext20:
  5180                           	opt stack 0
  5181  00F3C4                     _Lcd_Cmd:
  5182                           	opt stack 28
  5183                           
  5184                           ;incstack = 0
  5185                           ;Lcd_Cmd@data stored from wreg
  5186  00F3C4  6E03               	movwf	Lcd_Cmd@data,c
  5187                           
  5188                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5189  00F3C6  988A               	bcf	3978,4,c	;volatile
  5190  00F3C8  9A8A               	bcf	3978,5,c	;volatile
  5191                           
  5192                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  5193  00F3CA  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  5194  00F3CC  AE03               	btfss	Lcd_Cmd@data,7,c
  5195  00F3CE  D001               	bra	u1085
  5196  00F3D0  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  5197  00F3D2                     u1085:
  5198  00F3D2  0E01               	movlw	1
  5199  00F3D4  1601               	andwf	??_Lcd_Cmd,f,c
  5200  00F3D6  508A               	movf	3978,w,c	;volatile
  5201  00F3D8  1801               	xorwf	??_Lcd_Cmd,w,c
  5202  00F3DA  0BFE               	andlw	-2
  5203  00F3DC  1801               	xorwf	??_Lcd_Cmd,w,c
  5204  00F3DE  6E8A               	movwf	3978,c	;volatile
  5205  00F3E0  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5206  00F3E4  0E06               	movlw	6
  5207  00F3E6  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5208  00F3E8                     u1095:
  5209  00F3E8  90D8               	bcf	status,0,c
  5210  00F3EA  3201               	rrcf	??_Lcd_Cmd,f,c
  5211  00F3EC  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5212  00F3EE  D7FC               	goto	u1095
  5213  00F3F0  0E01               	movlw	1
  5214  00F3F2  1601               	andwf	??_Lcd_Cmd,f,c
  5215  00F3F4  4601               	rlncf	??_Lcd_Cmd,f,c
  5216  00F3F6  508A               	movf	3978,w,c	;volatile
  5217  00F3F8  1801               	xorwf	??_Lcd_Cmd,w,c
  5218  00F3FA  0BFD               	andlw	-3
  5219  00F3FC  1801               	xorwf	??_Lcd_Cmd,w,c
  5220  00F3FE  6E8A               	movwf	3978,c	;volatile
  5221                           
  5222                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  5223  00F400  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5224  00F404  0E05               	movlw	5
  5225  00F406  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5226  00F408                     u1105:
  5227  00F408  90D8               	bcf	status,0,c
  5228  00F40A  3201               	rrcf	??_Lcd_Cmd,f,c
  5229  00F40C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5230  00F40E  D7FC               	goto	u1105
  5231  00F410  0E01               	movlw	1
  5232  00F412  1601               	andwf	??_Lcd_Cmd,f,c
  5233  00F414  4601               	rlncf	??_Lcd_Cmd,f,c
  5234  00F416  4601               	rlncf	??_Lcd_Cmd,f,c
  5235  00F418  508A               	movf	3978,w,c	;volatile
  5236  00F41A  1801               	xorwf	??_Lcd_Cmd,w,c
  5237  00F41C  0BFB               	andlw	-5
  5238  00F41E  1801               	xorwf	??_Lcd_Cmd,w,c
  5239  00F420  6E8A               	movwf	3978,c	;volatile
  5240  00F422  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5241  00F426  3A01               	swapf	??_Lcd_Cmd,f,c
  5242  00F428  0E0F               	movlw	15
  5243  00F42A  1601               	andwf	??_Lcd_Cmd,f,c
  5244  00F42C  0E01               	movlw	1
  5245  00F42E  1601               	andwf	??_Lcd_Cmd,f,c
  5246  00F430  4601               	rlncf	??_Lcd_Cmd,f,c
  5247  00F432  4601               	rlncf	??_Lcd_Cmd,f,c
  5248  00F434  4601               	rlncf	??_Lcd_Cmd,f,c
  5249  00F436  508A               	movf	3978,w,c	;volatile
  5250  00F438  1801               	xorwf	??_Lcd_Cmd,w,c
  5251  00F43A  0BF7               	andlw	-9
  5252  00F43C  1801               	xorwf	??_Lcd_Cmd,w,c
  5253  00F43E  6E8A               	movwf	3978,c	;volatile
  5254                           
  5255                           ;lcd.h: 144: _delay(10);
  5256  00F440  0E03               	movlw	3
  5257  00F442                     u2267:
  5258  00F442  2EE8               	decfsz	wreg,f,c
  5259  00F444  D7FE               	goto	u2267
  5260  00F446  F000               	nop	
  5261                           
  5262                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5263  00F448  888A               	bsf	3978,4,c	;volatile
  5264  00F44A  0E03               	movlw	3
  5265  00F44C                     u2277:
  5266  00F44C  2EE8               	decfsz	wreg,f,c
  5267  00F44E  D7FE               	goto	u2277
  5268  00F450  F000               	nop	
  5269  00F452  988A               	bcf	3978,4,c	;volatile
  5270                           
  5271                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  5272  00F454  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5273  00F458  90D8               	bcf	status,0,c
  5274  00F45A  3201               	rrcf	??_Lcd_Cmd,f,c
  5275  00F45C  90D8               	bcf	status,0,c
  5276  00F45E  3201               	rrcf	??_Lcd_Cmd,f,c
  5277  00F460  90D8               	bcf	status,0,c
  5278  00F462  3201               	rrcf	??_Lcd_Cmd,f,c
  5279  00F464  0E01               	movlw	1
  5280  00F466  1601               	andwf	??_Lcd_Cmd,f,c
  5281  00F468  508A               	movf	3978,w,c	;volatile
  5282  00F46A  1801               	xorwf	??_Lcd_Cmd,w,c
  5283  00F46C  0BFE               	andlw	-2
  5284  00F46E  1801               	xorwf	??_Lcd_Cmd,w,c
  5285  00F470  6E8A               	movwf	3978,c	;volatile
  5286  00F472  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5287  00F476  90D8               	bcf	status,0,c
  5288  00F478  3201               	rrcf	??_Lcd_Cmd,f,c
  5289  00F47A  90D8               	bcf	status,0,c
  5290  00F47C  3201               	rrcf	??_Lcd_Cmd,f,c
  5291  00F47E  0E01               	movlw	1
  5292  00F480  1601               	andwf	??_Lcd_Cmd,f,c
  5293  00F482  4601               	rlncf	??_Lcd_Cmd,f,c
  5294  00F484  508A               	movf	3978,w,c	;volatile
  5295  00F486  1801               	xorwf	??_Lcd_Cmd,w,c
  5296  00F488  0BFD               	andlw	-3
  5297  00F48A  1801               	xorwf	??_Lcd_Cmd,w,c
  5298  00F48C  6E8A               	movwf	3978,c	;volatile
  5299                           
  5300                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  5301  00F48E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5302  00F492  90D8               	bcf	status,0,c
  5303  00F494  3201               	rrcf	??_Lcd_Cmd,f,c
  5304  00F496  0E01               	movlw	1
  5305  00F498  1601               	andwf	??_Lcd_Cmd,f,c
  5306  00F49A  4601               	rlncf	??_Lcd_Cmd,f,c
  5307  00F49C  4601               	rlncf	??_Lcd_Cmd,f,c
  5308  00F49E  508A               	movf	3978,w,c	;volatile
  5309  00F4A0  1801               	xorwf	??_Lcd_Cmd,w,c
  5310  00F4A2  0BFB               	andlw	-5
  5311  00F4A4  1801               	xorwf	??_Lcd_Cmd,w,c
  5312  00F4A6  6E8A               	movwf	3978,c	;volatile
  5313  00F4A8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5314  00F4AC  0E01               	movlw	1
  5315  00F4AE  1601               	andwf	??_Lcd_Cmd,f,c
  5316  00F4B0  4601               	rlncf	??_Lcd_Cmd,f,c
  5317  00F4B2  4601               	rlncf	??_Lcd_Cmd,f,c
  5318  00F4B4  4601               	rlncf	??_Lcd_Cmd,f,c
  5319  00F4B6  508A               	movf	3978,w,c	;volatile
  5320  00F4B8  1801               	xorwf	??_Lcd_Cmd,w,c
  5321  00F4BA  0BF7               	andlw	-9
  5322  00F4BC  1801               	xorwf	??_Lcd_Cmd,w,c
  5323  00F4BE  6E8A               	movwf	3978,c	;volatile
  5324                           
  5325                           ;lcd.h: 148: _delay(10);
  5326  00F4C0  0E03               	movlw	3
  5327  00F4C2                     u2287:
  5328  00F4C2  2EE8               	decfsz	wreg,f,c
  5329  00F4C4  D7FE               	goto	u2287
  5330  00F4C6  F000               	nop	
  5331                           
  5332                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5333  00F4C8  888A               	bsf	3978,4,c	;volatile
  5334  00F4CA  0E03               	movlw	3
  5335  00F4CC                     u2297:
  5336  00F4CC  2EE8               	decfsz	wreg,f,c
  5337  00F4CE  D7FE               	goto	u2297
  5338  00F4D0  F000               	nop	
  5339  00F4D2  988A               	bcf	3978,4,c	;volatile
  5340                           
  5341                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5342  00F4D4  0E0F               	movlw	15
  5343  00F4D6  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  5344  00F4D8  0E48               	movlw	72
  5345  00F4DA                     u2307:
  5346  00F4DA  2EE8               	decfsz	wreg,f,c
  5347  00F4DC  D7FE               	goto	u2307
  5348  00F4DE  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  5349  00F4E0  D7FC               	goto	u2307
  5350  00F4E2  0012               	return		;funcret
  5351  00F4E4                     __end_of_Lcd_Cmd:
  5352                           	opt stack 0
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           fsr2h	equ	0xFDA
  5368                           fsr2l	equ	0xFD9
  5369                           status	equ	0xFD8
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           prodh	equ	0xFF4
  5375                           prodl	equ	0xFF3
  5376                           intcon	equ	0xFF2
  5377                           postinc0	equ	0xFEE
  5378                           wreg	equ	0xFE8
  5379                           postdec1	equ	0xFE5
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388                           	psect	rparam
  5389  0000                     tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           postdec1	equ	0xFE5
  5399                           fsr1l	equ	0xFE1
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           fsr2h	equ	0xFDA
  5404                           fsr2l	equ	0xFD9
  5405                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        18
    BSS         68
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     72      95
    BANK0           160      0      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_23(CODE[7]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_21(CODE[3]), STR_19(CODE[3]), STR_17(CODE[3]), STR_15(CODE[3]), 
		 -> STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), STR_8(CODE[15]), 
		 -> STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> Convert_diasem@buffer_dia(COMRAM[20]), STR_6(CODE[21]), STR_5(CODE[20]), STR_4(CODE[18]), 
		 -> STR_3(CODE[19]), buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_V_Principal
    _Write_RTC->_RtccWriteDate
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20970
                                             70 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0    9574
                                             68 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3    1813
                                             63 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    3556
                                             39 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    3214
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Convert_diasem
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _V_Principal
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      4C       5       47.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     48      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AB       6        0.0%
DATA                 0      0      AB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 25 10:51:13 2020

           V_Principal@cte 0045                          _i 0055                         l70 F242  
                       l69 F200               ___awdiv@sign 0006        ___wmul@multiplicand 0003  
             __CFG_CP0$OFF 000000                        l210 EB16                        l281 FE3A  
                      l904 EC18                        l914 EBBC                        _dia 004B  
                      _mes 0051                        wreg 000FE8            RtccReadDate@pDt 0001  
                     l2011 FD64                       l2003 FD22                       l2021 FD8C  
                     l2005 FD36                       l2101 ECF2                       l2033 FDD8  
                     l2025 FDB0                       l2017 FD80                       l2009 FD3C  
                     l2035 FDE2                       l2053 FE40                       l2045 FE10  
                     l2029 FDB4                       l2061 FEA0                       l2141 ED96  
                     l2047 FE18                       l2039 FDEE                       l2063 FEBC  
                     l2135 ED84                       l2161 F2E4                       l2153 EDEC  
                     l2137 ED8A                       l2145 ED9E                       l2241 EFA6  
                     l2401 EE82                       l2059 FE94                       l2163 F302  
                     l2139 ED90                       l2147 EDBA                       l2075 EC84  
                     l2315 F6A8                       l2251 EFE4                       l2165 F320  
                     l2157 F2A8                       l2173 F37A                       l2149 EDC2  
                     l2325 F6D8                       l2309 F66E                       l2405 EE8E  
                     l2167 F33E                       l2159 F2C6                       l2175 F3B8  
                     l2319 F6BC                       l2247 EFD0                       l2169 F35C  
                     l2361 F73A                       l2257 F000                       l2409 EE9E  
                     l2365 F746                       l2357 F72E                       l2293 F068  
                     l2285 F050                       l2621 FA62                       l2605 F9F0  
                     l2391 EE5C                       l2383 EE3C                       l2289 F05C  
                     l2393 EE64                       l2377 EE2A                       l2641 FADC  
                     l2609 FA04                       l2619 FA52                       l2635 FA98  
                     l2389 EE52                       l2645 FB06                       l2629 FA8A  
                     l1951 FBB6                       l2655 FB60                       l1865 EBDC  
                     l1849 EB48                       l1953 FBC4                       l1945 FB9C  
                     l2649 FB30                       l1867 EBE6                       l1971 FC64  
                     l1963 FC02                       l2595 F9B8                       l1877 EC0C  
                     l1869 EBEE                       l1893 EBB0                       l1885 EB88  
                     l1981 FC98                       l1957 FBCE                       l1887 EB92  
                     l1991 FCDC                       l1983 FC9E                       l1959 FBE4  
                     l1889 EB9A                       l1995 FCEE                       l1979 FC8E  
                     l1997 FD02                       l1989 FCD2                       STR_1 FFB8  
                     STR_2 FFEF                       STR_3 FF93                       STR_4 FFA6  
                     STR_5 FF7F                       STR_6 FED7                       STR_7 FFCA  
                     STR_8 FFD9                       STR_9 FFF4                       u1105 F408  
                     u1115 F4F2                       u1125 F508                       u1135 F528  
                     u2007 F956                       u2017 F966                       u2107 F562  
                     u2027 F976                       u1085 F3D2                       u2117 F56C  
                     u2037 F986                       u1350 EDE2                       u1095 F3E8  
                     u2207 F1E2                       u2127 F5E2                       u2047 F996  
                     u1360 EE0C                       u2217 F1F0                       u2137 F5EC  
                     u2057 F9A6                       u2307 F4DA                       u2227 F21A  
                     u2147 F5F6                       u2067 FA0A                       u2237 F232  
                     u2157 F602                       u1357 EDD8                       u2077 FB6C  
                     u2247 F25C                       u2167 F1AA                       u1367 EE02  
                     u2087 FB82                       u1800 FA5C                       u1720 F9C4  
                     u2257 F274                       u2177 F1B8                       u2097 EB20  
                     u1810 FA6A                       u1730 F9C6                       u2267 F442  
                     u2187 F1C6                       u1820 FA6C                       u2277 F44C  
                     u2197 F1D4                       u1910 FB0E                       u2287 F4C2  
                     u1920 FB10                       u1760 FA1C                       u2297 F4CC  
                     u1850 FAA0                       u1770 FA1E                       u1940 FB38  
                     u1860 FAA2                       u1950 FB3A                       u1790 FA5A  
                     u1880 FAE4                       u1890 FAE6                       u1977 F926  
                     u1987 F936                       u1997 F946                       _anio 0049  
                     _main F8D8                       _hora 004F                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
            __CFG_T1DIG$ON 000000                       prodh 000FF4                       prodl 000FF3  
                     start 0000              __CFG_IESO$OFF 000000           RtccReadDate@rTD0 000B  
         RtccReadDate@rTD1 0003            __end_of_Lcd_Cmd F4E4            __end_of_Lcd_Out EE14  
             ___param_bank 000010            RtccReadTime@pTm 0001                 _Lcd_Chr_CP F4E4  
            ??_V_Principal 0045              __CFG_PLLDIV$1 000000                      ?_main 0001  
          __end_of___awdiv EEAA                      STR_10 FF40                      STR_11 FFF4  
                    STR_20 FF55                      STR_12 FEEC                      STR_21 FFF4  
                    STR_13 FFF4                      STR_14 FF16                      STR_22 FF01  
                    STR_15 FFF4                      STR_23 FFE8                      STR_16 FF6A  
                    STR_17 FFF4                      STR_18 FF2B                      STR_19 FFF4  
          ___awdiv@divisor 0003            __end_of___lwdiv EC22            __end_of___lwmod EBC6  
          ___awdiv@counter 0005                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94             __CFG_FCMEN$OFF 000000                      _Sw_Up 0084  
          __end_of_dpowers FED7                      _mes_d 00A0                      _mes_u 00A1  
          __end_of_isdigit EB52                      tablat 000FF5                 _CuentamSeg 007E  
                    status 000FD8            __end_of_sprintf FECC           __end_of_Lcd_Init F2A6  
  __CFG_DSWDTOSC$INTOSCREF 000000            __initialization EC22               __end_of_main FB92  
         RtccReadTime@rTD0 000B           RtccReadTime@rTD1 0003           __end_of_Read_RTC F18C  
            main@diasem_tr 0048                     ??_main 0047              __activetblptr 000002  
      __end_of_V_Principal EF68           __end_of_RtccWrOn EB10                     _ADCON0 000FC2  
                   _ADCON1 000FC1                     _ADRESH 000FC4                     _EECON2 000FA7  
                   _ANCON0 000F48                     _ANCON1 000F49           ___awdiv@dividend 0001  
           __CFG_WDTEN$OFF 000000            _lee_temperatura EB10                  ??_Lcd_Cmd 0001  
         RtccWriteDate@pDt 0001                     _RTCCFG 000F3F                  ??_Lcd_Out 0043  
           __CFG_WPCFG$OFF 000000                     _Flag_1 007F             __CFG_WPDIS$OFF 000000  
                   _Grados 00A6             __CFG_XINST$OFF 000000                ?_Lcd_Chr_CP 0001  
                   ___wmul EB52                  ??___awdiv 0005             __CFG_STVREN$ON 000000  
                   _diasem 004D                     _anio_d 0099                     _anio_u 009A  
         ??_Convert_diasem 002A                  ??___lwdiv 0005                  ??___lwmod 000C  
                   _hora_d 009E                     _hora_u 009F                     clear_0 EC28  
                   clear_1 EC34           ___awdiv@quotient 0007                     _minuto 0053  
    __end_of_RtccWriteDate F752      __end_of_RtccWriteTime F074           RtccWriteTime@pTm 0001  
             __pdataCOMRAM 0049                  ??_isdigit 0001               __mediumconst FECC  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_sprintf 0017                 __accesstop 0060    __end_of__initialization EC7A  
       __size_of_Write_RTC 0186              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 EAEC                _V_Principal EEAA            __CFG_DSWDTPS$G2 000000  
          __CFG_OSC$INTOSC 000000    __end_of_lee_temperatura EB30                  ?_Lcd_Init 0001  
             sprintf@width 0025        __size_of_Lcd_Chr_CP 0128                 __pbssBANK0 0060  
                ?_Read_RTC 0001                 _dia_semana 009B  RtccWriteTime@tempHourWDay 000A  
                ?_RtccWrOn 0001                    ?___wmul 0001              ?_RtccReadDate 0001  
            ?_RtccReadTime 0001          __end_of_Write_RTC F8D8                 ??_Lcd_Init 0004  
                  _RTCVALH 000F99                    _RTCVALL 000F98                 ??_Read_RTC 0013  
                  _Lcd_Cmd F3C4                    _Lcd_Out ED80                    __Hparam 0000  
                  __Lparam 0000                    _Sw_Left 0082                    _Sw_Down 0081  
               ??_RtccWrOn 0001             ??_RtccReadDate 0003             ??_RtccReadTime 0003  
                  ___awdiv EE14            __size_of___wmul 0028                    ___lwdiv EBC6  
                  ___lwmod EB7A                _RtccTimeVal 0078                    __pcinit EC22  
                  _fecha_d 009C                    _fecha_u 009D                    __ramtop 0F00  
                  __ptext0 F8D8                    __ptext1 F752                    __ptext2 EE14  
                  __ptext3 EF68                    __ptext4 F60C                    __ptext5 EAFE  
                  __ptext6 EEAA                    __ptext7 EB10                    __ptext8 F074  
                  __ptext9 EC84                    _buffer1 0085                  _T1CONbits 000FCD  
                  _lectura 0057                    _dpowers FECD                    _isdigit EB30  
                  _segundo 007C           ?_lee_temperatura 0001                    _sprintf FB92  
     end_of_initialization EC7A              __Lmediumconst FECC               ??_Lcd_Chr_CP 0001  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                  _PORTAbits 000F80                  _PORTCbits 000F82  
         __CFG_DSBOREN$OFF 000000           __CFG_CPUDIV$OSC1 000000                  _TRISBbits 000F93  
       __end_of_Lcd_Chr_CP F60C           __CFG_IOL1WAY$OFF 000000  RtccWriteDate@tempDayMonth 000A  
      __CFG_MSSP7B_EN$MSK7 000000               ?_V_Principal 0001             __end_of___wmul EB7A  
            __pidataCOMRAM EAF2  RtccWriteDate@tempHourWDay 000C           __CFG_DSWDTEN$OFF 000000  
      start_initialization EC22       __end_of_RtccReadDate ED80              Lcd_Out@buffer 0041  
     __end_of_RtccReadTime ECF2          __size_of_Lcd_Init 011A       RtccWriteTime@wasAlrm 0006  
     RtccWriteTime@wasWrEn 0007     __size_of_RtccWriteDate 0146            RtccWriteDate@di 0003  
   __size_of_RtccWriteTime 010C          __size_of_Read_RTC 0118                  _Sw_Center 0080  
                _Temp_prog 00A9                   ??___wmul 0005                __pdataBANK0 00A6  
        __size_of_RtccWrOn 0012            RtccWriteTime@di 0003           __CFG_LPT1OSC$OFF 000000  
        Convert_diasem@dia 0028                _ALRMCFGbits 000F91                __pbssCOMRAM 0055  
  __size_of_Convert_diasem 011E                  _Write_RTC F752               _isdigit$2061 0002  
                 ?_Lcd_Cmd 0001                sprintf@flag 001B                   ?_Lcd_Out 0040  
              sprintf@prec 001E                  __pnvBANK0 0099           ___lwdiv@dividend 0001  
            __pmediumconst FECC                   ?___awdiv 0001                   ?___lwdiv 0001  
                 ?___lwmod 0008    RtccWriteTime@tempMinSec 0008              _RtccWriteDate F60C  
            _RtccWriteTime EF68                   ?_isdigit 0001       __CFG_RTCOSC$T1OSCREF 000000  
 Convert_diasem@buffer_dia 002C                 ?_Write_RTC 0001           ___lwdiv@quotient 0005  
                 ?_sprintf 000D           _RtccAlrmTimeDate 0060             ___wmul@product 0005  
                 _LATAbits 000F89                   _LATBbits 000F8A                   _PIE3bits 000FA3  
                _segundo_d 00A4                  _segundo_u 00A5                   Lcd_Out@x 0040  
         __CFG_WDTPS$32768 000000                   Lcd_Out@y 0043         RtccWriteDate@wasOn 0005  
       _Rtcc_read_TimeDate 0070               Lcd_Init@data 0005             ?_RtccWriteDate 0001  
               _ADCON0bits 000FC2          ___wmul@multiplier 0001       __size_of_V_Principal 00BE  
           ?_RtccWriteTime 0001      __size_of_RtccReadDate 008E      __size_of_RtccReadTime 006E  
                 _Lcd_Init F18C                  copy_data0 EC4E                  copy_data1 EC6E  
                 _Read_RTC F074   __size_of_lee_temperatura 0020           __size_of_Lcd_Cmd 0120  
         __size_of_Lcd_Out 0094                   __Hrparam 0000                   _RtccDate 0058  
                 __Lrparam 0000                   _RtccTime 005C                   _RtccWrOn EAFE  
                 _Sw_Right 0083               _RtccReadDate ECF2           __size_of___awdiv 0096  
             _RtccReadTime EC84           __size_of___lwdiv 005C           __size_of___lwmod 004C  
             _RtccTimeDate 0068                 sprintf@len 0023                 sprintf@val 001C  
           _Convert_diasem F2A6           __size_of_isdigit 0022             Lcd_Chr_CP@data 0003  
          ___lwdiv@divisor 0003                ??_Write_RTC 000E            ___lwdiv@counter 0007  
                 __ptext10 ECF2                   __ptext11 ED80                   __ptext20 F3C4  
                 __ptext12 F4E4                   __ptext13 F2A6                   __ptext14 FB92  
                 __ptext15 EB30                   __ptext16 EB52                   __ptext17 EB7A  
                 __ptext18 EBC6                   __ptext19 F18C           __size_of_sprintf 033A  
              Lcd_Cmd@data 0003              __size_of_main 02BA                   _minuto_d 00A2  
                 _minuto_u 00A3            ??_RtccWriteDate 0004            ??_RtccWriteTime 0004  
   __end_of_Convert_diasem F3C4                Lcd_Out@data 0044                _OSCTUNEbits 000F9B  
               _INTCONbits 000FF2         RtccWriteTime@wasOn 0005                   isdigit@c 0003  
                sprintf@ap 001F                  sprintf@cp 0021                  sprintf@sp 000D  
         ___lwmod@dividend 0008                 _OSCCONbits 000FD3      RtccWriteDate@tempYear 0007  
        ??_lee_temperatura 0001                 _RTCCFGbits 000F3F                   sprintf@c 0027  
                 sprintf@f 000F            ?_Convert_diasem 0028            ___lwmod@divisor 000A  
          ___lwmod@counter 000C       RtccWriteDate@wasAlrm 0006       RtccWriteDate@wasWrEn 0009  
