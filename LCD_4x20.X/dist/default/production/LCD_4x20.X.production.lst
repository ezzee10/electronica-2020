

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Nov 28 00:05:32 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataBANK0
    63  00BA62                     __pidataBANK0:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _grados
    67  00BA62  00                 	db	0
    68  00BA63  A0                 	db	160
    69  00BA64  41                 	db	65
    70                           
    71                           ;initializer for _temp_prog
    72  00BA65  66                 	db	102
    73  00BA66  04                 	db	4
    74  00BA67  42                 	db	66
    75                           
    76                           ;initializer for _anio
    77  00BA68  0014               	dw	20
    78                           
    79                           ;initializer for _dia
    80  00BA6A  0006               	dw	6
    81                           
    82                           ;initializer for _hora
    83  00BA6C  0017               	dw	23
    84                           
    85                           ;initializer for _mes
    86  00BA6E  000B               	dw	11
    87                           
    88                           ;initializer for _minuto
    89  00BA70  003A               	dw	58
    90                           
    91                           ;initializer for _inicio_hora_ilum
    92  00BA72  17                 	db	23
    93                           
    94                           ;initializer for _inicio_hora_riego
    95  00BA73  17                 	db	23
    96                           
    97                           ;initializer for _inicio_min_ilum
    98  00BA74  3B                 	db	59
    99                           
   100                           ;initializer for _inicio_min_riego
   101  00BA75  3B                 	db	59
   102                           
   103                           	psect	idataBANK1
   104  00BB2A                     __pidataBANK1:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _posicionesUp
   108  00BB2A  0002               	dw	2
   109  00BB2C  0005               	dw	5
   110  00BB2E  0002               	dw	2
   111  00BB30  0008               	dw	8
   112  00BB32  0002               	dw	2
   113  00BB34  000F               	dw	15
   114  00BB36  0002               	dw	2
   115  00BB38  0012               	dw	18
   116  00BB3A  0004               	dw	4
   117  00BB3C  0005               	dw	5
   118  00BB3E  0004               	dw	4
   119  00BB40  0008               	dw	8
   120  00BB42  0004               	dw	4
   121  00BB44  000F               	dw	15
   122  00BB46  0004               	dw	4
   123  00BB48  0012               	dw	18
   124                           
   125                           ;initializer for _posicionesLeft
   126  00BB4A  0002               	dw	2
   127  00BB4C  0000               	dw	0
   128  00BB4E  0003               	dw	3
   129  00BB50  0000               	dw	0
   130  00BB52  0003               	dw	3
   131  00BB54  0003               	dw	3
   132  00BB56  0003               	dw	3
   133  00BB58  0006               	dw	6
   134  00BB5A  0004               	dw	4
   135  00BB5C  0000               	dw	0
   136  00BB5E  0004               	dw	4
   137  00BB60  0003               	dw	3
   138                           
   139                           	psect	mediumconst
   140  00FDF2                     __pmediumconst:
   141                           	opt stack 0
   142  00FDF2  00                 	db	0
   143  00FDF3                     _dpowers:
   144                           	opt stack 0
   145  00FDF3  0001               	dw	1
   146  00FDF5  0000               	dw	0
   147  00FDF7  000A               	dw	10
   148  00FDF9  0000               	dw	0
   149  00FDFB  0064               	dw	100
   150  00FDFD  0000               	dw	0
   151  00FDFF  03E8               	dw	1000
   152  00FE01  0000               	dw	0
   153  00FE03  2710               	dw	10000
   154  00FE05  0000               	dw	0
   155  00FE07  86A0               	dw	34464
   156  00FE09  0001               	dw	1
   157  00FE0B  4240               	dw	16960
   158  00FE0D  000F               	dw	15
   159  00FE0F  9680               	dw	38528
   160  00FE11  0098               	dw	152
   161  00FE13  E100               	dw	57600
   162  00FE15  05F5               	dw	1525
   163  00FE17  CA00               	dw	51712
   164  00FE19  3B9A               	dw	15258
   165  00FE1B                     __end_of_dpowers:
   166                           	opt stack 0
   167  00FE1B                     __npowers_:
   168                           	opt stack 0
   169  00FE1B  00                 	db	0
   170  00FE1C  80                 	db	128
   171  00FE1D  3F                 	db	63
   172  00FE1E  CD                 	db	205
   173  00FE1F  CC                 	db	204
   174  00FE20  3D                 	db	61
   175  00FE21  D7                 	db	215
   176  00FE22  23                 	db	35
   177  00FE23  3C                 	db	60
   178  00FE24  12                 	db	18
   179  00FE25  83                 	db	131
   180  00FE26  3A                 	db	58
   181  00FE27  B7                 	db	183
   182  00FE28  D1                 	db	209
   183  00FE29  38                 	db	56
   184  00FE2A  C6                 	db	198
   185  00FE2B  27                 	db	39
   186  00FE2C  37                 	db	55
   187  00FE2D  38                 	db	56
   188  00FE2E  86                 	db	134
   189  00FE2F  35                 	db	53
   190  00FE30  C0                 	db	192
   191  00FE31  D6                 	db	214
   192  00FE32  33                 	db	51
   193  00FE33  CC                 	db	204
   194  00FE34  2B                 	db	43
   195  00FE35  32                 	db	50
   196  00FE36  70                 	db	112
   197  00FE37  89                 	db	137
   198  00FE38  30                 	db	48
   199  00FE39  E7                 	db	231
   200  00FE3A  DB                 	db	219
   201  00FE3B  2E                 	db	46
   202  00FE3C  E5                 	db	229
   203  00FE3D  3C                 	db	60
   204  00FE3E  1E                 	db	30
   205  00FE3F  42                 	db	66
   206  00FE40  A2                 	db	162
   207  00FE41  0D                 	db	13
   208  00FE42                     __end_of__npowers_:
   209                           	opt stack 0
   210  00FE42                     __powers_:
   211                           	opt stack 0
   212  00FE42  00                 	db	0
   213  00FE43  80                 	db	128
   214  00FE44  3F                 	db	63
   215  00FE45  00                 	db	0
   216  00FE46  20                 	db	32
   217  00FE47  41                 	db	65
   218  00FE48  00                 	db	0
   219  00FE49  C8                 	db	200
   220  00FE4A  42                 	db	66
   221  00FE4B  00                 	db	0
   222  00FE4C  7A                 	db	122
   223  00FE4D  44                 	db	68
   224  00FE4E  40                 	db	64
   225  00FE4F  1C                 	db	28
   226  00FE50  46                 	db	70
   227  00FE51  50                 	db	80
   228  00FE52  C3                 	db	195
   229  00FE53  47                 	db	71
   230  00FE54  24                 	db	36
   231  00FE55  74                 	db	116
   232  00FE56  49                 	db	73
   233  00FE57  97                 	db	151
   234  00FE58  18                 	db	24
   235  00FE59  4B                 	db	75
   236  00FE5A  BC                 	db	188
   237  00FE5B  BE                 	db	190
   238  00FE5C  4C                 	db	76
   239  00FE5D  6B                 	db	107
   240  00FE5E  6E                 	db	110
   241  00FE5F  4E                 	db	78
   242  00FE60  03                 	db	3
   243  00FE61  15                 	db	21
   244  00FE62  50                 	db	80
   245  00FE63  79                 	db	121
   246  00FE64  AD                 	db	173
   247  00FE65  60                 	db	96
   248  00FE66  F3                 	db	243
   249  00FE67  49                 	db	73
   250  00FE68  71                 	db	113
   251  00FE69                     __end_of__powers_:
   252                           	opt stack 0
   253  00FE69                     STR_4:
   254  00FE69  25                 	db	37
   255  00FE6A  30                 	db	48	;'0'
   256  00FE6B  32                 	db	50	;'2'
   257  00FE6C  75                 	db	117	;'u'
   258  00FE6D  2F                 	db	47
   259  00FE6E  25                 	db	37
   260  00FE6F  30                 	db	48	;'0'
   261  00FE70  32                 	db	50	;'2'
   262  00FE71  75                 	db	117	;'u'
   263  00FE72  2F                 	db	47
   264  00FE73  25                 	db	37
   265  00FE74  30                 	db	48	;'0'
   266  00FE75  32                 	db	50	;'2'
   267  00FE76  75                 	db	117	;'u'
   268  00FE77  20                 	db	32
   269  00FE78  20                 	db	32
   270  00FE79  20                 	db	32
   271  00FE7A  20                 	db	32
   272  00FE7B  20                 	db	32
   273  00FE7C  20                 	db	32
   274  00FE7D  20                 	db	32
   275  00FE7E  20                 	db	32
   276  00FE7F  20                 	db	32
   277  00FE80  20                 	db	32
   278  00FE81  20                 	db	32
   279  00FE82  20                 	db	32
   280  00FE83  20                 	db	32
   281  00FE84  00                 	db	0
   282  00FE85                     STR_5:
   283  00FE85  25                 	db	37
   284  00FE86  30                 	db	48	;'0'
   285  00FE87  32                 	db	50	;'2'
   286  00FE88  75                 	db	117	;'u'
   287  00FE89  3A                 	db	58	;':'
   288  00FE8A  25                 	db	37
   289  00FE8B  30                 	db	48	;'0'
   290  00FE8C  32                 	db	50	;'2'
   291  00FE8D  75                 	db	117	;'u'
   292  00FE8E  3A                 	db	58	;':'
   293  00FE8F  25                 	db	37
   294  00FE90  30                 	db	48	;'0'
   295  00FE91  32                 	db	50	;'2'
   296  00FE92  75                 	db	117	;'u'
   297  00FE93  20                 	db	32
   298  00FE94  20                 	db	32
   299  00FE95  20                 	db	32
   300  00FE96  20                 	db	32
   301  00FE97  20                 	db	32
   302  00FE98  20                 	db	32
   303  00FE99  20                 	db	32
   304  00FE9A  20                 	db	32
   305  00FE9B  20                 	db	32
   306  00FE9C  20                 	db	32
   307  00FE9D  20                 	db	32
   308  00FE9E  20                 	db	32
   309  00FE9F  20                 	db	32
   310  00FEA0  00                 	db	0
   311  00FEA1                     STR_75:
   312  00FEA1  20                 	db	32
   313  00FEA2  20                 	db	32
   314  00FEA3  20                 	db	32
   315  00FEA4  20                 	db	32
   316  00FEA5  20                 	db	32
   317  00FEA6  20                 	db	32
   318  00FEA7  20                 	db	32
   319  00FEA8  20                 	db	32
   320  00FEA9  20                 	db	32
   321  00FEAA  20                 	db	32
   322  00FEAB  20                 	db	32
   323  00FEAC  20                 	db	32
   324  00FEAD  20                 	db	32
   325  00FEAE  20                 	db	32
   326  00FEAF  20                 	db	32
   327  00FEB0  20                 	db	32
   328  00FEB1  20                 	db	32
   329  00FEB2  20                 	db	32
   330  00FEB3  20                 	db	32
   331  00FEB4  20                 	db	32
   332  00FEB5  00                 	db	0
   333  00FEB6                     STR_85:
   334  00FEB6  4C                 	db	76	;'L'
   335  00FEB7  75                 	db	117	;'u'
   336  00FEB8  6E                 	db	110	;'n'
   337  00FEB9  65                 	db	101	;'e'
   338  00FEBA  73                 	db	115	;'s'
   339  00FEBB  20                 	db	32
   340  00FEBC  20                 	db	32
   341  00FEBD  20                 	db	32
   342  00FEBE  20                 	db	32
   343  00FEBF  20                 	db	32
   344  00FEC0  20                 	db	32
   345  00FEC1  20                 	db	32
   346  00FEC2  20                 	db	32
   347  00FEC3  20                 	db	32
   348  00FEC4  20                 	db	32
   349  00FEC5  20                 	db	32
   350  00FEC6  20                 	db	32
   351  00FEC7  20                 	db	32
   352  00FEC8  20                 	db	32
   353  00FEC9  20                 	db	32
   354  00FECA  00                 	db	0
   355  00FECB                     STR_95:
   356  00FECB  53                 	db	83	;'S'
   357  00FECC  61                 	db	97	;'a'
   358  00FECD  62                 	db	98	;'b'
   359  00FECE  61                 	db	97	;'a'
   360  00FECF  64                 	db	100	;'d'
   361  00FED0  6F                 	db	111	;'o'
   362  00FED1  20                 	db	32
   363  00FED2  20                 	db	32
   364  00FED3  20                 	db	32
   365  00FED4  20                 	db	32
   366  00FED5  20                 	db	32
   367  00FED6  20                 	db	32
   368  00FED7  20                 	db	32
   369  00FED8  20                 	db	32
   370  00FED9  20                 	db	32
   371  00FEDA  20                 	db	32
   372  00FEDB  20                 	db	32
   373  00FEDC  20                 	db	32
   374  00FEDD  20                 	db	32
   375  00FEDE  20                 	db	32
   376  00FEDF  00                 	db	0
   377  00FEE0                     STR_87:
   378  00FEE0  4D                 	db	77	;'M'
   379  00FEE1  61                 	db	97	;'a'
   380  00FEE2  72                 	db	114	;'r'
   381  00FEE3  74                 	db	116	;'t'
   382  00FEE4  65                 	db	101	;'e'
   383  00FEE5  73                 	db	115	;'s'
   384  00FEE6  20                 	db	32
   385  00FEE7  20                 	db	32
   386  00FEE8  20                 	db	32
   387  00FEE9  20                 	db	32
   388  00FEEA  20                 	db	32
   389  00FEEB  20                 	db	32
   390  00FEEC  20                 	db	32
   391  00FEED  20                 	db	32
   392  00FEEE  20                 	db	32
   393  00FEEF  20                 	db	32
   394  00FEF0  20                 	db	32
   395  00FEF1  20                 	db	32
   396  00FEF2  20                 	db	32
   397  00FEF3  20                 	db	32
   398  00FEF4  00                 	db	0
   399  00FEF5                     STR_91:
   400  00FEF5  4A                 	db	74	;'J'
   401  00FEF6  75                 	db	117	;'u'
   402  00FEF7  65                 	db	101	;'e'
   403  00FEF8  76                 	db	118	;'v'
   404  00FEF9  65                 	db	101	;'e'
   405  00FEFA  73                 	db	115	;'s'
   406  00FEFB  20                 	db	32
   407  00FEFC  20                 	db	32
   408  00FEFD  20                 	db	32
   409  00FEFE  20                 	db	32
   410  00FEFF  20                 	db	32
   411  00FF00  20                 	db	32
   412  00FF01  20                 	db	32
   413  00FF02  20                 	db	32
   414  00FF03  20                 	db	32
   415  00FF04  20                 	db	32
   416  00FF05  20                 	db	32
   417  00FF06  20                 	db	32
   418  00FF07  20                 	db	32
   419  00FF08  20                 	db	32
   420  00FF09  00                 	db	0
   421  00FF0A                     STR_83:
   422  00FF0A  44                 	db	68	;'D'
   423  00FF0B  6F                 	db	111	;'o'
   424  00FF0C  6D                 	db	109	;'m'
   425  00FF0D  69                 	db	105	;'i'
   426  00FF0E  6E                 	db	110	;'n'
   427  00FF0F  67                 	db	103	;'g'
   428  00FF10  6F                 	db	111	;'o'
   429  00FF11  20                 	db	32
   430  00FF12  20                 	db	32
   431  00FF13  20                 	db	32
   432  00FF14  20                 	db	32
   433  00FF15  20                 	db	32
   434  00FF16  20                 	db	32
   435  00FF17  20                 	db	32
   436  00FF18  20                 	db	32
   437  00FF19  20                 	db	32
   438  00FF1A  20                 	db	32
   439  00FF1B  20                 	db	32
   440  00FF1C  20                 	db	32
   441  00FF1D  20                 	db	32
   442  00FF1E  00                 	db	0
   443  00FF1F                     STR_93:
   444  00FF1F  56                 	db	86	;'V'
   445  00FF20  69                 	db	105	;'i'
   446  00FF21  65                 	db	101	;'e'
   447  00FF22  72                 	db	114	;'r'
   448  00FF23  6E                 	db	110	;'n'
   449  00FF24  65                 	db	101	;'e'
   450  00FF25  73                 	db	115	;'s'
   451  00FF26  20                 	db	32
   452  00FF27  20                 	db	32
   453  00FF28  20                 	db	32
   454  00FF29  20                 	db	32
   455  00FF2A  20                 	db	32
   456  00FF2B  20                 	db	32
   457  00FF2C  20                 	db	32
   458  00FF2D  20                 	db	32
   459  00FF2E  20                 	db	32
   460  00FF2F  20                 	db	32
   461  00FF30  20                 	db	32
   462  00FF31  20                 	db	32
   463  00FF32  20                 	db	32
   464  00FF33  00                 	db	0
   465  00FF34                     STR_89:
   466  00FF34  4D                 	db	77	;'M'
   467  00FF35  69                 	db	105	;'i'
   468  00FF36  65                 	db	101	;'e'
   469  00FF37  72                 	db	114	;'r'
   470  00FF38  63                 	db	99	;'c'
   471  00FF39  6F                 	db	111	;'o'
   472  00FF3A  6C                 	db	108	;'l'
   473  00FF3B  65                 	db	101	;'e'
   474  00FF3C  73                 	db	115	;'s'
   475  00FF3D  20                 	db	32
   476  00FF3E  20                 	db	32
   477  00FF3F  20                 	db	32
   478  00FF40  20                 	db	32
   479  00FF41  20                 	db	32
   480  00FF42  20                 	db	32
   481  00FF43  20                 	db	32
   482  00FF44  20                 	db	32
   483  00FF45  20                 	db	32
   484  00FF46  20                 	db	32
   485  00FF47  20                 	db	32
   486  00FF48  00                 	db	0
   487  00FF49                     STR_73:
   488  00FF49  50                 	db	80	;'P'
   489  00FF4A  72                 	db	114	;'r'
   490  00FF4B  6F                 	db	111	;'o'
   491  00FF4C  67                 	db	103	;'g'
   492  00FF4D  72                 	db	114	;'r'
   493  00FF4E  61                 	db	97	;'a'
   494  00FF4F  6D                 	db	109	;'m'
   495  00FF50  61                 	db	97	;'a'
   496  00FF51  63                 	db	99	;'c'
   497  00FF52  69                 	db	105	;'i'
   498  00FF53  6F                 	db	111	;'o'
   499  00FF54  6E                 	db	110	;'n'
   500  00FF55  20                 	db	32
   501  00FF56  64                 	db	100	;'d'
   502  00FF57  65                 	db	101	;'e'
   503  00FF58  20                 	db	32
   504  00FF59  6C                 	db	108	;'l'
   505  00FF5A  61                 	db	97	;'a'
   506  00FF5B  20                 	db	32
   507  00FF5C  20                 	db	32
   508  00FF5D  00                 	db	0
   509  00FF5E                     STR_76:
   510  00FF5E  54                 	db	84	;'T'
   511  00FF5F  65                 	db	101	;'e'
   512  00FF60  6D                 	db	109	;'m'
   513  00FF61  70                 	db	112	;'p'
   514  00FF62  65                 	db	101	;'e'
   515  00FF63  72                 	db	114	;'r'
   516  00FF64  61                 	db	97	;'a'
   517  00FF65  74                 	db	116	;'t'
   518  00FF66  75                 	db	117	;'u'
   519  00FF67  72                 	db	114	;'r'
   520  00FF68  61                 	db	97	;'a'
   521  00FF69  3A                 	db	58	;':'
   522  00FF6A  20                 	db	32
   523  00FF6B  25                 	db	37
   524  00FF6C  2E                 	db	46
   525  00FF6D  31                 	db	49	;'1'
   526  00FF6E  66                 	db	102	;'f'
   527  00FF6F  25                 	db	37
   528  00FF70  63                 	db	99	;'c'
   529  00FF71  43                 	db	67	;'C'
   530  00FF72  00                 	db	0
   531  00FF73                     STR_74:
   532  00FF73  54                 	db	84	;'T'
   533  00FF74  65                 	db	101	;'e'
   534  00FF75  6D                 	db	109	;'m'
   535  00FF76  70                 	db	112	;'p'
   536  00FF77  65                 	db	101	;'e'
   537  00FF78  72                 	db	114	;'r'
   538  00FF79  61                 	db	97	;'a'
   539  00FF7A  74                 	db	116	;'t'
   540  00FF7B  75                 	db	117	;'u'
   541  00FF7C  72                 	db	114	;'r'
   542  00FF7D  61                 	db	97	;'a'
   543  00FF7E  20                 	db	32
   544  00FF7F  64                 	db	100	;'d'
   545  00FF80  65                 	db	101	;'e'
   546  00FF81  6C                 	db	108	;'l'
   547  00FF82  20                 	db	32
   548  00FF83  61                 	db	97	;'a'
   549  00FF84  67                 	db	103	;'g'
   550  00FF85  75                 	db	117	;'u'
   551  00FF86  61                 	db	97	;'a'
   552  00FF87  00                 	db	0
   553  00FF88                     STR_3:
   554  00FF88  43                 	db	67	;'C'
   555  00FF89  45                 	db	69	;'E'
   556  00FF8A  4E                 	db	78	;'N'
   557  00FF8B  54                 	db	84	;'T'
   558  00FF8C  45                 	db	69	;'E'
   559  00FF8D  52                 	db	82	;'R'
   560  00FF8E  20                 	db	32
   561  00FF8F  20                 	db	32
   562  00FF90  20                 	db	32
   563  00FF91  20                 	db	32
   564  00FF92  20                 	db	32
   565  00FF93  20                 	db	32
   566  00FF94  20                 	db	32
   567  00FF95  20                 	db	32
   568  00FF96  20                 	db	32
   569  00FF97  20                 	db	32
   570  00FF98  20                 	db	32
   571  00FF99  20                 	db	32
   572  00FF9A  20                 	db	32
   573  00FF9B  00                 	db	0
   574  00FF9C                     STR_6:
   575  00FF9C  50                 	db	80	;'P'
   576  00FF9D  72                 	db	114	;'r'
   577  00FF9E  6F                 	db	111	;'o'
   578  00FF9F  67                 	db	103	;'g'
   579  00FFA0  72                 	db	114	;'r'
   580  00FFA1  61                 	db	97	;'a'
   581  00FFA2  6D                 	db	109	;'m'
   582  00FFA3  20                 	db	32
   583  00FFA4  64                 	db	100	;'d'
   584  00FFA5  65                 	db	101	;'e'
   585  00FFA6  6C                 	db	108	;'l'
   586  00FFA7  20                 	db	32
   587  00FFA8  72                 	db	114	;'r'
   588  00FFA9  65                 	db	101	;'e'
   589  00FFAA  6C                 	db	108	;'l'
   590  00FFAB  6F                 	db	111	;'o'
   591  00FFAC  6A                 	db	106	;'j'
   592  00FFAD  00                 	db	0
   593  00FFAE                     STR_33:
   594  00FFAE  49                 	db	73	;'I'
   595  00FFAF  6E                 	db	110	;'n'
   596  00FFB0  69                 	db	105	;'i'
   597  00FFB1  63                 	db	99	;'c'
   598  00FFB2  20                 	db	32
   599  00FFB3  25                 	db	37
   600  00FFB4  30                 	db	48	;'0'
   601  00FFB5  32                 	db	50	;'2'
   602  00FFB6  75                 	db	117	;'u'
   603  00FFB7  3A                 	db	58	;':'
   604  00FFB8  25                 	db	37
   605  00FFB9  30                 	db	48	;'0'
   606  00FFBA  32                 	db	50	;'2'
   607  00FFBB  75                 	db	117	;'u'
   608  00FFBC  00                 	db	0
   609  00FFBD                     STR_34:
   610  00FFBD  46                 	db	70	;'F'
   611  00FFBE  69                 	db	105	;'i'
   612  00FFBF  6E                 	db	110	;'n'
   613  00FFC0  20                 	db	32
   614  00FFC1  25                 	db	37
   615  00FFC2  30                 	db	48	;'0'
   616  00FFC3  32                 	db	50	;'2'
   617  00FFC4  75                 	db	117	;'u'
   618  00FFC5  3A                 	db	58	;':'
   619  00FFC6  25                 	db	37
   620  00FFC7  30                 	db	48	;'0'
   621  00FFC8  32                 	db	50	;'2'
   622  00FFC9  75                 	db	117	;'u'
   623  00FFCA  00                 	db	0
   624  00FFCB                     STR_35:
   625  00FFCB  49                 	db	73	;'I'
   626  00FFCC  6C                 	db	108	;'l'
   627  00FFCD  75                 	db	117	;'u'
   628  00FFCE  6D                 	db	109	;'m'
   629  00FFCF  69                 	db	105	;'i'
   630  00FFD0  6E                 	db	110	;'n'
   631  00FFD1  61                 	db	97	;'a'
   632  00FFD2  63                 	db	99	;'c'
   633  00FFD3  69                 	db	105	;'i'
   634  00FFD4  6F                 	db	111	;'o'
   635  00FFD5  6E                 	db	110	;'n'
   636  00FFD6  00                 	db	0
   637  00FFD7                     STR_96:
   638  00FFD7  28                 	db	40
   639  00FFD8  6E                 	db	110	;'n'
   640  00FFD9  75                 	db	117	;'u'
   641  00FFDA  6C                 	db	108	;'l'
   642  00FFDB  6C                 	db	108	;'l'
   643  00FFDC  29                 	db	41
   644  00FFDD  00                 	db	0
   645  00FFDE                     STR_78:
   646  00FFDE  25                 	db	37
   647  00FFDF  30                 	db	48	;'0'
   648  00FFE0  2E                 	db	46
   649  00FFE1  31                 	db	49	;'1'
   650  00FFE2  66                 	db	102	;'f'
   651  00FFE3  00                 	db	0
   652  00FFE4                     STR_32:
   653  00FFE4  52                 	db	82	;'R'
   654  00FFE5  69                 	db	105	;'i'
   655  00FFE6  65                 	db	101	;'e'
   656  00FFE7  67                 	db	103	;'g'
   657  00FFE8  6F                 	db	111	;'o'
   658  00FFE9  00                 	db	0
   659  00FFEA                     STR_80:
   660  00FFEA  25                 	db	37
   661  00FFEB  2E                 	db	46
   662  00FFEC  31                 	db	49	;'1'
   663  00FFED  66                 	db	102	;'f'
   664  00FFEE  00                 	db	0
   665  00FFEF                     STR_1:
   666  00FFEF  25                 	db	37
   667  00FFF0  30                 	db	48	;'0'
   668  00FFF1  33                 	db	51	;'3'
   669  00FFF2  75                 	db	117	;'u'
   670  00FFF3  00                 	db	0
   671  00FFF4                     STR_82:
   672  00FFF4  25                 	db	37
   673  00FFF5  73                 	db	115	;'s'
   674  00FFF6  00                 	db	0
   675  0000                     
   676                           ; #config settings
   677  00FFF7  00                 	db	0	; dummy byte at the end
   678  0000                     
   679                           	psect	nvBANK0
   680  0000F3                     __pnvBANK0:
   681                           	opt stack 0
   682  0000F3                     _anio_d:
   683                           	opt stack 0
   684  0000F3                     	ds	1
   685  0000F4                     _anio_u:
   686                           	opt stack 0
   687  0000F4                     	ds	1
   688  0000F5                     _dia_semana:
   689                           	opt stack 0
   690  0000F5                     	ds	1
   691  0000F6                     _fecha_d:
   692                           	opt stack 0
   693  0000F6                     	ds	1
   694  0000F7                     _fecha_u:
   695                           	opt stack 0
   696  0000F7                     	ds	1
   697  0000F8                     _hora_d:
   698                           	opt stack 0
   699  0000F8                     	ds	1
   700  0000F9                     _hora_u:
   701                           	opt stack 0
   702  0000F9                     	ds	1
   703  0000FA                     _mes_d:
   704                           	opt stack 0
   705  0000FA                     	ds	1
   706  0000FB                     _mes_u:
   707                           	opt stack 0
   708  0000FB                     	ds	1
   709  0000FC                     _minuto_d:
   710                           	opt stack 0
   711  0000FC                     	ds	1
   712  0000FD                     _minuto_u:
   713                           	opt stack 0
   714  0000FD                     	ds	1
   715  0000FE                     _segundo_d:
   716                           	opt stack 0
   717  0000FE                     	ds	1
   718  0000FF                     _segundo_u:
   719                           	opt stack 0
   720  0000FF                     	ds	1
   721  0000                     _ANCON0	set	3912
   722  0000                     _ANCON1	set	3913
   723  0000                     _RTCCFG	set	3903
   724  0000                     _RTCCFGbits	set	3903
   725  0000                     _ADCON0	set	4034
   726  0000                     _ADCON0bits	set	4034
   727  0000                     _ADCON1	set	4033
   728  0000                     _ADRESH	set	4036
   729  0000                     _ALRMCFGbits	set	3985
   730  0000                     _EECON2	set	4007
   731  0000                     _INTCONbits	set	4082
   732  0000                     _LATAbits	set	3977
   733  0000                     _LATBbits	set	3978
   734  0000                     _OSCCONbits	set	4051
   735  0000                     _OSCTUNEbits	set	3995
   736  0000                     _PIE3bits	set	4003
   737  0000                     _PORTAbits	set	3968
   738  0000                     _PORTCbits	set	3970
   739  0000                     _RTCVALH	set	3993
   740  0000                     _RTCVALL	set	3992
   741  0000                     _T1CONbits	set	4045
   742  0000                     _TRISA	set	3986
   743  0000                     _TRISB	set	3987
   744  0000                     _TRISBbits	set	3987
   745  0000                     _TRISC	set	3988
   746                           
   747                           	psect	cinit
   748  00BC42                     __pcinit:
   749                           	opt stack 0
   750  00BC42                     start_initialization:
   751                           	opt stack 0
   752  00BC42                     __initialization:
   753                           	opt stack 0
   754                           
   755                           ; Clear objects allocated to BANK1 (8 bytes)
   756  00BC42  EE01  F038         	lfsr	0,__pbssBANK1
   757  00BC46  0E08               	movlw	8
   758  00BC48                     clear_0:
   759  00BC48  6AEE               	clrf	postinc0,c
   760  00BC4A  06E8               	decf	wreg,f,c
   761  00BC4C  E1FD               	bnz	clear_0
   762                           
   763                           ; Clear objects allocated to BANK0 (67 bytes)
   764  00BC4E  EE00  F060         	lfsr	0,__pbssBANK0
   765  00BC52  0E43               	movlw	67
   766  00BC54                     clear_1:
   767  00BC54  6AEE               	clrf	postinc0,c
   768  00BC56  06E8               	decf	wreg,f,c
   769  00BC58  E1FD               	bnz	clear_1
   770                           
   771                           ; Initialize objects allocated to BANK1 (56 bytes)
   772                           ; load TBLPTR registers with __pidataBANK1
   773  00BC5A  0E2A               	movlw	low __pidataBANK1
   774  00BC5C  6EF6               	movwf	tblptrl,c
   775  00BC5E  0EBB               	movlw	high __pidataBANK1
   776  00BC60  6EF7               	movwf	tblptrh,c
   777  00BC62  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   778  00BC64  6EF8               	movwf	tblptru,c
   779  00BC66  EE01  F000         	lfsr	0,__pdataBANK1
   780  00BC6A  EE10 F038          	lfsr	1,56
   781  00BC6E                     copy_data0:
   782  00BC6E  0009               	tblrd		*+
   783  00BC70  CFF5 FFEE          	movff	tablat,postinc0
   784  00BC74  50E5               	movf	postdec1,w,c
   785  00BC76  50E1               	movf	fsr1l,w,c
   786  00BC78  E1FA               	bnz	copy_data0
   787                           
   788                           ; Initialize objects allocated to BANK0 (20 bytes)
   789                           ; load TBLPTR registers with __pidataBANK0
   790  00BC7A  0E62               	movlw	low __pidataBANK0
   791  00BC7C  6EF6               	movwf	tblptrl,c
   792  00BC7E  0EBA               	movlw	high __pidataBANK0
   793  00BC80  6EF7               	movwf	tblptrh,c
   794  00BC82  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   795  00BC84  6EF8               	movwf	tblptru,c
   796  00BC86  EE00  F0DF         	lfsr	0,__pdataBANK0
   797  00BC8A  EE10 F014          	lfsr	1,20
   798  00BC8E                     copy_data1:
   799  00BC8E  0009               	tblrd		*+
   800  00BC90  CFF5 FFEE          	movff	tablat,postinc0
   801  00BC94  50E5               	movf	postdec1,w,c
   802  00BC96  50E1               	movf	fsr1l,w,c
   803  00BC98  E1FA               	bnz	copy_data1
   804  00BC9A                     end_of_initialization:
   805                           	opt stack 0
   806  00BC9A                     __end_of__initialization:
   807                           	opt stack 0
   808  00BC9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   809  00BC9C  6EF8               	movwf	tblptru,c
   810  00BC9E  0100               	movlb	0
   811  00BCA0  EF02  F06B         	goto	_main	;jump to C main() function
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           postdec1	equ	0xFE5
   819                           fsr1l	equ	0xFE1
   820                           
   821                           	psect	bssBANK0
   822  000060                     __pbssBANK0:
   823                           	opt stack 0
   824  000060                     _RtccAlrmTimeDate:
   825                           	opt stack 0
   826  000060                     	ds	8
   827  000068                     _RtccTimeDate:
   828                           	opt stack 0
   829  000068                     	ds	8
   830  000070                     _RtccTimeVal:
   831                           	opt stack 0
   832  000070                     	ds	4
   833  000074                     _diasem:
   834                           	opt stack 0
   835  000074                     	ds	2
   836  000076                     _i:
   837                           	opt stack 0
   838  000076                     	ds	2
   839  000078                     _segundo:
   840                           	opt stack 0
   841  000078                     	ds	2
   842  00007A                     _CuentamSeg:
   843                           	opt stack 0
   844  00007A                     	ds	1
   845  00007B                     _Flag_1:
   846                           	opt stack 0
   847  00007B                     	ds	1
   848  00007C                     _Humedad:
   849                           	opt stack 0
   850  00007C                     	ds	1
   851  00007D                     _Sw_Center:
   852                           	opt stack 0
   853  00007D                     	ds	1
   854  00007E                     _Sw_Down:
   855                           	opt stack 0
   856  00007E                     	ds	1
   857  00007F                     _Sw_Left:
   858                           	opt stack 0
   859  00007F                     	ds	1
   860  000080                     _Sw_Right:
   861                           	opt stack 0
   862  000080                     	ds	1
   863  000081                     _Sw_Up:
   864                           	opt stack 0
   865  000081                     	ds	1
   866  000082                     _fin_hora_ilum:
   867                           	opt stack 0
   868  000082                     	ds	1
   869  000083                     _fin_hora_riego:
   870                           	opt stack 0
   871  000083                     	ds	1
   872  000084                     _fin_min_ilum:
   873                           	opt stack 0
   874  000084                     	ds	1
   875  000085                     _fin_min_riego:
   876                           	opt stack 0
   877  000085                     	ds	1
   878  000086                     _lectura:
   879                           	opt stack 0
   880  000086                     	ds	1
   881  000087                     _buffer1:
   882                           	opt stack 0
   883  000087                     	ds	20
   884  00009B                     _RtccDate:
   885                           	opt stack 0
   886  00009B                     	ds	4
   887  00009F                     _RtccTime:
   888                           	opt stack 0
   889  00009F                     	ds	4
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           postinc0	equ	0xFEE
   895                           wreg	equ	0xFE8
   896                           postdec1	equ	0xFE5
   897                           fsr1l	equ	0xFE1
   898                           
   899                           	psect	dataBANK0
   900  0000DF                     __pdataBANK0:
   901                           	opt stack 0
   902  0000DF                     _grados:
   903                           	opt stack 0
   904  0000DF                     	ds	3
   905  0000E2                     _temp_prog:
   906                           	opt stack 0
   907  0000E2                     	ds	3
   908  0000E5                     _anio:
   909                           	opt stack 0
   910  0000E5                     	ds	2
   911  0000E7                     _dia:
   912                           	opt stack 0
   913  0000E7                     	ds	2
   914  0000E9                     _hora:
   915                           	opt stack 0
   916  0000E9                     	ds	2
   917  0000EB                     _mes:
   918                           	opt stack 0
   919  0000EB                     	ds	2
   920  0000ED                     _minuto:
   921                           	opt stack 0
   922  0000ED                     	ds	2
   923  0000EF                     _inicio_hora_ilum:
   924                           	opt stack 0
   925  0000EF                     	ds	1
   926  0000F0                     _inicio_hora_riego:
   927                           	opt stack 0
   928  0000F0                     	ds	1
   929  0000F1                     _inicio_min_ilum:
   930                           	opt stack 0
   931  0000F1                     	ds	1
   932  0000F2                     _inicio_min_riego:
   933                           	opt stack 0
   934  0000F2                     	ds	1
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	bssBANK1
   945  000138                     __pbssBANK1:
   946                           	opt stack 0
   947  000138                     _Rtcc_read_TimeDate:
   948                           	opt stack 0
   949  000138                     	ds	8
   950                           tblptru	equ	0xFF8
   951                           tblptrh	equ	0xFF7
   952                           tblptrl	equ	0xFF6
   953                           tablat	equ	0xFF5
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           postdec1	equ	0xFE5
   957                           fsr1l	equ	0xFE1
   958                           
   959                           	psect	dataBANK1
   960  000100                     __pdataBANK1:
   961                           	opt stack 0
   962  000100                     _posicionesUp:
   963                           	opt stack 0
   964  000100                     	ds	32
   965  000120                     _posicionesLeft:
   966                           	opt stack 0
   967  000120                     	ds	24
   968                           tblptru	equ	0xFF8
   969                           tblptrh	equ	0xFF7
   970                           tblptrl	equ	0xFF6
   971                           tablat	equ	0xFF5
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           postdec1	equ	0xFE5
   975                           fsr1l	equ	0xFE1
   976                           
   977                           	psect	cstackBANK0
   978  0000A3                     __pcstackBANK0:
   979                           	opt stack 0
   980  0000A3                     _sprintf$2458:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x0
   984  0000A3                     	ds	3
   985  0000A6                     sprintf@cp:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x3
   989  0000A6                     	ds	2
   990  0000A8                     sprintf@ap:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x5
   994  0000A8                     	ds	2
   995  0000AA                     sprintf@len:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x7
   999  0000AA                     	ds	2
  1000  0000AC                     sprintf@val:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x9
  1004  0000AC                     	ds	4
  1005  0000B0                     sprintf@tmpval:
  1006                           	opt stack 0
  1007                           
  1008                           ; 4 bytes @ 0xD
  1009  0000B0                     	ds	4
  1010  0000B4                     sprintf@exp:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x11
  1014  0000B4                     	ds	2
  1015  0000B6                     sprintf@flag:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x13
  1019  0000B6                     	ds	2
  1020  0000B8                     sprintf@fval:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x15
  1024  0000B8                     	ds	3
  1025  0000BB                     sprintf@width:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x18
  1029  0000BB                     	ds	2
  1030  0000BD                     sprintf@prec:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x1A
  1034  0000BD                     	ds	2
  1035  0000BF                     sprintf@c:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x1C
  1039  0000BF                     	ds	1
  1040  0000C0                     Convert_diasem@buffer_dia:
  1041                           	opt stack 0
  1042                           
  1043                           ; 20 bytes @ 0x1D
  1044  0000C0                     	ds	20
  1045  0000D4                     V_ProgReloj@diasem_tr:
  1046                           	opt stack 0
  1047  0000D4                     V_ProgRiegoIlum@i_hora_ilum_tr:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x31
  1051  0000D4                     	ds	1
  1052  0000D5                     V_ProgReloj@dia_tr:
  1053                           	opt stack 0
  1054  0000D5                     V_ProgRiegoIlum@i_min_ilum_tr:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0x32
  1058  0000D5                     	ds	1
  1059  0000D6                     V_ProgReloj@mes_tr:
  1060                           	opt stack 0
  1061  0000D6                     V_ProgRiegoIlum@d_hora_ilum_tr:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x33
  1065  0000D6                     	ds	1
  1066  0000D7                     V_ProgReloj@anio_tr:
  1067                           	opt stack 0
  1068  0000D7                     V_ProgRiegoIlum@d_min_ilum_tr:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x34
  1072  0000D7                     	ds	1
  1073  0000D8                     V_ProgReloj@hora_tr:
  1074                           	opt stack 0
  1075  0000D8                     V_ProgRiegoIlum@i_hora_riego_tr:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x35
  1079  0000D8                     	ds	1
  1080  0000D9                     V_ProgReloj@minuto_tr:
  1081                           	opt stack 0
  1082  0000D9                     V_ProgRiegoIlum@i_min_riego_tr:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x36
  1086  0000D9                     	ds	1
  1087  0000DA                     V_ProgRiegoIlum@d_hora_riego_tr:
  1088                           	opt stack 0
  1089  0000DA                     V_ProgReloj@posicion:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x37
  1093  0000DA                     	ds	1
  1094  0000DB                     V_ProgRiegoIlum@d_min_riego_tr:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x38
  1098  0000DB                     	ds	1
  1099  0000DC                     V_ProgRiegoIlum@posicion:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x39
  1103  0000DC                     	ds	2
  1104  0000DE                     ??_main:
  1105                           
  1106                           ; 0 bytes @ 0x3B
  1107  0000DE                     	ds	1
  1108                           tblptru	equ	0xFF8
  1109                           tblptrh	equ	0xFF7
  1110                           tblptrl	equ	0xFF6
  1111                           tablat	equ	0xFF5
  1112                           postinc0	equ	0xFEE
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1l	equ	0xFE1
  1116                           
  1117                           	psect	cstackCOMRAM
  1118  000001                     __pcstackCOMRAM:
  1119                           	opt stack 0
  1120  000001                     ??_Lcd_Cmd:
  1121  000001                     ??_Lcd_Chr_CP:
  1122  000001                     ??_control_leds_iluminacion:
  1123  000001                     ??_control_leds_riego:
  1124  000001                     ??_isdigit:
  1125  000001                     ??_lee_temperatura:
  1126  000001                     ?___awmod:
  1127                           	opt stack 0
  1128  000001                     ?___ftpack:
  1129                           	opt stack 0
  1130  000001                     ?___ftneg:
  1131                           	opt stack 0
  1132  000001                     ?__tdiv_to_l_:
  1133                           	opt stack 0
  1134  000001                     ?__div_to_l_:
  1135                           	opt stack 0
  1136  000001                     ?___lldiv:
  1137                           	opt stack 0
  1138  000001                     RtccReadDate@pDt:
  1139                           	opt stack 0
  1140  000001                     RtccReadTime@pTm:
  1141                           	opt stack 0
  1142  000001                     RtccWriteDate@pDt:
  1143                           	opt stack 0
  1144  000001                     RtccWriteTime@pTm:
  1145                           	opt stack 0
  1146  000001                     ___awmod@dividend:
  1147                           	opt stack 0
  1148  000001                     __div_to_l_@f1:
  1149                           	opt stack 0
  1150  000001                     ___ftpack@arg:
  1151                           	opt stack 0
  1152  000001                     __tdiv_to_l_@f1:
  1153                           	opt stack 0
  1154  000001                     ___ftneg@f1:
  1155                           	opt stack 0
  1156  000001                     ___lldiv@dividend:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x0
  1160  000001                     	ds	1
  1161  000002                     _isdigit$2222:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x1
  1165  000002                     	ds	1
  1166  000003                     Lcd_Chr_CP@data:
  1167                           	opt stack 0
  1168  000003                     Lcd_Cmd@data:
  1169                           	opt stack 0
  1170  000003                     RtccWriteDate@di:
  1171                           	opt stack 0
  1172  000003                     RtccWriteTime@di:
  1173                           	opt stack 0
  1174  000003                     isdigit@c:
  1175                           	opt stack 0
  1176  000003                     ___awmod@divisor:
  1177                           	opt stack 0
  1178  000003                     RtccReadDate@rTD1:
  1179                           	opt stack 0
  1180  000003                     RtccReadTime@rTD1:
  1181                           	opt stack 0
  1182                           
  1183                           ; 8 bytes @ 0x2
  1184  000003                     	ds	1
  1185  000004                     ??_Lcd_Init:
  1186  000004                     ___ftpack@exp:
  1187                           	opt stack 0
  1188  000004                     __div_to_l_@f2:
  1189                           	opt stack 0
  1190  000004                     __tdiv_to_l_@f2:
  1191                           	opt stack 0
  1192                           
  1193                           ; 3 bytes @ 0x3
  1194  000004                     	ds	1
  1195  000005                     Lcd_Init@data:
  1196                           	opt stack 0
  1197  000005                     RtccWriteDate@wasOn:
  1198                           	opt stack 0
  1199  000005                     RtccWriteTime@wasOn:
  1200                           	opt stack 0
  1201  000005                     ___awmod@counter:
  1202                           	opt stack 0
  1203  000005                     ___ftpack@sign:
  1204                           	opt stack 0
  1205  000005                     ___lldiv@divisor:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0x4
  1209  000005                     	ds	1
  1210  000006                     ??___ftpack:
  1211  000006                     RtccWriteDate@wasAlrm:
  1212                           	opt stack 0
  1213  000006                     RtccWriteTime@wasAlrm:
  1214                           	opt stack 0
  1215  000006                     ___awmod@sign:
  1216                           	opt stack 0
  1217                           
  1218                           ; 1 bytes @ 0x5
  1219  000006                     	ds	1
  1220  000007                     ??__tdiv_to_l_:
  1221  000007                     ?___awdiv:
  1222                           	opt stack 0
  1223  000007                     RtccWriteTime@wasWrEn:
  1224                           	opt stack 0
  1225  000007                     RtccWriteDate@tempYear:
  1226                           	opt stack 0
  1227  000007                     ___awdiv@dividend:
  1228                           	opt stack 0
  1229  000007                     __div_to_l_@quot:
  1230                           	opt stack 0
  1231                           
  1232                           ; 4 bytes @ 0x6
  1233  000007                     	ds	1
  1234  000008                     RtccWriteTime@tempMinSec:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x7
  1238  000008                     	ds	1
  1239  000009                     ?___lbtoft:
  1240                           	opt stack 0
  1241  000009                     ?___lltoft:
  1242                           	opt stack 0
  1243  000009                     RtccWriteDate@wasWrEn:
  1244                           	opt stack 0
  1245  000009                     ___awdiv@divisor:
  1246                           	opt stack 0
  1247  000009                     ___lldiv@quotient:
  1248                           	opt stack 0
  1249  000009                     ___lltoft@c:
  1250                           	opt stack 0
  1251                           
  1252                           ; 4 bytes @ 0x8
  1253  000009                     	ds	1
  1254  00000A                     RtccWriteDate@tempDayMonth:
  1255                           	opt stack 0
  1256  00000A                     RtccWriteTime@tempHourWDay:
  1257                           	opt stack 0
  1258  00000A                     __tdiv_to_l_@quot:
  1259                           	opt stack 0
  1260                           
  1261                           ; 4 bytes @ 0x9
  1262  00000A                     	ds	1
  1263  00000B                     ___awdiv@counter:
  1264                           	opt stack 0
  1265  00000B                     __div_to_l_@cntr:
  1266                           	opt stack 0
  1267  00000B                     RtccReadDate@rTD0:
  1268                           	opt stack 0
  1269  00000B                     RtccReadTime@rTD0:
  1270                           	opt stack 0
  1271                           
  1272                           ; 8 bytes @ 0xA
  1273  00000B                     	ds	1
  1274  00000C                     ___awdiv@sign:
  1275                           	opt stack 0
  1276  00000C                     __div_to_l_@exp1:
  1277                           	opt stack 0
  1278  00000C                     ___lbtoft@c:
  1279                           	opt stack 0
  1280  00000C                     RtccWriteDate@tempHourWDay:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0xB
  1284  00000C                     	ds	1
  1285  00000D                     ??___lltoft:
  1286  00000D                     ___lldiv@counter:
  1287                           	opt stack 0
  1288  00000D                     ___awdiv@quotient:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0xC
  1292  00000D                     	ds	1
  1293  00000E                     ?___llmod:
  1294                           	opt stack 0
  1295  00000E                     __tdiv_to_l_@cntr:
  1296                           	opt stack 0
  1297  00000E                     ___llmod@dividend:
  1298                           	opt stack 0
  1299                           
  1300                           ; 4 bytes @ 0xD
  1301  00000E                     	ds	1
  1302  00000F                     ?___wmul:
  1303                           	opt stack 0
  1304  00000F                     __tdiv_to_l_@exp1:
  1305                           	opt stack 0
  1306  00000F                     ___wmul@multiplier:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0xE
  1310  00000F                     	ds	2
  1311  000011                     ___lltoft@exp:
  1312                           	opt stack 0
  1313  000011                     ___wmul@multiplicand:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x10
  1317  000011                     	ds	1
  1318  000012                     ___llmod@divisor:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x11
  1322  000012                     	ds	1
  1323  000013                     ___wmul@product:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x12
  1327  000013                     	ds	2
  1328  000015                     ?___ftmul:
  1329                           	opt stack 0
  1330  000015                     ___ftmul@f1:
  1331                           	opt stack 0
  1332                           
  1333                           ; 3 bytes @ 0x14
  1334  000015                     	ds	1
  1335  000016                     ___llmod@counter:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x15
  1339  000016                     	ds	2
  1340  000018                     ___ftmul@f2:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x17
  1344  000018                     	ds	3
  1345  00001B                     ??___ftmul:
  1346                           
  1347                           ; 0 bytes @ 0x1A
  1348  00001B                     	ds	3
  1349  00001E                     ___ftmul@exp:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x1D
  1353  00001E                     	ds	1
  1354  00001F                     ___ftmul@f3_as_product:
  1355                           	opt stack 0
  1356                           
  1357                           ; 3 bytes @ 0x1E
  1358  00001F                     	ds	3
  1359  000022                     ___ftmul@cntr:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x21
  1363  000022                     	ds	1
  1364  000023                     ___ftmul@sign:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x22
  1368  000023                     	ds	1
  1369  000024                     ?_fround:
  1370                           	opt stack 0
  1371  000024                     ?_scale:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0x23
  1375  000024                     	ds	3
  1376  000027                     _fround$2456:
  1377                           	opt stack 0
  1378  000027                     _scale$2457:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0x26
  1382  000027                     	ds	3
  1383  00002A                     scale@scl:
  1384                           	opt stack 0
  1385  00002A                     _fround$2455:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x29
  1389  00002A                     	ds	1
  1390  00002B                     ?___fttol:
  1391                           	opt stack 0
  1392  00002B                     ___fttol@f1:
  1393                           	opt stack 0
  1394                           
  1395                           ; 3 bytes @ 0x2A
  1396  00002B                     	ds	2
  1397  00002D                     fround@prec:
  1398                           	opt stack 0
  1399                           
  1400                           ; 1 bytes @ 0x2C
  1401  00002D                     	ds	1
  1402  00002E                     ?___ftadd:
  1403                           	opt stack 0
  1404  00002E                     ___ftadd@f1:
  1405                           	opt stack 0
  1406                           
  1407                           ; 3 bytes @ 0x2D
  1408  00002E                     	ds	1
  1409  00002F                     ??___fttol:
  1410                           
  1411                           ; 0 bytes @ 0x2E
  1412  00002F                     	ds	2
  1413  000031                     ___ftadd@f2:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x30
  1417  000031                     	ds	3
  1418  000034                     ??___ftadd:
  1419  000034                     ___fttol@sign1:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x33
  1423  000034                     	ds	1
  1424  000035                     ___fttol@lval:
  1425                           	opt stack 0
  1426                           
  1427                           ; 4 bytes @ 0x34
  1428  000035                     	ds	2
  1429  000037                     ___ftadd@sign:
  1430                           	opt stack 0
  1431                           
  1432                           ; 1 bytes @ 0x36
  1433  000037                     	ds	1
  1434  000038                     ___ftadd@exp2:
  1435                           	opt stack 0
  1436                           
  1437                           ; 1 bytes @ 0x37
  1438  000038                     	ds	1
  1439  000039                     ___ftadd@exp1:
  1440                           	opt stack 0
  1441  000039                     ___fttol@exp1:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x38
  1445  000039                     	ds	1
  1446  00003A                     ?___ftsub:
  1447                           	opt stack 0
  1448  00003A                     ?___awtoft:
  1449                           	opt stack 0
  1450  00003A                     ___awtoft@c:
  1451                           	opt stack 0
  1452  00003A                     ___ftge@ff1:
  1453                           	opt stack 0
  1454  00003A                     ___ftsub@f1:
  1455                           	opt stack 0
  1456                           
  1457                           ; 3 bytes @ 0x39
  1458  00003A                     	ds	3
  1459  00003D                     ___awtoft@sign:
  1460                           	opt stack 0
  1461  00003D                     ___ftge@ff2:
  1462                           	opt stack 0
  1463  00003D                     ___ftsub@f2:
  1464                           	opt stack 0
  1465                           
  1466                           ; 3 bytes @ 0x3C
  1467  00003D                     	ds	1
  1468  00003E                     ?___ftdiv:
  1469                           	opt stack 0
  1470  00003E                     ___ftdiv@f1:
  1471                           	opt stack 0
  1472                           
  1473                           ; 3 bytes @ 0x3D
  1474  00003E                     	ds	2
  1475  000040                     ??___ftge:
  1476                           
  1477                           ; 0 bytes @ 0x3F
  1478  000040                     	ds	1
  1479  000041                     ___ftdiv@f2:
  1480                           	opt stack 0
  1481                           
  1482                           ; 3 bytes @ 0x40
  1483  000041                     	ds	2
  1484  000043                     ?_sprintf:
  1485                           	opt stack 0
  1486  000043                     sprintf@sp:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x42
  1490  000043                     	ds	1
  1491  000044                     ??___ftdiv:
  1492                           
  1493                           ; 0 bytes @ 0x43
  1494  000044                     	ds	1
  1495  000045                     sprintf@f:
  1496                           	opt stack 0
  1497                           
  1498                           ; 2 bytes @ 0x44
  1499  000045                     	ds	2
  1500  000047                     ___ftdiv@cntr:
  1501                           	opt stack 0
  1502                           
  1503                           ; 1 bytes @ 0x46
  1504  000047                     	ds	1
  1505  000048                     ___ftdiv@f3:
  1506                           	opt stack 0
  1507                           
  1508                           ; 3 bytes @ 0x47
  1509  000048                     	ds	3
  1510  00004B                     ___ftdiv@exp:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x4A
  1514  00004B                     	ds	1
  1515  00004C                     ___ftdiv@sign:
  1516                           	opt stack 0
  1517                           
  1518                           ; 1 bytes @ 0x4B
  1519  00004C                     	ds	1
  1520  00004D                     ??_sprintf:
  1521  00004D                     control_temperatura_agua@grados_tr:
  1522                           	opt stack 0
  1523                           
  1524                           ; 3 bytes @ 0x4C
  1525  00004D                     	ds	6
  1526  000053                     ?_Convert_diasem:
  1527                           	opt stack 0
  1528  000053                     Convert_diasem@dia:
  1529                           	opt stack 0
  1530                           
  1531                           ; 2 bytes @ 0x52
  1532  000053                     	ds	2
  1533  000055                     ??_Convert_diasem:
  1534                           
  1535                           ; 0 bytes @ 0x54
  1536  000055                     	ds	2
  1537  000057                     Lcd_Out@x:
  1538                           	opt stack 0
  1539                           
  1540                           ; 1 bytes @ 0x56
  1541  000057                     	ds	1
  1542  000058                     Lcd_Out@buffer:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x57
  1546  000058                     	ds	2
  1547  00005A                     Lcd_Out@y:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x59
  1551  00005A                     	ds	1
  1552  00005B                     Lcd_Out@data:
  1553                           	opt stack 0
  1554                           
  1555                           ; 1 bytes @ 0x5A
  1556  00005B                     	ds	1
  1557  00005C                     ??_V_ProgReloj:
  1558  00005C                     ??_V_ProgTempAgua:
  1559  00005C                     ??_V_ProgRiegoIlum:
  1560  00005C                     V_Principal@cte:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x5B
  1564  00005C                     	ds	1
  1565  00005D                     V_ProgTempAgua@temp_prog_tr:
  1566                           	opt stack 0
  1567                           
  1568                           ; 3 bytes @ 0x5C
  1569  00005D                     	ds	3
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579 ;;
  1580 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1581 ;;
  1582 ;; *************** function _main *****************
  1583 ;; Defined at:
  1584 ;;		line 145 in file "../main.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;		None               void
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1601 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1602 ;;Total ram usage:        1 bytes
  1603 ;; Hardware stack levels required when called:    6
  1604 ;; This function calls:
  1605 ;;		_Lcd_Cmd
  1606 ;;		_Lcd_Init
  1607 ;;		_Lcd_Out
  1608 ;;		_V_Principal
  1609 ;;		_V_ProgReloj
  1610 ;;		_V_ProgRiegoIlum
  1611 ;;		_V_ProgTempAgua
  1612 ;;		_Write_RTC
  1613 ;;		_control_leds_iluminacion
  1614 ;;		_control_leds_riego
  1615 ;;		_control_temperatura_agua
  1616 ;;		_sprintf
  1617 ;; This function is called by:
  1618 ;;		Startup code after reset
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text0
  1623  00D604                     __ptext0:
  1624                           	opt stack 0
  1625  00D604                     _main:
  1626                           	opt stack 25
  1627                           
  1628                           ;main.c: 146: OSCTUNEbits.INTSRC = 1;
  1629                           
  1630                           ;incstack = 0
  1631  00D604  8E9B               	bsf	3995,7,c	;volatile
  1632                           
  1633                           ;main.c: 147: OSCTUNEbits.PLLEN = 0;
  1634  00D606  9C9B               	bcf	3995,6,c	;volatile
  1635                           
  1636                           ;main.c: 148: OSCCONbits.IRCF0 = 1;
  1637  00D608  88D3               	bsf	4051,4,c	;volatile
  1638                           
  1639                           ;main.c: 149: OSCCONbits.IRCF1 = 1;
  1640  00D60A  8AD3               	bsf	4051,5,c	;volatile
  1641                           
  1642                           ;main.c: 150: OSCCONbits.IRCF2 = 1;
  1643  00D60C  8CD3               	bsf	4051,6,c	;volatile
  1644                           
  1645                           ;main.c: 151: OSCCONbits.SCS0 = 0;
  1646  00D60E  90D3               	bcf	4051,0,c	;volatile
  1647                           
  1648                           ;main.c: 152: OSCCONbits.SCS1 = 0;
  1649  00D610  92D3               	bcf	4051,1,c	;volatile
  1650                           
  1651                           ;main.c: 154: RTCCFGbits.RTCEN = 1;
  1652  00D612  010F               	movlb	15	; () banked
  1653  00D614  8F3F               	bsf	63,7,b	;volatile
  1654                           
  1655                           ;main.c: 155: RTCCFGbits.RTCWREN = 1;
  1656  00D616  010F               	movlb	15	; () banked
  1657  00D618  8B3F               	bsf	63,5,b	;volatile
  1658                           
  1659                           ;main.c: 156: T1CONbits.T1OSCEN = 1;
  1660  00D61A  86CD               	bsf	4045,3,c	;volatile
  1661                           
  1662                           ; BSR set to: 15
  1663                           ;main.c: 158: TRISA = 0b11111101;
  1664  00D61C  0EFD               	movlw	253
  1665  00D61E  6E92               	movwf	3986,c	;volatile
  1666                           
  1667                           ;main.c: 159: TRISB = 0;
  1668  00D620  0E00               	movlw	0
  1669  00D622  6E93               	movwf	3987,c	;volatile
  1670                           
  1671                           ; BSR set to: 15
  1672                           ;main.c: 160: TRISC = 0b11111111;
  1673  00D624  6894               	setf	3988,c	;volatile
  1674                           
  1675                           ; BSR set to: 15
  1676                           ;main.c: 161: ANCON0 = 0b11111111;
  1677  00D626  010F               	movlb	15	; () banked
  1678  00D628  6948               	setf	72,b	;volatile
  1679                           
  1680                           ;main.c: 162: ANCON1 = 0b11110111;
  1681  00D62A  0EF7               	movlw	247
  1682  00D62C  010F               	movlb	15	; () banked
  1683  00D62E  6F49               	movwf	73,b	;volatile
  1684                           
  1685                           ;main.c: 163: ADCON0 = 0b00101111;
  1686  00D630  0E2F               	movlw	47
  1687  00D632  6EC2               	movwf	4034,c	;volatile
  1688                           
  1689                           ;main.c: 164: ADCON1 = 0b00111001;
  1690  00D634  0E39               	movlw	57
  1691  00D636  6EC1               	movwf	4033,c	;volatile
  1692                           
  1693                           ; BSR set to: 15
  1694                           ;main.c: 166: Write_RTC();
  1695  00D638  EC5E  F068         	call	_Write_RTC	;wreg free
  1696                           
  1697                           ;main.c: 167: Lcd_Init();
  1698  00D63C  ECA1  F063         	call	_Lcd_Init	;wreg free
  1699                           
  1700                           ;main.c: 168: Lcd_Cmd(1);
  1701  00D640  0E01               	movlw	1
  1702  00D642  ECBD  F064         	call	_Lcd_Cmd
  1703                           
  1704                           ;main.c: 169: Lcd_Cmd(12);
  1705  00D646  0E0C               	movlw	12
  1706  00D648  ECBD  F064         	call	_Lcd_Cmd
  1707                           
  1708                           ;main.c: 172: _delay((unsigned long)((98)*(8000000/4000.0)));
  1709  00D64C  0EFF               	movlw	255
  1710  00D64E  0100               	movlb	0	; () banked
  1711  00D650  6FDE               	movwf	??_main& (0+255),b
  1712  00D652  0E8A               	movlw	138
  1713  00D654                     u6817:
  1714  00D654  2EE8               	decfsz	wreg,f,c
  1715  00D656  D7FE               	goto	u6817
  1716  00D658  2FDE               	decfsz	??_main& (0+255),f,b
  1717  00D65A  D7FC               	goto	u6817
  1718  00D65C  D000               	nop2	
  1719                           
  1720                           ;main.c: 173: _delay((unsigned long)((98)*(8000000/4000.0)));
  1721  00D65E  0EFF               	movlw	255
  1722  00D660  0100               	movlb	0	; () banked
  1723  00D662  6FDE               	movwf	??_main& (0+255),b
  1724  00D664  0E8A               	movlw	138
  1725  00D666                     u6827:
  1726  00D666  2EE8               	decfsz	wreg,f,c
  1727  00D668  D7FE               	goto	u6827
  1728  00D66A  2FDE               	decfsz	??_main& (0+255),f,b
  1729  00D66C  D7FC               	goto	u6827
  1730  00D66E  D000               	nop2	
  1731                           
  1732                           ;main.c: 174: _delay((unsigned long)((98)*(8000000/4000.0)));
  1733  00D670  0EFF               	movlw	255
  1734  00D672  0100               	movlb	0	; () banked
  1735  00D674  6FDE               	movwf	??_main& (0+255),b
  1736  00D676  0E8A               	movlw	138
  1737  00D678                     u6837:
  1738  00D678  2EE8               	decfsz	wreg,f,c
  1739  00D67A  D7FE               	goto	u6837
  1740  00D67C  2FDE               	decfsz	??_main& (0+255),f,b
  1741  00D67E  D7FC               	goto	u6837
  1742  00D680  D000               	nop2	
  1743                           
  1744                           ;main.c: 175: _delay((unsigned long)((98)*(8000000/4000.0)));
  1745  00D682  0EFF               	movlw	255
  1746  00D684  0100               	movlb	0	; () banked
  1747  00D686  6FDE               	movwf	??_main& (0+255),b
  1748  00D688  0E8A               	movlw	138
  1749  00D68A                     u6847:
  1750  00D68A  2EE8               	decfsz	wreg,f,c
  1751  00D68C  D7FE               	goto	u6847
  1752  00D68E  2FDE               	decfsz	??_main& (0+255),f,b
  1753  00D690  D7FC               	goto	u6847
  1754  00D692  D000               	nop2	
  1755                           
  1756                           ;main.c: 176: _delay((unsigned long)((98)*(8000000/4000.0)));
  1757  00D694  0EFF               	movlw	255
  1758  00D696  0100               	movlb	0	; () banked
  1759  00D698  6FDE               	movwf	??_main& (0+255),b
  1760  00D69A  0E8A               	movlw	138
  1761  00D69C                     u6857:
  1762  00D69C  2EE8               	decfsz	wreg,f,c
  1763  00D69E  D7FE               	goto	u6857
  1764  00D6A0  2FDE               	decfsz	??_main& (0+255),f,b
  1765  00D6A2  D7FC               	goto	u6857
  1766  00D6A4  D000               	nop2	
  1767                           
  1768                           ;main.c: 177: _delay((unsigned long)((98)*(8000000/4000.0)));
  1769  00D6A6  0EFF               	movlw	255
  1770  00D6A8  0100               	movlb	0	; () banked
  1771  00D6AA  6FDE               	movwf	??_main& (0+255),b
  1772  00D6AC  0E8A               	movlw	138
  1773  00D6AE                     u6867:
  1774  00D6AE  2EE8               	decfsz	wreg,f,c
  1775  00D6B0  D7FE               	goto	u6867
  1776  00D6B2  2FDE               	decfsz	??_main& (0+255),f,b
  1777  00D6B4  D7FC               	goto	u6867
  1778  00D6B6  D000               	nop2	
  1779                           
  1780                           ;main.c: 178: _delay((unsigned long)((98)*(8000000/4000.0)));
  1781  00D6B8  0EFF               	movlw	255
  1782  00D6BA  0100               	movlb	0	; () banked
  1783  00D6BC  6FDE               	movwf	??_main& (0+255),b
  1784  00D6BE  0E8A               	movlw	138
  1785  00D6C0                     u6877:
  1786  00D6C0  2EE8               	decfsz	wreg,f,c
  1787  00D6C2  D7FE               	goto	u6877
  1788  00D6C4  2FDE               	decfsz	??_main& (0+255),f,b
  1789  00D6C6  D7FC               	goto	u6877
  1790  00D6C8  D000               	nop2	
  1791                           
  1792                           ;main.c: 179: _delay((unsigned long)((98)*(8000000/4000.0)));
  1793  00D6CA  0EFF               	movlw	255
  1794  00D6CC  0100               	movlb	0	; () banked
  1795  00D6CE  6FDE               	movwf	??_main& (0+255),b
  1796  00D6D0  0E8A               	movlw	138
  1797  00D6D2                     u6887:
  1798  00D6D2  2EE8               	decfsz	wreg,f,c
  1799  00D6D4  D7FE               	goto	u6887
  1800  00D6D6  2FDE               	decfsz	??_main& (0+255),f,b
  1801  00D6D8  D7FC               	goto	u6887
  1802  00D6DA  D000               	nop2	
  1803                           
  1804                           ;main.c: 180: Lcd_Cmd(1);
  1805  00D6DC  0E01               	movlw	1
  1806  00D6DE  ECBD  F064         	call	_Lcd_Cmd
  1807  00D6E2  D000               	goto	l5532
  1808  00D6E4                     l5532:
  1809                           
  1810                           ;main.c: 187: V_Principal();
  1811  00D6E4  ECEC  F060         	call	_V_Principal	;wreg free
  1812                           
  1813                           ;main.c: 189: control_leds_iluminacion();
  1814  00D6E8  ECC1  F05E         	call	_control_leds_iluminacion	;wreg free
  1815                           
  1816                           ;main.c: 190: control_leds_riego();
  1817  00D6EC  EC3B  F05F         	call	_control_leds_riego	;wreg free
  1818                           
  1819                           ;main.c: 191: control_temperatura_agua();
  1820  00D6F0  EC0E  F06A         	call	_control_temperatura_agua	;wreg free
  1821                           
  1822                           ;main.c: 192: sprintf(buffer1, "%03u", lectura);
  1823  00D6F4  0E87               	movlw	low _buffer1
  1824  00D6F6  6E43               	movwf	sprintf@sp,c
  1825  00D6F8  0E00               	movlw	high _buffer1
  1826  00D6FA  6E44               	movwf	sprintf@sp+1,c
  1827  00D6FC  0EEF               	movlw	low STR_1
  1828  00D6FE  6E45               	movwf	sprintf@f,c
  1829  00D700  0EFF               	movlw	high STR_1
  1830  00D702  6E46               	movwf	sprintf@f+1,c
  1831  00D704  C086  F047         	movff	_lectura,?_sprintf+4
  1832  00D708  6A48               	clrf	?_sprintf+5,c
  1833  00D70A  ECFF  F077         	call	_sprintf	;wreg free
  1834                           
  1835                           ;main.c: 193: Lcd_Out(1, 0, buffer1);
  1836  00D70E  0E00               	movlw	0
  1837  00D710  6E57               	movwf	Lcd_Out@x,c
  1838  00D712  0E87               	movlw	low _buffer1
  1839  00D714  6E58               	movwf	Lcd_Out@buffer,c
  1840  00D716  0E00               	movlw	high _buffer1
  1841  00D718  6E59               	movwf	Lcd_Out@buffer+1,c
  1842  00D71A  0E01               	movlw	1
  1843  00D71C  EC0C  F060         	call	_Lcd_Out
  1844                           
  1845                           ;main.c: 197: if (Sw_Left = PORTAbits.RA0 == 0) {
  1846  00D720  B080               	btfsc	3968,0,c	;volatile
  1847  00D722  D002               	goto	u6660
  1848  00D724  0E01               	movlw	1
  1849  00D726  D001               	goto	u6670
  1850  00D728                     u6660:
  1851  00D728  0E00               	movlw	0
  1852  00D72A                     u6670:
  1853  00D72A  0100               	movlb	0	; () banked
  1854  00D72C  6F7F               	movwf	_Sw_Left& (0+255),b
  1855  00D72E  0100               	movlb	0	; () banked
  1856  00D730  517F               	movf	_Sw_Left& (0+255),w,b
  1857  00D732  B4D8               	btfsc	status,2,c
  1858  00D734  D003               	goto	l5548
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;main.c: 199: V_ProgReloj();
  1862  00D736  EC51  F070         	call	_V_ProgReloj	;wreg free
  1863  00D73A  D000               	goto	l5548
  1864  00D73C                     l5548:
  1865                           
  1866                           ;main.c: 200: }
  1867                           ;main.c: 202: if (Sw_Down = PORTCbits.RC4 == 0) {
  1868  00D73C  B882               	btfsc	3970,4,c	;volatile
  1869  00D73E  D002               	goto	u6690
  1870  00D740  0E01               	movlw	1
  1871  00D742  D001               	goto	u6700
  1872  00D744                     u6690:
  1873  00D744  0E00               	movlw	0
  1874  00D746                     u6700:
  1875  00D746  0100               	movlb	0	; () banked
  1876  00D748  6F7E               	movwf	_Sw_Down& (0+255),b
  1877  00D74A  0100               	movlb	0	; () banked
  1878  00D74C  517E               	movf	_Sw_Down& (0+255),w,b
  1879  00D74E  B4D8               	btfsc	status,2,c
  1880  00D750  D017               	goto	l5554
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 203: sprintf(buffer1, "%03u", lectura);
  1884  00D752  0E87               	movlw	low _buffer1
  1885  00D754  6E43               	movwf	sprintf@sp,c
  1886  00D756  0E00               	movlw	high _buffer1
  1887  00D758  6E44               	movwf	sprintf@sp+1,c
  1888  00D75A  0EEF               	movlw	low STR_1
  1889  00D75C  6E45               	movwf	sprintf@f,c
  1890  00D75E  0EFF               	movlw	high STR_1
  1891  00D760  6E46               	movwf	sprintf@f+1,c
  1892  00D762  C086  F047         	movff	_lectura,?_sprintf+4
  1893  00D766  6A48               	clrf	?_sprintf+5,c
  1894  00D768  ECFF  F077         	call	_sprintf	;wreg free
  1895                           
  1896                           ;main.c: 204: Lcd_Out(4, 0, buffer1);
  1897  00D76C  0E00               	movlw	0
  1898  00D76E  6E57               	movwf	Lcd_Out@x,c
  1899  00D770  0E87               	movlw	low _buffer1
  1900  00D772  6E58               	movwf	Lcd_Out@buffer,c
  1901  00D774  0E00               	movlw	high _buffer1
  1902  00D776  6E59               	movwf	Lcd_Out@buffer+1,c
  1903  00D778  0E04               	movlw	4
  1904  00D77A  EC0C  F060         	call	_Lcd_Out
  1905  00D77E  D000               	goto	l5554
  1906  00D780                     l5554:
  1907                           
  1908                           ;main.c: 205: }
  1909                           ;main.c: 207: if (Sw_Right = PORTAbits.RA2 == 0) {
  1910  00D780  B480               	btfsc	3968,2,c	;volatile
  1911  00D782  D002               	goto	u6720
  1912  00D784  0E01               	movlw	1
  1913  00D786  D001               	goto	u6730
  1914  00D788                     u6720:
  1915  00D788  0E00               	movlw	0
  1916  00D78A                     u6730:
  1917  00D78A  0100               	movlb	0	; () banked
  1918  00D78C  6F80               	movwf	_Sw_Right& (0+255),b
  1919  00D78E  0100               	movlb	0	; () banked
  1920  00D790  5180               	movf	_Sw_Right& (0+255),w,b
  1921  00D792  B4D8               	btfsc	status,2,c
  1922  00D794  D003               	goto	l5558
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;main.c: 208: V_ProgTempAgua();
  1926  00D796  EC1D  F06D         	call	_V_ProgTempAgua	;wreg free
  1927  00D79A  D000               	goto	l5558
  1928  00D79C                     l5558:
  1929                           
  1930                           ;main.c: 209: }
  1931                           ;main.c: 211: if (Sw_Up = PORTAbits.RA3 == 0) {
  1932  00D79C  B680               	btfsc	3968,3,c	;volatile
  1933  00D79E  D002               	goto	u6750
  1934  00D7A0  0E01               	movlw	1
  1935  00D7A2  D001               	goto	u6760
  1936  00D7A4                     u6750:
  1937  00D7A4  0E00               	movlw	0
  1938  00D7A6                     u6760:
  1939  00D7A6  0100               	movlb	0	; () banked
  1940  00D7A8  6F81               	movwf	_Sw_Up& (0+255),b
  1941  00D7AA  0100               	movlb	0	; () banked
  1942  00D7AC  5181               	movf	_Sw_Up& (0+255),w,b
  1943  00D7AE  B4D8               	btfsc	status,2,c
  1944  00D7B0  D003               	goto	l5562
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;main.c: 212: V_ProgRiegoIlum();
  1948  00D7B2  EC8D  F073         	call	_V_ProgRiegoIlum	;wreg free
  1949  00D7B6  D000               	goto	l5562
  1950  00D7B8                     l5562:
  1951                           
  1952                           ;main.c: 213: }
  1953                           ;main.c: 215: if (Sw_Center = PORTAbits.RA5 == 0) {
  1954  00D7B8  BA80               	btfsc	3968,5,c	;volatile
  1955  00D7BA  D002               	goto	u6780
  1956  00D7BC  0E01               	movlw	1
  1957  00D7BE  D001               	goto	u6790
  1958  00D7C0                     u6780:
  1959  00D7C0  0E00               	movlw	0
  1960  00D7C2                     u6790:
  1961  00D7C2  0100               	movlb	0	; () banked
  1962  00D7C4  6F7D               	movwf	_Sw_Center& (0+255),b
  1963  00D7C6  0100               	movlb	0	; () banked
  1964  00D7C8  517D               	movf	_Sw_Center& (0+255),w,b
  1965  00D7CA  B4D8               	btfsc	status,2,c
  1966  00D7CC  D78B               	goto	l5532
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;main.c: 216: Lcd_Cmd(1);
  1970  00D7CE  0E01               	movlw	1
  1971  00D7D0  ECBD  F064         	call	_Lcd_Cmd
  1972                           
  1973                           ;main.c: 217: Lcd_Out(2, 0, "CENTER             ");
  1974  00D7D4  0E00               	movlw	0
  1975  00D7D6  6E57               	movwf	Lcd_Out@x,c
  1976  00D7D8  0E88               	movlw	low STR_3
  1977  00D7DA  6E58               	movwf	Lcd_Out@buffer,c
  1978  00D7DC  0EFF               	movlw	high STR_3
  1979  00D7DE  6E59               	movwf	Lcd_Out@buffer+1,c
  1980  00D7E0  0E02               	movlw	2
  1981  00D7E2  EC0C  F060         	call	_Lcd_Out
  1982  00D7E6  D77E               	goto	l5532
  1983  00D7E8  EF00  F000         	goto	start
  1984  00D7EC                     __end_of_main:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _control_temperatura_agua *****************
  1997 ;; Defined at:
  1998 ;;		line 773 in file "../main.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  grados_tr       3   76[COMRAM] float 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;		None               void
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2015 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2016 ;;Total ram usage:        3 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    2
  2019 ;; This function calls:
  2020 ;;		___awtoft
  2021 ;;		___ftadd
  2022 ;;		___ftdiv
  2023 ;;		___ftge
  2024 ;;		___ftmul
  2025 ;;		___ftneg
  2026 ;;		___fttol
  2027 ;;		___lbtoft
  2028 ;;		_lee_temperatura
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text1
  2035  00D41C                     __ptext1:
  2036                           	opt stack 0
  2037  00D41C                     _control_temperatura_agua:
  2038                           	opt stack 28
  2039                           
  2040                           ;main.c: 775: lee_temperatura();
  2041                           
  2042                           ;incstack = 0
  2043  00D41C  EC3B  F05D         	call	_lee_temperatura	;wreg free
  2044                           
  2045                           ;main.c: 776: grados = lectura * 0.13;
  2046  00D420  0100               	movlb	0	; () banked
  2047  00D422  5186               	movf	_lectura& (0+255),w,b
  2048  00D424  EC6E  F05D         	call	___lbtoft
  2049  00D428  C009  F015         	movff	?___lbtoft,___ftmul@f1
  2050  00D42C  C00A  F016         	movff	?___lbtoft+1,___ftmul@f1+1
  2051  00D430  C00B  F017         	movff	?___lbtoft+2,___ftmul@f1+2
  2052  00D434  0E1F               	movlw	31
  2053  00D436  6E18               	movwf	___ftmul@f2,c
  2054  00D438  0E05               	movlw	5
  2055  00D43A  6E19               	movwf	___ftmul@f2+1,c
  2056  00D43C  0E3E               	movlw	62
  2057  00D43E  6E1A               	movwf	___ftmul@f2+2,c
  2058  00D440  EC9A  F062         	call	___ftmul	;wreg free
  2059  00D444  C015  F0DF         	movff	?___ftmul,_grados
  2060  00D448  C016  F0E0         	movff	?___ftmul+1,_grados+1
  2061  00D44C  C017  F0E1         	movff	?___ftmul+2,_grados+2
  2062                           
  2063                           ;main.c: 777: float grados_tr = ((int)(grados*10)) / 10.0;
  2064  00D450  0E00               	movlw	0
  2065  00D452  6E18               	movwf	___ftmul@f2,c
  2066  00D454  0E20               	movlw	32
  2067  00D456  6E19               	movwf	___ftmul@f2+1,c
  2068  00D458  0E41               	movlw	65
  2069  00D45A  6E1A               	movwf	___ftmul@f2+2,c
  2070  00D45C  C0DF  F015         	movff	_grados,___ftmul@f1
  2071  00D460  C0E0  F016         	movff	_grados+1,___ftmul@f1+1
  2072  00D464  C0E1  F017         	movff	_grados+2,___ftmul@f1+2
  2073  00D468  EC9A  F062         	call	___ftmul	;wreg free
  2074  00D46C  C015  F02B         	movff	?___ftmul,___fttol@f1
  2075  00D470  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2076  00D474  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2077  00D478  EC19  F062         	call	___fttol	;wreg free
  2078  00D47C  C02B  F03A         	movff	?___fttol,___awtoft@c
  2079  00D480  C02C  F03B         	movff	?___fttol+1,___awtoft@c+1
  2080  00D484  ECB1  F05D         	call	___awtoft	;wreg free
  2081  00D488  C03A  F03E         	movff	?___awtoft,___ftdiv@f1
  2082  00D48C  C03B  F03F         	movff	?___awtoft+1,___ftdiv@f1+1
  2083  00D490  C03C  F040         	movff	?___awtoft+2,___ftdiv@f1+2
  2084  00D494  0E00               	movlw	0
  2085  00D496  6E41               	movwf	___ftdiv@f2,c
  2086  00D498  0E20               	movlw	32
  2087  00D49A  6E42               	movwf	___ftdiv@f2+1,c
  2088  00D49C  0E41               	movlw	65
  2089  00D49E  6E43               	movwf	___ftdiv@f2+2,c
  2090  00D4A0  ECA3  F061         	call	___ftdiv	;wreg free
  2091  00D4A4  C03E  F04D         	movff	?___ftdiv,control_temperatura_agua@grados_tr
  2092  00D4A8  C03F  F04E         	movff	?___ftdiv+1,control_temperatura_agua@grados_tr+1
  2093  00D4AC  C040  F04F         	movff	?___ftdiv+2,control_temperatura_agua@grados_tr+2
  2094                           
  2095                           ;main.c: 779: if(grados_tr == temp_prog || (grados_tr-temp_prog <= 0.3 && grados_tr-temp
      +                          _prog > 0) ||
  2096                           ;main.c: 780: (temp_prog- grados_tr <= 0.3 && temp_prog-grados_tr > 0)) {
  2097  00D4B0  0100               	movlb	0	; () banked
  2098  00D4B2  51E2               	movf	_temp_prog& (0+255),w,b
  2099  00D4B4  184D               	xorwf	control_temperatura_agua@grados_tr,w,c
  2100  00D4B6  E109               	bnz	u5530
  2101  00D4B8  0100               	movlb	0	; () banked
  2102  00D4BA  51E3               	movf	(_temp_prog+1)& (0+255),w,b
  2103  00D4BC  184E               	xorwf	control_temperatura_agua@grados_tr+1,w,c
  2104  00D4BE  E105               	bnz	u5530
  2105  00D4C0  0100               	movlb	0	; () banked
  2106  00D4C2  51E4               	movf	(_temp_prog+2)& (0+255),w,b
  2107  00D4C4  184F               	xorwf	control_temperatura_agua@grados_tr+2,w,c
  2108  00D4C6  B4D8               	btfsc	status,2,c
  2109  00D4C8  D098               	goto	l379
  2110  00D4CA                     u5530:
  2111                           
  2112                           ; BSR set to: 0
  2113  00D4CA  0E9A               	movlw	154
  2114  00D4CC  6E3A               	movwf	___ftge@ff1,c
  2115  00D4CE  0E99               	movlw	153
  2116  00D4D0  6E3B               	movwf	___ftge@ff1+1,c
  2117  00D4D2  0E3E               	movlw	62
  2118  00D4D4  6E3C               	movwf	___ftge@ff1+2,c
  2119  00D4D6  C04D  F031         	movff	control_temperatura_agua@grados_tr,___ftadd@f2
  2120  00D4DA  C04E  F032         	movff	control_temperatura_agua@grados_tr+1,___ftadd@f2+1
  2121  00D4DE  C04F  F033         	movff	control_temperatura_agua@grados_tr+2,___ftadd@f2+2
  2122  00D4E2  C0E2  F001         	movff	_temp_prog,___ftneg@f1
  2123  00D4E6  C0E3  F002         	movff	_temp_prog+1,___ftneg@f1+1
  2124  00D4EA  C0E4  F003         	movff	_temp_prog+2,___ftneg@f1+2
  2125  00D4EE  EC5C  F05D         	call	___ftneg	;wreg free
  2126  00D4F2  C001  F02E         	movff	?___ftneg,___ftadd@f1
  2127  00D4F6  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  2128  00D4FA  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  2129  00D4FE  EC2C  F069         	call	___ftadd	;wreg free
  2130  00D502  C02E  F03D         	movff	?___ftadd,___ftge@ff2
  2131  00D506  C02F  F03E         	movff	?___ftadd+1,___ftge@ff2+1
  2132  00D50A  C030  F03F         	movff	?___ftadd+2,___ftge@ff2+2
  2133  00D50E  EC56  F060         	call	___ftge	;wreg free
  2134  00D512  A0D8               	btfss	status,0,c
  2135  00D514  D026               	goto	l4930
  2136  00D516  0E00               	movlw	0
  2137  00D518  6E3A               	movwf	___ftge@ff1,c
  2138  00D51A  0E00               	movlw	0
  2139  00D51C  6E3B               	movwf	___ftge@ff1+1,c
  2140  00D51E  0E00               	movlw	0
  2141  00D520  6E3C               	movwf	___ftge@ff1+2,c
  2142  00D522  C04D  F031         	movff	control_temperatura_agua@grados_tr,___ftadd@f2
  2143  00D526  C04E  F032         	movff	control_temperatura_agua@grados_tr+1,___ftadd@f2+1
  2144  00D52A  C04F  F033         	movff	control_temperatura_agua@grados_tr+2,___ftadd@f2+2
  2145  00D52E  C0E2  F001         	movff	_temp_prog,___ftneg@f1
  2146  00D532  C0E3  F002         	movff	_temp_prog+1,___ftneg@f1+1
  2147  00D536  C0E4  F003         	movff	_temp_prog+2,___ftneg@f1+2
  2148  00D53A  EC5C  F05D         	call	___ftneg	;wreg free
  2149  00D53E  C001  F02E         	movff	?___ftneg,___ftadd@f1
  2150  00D542  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  2151  00D546  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  2152  00D54A  EC2C  F069         	call	___ftadd	;wreg free
  2153  00D54E  C02E  F03D         	movff	?___ftadd,___ftge@ff2
  2154  00D552  C02F  F03E         	movff	?___ftadd+1,___ftge@ff2+1
  2155  00D556  C030  F03F         	movff	?___ftadd+2,___ftge@ff2+2
  2156  00D55A  EC56  F060         	call	___ftge	;wreg free
  2157  00D55E  A0D8               	btfss	status,0,c
  2158  00D560  D04C               	goto	l379
  2159  00D562                     l4930:
  2160  00D562  0E9A               	movlw	154
  2161  00D564  6E3A               	movwf	___ftge@ff1,c
  2162  00D566  0E99               	movlw	153
  2163  00D568  6E3B               	movwf	___ftge@ff1+1,c
  2164  00D56A  0E3E               	movlw	62
  2165  00D56C  6E3C               	movwf	___ftge@ff1+2,c
  2166  00D56E  C0E2  F031         	movff	_temp_prog,___ftadd@f2
  2167  00D572  C0E3  F032         	movff	_temp_prog+1,___ftadd@f2+1
  2168  00D576  C0E4  F033         	movff	_temp_prog+2,___ftadd@f2+2
  2169  00D57A  C04D  F001         	movff	control_temperatura_agua@grados_tr,___ftneg@f1
  2170  00D57E  C04E  F002         	movff	control_temperatura_agua@grados_tr+1,___ftneg@f1+1
  2171  00D582  C04F  F003         	movff	control_temperatura_agua@grados_tr+2,___ftneg@f1+2
  2172  00D586  EC5C  F05D         	call	___ftneg	;wreg free
  2173  00D58A  C001  F02E         	movff	?___ftneg,___ftadd@f1
  2174  00D58E  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  2175  00D592  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  2176  00D596  EC2C  F069         	call	___ftadd	;wreg free
  2177  00D59A  C02E  F03D         	movff	?___ftadd,___ftge@ff2
  2178  00D59E  C02F  F03E         	movff	?___ftadd+1,___ftge@ff2+1
  2179  00D5A2  C030  F03F         	movff	?___ftadd+2,___ftge@ff2+2
  2180  00D5A6  EC56  F060         	call	___ftge	;wreg free
  2181  00D5AA  A0D8               	btfss	status,0,c
  2182  00D5AC  D028               	goto	l377
  2183  00D5AE  0E00               	movlw	0
  2184  00D5B0  6E3A               	movwf	___ftge@ff1,c
  2185  00D5B2  0E00               	movlw	0
  2186  00D5B4  6E3B               	movwf	___ftge@ff1+1,c
  2187  00D5B6  0E00               	movlw	0
  2188  00D5B8  6E3C               	movwf	___ftge@ff1+2,c
  2189  00D5BA  C0E2  F031         	movff	_temp_prog,___ftadd@f2
  2190  00D5BE  C0E3  F032         	movff	_temp_prog+1,___ftadd@f2+1
  2191  00D5C2  C0E4  F033         	movff	_temp_prog+2,___ftadd@f2+2
  2192  00D5C6  C04D  F001         	movff	control_temperatura_agua@grados_tr,___ftneg@f1
  2193  00D5CA  C04E  F002         	movff	control_temperatura_agua@grados_tr+1,___ftneg@f1+1
  2194  00D5CE  C04F  F003         	movff	control_temperatura_agua@grados_tr+2,___ftneg@f1+2
  2195  00D5D2  EC5C  F05D         	call	___ftneg	;wreg free
  2196  00D5D6  C001  F02E         	movff	?___ftneg,___ftadd@f1
  2197  00D5DA  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
  2198  00D5DE  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
  2199  00D5E2  EC2C  F069         	call	___ftadd	;wreg free
  2200  00D5E6  C02E  F03D         	movff	?___ftadd,___ftge@ff2
  2201  00D5EA  C02F  F03E         	movff	?___ftadd+1,___ftge@ff2+1
  2202  00D5EE  C030  F03F         	movff	?___ftadd+2,___ftge@ff2+2
  2203  00D5F2  EC56  F060         	call	___ftge	;wreg free
  2204  00D5F6  B0D8               	btfsc	status,0,c
  2205  00D5F8  D002               	goto	l377
  2206  00D5FA                     l379:
  2207                           
  2208                           ;main.c: 781: LATAbits.LA1 = 1;
  2209  00D5FA  8289               	bsf	3977,1,c	;volatile
  2210                           
  2211                           ;main.c: 782: }else{
  2212  00D5FC  0012               	return	
  2213  00D5FE                     l377:
  2214                           
  2215                           ;main.c: 783: LATAbits.LA1 = 0;
  2216  00D5FE  9289               	bcf	3977,1,c	;volatile
  2217  00D600  0012               	return	
  2218  00D602  0012               	return		;funcret
  2219  00D604                     __end_of_control_temperatura_agua:
  2220                           	opt stack 0
  2221                           tblptru	equ	0xFF8
  2222                           tblptrh	equ	0xFF7
  2223                           tblptrl	equ	0xFF6
  2224                           tablat	equ	0xFF5
  2225                           postinc0	equ	0xFEE
  2226                           wreg	equ	0xFE8
  2227                           postdec1	equ	0xFE5
  2228                           fsr1l	equ	0xFE1
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _lee_temperatura *****************
  2232 ;; Defined at:
  2233 ;;		line 694 in file "../main.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2250 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2251 ;;Total ram usage:        1 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_control_temperatura_agua
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text2
  2261  00BA76                     __ptext2:
  2262                           	opt stack 0
  2263  00BA76                     _lee_temperatura:
  2264                           	opt stack 29
  2265                           
  2266                           ;main.c: 696: ADCON0bits.ADON = 1;
  2267                           
  2268                           ;incstack = 0
  2269  00BA76  80C2               	bsf	4034,0,c	;volatile
  2270                           
  2271                           ;main.c: 697: ADCON0bits.GO = 1;
  2272  00BA78  82C2               	bsf	4034,1,c	;volatile
  2273                           
  2274                           ;main.c: 698: while (ADCON0bits.GO);
  2275  00BA7A  D000               	goto	l348
  2276  00BA7C                     l348:
  2277  00BA7C  B2C2               	btfsc	4034,1,c	;volatile
  2278  00BA7E  D7FE               	goto	l348
  2279                           
  2280                           ;main.c: 699: _delay((unsigned long)((1)*(8000000/4000.0)));
  2281  00BA80  0E03               	movlw	3
  2282  00BA82  6E01               	movwf	??_lee_temperatura& (0+255),c
  2283  00BA84  0E98               	movlw	152
  2284  00BA86                     u6897:
  2285  00BA86  2EE8               	decfsz	wreg,f,c
  2286  00BA88  D7FE               	goto	u6897
  2287  00BA8A  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  2288  00BA8C  D7FC               	goto	u6897
  2289                           
  2290                           ;main.c: 700: lectura = ADRESH;
  2291  00BA8E  CFC4 F086          	movff	4036,_lectura	;volatile
  2292                           
  2293                           ;main.c: 701: ADCON0bits.ADON = 0;
  2294  00BA92  90C2               	bcf	4034,0,c	;volatile
  2295  00BA94  0012               	return		;funcret
  2296  00BA96                     __end_of_lee_temperatura:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           postinc0	equ	0xFEE
  2303                           wreg	equ	0xFE8
  2304                           postdec1	equ	0xFE5
  2305                           fsr1l	equ	0xFE1
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function ___lbtoft *****************
  2309 ;; Defined at:
  2310 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  c               1    wreg     unsigned char 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  c               1   11[COMRAM] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  3    8[COMRAM] float 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2324 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2327 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2328 ;;Total ram usage:        4 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    1
  2331 ;; This function calls:
  2332 ;;		___ftpack
  2333 ;; This function is called by:
  2334 ;;		_control_temperatura_agua
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text3
  2339  00BADC                     __ptext3:
  2340                           	opt stack 0
  2341  00BADC                     ___lbtoft:
  2342                           	opt stack 28
  2343                           
  2344                           ;incstack = 0
  2345                           ;___lbtoft@c stored from wreg
  2346  00BADC  6E0C               	movwf	___lbtoft@c,c
  2347  00BADE  500C               	movf	___lbtoft@c,w,c
  2348  00BAE0  6E01               	movwf	___ftpack@arg,c
  2349  00BAE2  6A02               	clrf	___ftpack@arg+1,c
  2350  00BAE4  6A03               	clrf	___ftpack@arg+2,c
  2351  00BAE6  0E8E               	movlw	142
  2352  00BAE8  6E04               	movwf	___ftpack@exp,c
  2353  00BAEA  0E00               	movlw	0
  2354  00BAEC  6E05               	movwf	___ftpack@sign,c
  2355  00BAEE  EC40  F061         	call	___ftpack	;wreg free
  2356  00BAF2  C001  F009         	movff	?___ftpack,?___lbtoft
  2357  00BAF6  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  2358  00BAFA  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  2359  00BAFE  0012               	return	
  2360  00BB00  0012               	return		;funcret
  2361  00BB02                     __end_of___lbtoft:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           fsr1l	equ	0xFE1
  2371                           status	equ	0xFD8
  2372                           
  2373 ;; *************** function ___ftdiv *****************
  2374 ;; Defined at:
  2375 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2376 ;; Parameters:    Size  Location     Type
  2377 ;;  f1              3   61[COMRAM] float 
  2378 ;;  f2              3   64[COMRAM] float 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  f3              3   71[COMRAM] float 
  2381 ;;  sign            1   75[COMRAM] unsigned char 
  2382 ;;  exp             1   74[COMRAM] unsigned char 
  2383 ;;  cntr            1   70[COMRAM] unsigned char 
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  3   61[COMRAM] float 
  2386 ;; Registers used:
  2387 ;;		wreg, status,2, status,0, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2394 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2396 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2397 ;;Total ram usage:       15 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    1
  2400 ;; This function calls:
  2401 ;;		___ftpack
  2402 ;; This function is called by:
  2403 ;;		_control_temperatura_agua
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text4
  2408  00C346                     __ptext4:
  2409                           	opt stack 0
  2410  00C346                     ___ftdiv:
  2411                           	opt stack 28
  2412                           
  2413                           ;incstack = 0
  2414  00C346  C040  F044         	movff	___ftdiv@f1+2,??___ftdiv
  2415  00C34A  6A45               	clrf	(??___ftdiv+1)& (0+255),c
  2416  00C34C  6A46               	clrf	(??___ftdiv+2)& (0+255),c
  2417  00C34E  343F               	rlcf	___ftdiv@f1+1,w,c
  2418  00C350  3644               	rlcf	??___ftdiv& (0+255),f,c
  2419  00C352  E301               	bnc	u5341
  2420  00C354  8045               	bsf	(??___ftdiv+1)& (0+255),0,c
  2421  00C356                     u5341:
  2422  00C356  5044               	movf	??___ftdiv,w,c
  2423  00C358  6E4B               	movwf	___ftdiv@exp,c
  2424  00C35A  504B               	movf	___ftdiv@exp,w,c
  2425  00C35C  A4D8               	btfss	status,2,c
  2426  00C35E  D007               	goto	l4766
  2427  00C360  0E00               	movlw	0
  2428  00C362  6E3E               	movwf	?___ftdiv,c
  2429  00C364  0E00               	movlw	0
  2430  00C366  6E3F               	movwf	?___ftdiv+1,c
  2431  00C368  0E00               	movlw	0
  2432  00C36A  6E40               	movwf	?___ftdiv+2,c
  2433  00C36C  0012               	return	
  2434  00C36E                     l4766:
  2435  00C36E  C043  F044         	movff	___ftdiv@f2+2,??___ftdiv
  2436  00C372  6A45               	clrf	(??___ftdiv+1)& (0+255),c
  2437  00C374  6A46               	clrf	(??___ftdiv+2)& (0+255),c
  2438  00C376  3442               	rlcf	___ftdiv@f2+1,w,c
  2439  00C378  3644               	rlcf	??___ftdiv& (0+255),f,c
  2440  00C37A  E301               	bnc	u5361
  2441  00C37C  8045               	bsf	(??___ftdiv+1)& (0+255),0,c
  2442  00C37E                     u5361:
  2443  00C37E  5044               	movf	??___ftdiv,w,c
  2444  00C380  6E4C               	movwf	___ftdiv@sign,c
  2445  00C382  504C               	movf	___ftdiv@sign,w,c
  2446  00C384  A4D8               	btfss	status,2,c
  2447  00C386  D007               	goto	l4772
  2448  00C388  0E00               	movlw	0
  2449  00C38A  6E3E               	movwf	?___ftdiv,c
  2450  00C38C  0E00               	movlw	0
  2451  00C38E  6E3F               	movwf	?___ftdiv+1,c
  2452  00C390  0E00               	movlw	0
  2453  00C392  6E40               	movwf	?___ftdiv+2,c
  2454  00C394  0012               	return	
  2455  00C396                     l4772:
  2456  00C396  0E00               	movlw	0
  2457  00C398  6E48               	movwf	___ftdiv@f3,c
  2458  00C39A  0E00               	movlw	0
  2459  00C39C  6E49               	movwf	___ftdiv@f3+1,c
  2460  00C39E  0E00               	movlw	0
  2461  00C3A0  6E4A               	movwf	___ftdiv@f3+2,c
  2462  00C3A2  504C               	movf	___ftdiv@sign,w,c
  2463  00C3A4  0F89               	addlw	137
  2464  00C3A6  5E4B               	subwf	___ftdiv@exp,f,c
  2465  00C3A8  C040  F04C         	movff	___ftdiv@f1+2,___ftdiv@sign
  2466  00C3AC  5043               	movf	___ftdiv@f2+2,w,c
  2467  00C3AE  1A4C               	xorwf	___ftdiv@sign,f,c
  2468  00C3B0  0E80               	movlw	128
  2469  00C3B2  164C               	andwf	___ftdiv@sign,f,c
  2470  00C3B4  8E3F               	bsf	___ftdiv@f1+1,7,c
  2471  00C3B6  0EFF               	movlw	255
  2472  00C3B8  163E               	andwf	___ftdiv@f1,f,c
  2473  00C3BA  0EFF               	movlw	255
  2474  00C3BC  163F               	andwf	___ftdiv@f1+1,f,c
  2475  00C3BE  0E00               	movlw	0
  2476  00C3C0  1640               	andwf	___ftdiv@f1+2,f,c
  2477  00C3C2  8E42               	bsf	___ftdiv@f2+1,7,c
  2478  00C3C4  0EFF               	movlw	255
  2479  00C3C6  1641               	andwf	___ftdiv@f2,f,c
  2480  00C3C8  0EFF               	movlw	255
  2481  00C3CA  1642               	andwf	___ftdiv@f2+1,f,c
  2482  00C3CC  0E00               	movlw	0
  2483  00C3CE  1643               	andwf	___ftdiv@f2+2,f,c
  2484  00C3D0  0E18               	movlw	24
  2485  00C3D2  6E47               	movwf	___ftdiv@cntr,c
  2486  00C3D4  D000               	goto	l4792
  2487  00C3D6                     l4792:
  2488  00C3D6  90D8               	bcf	status,0,c
  2489  00C3D8  3648               	rlcf	___ftdiv@f3,f,c
  2490  00C3DA  3649               	rlcf	___ftdiv@f3+1,f,c
  2491  00C3DC  364A               	rlcf	___ftdiv@f3+2,f,c
  2492  00C3DE  5041               	movf	___ftdiv@f2,w,c
  2493  00C3E0  5C3E               	subwf	___ftdiv@f1,w,c
  2494  00C3E2  5042               	movf	___ftdiv@f2+1,w,c
  2495  00C3E4  583F               	subwfb	___ftdiv@f1+1,w,c
  2496  00C3E6  5043               	movf	___ftdiv@f2+2,w,c
  2497  00C3E8  5840               	subwfb	___ftdiv@f1+2,w,c
  2498  00C3EA  A0D8               	btfss	status,0,c
  2499  00C3EC  D007               	goto	l1026
  2500  00C3EE  5041               	movf	___ftdiv@f2,w,c
  2501  00C3F0  5E3E               	subwf	___ftdiv@f1,f,c
  2502  00C3F2  5042               	movf	___ftdiv@f2+1,w,c
  2503  00C3F4  5A3F               	subwfb	___ftdiv@f1+1,f,c
  2504  00C3F6  5043               	movf	___ftdiv@f2+2,w,c
  2505  00C3F8  5A40               	subwfb	___ftdiv@f1+2,f,c
  2506  00C3FA  8048               	bsf	___ftdiv@f3,0,c
  2507  00C3FC                     l1026:
  2508  00C3FC  90D8               	bcf	status,0,c
  2509  00C3FE  363E               	rlcf	___ftdiv@f1,f,c
  2510  00C400  363F               	rlcf	___ftdiv@f1+1,f,c
  2511  00C402  3640               	rlcf	___ftdiv@f1+2,f,c
  2512  00C404  2E47               	decfsz	___ftdiv@cntr,f,c
  2513  00C406  D7E7               	goto	l4792
  2514  00C408  D000               	goto	l4802
  2515  00C40A                     l4802:
  2516  00C40A  C048  F001         	movff	___ftdiv@f3,___ftpack@arg
  2517  00C40E  C049  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2518  00C412  C04A  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2519  00C416  C04B  F004         	movff	___ftdiv@exp,___ftpack@exp
  2520  00C41A  C04C  F005         	movff	___ftdiv@sign,___ftpack@sign
  2521  00C41E  EC40  F061         	call	___ftpack	;wreg free
  2522  00C422  C001  F03E         	movff	?___ftpack,?___ftdiv
  2523  00C426  C002  F03F         	movff	?___ftpack+1,?___ftdiv+1
  2524  00C42A  C003  F040         	movff	?___ftpack+2,?___ftdiv+2
  2525  00C42E  0012               	return	
  2526  00C430  0012               	return		;funcret
  2527  00C432                     __end_of___ftdiv:
  2528                           	opt stack 0
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           status	equ	0xFD8
  2538                           
  2539 ;; *************** function ___awtoft *****************
  2540 ;; Defined at:
  2541 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;  c               2   57[COMRAM] int 
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;  sign            1   60[COMRAM] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  3   57[COMRAM] float 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2555 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2556 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2558 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2559 ;;Total ram usage:        4 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    1
  2562 ;; This function calls:
  2563 ;;		___ftpack
  2564 ;; This function is called by:
  2565 ;;		_control_temperatura_agua
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text5
  2570  00BB62                     __ptext5:
  2571                           	opt stack 0
  2572  00BB62                     ___awtoft:
  2573                           	opt stack 28
  2574                           
  2575                           ;incstack = 0
  2576  00BB62  0E00               	movlw	0
  2577  00BB64  6E3D               	movwf	___awtoft@sign,c
  2578  00BB66  AE3B               	btfss	___awtoft@c+1,7,c
  2579  00BB68  D007               	goto	l4814
  2580  00BB6A  6C3A               	negf	___awtoft@c,c
  2581  00BB6C  1E3B               	comf	___awtoft@c+1,f,c
  2582  00BB6E  B0D8               	btfsc	status,0,c
  2583  00BB70  2A3B               	incf	___awtoft@c+1,f,c
  2584  00BB72  0E01               	movlw	1
  2585  00BB74  6E3D               	movwf	___awtoft@sign,c
  2586  00BB76  D000               	goto	l4814
  2587  00BB78                     l4814:
  2588  00BB78  C03A  F001         	movff	___awtoft@c,___ftpack@arg
  2589  00BB7C  C03B  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  2590  00BB80  6A03               	clrf	___ftpack@arg+2,c
  2591  00BB82  0E8E               	movlw	142
  2592  00BB84  6E04               	movwf	___ftpack@exp,c
  2593  00BB86  C03D  F005         	movff	___awtoft@sign,___ftpack@sign
  2594  00BB8A  EC40  F061         	call	___ftpack	;wreg free
  2595  00BB8E  C001  F03A         	movff	?___ftpack,?___awtoft
  2596  00BB92  C002  F03B         	movff	?___ftpack+1,?___awtoft+1
  2597  00BB96  C003  F03C         	movff	?___ftpack+2,?___awtoft+2
  2598  00BB9A  0012               	return	
  2599  00BB9C  0012               	return		;funcret
  2600  00BB9E                     __end_of___awtoft:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1l	equ	0xFE1
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _control_leds_riego *****************
  2613 ;; Defined at:
  2614 ;;		line 759 in file "../main.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;		None               void
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2630 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2632 ;;Total ram usage:        2 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text6
  2642  00BE76                     __ptext6:
  2643                           	opt stack 0
  2644  00BE76                     _control_leds_riego:
  2645                           	opt stack 30
  2646                           
  2647                           ;main.c: 761: if(inicio_hora_riego == hora && inicio_min_riego == minuto){
  2648                           
  2649                           ;incstack = 0
  2650  00BE76  0100               	movlb	0	; () banked
  2651  00BE78  51F0               	movf	_inicio_hora_riego& (0+255),w,b
  2652  00BE7A  6E01               	movwf	??_control_leds_riego& (0+255),c
  2653  00BE7C  6A02               	clrf	(??_control_leds_riego+1)& (0+255),c
  2654  00BE7E  0100               	movlb	0	; () banked
  2655  00BE80  51E9               	movf	_hora& (0+255),w,b
  2656  00BE82  1801               	xorwf	??_control_leds_riego,w,c
  2657  00BE84  E11F               	bnz	l4912
  2658  00BE86  0100               	movlb	0	; () banked
  2659  00BE88  51EA               	movf	(_hora+1)& (0+255),w,b
  2660  00BE8A  1802               	xorwf	??_control_leds_riego+1,w,c
  2661  00BE8C  A4D8               	btfss	status,2,c
  2662  00BE8E  D01A               	goto	l4912
  2663                           
  2664                           ; BSR set to: 0
  2665  00BE90  0100               	movlb	0	; () banked
  2666  00BE92  51F2               	movf	_inicio_min_riego& (0+255),w,b
  2667  00BE94  6E01               	movwf	??_control_leds_riego& (0+255),c
  2668  00BE96  6A02               	clrf	(??_control_leds_riego+1)& (0+255),c
  2669  00BE98  0100               	movlb	0	; () banked
  2670  00BE9A  51ED               	movf	_minuto& (0+255),w,b
  2671  00BE9C  1801               	xorwf	??_control_leds_riego,w,c
  2672  00BE9E  E112               	bnz	l4912
  2673  00BEA0  0100               	movlb	0	; () banked
  2674  00BEA2  51EE               	movf	(_minuto+1)& (0+255),w,b
  2675  00BEA4  1802               	xorwf	??_control_leds_riego+1,w,c
  2676  00BEA6  A4D8               	btfss	status,2,c
  2677  00BEA8  D00D               	goto	l4912
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;main.c: 762: if(Humedad = PORTCbits.RC7 == 0){
  2681  00BEAA  BE82               	btfsc	3970,7,c	;volatile
  2682  00BEAC  D002               	goto	u5480
  2683  00BEAE  0E01               	movlw	1
  2684  00BEB0  D001               	goto	u5490
  2685  00BEB2                     u5480:
  2686  00BEB2  0E00               	movlw	0
  2687  00BEB4                     u5490:
  2688  00BEB4  0100               	movlb	0	; () banked
  2689  00BEB6  6F7C               	movwf	_Humedad& (0+255),b
  2690  00BEB8  0100               	movlb	0	; () banked
  2691  00BEBA  517C               	movf	_Humedad& (0+255),w,b
  2692  00BEBC  B4D8               	btfsc	status,2,c
  2693  00BEBE  D002               	goto	l4912
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 763: LATBbits.LATB6 = 1;
  2697  00BEC0  8C8A               	bsf	3978,6,c	;volatile
  2698                           
  2699                           ; BSR set to: 0
  2700  00BEC2  D000               	goto	l4912
  2701  00BEC4                     l4912:
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;main.c: 764: }
  2705                           ;main.c: 766: }
  2706                           ;main.c: 768: if(fin_hora_riego == hora && fin_min_riego == minuto){
  2707  00BEC4  0100               	movlb	0	; () banked
  2708  00BEC6  5183               	movf	_fin_hora_riego& (0+255),w,b
  2709  00BEC8  6E01               	movwf	??_control_leds_riego& (0+255),c
  2710  00BECA  6A02               	clrf	(??_control_leds_riego+1)& (0+255),c
  2711  00BECC  0100               	movlb	0	; () banked
  2712  00BECE  51E9               	movf	_hora& (0+255),w,b
  2713  00BED0  1801               	xorwf	??_control_leds_riego,w,c
  2714  00BED2  E114               	bnz	l374
  2715  00BED4  0100               	movlb	0	; () banked
  2716  00BED6  51EA               	movf	(_hora+1)& (0+255),w,b
  2717  00BED8  1802               	xorwf	??_control_leds_riego+1,w,c
  2718  00BEDA  A4D8               	btfss	status,2,c
  2719  00BEDC  0012               	return	
  2720                           
  2721                           ; BSR set to: 0
  2722  00BEDE  0100               	movlb	0	; () banked
  2723  00BEE0  5185               	movf	_fin_min_riego& (0+255),w,b
  2724  00BEE2  6E01               	movwf	??_control_leds_riego& (0+255),c
  2725  00BEE4  6A02               	clrf	(??_control_leds_riego+1)& (0+255),c
  2726  00BEE6  0100               	movlb	0	; () banked
  2727  00BEE8  51ED               	movf	_minuto& (0+255),w,b
  2728  00BEEA  1801               	xorwf	??_control_leds_riego,w,c
  2729  00BEEC  E107               	bnz	l374
  2730  00BEEE  0100               	movlb	0	; () banked
  2731  00BEF0  51EE               	movf	(_minuto+1)& (0+255),w,b
  2732  00BEF2  1802               	xorwf	??_control_leds_riego+1,w,c
  2733  00BEF4  A4D8               	btfss	status,2,c
  2734  00BEF6  0012               	return	
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 769: LATBbits.LATB6 = 0;
  2738  00BEF8  9C8A               	bcf	3978,6,c	;volatile
  2739  00BEFA  0012               	return	
  2740  00BEFC                     l374:
  2741                           
  2742                           ; BSR set to: 0
  2743  00BEFC  0012               	return		;funcret
  2744  00BEFE                     __end_of_control_leds_riego:
  2745                           	opt stack 0
  2746                           tblptru	equ	0xFF8
  2747                           tblptrh	equ	0xFF7
  2748                           tblptrl	equ	0xFF6
  2749                           tablat	equ	0xFF5
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           postdec1	equ	0xFE5
  2753                           fsr1l	equ	0xFE1
  2754                           status	equ	0xFD8
  2755                           
  2756 ;; *************** function _control_leds_iluminacion *****************
  2757 ;; Defined at:
  2758 ;;		line 748 in file "../main.c"
  2759 ;; Parameters:    Size  Location     Type
  2760 ;;		None
  2761 ;; Auto vars:     Size  Location     Type
  2762 ;;		None
  2763 ;; Return value:  Size  Location     Type
  2764 ;;		None               void
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 0/0
  2769 ;;		On exit  : 0/0
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2776 ;;Total ram usage:        2 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_main
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text7
  2786  00BD82                     __ptext7:
  2787                           	opt stack 0
  2788  00BD82                     _control_leds_iluminacion:
  2789                           	opt stack 30
  2790                           
  2791                           ;main.c: 750: if(inicio_hora_ilum == hora && inicio_min_ilum == minuto){
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;incstack = 0
  2795  00BD82  0100               	movlb	0	; () banked
  2796  00BD84  51EF               	movf	_inicio_hora_ilum& (0+255),w,b
  2797  00BD86  6E01               	movwf	??_control_leds_iluminacion& (0+255),c
  2798  00BD88  6A02               	clrf	(??_control_leds_iluminacion+1)& (0+255),c
  2799  00BD8A  0100               	movlb	0	; () banked
  2800  00BD8C  51E9               	movf	_hora& (0+255),w,b
  2801  00BD8E  1801               	xorwf	??_control_leds_iluminacion,w,c
  2802  00BD90  E114               	bnz	l4898
  2803  00BD92  0100               	movlb	0	; () banked
  2804  00BD94  51EA               	movf	(_hora+1)& (0+255),w,b
  2805  00BD96  1802               	xorwf	??_control_leds_iluminacion+1,w,c
  2806  00BD98  A4D8               	btfss	status,2,c
  2807  00BD9A  D00F               	goto	l4898
  2808                           
  2809                           ; BSR set to: 0
  2810  00BD9C  0100               	movlb	0	; () banked
  2811  00BD9E  51F1               	movf	_inicio_min_ilum& (0+255),w,b
  2812  00BDA0  6E01               	movwf	??_control_leds_iluminacion& (0+255),c
  2813  00BDA2  6A02               	clrf	(??_control_leds_iluminacion+1)& (0+255),c
  2814  00BDA4  0100               	movlb	0	; () banked
  2815  00BDA6  51ED               	movf	_minuto& (0+255),w,b
  2816  00BDA8  1801               	xorwf	??_control_leds_iluminacion,w,c
  2817  00BDAA  E107               	bnz	l4898
  2818  00BDAC  0100               	movlb	0	; () banked
  2819  00BDAE  51EE               	movf	(_minuto+1)& (0+255),w,b
  2820  00BDB0  1802               	xorwf	??_control_leds_iluminacion+1,w,c
  2821  00BDB2  A4D8               	btfss	status,2,c
  2822  00BDB4  D002               	goto	l4898
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 751: LATBbits.LATB7 = 1;
  2826  00BDB6  8E8A               	bsf	3978,7,c	;volatile
  2827  00BDB8  D000               	goto	l4898
  2828  00BDBA                     l4898:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 752: }
  2832                           ;main.c: 754: if(fin_hora_ilum == hora && fin_min_ilum == minuto){
  2833  00BDBA  0100               	movlb	0	; () banked
  2834  00BDBC  5182               	movf	_fin_hora_ilum& (0+255),w,b
  2835  00BDBE  6E01               	movwf	??_control_leds_iluminacion& (0+255),c
  2836  00BDC0  6A02               	clrf	(??_control_leds_iluminacion+1)& (0+255),c
  2837  00BDC2  0100               	movlb	0	; () banked
  2838  00BDC4  51E9               	movf	_hora& (0+255),w,b
  2839  00BDC6  1801               	xorwf	??_control_leds_iluminacion,w,c
  2840  00BDC8  E114               	bnz	l368
  2841  00BDCA  0100               	movlb	0	; () banked
  2842  00BDCC  51EA               	movf	(_hora+1)& (0+255),w,b
  2843  00BDCE  1802               	xorwf	??_control_leds_iluminacion+1,w,c
  2844  00BDD0  A4D8               	btfss	status,2,c
  2845  00BDD2  0012               	return	
  2846                           
  2847                           ; BSR set to: 0
  2848  00BDD4  0100               	movlb	0	; () banked
  2849  00BDD6  5184               	movf	_fin_min_ilum& (0+255),w,b
  2850  00BDD8  6E01               	movwf	??_control_leds_iluminacion& (0+255),c
  2851  00BDDA  6A02               	clrf	(??_control_leds_iluminacion+1)& (0+255),c
  2852  00BDDC  0100               	movlb	0	; () banked
  2853  00BDDE  51ED               	movf	_minuto& (0+255),w,b
  2854  00BDE0  1801               	xorwf	??_control_leds_iluminacion,w,c
  2855  00BDE2  E107               	bnz	l368
  2856  00BDE4  0100               	movlb	0	; () banked
  2857  00BDE6  51EE               	movf	(_minuto+1)& (0+255),w,b
  2858  00BDE8  1802               	xorwf	??_control_leds_iluminacion+1,w,c
  2859  00BDEA  A4D8               	btfss	status,2,c
  2860  00BDEC  0012               	return	
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;main.c: 755: LATBbits.LATB7 = 0;
  2864  00BDEE  9E8A               	bcf	3978,7,c	;volatile
  2865  00BDF0  0012               	return	
  2866  00BDF2                     l368:
  2867                           
  2868                           ; BSR set to: 0
  2869  00BDF2  0012               	return		;funcret
  2870  00BDF4                     __end_of_control_leds_iluminacion:
  2871                           	opt stack 0
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           postinc0	equ	0xFEE
  2877                           wreg	equ	0xFE8
  2878                           postdec1	equ	0xFE5
  2879                           fsr1l	equ	0xFE1
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _V_ProgTempAgua *****************
  2883 ;; Defined at:
  2884 ;;		line 572 in file "../main.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;		None
  2887 ;; Auto vars:     Size  Location     Type
  2888 ;;  temp_prog_tr    3   92[COMRAM] float 
  2889 ;; Return value:  Size  Location     Type
  2890 ;;		None               void
  2891 ;; Registers used:
  2892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2893 ;; Tracked objects:
  2894 ;;		On entry : 0/0
  2895 ;;		On exit  : 0/0
  2896 ;;		Unchanged: 0/0
  2897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2901 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2902 ;;Total ram usage:        4 bytes
  2903 ;; Hardware stack levels used:    1
  2904 ;; Hardware stack levels required when called:    4
  2905 ;; This function calls:
  2906 ;;		_Lcd_Cmd
  2907 ;;		_Lcd_Out
  2908 ;;		___ftadd
  2909 ;;		___ftge
  2910 ;;		___ftsub
  2911 ;;		_sprintf
  2912 ;; This function is called by:
  2913 ;;		_main
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text8
  2918  00DA3A                     __ptext8:
  2919                           	opt stack 0
  2920  00DA3A                     _V_ProgTempAgua:
  2921                           	opt stack 26
  2922                           
  2923                           ;main.c: 575: float temp_prog_tr = temp_prog;
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;incstack = 0
  2927  00DA3A  C0E2  F05D         	movff	_temp_prog,V_ProgTempAgua@temp_prog_tr
  2928  00DA3E  C0E3  F05E         	movff	_temp_prog+1,V_ProgTempAgua@temp_prog_tr+1
  2929  00DA42  C0E4  F05F         	movff	_temp_prog+2,V_ProgTempAgua@temp_prog_tr+2
  2930                           
  2931                           ;main.c: 577: Lcd_Out(1, 0, "Programacion de la  ");
  2932  00DA46  0E00               	movlw	0
  2933  00DA48  6E57               	movwf	Lcd_Out@x,c
  2934  00DA4A  0E49               	movlw	low STR_73
  2935  00DA4C  6E58               	movwf	Lcd_Out@buffer,c
  2936  00DA4E  0EFF               	movlw	high STR_73
  2937  00DA50  6E59               	movwf	Lcd_Out@buffer+1,c
  2938  00DA52  0E01               	movlw	1
  2939  00DA54  EC0C  F060         	call	_Lcd_Out
  2940                           
  2941                           ;main.c: 578: Lcd_Out(2, 0, "Temperatura del agua");
  2942  00DA58  0E00               	movlw	0
  2943  00DA5A  6E57               	movwf	Lcd_Out@x,c
  2944  00DA5C  0E73               	movlw	low STR_74
  2945  00DA5E  6E58               	movwf	Lcd_Out@buffer,c
  2946  00DA60  0EFF               	movlw	high STR_74
  2947  00DA62  6E59               	movwf	Lcd_Out@buffer+1,c
  2948  00DA64  0E02               	movlw	2
  2949  00DA66  EC0C  F060         	call	_Lcd_Out
  2950                           
  2951                           ;main.c: 579: Lcd_Out(3, 0, "                    ");
  2952  00DA6A  0E00               	movlw	0
  2953  00DA6C  6E57               	movwf	Lcd_Out@x,c
  2954  00DA6E  0EA1               	movlw	low STR_75
  2955  00DA70  6E58               	movwf	Lcd_Out@buffer,c
  2956  00DA72  0EFE               	movlw	high STR_75
  2957  00DA74  6E59               	movwf	Lcd_Out@buffer+1,c
  2958  00DA76  0E03               	movlw	3
  2959  00DA78  EC0C  F060         	call	_Lcd_Out
  2960                           
  2961                           ;main.c: 580: sprintf(buffer1, "Temperatura: %.1f%cC", temp_prog, 223);
  2962  00DA7C  0E87               	movlw	low _buffer1
  2963  00DA7E  6E43               	movwf	sprintf@sp,c
  2964  00DA80  0E00               	movlw	high _buffer1
  2965  00DA82  6E44               	movwf	sprintf@sp+1,c
  2966  00DA84  0E5E               	movlw	low STR_76
  2967  00DA86  6E45               	movwf	sprintf@f,c
  2968  00DA88  0EFF               	movlw	high STR_76
  2969  00DA8A  6E46               	movwf	sprintf@f+1,c
  2970  00DA8C  C0E2  F047         	movff	_temp_prog,?_sprintf+4
  2971  00DA90  C0E3  F048         	movff	_temp_prog+1,?_sprintf+5
  2972  00DA94  C0E4  F049         	movff	_temp_prog+2,?_sprintf+6
  2973  00DA98  0E00               	movlw	0
  2974  00DA9A  6E4B               	movwf	?_sprintf+8,c
  2975  00DA9C  0EDF               	movlw	223
  2976  00DA9E  6E4A               	movwf	?_sprintf+7,c
  2977  00DAA0  ECFF  F077         	call	_sprintf	;wreg free
  2978                           
  2979                           ;main.c: 581: Lcd_Out(4, 0, buffer1);
  2980  00DAA4  0E00               	movlw	0
  2981  00DAA6  6E57               	movwf	Lcd_Out@x,c
  2982  00DAA8  0E87               	movlw	low _buffer1
  2983  00DAAA  6E58               	movwf	Lcd_Out@buffer,c
  2984  00DAAC  0E00               	movlw	high _buffer1
  2985  00DAAE  6E59               	movwf	Lcd_Out@buffer+1,c
  2986  00DAB0  0E04               	movlw	4
  2987  00DAB2  EC0C  F060         	call	_Lcd_Out
  2988                           
  2989                           ;main.c: 583: Lcd_Out(4, 13, "");
  2990  00DAB6  0E0D               	movlw	13
  2991  00DAB8  6E57               	movwf	Lcd_Out@x,c
  2992  00DABA  0EB5               	movlw	low (STR_75+20)
  2993  00DABC  6E58               	movwf	Lcd_Out@buffer,c
  2994  00DABE  0EFE               	movlw	high (STR_75+20)
  2995  00DAC0  6E59               	movwf	Lcd_Out@buffer+1,c
  2996  00DAC2  0E04               	movlw	4
  2997  00DAC4  EC0C  F060         	call	_Lcd_Out
  2998                           
  2999                           ;main.c: 584: Lcd_Cmd(14);
  3000  00DAC8  0E0E               	movlw	14
  3001  00DACA  ECBD  F064         	call	_Lcd_Cmd
  3002                           
  3003                           ;main.c: 586: for (i = 0; i < 30; i++) {
  3004  00DACE  0E00               	movlw	0
  3005  00DAD0  0100               	movlb	0	; () banked
  3006  00DAD2  6F77               	movwf	(_i+1)& (0+255),b
  3007  00DAD4  0E00               	movlw	0
  3008  00DAD6  6F76               	movwf	_i& (0+255),b
  3009                           
  3010                           ; BSR set to: 0
  3011  00DAD8  0100               	movlb	0	; () banked
  3012  00DADA  BF77               	btfsc	(_i+1)& (0+255),7,b
  3013  00DADC  D00A               	goto	l5160
  3014  00DADE  0100               	movlb	0	; () banked
  3015  00DAE0  5177               	movf	(_i+1)& (0+255),w,b
  3016  00DAE2  E106               	bnz	u6010
  3017  00DAE4  0E1E               	movlw	30
  3018  00DAE6  0100               	movlb	0	; () banked
  3019  00DAE8  5D76               	subwf	_i& (0+255),w,b
  3020  00DAEA  B0D8               	btfsc	status,0,c
  3021  00DAEC  D0D7               	goto	l5198
  3022  00DAEE  D001               	goto	l5160
  3023  00DAF0                     u6010:
  3024                           
  3025                           ; BSR set to: 0
  3026  00DAF0  D0D5               	goto	l5198
  3027  00DAF2                     l5160:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;main.c: 587: _delay((unsigned long)((90)*(8000000/4000.0)));
  3031  00DAF2  0EEA               	movlw	234
  3032  00DAF4  6E5C               	movwf	??_V_ProgTempAgua& (0+255),c
  3033  00DAF6  0EC3               	movlw	195
  3034  00DAF8                     u6907:
  3035  00DAF8  2EE8               	decfsz	wreg,f,c
  3036  00DAFA  D7FE               	goto	u6907
  3037  00DAFC  2E5C               	decfsz	??_V_ProgTempAgua& (0+255),f,c
  3038  00DAFE  D7FC               	goto	u6907
  3039  00DB00  F000               	nop	
  3040                           
  3041                           ;main.c: 589: if (Sw_Up = PORTAbits.RA3 == 0) {
  3042  00DB02  B680               	btfsc	3968,3,c	;volatile
  3043  00DB04  D002               	goto	u6020
  3044  00DB06  0E01               	movlw	1
  3045  00DB08  D001               	goto	u6030
  3046  00DB0A                     u6020:
  3047  00DB0A  0E00               	movlw	0
  3048  00DB0C                     u6030:
  3049  00DB0C  0100               	movlb	0	; () banked
  3050  00DB0E  6F81               	movwf	_Sw_Up& (0+255),b
  3051  00DB10  0100               	movlb	0	; () banked
  3052  00DB12  5181               	movf	_Sw_Up& (0+255),w,b
  3053  00DB14  B4D8               	btfsc	status,2,c
  3054  00DB16  D04D               	goto	l5176
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;main.c: 590: i = 0;
  3058  00DB18  0E00               	movlw	0
  3059  00DB1A  0100               	movlb	0	; () banked
  3060  00DB1C  6F77               	movwf	(_i+1)& (0+255),b
  3061  00DB1E  0E00               	movlw	0
  3062  00DB20  6F76               	movwf	_i& (0+255),b
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;main.c: 591: if (temp_prog_tr < 33.1) {temp_prog_tr+=0.1; }
  3066  00DB22  C05D  F03A         	movff	V_ProgTempAgua@temp_prog_tr,___ftge@ff1
  3067  00DB26  C05E  F03B         	movff	V_ProgTempAgua@temp_prog_tr+1,___ftge@ff1+1
  3068  00DB2A  C05F  F03C         	movff	V_ProgTempAgua@temp_prog_tr+2,___ftge@ff1+2
  3069  00DB2E  0E66               	movlw	102
  3070  00DB30  6E3D               	movwf	___ftge@ff2,c
  3071  00DB32  0E04               	movlw	4
  3072  00DB34  6E3E               	movwf	___ftge@ff2+1,c
  3073  00DB36  0E42               	movlw	66
  3074  00DB38  6E3F               	movwf	___ftge@ff2+2,c
  3075  00DB3A  EC56  F060         	call	___ftge	;wreg free
  3076  00DB3E  B0D8               	btfsc	status,0,c
  3077  00DB40  D015               	goto	l5170
  3078  00DB42  C05D  F02E         	movff	V_ProgTempAgua@temp_prog_tr,___ftadd@f1
  3079  00DB46  C05E  F02F         	movff	V_ProgTempAgua@temp_prog_tr+1,___ftadd@f1+1
  3080  00DB4A  C05F  F030         	movff	V_ProgTempAgua@temp_prog_tr+2,___ftadd@f1+2
  3081  00DB4E  0ECD               	movlw	205
  3082  00DB50  6E31               	movwf	___ftadd@f2,c
  3083  00DB52  0ECC               	movlw	204
  3084  00DB54  6E32               	movwf	___ftadd@f2+1,c
  3085  00DB56  0E3D               	movlw	61
  3086  00DB58  6E33               	movwf	___ftadd@f2+2,c
  3087  00DB5A  EC2C  F069         	call	___ftadd	;wreg free
  3088  00DB5E  C02E  F05D         	movff	?___ftadd,V_ProgTempAgua@temp_prog_tr
  3089  00DB62  C02F  F05E         	movff	?___ftadd+1,V_ProgTempAgua@temp_prog_tr+1
  3090  00DB66  C030  F05F         	movff	?___ftadd+2,V_ProgTempAgua@temp_prog_tr+2
  3091  00DB6A  D000               	goto	l5170
  3092  00DB6C                     l5170:
  3093                           
  3094                           ;main.c: 592: sprintf(buffer1, "%0.1f", temp_prog_tr);
  3095  00DB6C  0E87               	movlw	low _buffer1
  3096  00DB6E  6E43               	movwf	sprintf@sp,c
  3097  00DB70  0E00               	movlw	high _buffer1
  3098  00DB72  6E44               	movwf	sprintf@sp+1,c
  3099  00DB74  0EDE               	movlw	low STR_78
  3100  00DB76  6E45               	movwf	sprintf@f,c
  3101  00DB78  0EFF               	movlw	high STR_78
  3102  00DB7A  6E46               	movwf	sprintf@f+1,c
  3103  00DB7C  C05D  F047         	movff	V_ProgTempAgua@temp_prog_tr,?_sprintf+4
  3104  00DB80  C05E  F048         	movff	V_ProgTempAgua@temp_prog_tr+1,?_sprintf+5
  3105  00DB84  C05F  F049         	movff	V_ProgTempAgua@temp_prog_tr+2,?_sprintf+6
  3106  00DB88  ECFF  F077         	call	_sprintf	;wreg free
  3107                           
  3108                           ;main.c: 593: Lcd_Out(4, 13, buffer1);
  3109  00DB8C  0E0D               	movlw	13
  3110  00DB8E  6E57               	movwf	Lcd_Out@x,c
  3111  00DB90  0E87               	movlw	low _buffer1
  3112  00DB92  6E58               	movwf	Lcd_Out@buffer,c
  3113  00DB94  0E00               	movlw	high _buffer1
  3114  00DB96  6E59               	movwf	Lcd_Out@buffer+1,c
  3115  00DB98  0E04               	movlw	4
  3116  00DB9A  EC0C  F060         	call	_Lcd_Out
  3117                           
  3118                           ;main.c: 594: Lcd_Out(4, 13, "");
  3119  00DB9E  0E0D               	movlw	13
  3120  00DBA0  6E57               	movwf	Lcd_Out@x,c
  3121  00DBA2  0EB5               	movlw	low (STR_75+20)
  3122  00DBA4  6E58               	movwf	Lcd_Out@buffer,c
  3123  00DBA6  0EFE               	movlw	high (STR_75+20)
  3124  00DBA8  6E59               	movwf	Lcd_Out@buffer+1,c
  3125  00DBAA  0E04               	movlw	4
  3126  00DBAC  EC0C  F060         	call	_Lcd_Out
  3127  00DBB0  D000               	goto	l5176
  3128  00DBB2                     l5176:
  3129                           
  3130                           ;main.c: 595: }
  3131                           ;main.c: 599: if (Sw_Down = PORTCbits.RC4 == 0) {
  3132  00DBB2  B882               	btfsc	3970,4,c	;volatile
  3133  00DBB4  D002               	goto	u6060
  3134  00DBB6  0E01               	movlw	1
  3135  00DBB8  D001               	goto	u6070
  3136  00DBBA                     u6060:
  3137  00DBBA  0E00               	movlw	0
  3138  00DBBC                     u6070:
  3139  00DBBC  0100               	movlb	0	; () banked
  3140  00DBBE  6F7E               	movwf	_Sw_Down& (0+255),b
  3141  00DBC0  0100               	movlb	0	; () banked
  3142  00DBC2  517E               	movf	_Sw_Down& (0+255),w,b
  3143  00DBC4  B4D8               	btfsc	status,2,c
  3144  00DBC6  D04D               	goto	l5190
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 600: i = 0;
  3148  00DBC8  0E00               	movlw	0
  3149  00DBCA  0100               	movlb	0	; () banked
  3150  00DBCC  6F77               	movwf	(_i+1)& (0+255),b
  3151  00DBCE  0E00               	movlw	0
  3152  00DBD0  6F76               	movwf	_i& (0+255),b
  3153                           
  3154                           ; BSR set to: 0
  3155                           ;main.c: 601: if (temp_prog_tr > 0) {temp_prog_tr-=0.1; }
  3156  00DBD2  0E00               	movlw	0
  3157  00DBD4  6E3A               	movwf	___ftge@ff1,c
  3158  00DBD6  0E00               	movlw	0
  3159  00DBD8  6E3B               	movwf	___ftge@ff1+1,c
  3160  00DBDA  0E00               	movlw	0
  3161  00DBDC  6E3C               	movwf	___ftge@ff1+2,c
  3162  00DBDE  C05D  F03D         	movff	V_ProgTempAgua@temp_prog_tr,___ftge@ff2
  3163  00DBE2  C05E  F03E         	movff	V_ProgTempAgua@temp_prog_tr+1,___ftge@ff2+1
  3164  00DBE6  C05F  F03F         	movff	V_ProgTempAgua@temp_prog_tr+2,___ftge@ff2+2
  3165  00DBEA  EC56  F060         	call	___ftge	;wreg free
  3166  00DBEE  B0D8               	btfsc	status,0,c
  3167  00DBF0  D015               	goto	l5184
  3168  00DBF2  C05D  F03A         	movff	V_ProgTempAgua@temp_prog_tr,___ftsub@f1
  3169  00DBF6  C05E  F03B         	movff	V_ProgTempAgua@temp_prog_tr+1,___ftsub@f1+1
  3170  00DBFA  C05F  F03C         	movff	V_ProgTempAgua@temp_prog_tr+2,___ftsub@f1+2
  3171  00DBFE  0ECD               	movlw	205
  3172  00DC00  6E3D               	movwf	___ftsub@f2,c
  3173  00DC02  0ECC               	movlw	204
  3174  00DC04  6E3E               	movwf	___ftsub@f2+1,c
  3175  00DC06  0E3D               	movlw	61
  3176  00DC08  6E3F               	movwf	___ftsub@f2+2,c
  3177  00DC0A  ECCF  F05D         	call	___ftsub	;wreg free
  3178  00DC0E  C03A  F05D         	movff	?___ftsub,V_ProgTempAgua@temp_prog_tr
  3179  00DC12  C03B  F05E         	movff	?___ftsub+1,V_ProgTempAgua@temp_prog_tr+1
  3180  00DC16  C03C  F05F         	movff	?___ftsub+2,V_ProgTempAgua@temp_prog_tr+2
  3181  00DC1A  D000               	goto	l5184
  3182  00DC1C                     l5184:
  3183                           
  3184                           ;main.c: 602: sprintf(buffer1, "%.1f", temp_prog_tr);
  3185  00DC1C  0E87               	movlw	low _buffer1
  3186  00DC1E  6E43               	movwf	sprintf@sp,c
  3187  00DC20  0E00               	movlw	high _buffer1
  3188  00DC22  6E44               	movwf	sprintf@sp+1,c
  3189  00DC24  0EEA               	movlw	low STR_80
  3190  00DC26  6E45               	movwf	sprintf@f,c
  3191  00DC28  0EFF               	movlw	high STR_80
  3192  00DC2A  6E46               	movwf	sprintf@f+1,c
  3193  00DC2C  C05D  F047         	movff	V_ProgTempAgua@temp_prog_tr,?_sprintf+4
  3194  00DC30  C05E  F048         	movff	V_ProgTempAgua@temp_prog_tr+1,?_sprintf+5
  3195  00DC34  C05F  F049         	movff	V_ProgTempAgua@temp_prog_tr+2,?_sprintf+6
  3196  00DC38  ECFF  F077         	call	_sprintf	;wreg free
  3197                           
  3198                           ;main.c: 603: Lcd_Out(4, 13, buffer1);
  3199  00DC3C  0E0D               	movlw	13
  3200  00DC3E  6E57               	movwf	Lcd_Out@x,c
  3201  00DC40  0E87               	movlw	low _buffer1
  3202  00DC42  6E58               	movwf	Lcd_Out@buffer,c
  3203  00DC44  0E00               	movlw	high _buffer1
  3204  00DC46  6E59               	movwf	Lcd_Out@buffer+1,c
  3205  00DC48  0E04               	movlw	4
  3206  00DC4A  EC0C  F060         	call	_Lcd_Out
  3207                           
  3208                           ;main.c: 604: Lcd_Out(4, 13, "");
  3209  00DC4E  0E0D               	movlw	13
  3210  00DC50  6E57               	movwf	Lcd_Out@x,c
  3211  00DC52  0EB5               	movlw	low (STR_75+20)
  3212  00DC54  6E58               	movwf	Lcd_Out@buffer,c
  3213  00DC56  0EFE               	movlw	high (STR_75+20)
  3214  00DC58  6E59               	movwf	Lcd_Out@buffer+1,c
  3215  00DC5A  0E04               	movlw	4
  3216  00DC5C  EC0C  F060         	call	_Lcd_Out
  3217  00DC60  D000               	goto	l5190
  3218  00DC62                     l5190:
  3219                           
  3220                           ;main.c: 606: }
  3221                           ;main.c: 609: if (Sw_Center = PORTAbits.RA5 == 0) {
  3222  00DC62  BA80               	btfsc	3968,5,c	;volatile
  3223  00DC64  D002               	goto	u6100
  3224  00DC66  0E01               	movlw	1
  3225  00DC68  D001               	goto	u6110
  3226  00DC6A                     u6100:
  3227  00DC6A  0E00               	movlw	0
  3228  00DC6C                     u6110:
  3229  00DC6C  0100               	movlb	0	; () banked
  3230  00DC6E  6F7D               	movwf	_Sw_Center& (0+255),b
  3231  00DC70  0100               	movlb	0	; () banked
  3232  00DC72  517D               	movf	_Sw_Center& (0+255),w,b
  3233  00DC74  B4D8               	btfsc	status,2,c
  3234  00DC76  D007               	goto	l5194
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;main.c: 610: temp_prog = temp_prog_tr;
  3238  00DC78  C05D  F0E2         	movff	V_ProgTempAgua@temp_prog_tr,_temp_prog
  3239  00DC7C  C05E  F0E3         	movff	V_ProgTempAgua@temp_prog_tr+1,_temp_prog+1
  3240  00DC80  C05F  F0E4         	movff	V_ProgTempAgua@temp_prog_tr+2,_temp_prog+2
  3241                           
  3242                           ;main.c: 612: break;
  3243  00DC84  D00B               	goto	l5198
  3244  00DC86                     l5194:
  3245                           
  3246                           ; BSR set to: 0
  3247  00DC86  0100               	movlb	0	; () banked
  3248  00DC88  4B76               	infsnz	_i& (0+255),f,b
  3249  00DC8A  2B77               	incf	(_i+1)& (0+255),f,b
  3250                           
  3251                           ; BSR set to: 0
  3252  00DC8C  0100               	movlb	0	; () banked
  3253  00DC8E  BF77               	btfsc	(_i+1)& (0+255),7,b
  3254  00DC90  D730               	goto	l5160
  3255  00DC92  0100               	movlb	0	; () banked
  3256  00DC94  5177               	movf	(_i+1)& (0+255),w,b
  3257  00DC96  E102               	bnz	l5198
  3258  00DC98  D725               	goto	L1
  3259  00DC9A  D000               	goto	l5198
  3260  00DC9C                     l5198:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;main.c: 613: }
  3264                           ;main.c: 614: }
  3265                           ;main.c: 615: Lcd_Cmd(12);
  3266  00DC9C  0E0C               	movlw	12
  3267  00DC9E  ECBD  F064         	call	_Lcd_Cmd
  3268  00DCA2  0012               	return		;funcret
  3269  00DCA4                     __end_of_V_ProgTempAgua:
  3270                           	opt stack 0
  3271                           tblptru	equ	0xFF8
  3272                           tblptrh	equ	0xFF7
  3273                           tblptrl	equ	0xFF6
  3274                           tablat	equ	0xFF5
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function _V_ProgRiegoIlum *****************
  3282 ;; Defined at:
  3283 ;;		line 386 in file "../main.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;		None
  3286 ;; Auto vars:     Size  Location     Type
  3287 ;;  posicion        2   57[BANK0 ] int 
  3288 ;;  d_min_riego_    1   56[BANK0 ] unsigned char 
  3289 ;;  d_hora_riego    1   55[BANK0 ] unsigned char 
  3290 ;;  i_min_riego_    1   54[BANK0 ] unsigned char 
  3291 ;;  i_hora_riego    1   53[BANK0 ] unsigned char 
  3292 ;;  d_min_ilum_t    1   52[BANK0 ] unsigned char 
  3293 ;;  d_hora_ilum_    1   51[BANK0 ] unsigned char 
  3294 ;;  i_min_ilum_t    1   50[BANK0 ] unsigned char 
  3295 ;;  i_hora_ilum_    1   49[BANK0 ] unsigned char 
  3296 ;; Return value:  Size  Location     Type
  3297 ;;		None               void
  3298 ;; Registers used:
  3299 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : 0/0
  3302 ;;		On exit  : 0/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3306 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3308 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3309 ;;Total ram usage:       12 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:    4
  3312 ;; This function calls:
  3313 ;;		_Lcd_Cmd
  3314 ;;		_Lcd_Out
  3315 ;;		_Write_RTC
  3316 ;;		_sprintf
  3317 ;; This function is called by:
  3318 ;;		_main
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text9
  3323  00E71A                     __ptext9:
  3324                           	opt stack 0
  3325  00E71A                     _V_ProgRiegoIlum:
  3326                           	opt stack 26
  3327                           
  3328                           ;main.c: 388: Lcd_Out(1, 0, "Riego");
  3329                           
  3330                           ;incstack = 0
  3331  00E71A  0E00               	movlw	0
  3332  00E71C  6E57               	movwf	Lcd_Out@x,c
  3333  00E71E  0EE4               	movlw	low STR_32
  3334  00E720  6E58               	movwf	Lcd_Out@buffer,c
  3335  00E722  0EFF               	movlw	high STR_32
  3336  00E724  6E59               	movwf	Lcd_Out@buffer+1,c
  3337  00E726  0E01               	movlw	1
  3338  00E728  EC0C  F060         	call	_Lcd_Out
  3339                           
  3340                           ;main.c: 389: sprintf(buffer1, "Inic %02u:%02u", inicio_hora_riego, inicio_min_riego);
  3341  00E72C  0E87               	movlw	low _buffer1
  3342  00E72E  6E43               	movwf	sprintf@sp,c
  3343  00E730  0E00               	movlw	high _buffer1
  3344  00E732  6E44               	movwf	sprintf@sp+1,c
  3345  00E734  0EAE               	movlw	low STR_33
  3346  00E736  6E45               	movwf	sprintf@f,c
  3347  00E738  0EFF               	movlw	high STR_33
  3348  00E73A  6E46               	movwf	sprintf@f+1,c
  3349  00E73C  C0F0  F047         	movff	_inicio_hora_riego,?_sprintf+4
  3350  00E740  6A48               	clrf	?_sprintf+5,c
  3351  00E742  C0F2  F049         	movff	_inicio_min_riego,?_sprintf+6
  3352  00E746  6A4A               	clrf	?_sprintf+7,c
  3353  00E748  ECFF  F077         	call	_sprintf	;wreg free
  3354                           
  3355                           ;main.c: 390: Lcd_Out(2, 0, buffer1);
  3356  00E74C  0E00               	movlw	0
  3357  00E74E  6E57               	movwf	Lcd_Out@x,c
  3358  00E750  0E87               	movlw	low _buffer1
  3359  00E752  6E58               	movwf	Lcd_Out@buffer,c
  3360  00E754  0E00               	movlw	high _buffer1
  3361  00E756  6E59               	movwf	Lcd_Out@buffer+1,c
  3362  00E758  0E02               	movlw	2
  3363  00E75A  EC0C  F060         	call	_Lcd_Out
  3364                           
  3365                           ;main.c: 391: sprintf(buffer1, "Fin %02u:%02u", fin_hora_riego, fin_min_riego);
  3366  00E75E  0E87               	movlw	low _buffer1
  3367  00E760  6E43               	movwf	sprintf@sp,c
  3368  00E762  0E00               	movlw	high _buffer1
  3369  00E764  6E44               	movwf	sprintf@sp+1,c
  3370  00E766  0EBD               	movlw	low STR_34
  3371  00E768  6E45               	movwf	sprintf@f,c
  3372  00E76A  0EFF               	movlw	high STR_34
  3373  00E76C  6E46               	movwf	sprintf@f+1,c
  3374  00E76E  C083  F047         	movff	_fin_hora_riego,?_sprintf+4
  3375  00E772  6A48               	clrf	?_sprintf+5,c
  3376  00E774  C085  F049         	movff	_fin_min_riego,?_sprintf+6
  3377  00E778  6A4A               	clrf	?_sprintf+7,c
  3378  00E77A  ECFF  F077         	call	_sprintf	;wreg free
  3379                           
  3380                           ;main.c: 392: Lcd_Out(2, 11, buffer1);
  3381  00E77E  0E0B               	movlw	11
  3382  00E780  6E57               	movwf	Lcd_Out@x,c
  3383  00E782  0E87               	movlw	low _buffer1
  3384  00E784  6E58               	movwf	Lcd_Out@buffer,c
  3385  00E786  0E00               	movlw	high _buffer1
  3386  00E788  6E59               	movwf	Lcd_Out@buffer+1,c
  3387  00E78A  0E02               	movlw	2
  3388  00E78C  EC0C  F060         	call	_Lcd_Out
  3389                           
  3390                           ;main.c: 393: Lcd_Out(3, 0, "Iluminacion");
  3391  00E790  0E00               	movlw	0
  3392  00E792  6E57               	movwf	Lcd_Out@x,c
  3393  00E794  0ECB               	movlw	low STR_35
  3394  00E796  6E58               	movwf	Lcd_Out@buffer,c
  3395  00E798  0EFF               	movlw	high STR_35
  3396  00E79A  6E59               	movwf	Lcd_Out@buffer+1,c
  3397  00E79C  0E03               	movlw	3
  3398  00E79E  EC0C  F060         	call	_Lcd_Out
  3399                           
  3400                           ;main.c: 394: sprintf(buffer1, "Inic %02u:%02u", inicio_hora_ilum, inicio_min_ilum);
  3401  00E7A2  0E87               	movlw	low _buffer1
  3402  00E7A4  6E43               	movwf	sprintf@sp,c
  3403  00E7A6  0E00               	movlw	high _buffer1
  3404  00E7A8  6E44               	movwf	sprintf@sp+1,c
  3405  00E7AA  0EAE               	movlw	low STR_33
  3406  00E7AC  6E45               	movwf	sprintf@f,c
  3407  00E7AE  0EFF               	movlw	high STR_33
  3408  00E7B0  6E46               	movwf	sprintf@f+1,c
  3409  00E7B2  C0EF  F047         	movff	_inicio_hora_ilum,?_sprintf+4
  3410  00E7B6  6A48               	clrf	?_sprintf+5,c
  3411  00E7B8  C0F1  F049         	movff	_inicio_min_ilum,?_sprintf+6
  3412  00E7BC  6A4A               	clrf	?_sprintf+7,c
  3413  00E7BE  ECFF  F077         	call	_sprintf	;wreg free
  3414                           
  3415                           ;main.c: 395: Lcd_Out(4, 0, buffer1);
  3416  00E7C2  0E00               	movlw	0
  3417  00E7C4  6E57               	movwf	Lcd_Out@x,c
  3418  00E7C6  0E87               	movlw	low _buffer1
  3419  00E7C8  6E58               	movwf	Lcd_Out@buffer,c
  3420  00E7CA  0E00               	movlw	high _buffer1
  3421  00E7CC  6E59               	movwf	Lcd_Out@buffer+1,c
  3422  00E7CE  0E04               	movlw	4
  3423  00E7D0  EC0C  F060         	call	_Lcd_Out
  3424                           
  3425                           ;main.c: 396: sprintf(buffer1, "Fin %02u:%02u", fin_hora_ilum, fin_min_ilum);
  3426  00E7D4  0E87               	movlw	low _buffer1
  3427  00E7D6  6E43               	movwf	sprintf@sp,c
  3428  00E7D8  0E00               	movlw	high _buffer1
  3429  00E7DA  6E44               	movwf	sprintf@sp+1,c
  3430  00E7DC  0EBD               	movlw	low STR_34
  3431  00E7DE  6E45               	movwf	sprintf@f,c
  3432  00E7E0  0EFF               	movlw	high STR_34
  3433  00E7E2  6E46               	movwf	sprintf@f+1,c
  3434  00E7E4  C082  F047         	movff	_fin_hora_ilum,?_sprintf+4
  3435  00E7E8  6A48               	clrf	?_sprintf+5,c
  3436  00E7EA  C084  F049         	movff	_fin_min_ilum,?_sprintf+6
  3437  00E7EE  6A4A               	clrf	?_sprintf+7,c
  3438  00E7F0  ECFF  F077         	call	_sprintf	;wreg free
  3439                           
  3440                           ;main.c: 397: Lcd_Out(4, 11, buffer1);
  3441  00E7F4  0E0B               	movlw	11
  3442  00E7F6  6E57               	movwf	Lcd_Out@x,c
  3443  00E7F8  0E87               	movlw	low _buffer1
  3444  00E7FA  6E58               	movwf	Lcd_Out@buffer,c
  3445  00E7FC  0E00               	movlw	high _buffer1
  3446  00E7FE  6E59               	movwf	Lcd_Out@buffer+1,c
  3447  00E800  0E04               	movlw	4
  3448  00E802  EC0C  F060         	call	_Lcd_Out
  3449                           
  3450                           ;main.c: 399: char i_hora_ilum_tr = inicio_hora_ilum;
  3451  00E806  C0EF  F0D4         	movff	_inicio_hora_ilum,V_ProgRiegoIlum@i_hora_ilum_tr
  3452                           
  3453                           ;main.c: 400: char i_min_ilum_tr = inicio_min_ilum;
  3454  00E80A  C0F1  F0D5         	movff	_inicio_min_ilum,V_ProgRiegoIlum@i_min_ilum_tr
  3455                           
  3456                           ;main.c: 401: char d_hora_ilum_tr = fin_hora_ilum;
  3457  00E80E  C082  F0D6         	movff	_fin_hora_ilum,V_ProgRiegoIlum@d_hora_ilum_tr
  3458                           
  3459                           ;main.c: 402: char d_min_ilum_tr = fin_min_ilum;
  3460  00E812  C084  F0D7         	movff	_fin_min_ilum,V_ProgRiegoIlum@d_min_ilum_tr
  3461                           
  3462                           ;main.c: 403: char i_hora_riego_tr = inicio_hora_riego;
  3463  00E816  C0F0  F0D8         	movff	_inicio_hora_riego,V_ProgRiegoIlum@i_hora_riego_tr
  3464                           
  3465                           ;main.c: 404: char i_min_riego_tr = inicio_min_riego;
  3466  00E81A  C0F2  F0D9         	movff	_inicio_min_riego,V_ProgRiegoIlum@i_min_riego_tr
  3467                           
  3468                           ;main.c: 405: char d_hora_riego_tr = fin_hora_riego;
  3469  00E81E  C083  F0DA         	movff	_fin_hora_riego,V_ProgRiegoIlum@d_hora_riego_tr
  3470                           
  3471                           ;main.c: 406: char d_min_riego_tr = fin_min_riego;
  3472  00E822  C085  F0DB         	movff	_fin_min_riego,V_ProgRiegoIlum@d_min_riego_tr
  3473                           
  3474                           ;main.c: 407: int posicion = 0;
  3475  00E826  0E00               	movlw	0
  3476  00E828  0100               	movlb	0	; () banked
  3477  00E82A  6FDD               	movwf	(V_ProgRiegoIlum@posicion+1)& (0+255),b
  3478  00E82C  0E00               	movlw	0
  3479  00E82E  6FDC               	movwf	V_ProgRiegoIlum@posicion& (0+255),b
  3480                           
  3481                           ; BSR set to: 0
  3482                           ;main.c: 408: Lcd_Cmd(14);
  3483  00E830  0E0E               	movlw	14
  3484  00E832  ECBD  F064         	call	_Lcd_Cmd
  3485                           
  3486                           ;main.c: 409: Lcd_Out(2, 5, "");
  3487  00E836  0E05               	movlw	5
  3488  00E838  6E57               	movwf	Lcd_Out@x,c
  3489  00E83A  0EB5               	movlw	low (STR_75+20)
  3490  00E83C  6E58               	movwf	Lcd_Out@buffer,c
  3491  00E83E  0EFE               	movlw	high (STR_75+20)
  3492  00E840  6E59               	movwf	Lcd_Out@buffer+1,c
  3493  00E842  0E02               	movlw	2
  3494  00E844  EC0C  F060         	call	_Lcd_Out
  3495                           
  3496                           ;main.c: 411: for (i = 0; i < 30; i++) {
  3497  00E848  0E00               	movlw	0
  3498  00E84A  0100               	movlb	0	; () banked
  3499  00E84C  6F77               	movwf	(_i+1)& (0+255),b
  3500  00E84E  0E00               	movlw	0
  3501  00E850  6F76               	movwf	_i& (0+255),b
  3502                           
  3503                           ; BSR set to: 0
  3504  00E852  0100               	movlb	0	; () banked
  3505  00E854  BF77               	btfsc	(_i+1)& (0+255),7,b
  3506  00E856  D00A               	goto	l5242
  3507  00E858  0100               	movlb	0	; () banked
  3508  00E85A  5177               	movf	(_i+1)& (0+255),w,b
  3509  00E85C  E106               	bnz	u6140
  3510  00E85E  0E1E               	movlw	30
  3511  00E860  0100               	movlb	0	; () banked
  3512  00E862  5D76               	subwf	_i& (0+255),w,b
  3513  00E864  B0D8               	btfsc	status,0,c
  3514  00E866  D3C7               	goto	l5474
  3515  00E868  D001               	goto	l5242
  3516  00E86A                     u6140:
  3517                           
  3518                           ; BSR set to: 0
  3519  00E86A  D3C5               	goto	l5474
  3520  00E86C                     l5242:
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;main.c: 412: _delay((unsigned long)((90)*(8000000/4000.0)));
  3524  00E86C  0EEA               	movlw	234
  3525  00E86E  6E5C               	movwf	??_V_ProgRiegoIlum& (0+255),c
  3526  00E870  0EC3               	movlw	195
  3527  00E872                     u6917:
  3528  00E872  2EE8               	decfsz	wreg,f,c
  3529  00E874  D7FE               	goto	u6917
  3530  00E876  2E5C               	decfsz	??_V_ProgRiegoIlum& (0+255),f,c
  3531  00E878  D7FC               	goto	u6917
  3532  00E87A  F000               	nop	
  3533                           
  3534                           ;main.c: 414: if (Sw_Up = PORTAbits.RA3 == 0) {
  3535  00E87C  B680               	btfsc	3968,3,c	;volatile
  3536  00E87E  D002               	goto	u6150
  3537  00E880  0E01               	movlw	1
  3538  00E882  D001               	goto	u6160
  3539  00E884                     u6150:
  3540  00E884  0E00               	movlw	0
  3541  00E886                     u6160:
  3542  00E886  0100               	movlb	0	; () banked
  3543  00E888  6F81               	movwf	_Sw_Up& (0+255),b
  3544  00E88A  0100               	movlb	0	; () banked
  3545  00E88C  5181               	movf	_Sw_Up& (0+255),w,b
  3546  00E88E  B4D8               	btfsc	status,2,c
  3547  00E890  D174               	goto	l5344
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;main.c: 415: i = 0;
  3551  00E892  0E00               	movlw	0
  3552  00E894  0100               	movlb	0	; () banked
  3553  00E896  6F77               	movwf	(_i+1)& (0+255),b
  3554  00E898  0E00               	movlw	0
  3555  00E89A  6F76               	movwf	_i& (0+255),b
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;main.c: 416: if (posicion == 0) {
  3559  00E89C  0100               	movlb	0	; () banked
  3560  00E89E  51DC               	movf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3561  00E8A0  0100               	movlb	0	; () banked
  3562  00E8A2  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3563  00E8A4  A4D8               	btfss	status,2,c
  3564  00E8A6  D027               	goto	l5260
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;main.c: 417: if (i_hora_riego_tr < 23) {
  3568  00E8A8  0E17               	movlw	23
  3569  00E8AA  0100               	movlb	0	; () banked
  3570  00E8AC  61D8               	cpfslt	V_ProgRiegoIlum@i_hora_riego_tr& (0+255),b
  3571  00E8AE  D003               	goto	l5254
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;main.c: 418: i_hora_riego_tr++;
  3575  00E8B0  0100               	movlb	0	; () banked
  3576  00E8B2  2BD8               	incf	V_ProgRiegoIlum@i_hora_riego_tr& (0+255),f,b
  3577  00E8B4  D000               	goto	l5254
  3578  00E8B6                     l5254:
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;main.c: 419: }
  3582                           ;main.c: 420: sprintf(buffer1, "%02u", i_hora_riego_tr);
  3583  00E8B6  0E87               	movlw	low _buffer1
  3584  00E8B8  6E43               	movwf	sprintf@sp,c
  3585  00E8BA  0E00               	movlw	high _buffer1
  3586  00E8BC  6E44               	movwf	sprintf@sp+1,c
  3587  00E8BE  0EB8               	movlw	low (STR_33+10)
  3588  00E8C0  6E45               	movwf	sprintf@f,c
  3589  00E8C2  0EFF               	movlw	high (STR_33+10)
  3590  00E8C4  6E46               	movwf	sprintf@f+1,c
  3591  00E8C6  C0D8  F047         	movff	V_ProgRiegoIlum@i_hora_riego_tr,?_sprintf+4
  3592  00E8CA  6A48               	clrf	?_sprintf+5,c
  3593  00E8CC  ECFF  F077         	call	_sprintf	;wreg free
  3594                           
  3595                           ;main.c: 421: Lcd_Out(2, 5, buffer1);
  3596  00E8D0  0E05               	movlw	5
  3597  00E8D2  6E57               	movwf	Lcd_Out@x,c
  3598  00E8D4  0E87               	movlw	low _buffer1
  3599  00E8D6  6E58               	movwf	Lcd_Out@buffer,c
  3600  00E8D8  0E00               	movlw	high _buffer1
  3601  00E8DA  6E59               	movwf	Lcd_Out@buffer+1,c
  3602  00E8DC  0E02               	movlw	2
  3603  00E8DE  EC0C  F060         	call	_Lcd_Out
  3604                           
  3605                           ;main.c: 422: Lcd_Out(2, 5, "");
  3606  00E8E2  0E05               	movlw	5
  3607  00E8E4  6E57               	movwf	Lcd_Out@x,c
  3608  00E8E6  0EB5               	movlw	low (STR_75+20)
  3609  00E8E8  6E58               	movwf	Lcd_Out@buffer,c
  3610  00E8EA  0EFE               	movlw	high (STR_75+20)
  3611  00E8EC  6E59               	movwf	Lcd_Out@buffer+1,c
  3612  00E8EE  0E02               	movlw	2
  3613  00E8F0  EC0C  F060         	call	_Lcd_Out
  3614                           
  3615                           ;main.c: 423: } else if (posicion == 2) {
  3616  00E8F4  D142               	goto	l5344
  3617  00E8F6                     l5260:
  3618  00E8F6  0E02               	movlw	2
  3619  00E8F8  0100               	movlb	0	; () banked
  3620  00E8FA  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3621  00E8FC  0100               	movlb	0	; () banked
  3622  00E8FE  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3623  00E900  A4D8               	btfss	status,2,c
  3624  00E902  D027               	goto	l5272
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;main.c: 424: if (i_min_riego_tr < 59) {
  3628  00E904  0E3B               	movlw	59
  3629  00E906  0100               	movlb	0	; () banked
  3630  00E908  61D9               	cpfslt	V_ProgRiegoIlum@i_min_riego_tr& (0+255),b
  3631  00E90A  D003               	goto	l5266
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;main.c: 425: i_min_riego_tr++;
  3635  00E90C  0100               	movlb	0	; () banked
  3636  00E90E  2BD9               	incf	V_ProgRiegoIlum@i_min_riego_tr& (0+255),f,b
  3637  00E910  D000               	goto	l5266
  3638  00E912                     l5266:
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;main.c: 426: }
  3642                           ;main.c: 427: sprintf(buffer1, "%02u", i_min_riego_tr);
  3643  00E912  0E87               	movlw	low _buffer1
  3644  00E914  6E43               	movwf	sprintf@sp,c
  3645  00E916  0E00               	movlw	high _buffer1
  3646  00E918  6E44               	movwf	sprintf@sp+1,c
  3647  00E91A  0EB8               	movlw	low (STR_33+10)
  3648  00E91C  6E45               	movwf	sprintf@f,c
  3649  00E91E  0EFF               	movlw	high (STR_33+10)
  3650  00E920  6E46               	movwf	sprintf@f+1,c
  3651  00E922  C0D9  F047         	movff	V_ProgRiegoIlum@i_min_riego_tr,?_sprintf+4
  3652  00E926  6A48               	clrf	?_sprintf+5,c
  3653  00E928  ECFF  F077         	call	_sprintf	;wreg free
  3654                           
  3655                           ;main.c: 428: Lcd_Out(2, 8, buffer1);
  3656  00E92C  0E08               	movlw	8
  3657  00E92E  6E57               	movwf	Lcd_Out@x,c
  3658  00E930  0E87               	movlw	low _buffer1
  3659  00E932  6E58               	movwf	Lcd_Out@buffer,c
  3660  00E934  0E00               	movlw	high _buffer1
  3661  00E936  6E59               	movwf	Lcd_Out@buffer+1,c
  3662  00E938  0E02               	movlw	2
  3663  00E93A  EC0C  F060         	call	_Lcd_Out
  3664                           
  3665                           ;main.c: 429: Lcd_Out(2, 8, "");
  3666  00E93E  0E08               	movlw	8
  3667  00E940  6E57               	movwf	Lcd_Out@x,c
  3668  00E942  0EB5               	movlw	low (STR_75+20)
  3669  00E944  6E58               	movwf	Lcd_Out@buffer,c
  3670  00E946  0EFE               	movlw	high (STR_75+20)
  3671  00E948  6E59               	movwf	Lcd_Out@buffer+1,c
  3672  00E94A  0E02               	movlw	2
  3673  00E94C  EC0C  F060         	call	_Lcd_Out
  3674                           
  3675                           ;main.c: 430: } else if (posicion == 4) {
  3676  00E950  D114               	goto	l5344
  3677  00E952                     l5272:
  3678  00E952  0E04               	movlw	4
  3679  00E954  0100               	movlb	0	; () banked
  3680  00E956  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3681  00E958  0100               	movlb	0	; () banked
  3682  00E95A  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3683  00E95C  A4D8               	btfss	status,2,c
  3684  00E95E  D027               	goto	l5284
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;main.c: 431: if (d_hora_riego_tr < 3) {
  3688  00E960  0E03               	movlw	3
  3689  00E962  0100               	movlb	0	; () banked
  3690  00E964  61DA               	cpfslt	V_ProgRiegoIlum@d_hora_riego_tr& (0+255),b
  3691  00E966  D003               	goto	l5278
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;main.c: 432: d_hora_riego_tr++;
  3695  00E968  0100               	movlb	0	; () banked
  3696  00E96A  2BDA               	incf	V_ProgRiegoIlum@d_hora_riego_tr& (0+255),f,b
  3697  00E96C  D000               	goto	l5278
  3698  00E96E                     l5278:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;main.c: 433: }
  3702                           ;main.c: 434: sprintf(buffer1, "%02u", d_hora_riego_tr);
  3703  00E96E  0E87               	movlw	low _buffer1
  3704  00E970  6E43               	movwf	sprintf@sp,c
  3705  00E972  0E00               	movlw	high _buffer1
  3706  00E974  6E44               	movwf	sprintf@sp+1,c
  3707  00E976  0EB8               	movlw	low (STR_33+10)
  3708  00E978  6E45               	movwf	sprintf@f,c
  3709  00E97A  0EFF               	movlw	high (STR_33+10)
  3710  00E97C  6E46               	movwf	sprintf@f+1,c
  3711  00E97E  C0DA  F047         	movff	V_ProgRiegoIlum@d_hora_riego_tr,?_sprintf+4
  3712  00E982  6A48               	clrf	?_sprintf+5,c
  3713  00E984  ECFF  F077         	call	_sprintf	;wreg free
  3714                           
  3715                           ;main.c: 435: Lcd_Out(2, 15, buffer1);
  3716  00E988  0E0F               	movlw	15
  3717  00E98A  6E57               	movwf	Lcd_Out@x,c
  3718  00E98C  0E87               	movlw	low _buffer1
  3719  00E98E  6E58               	movwf	Lcd_Out@buffer,c
  3720  00E990  0E00               	movlw	high _buffer1
  3721  00E992  6E59               	movwf	Lcd_Out@buffer+1,c
  3722  00E994  0E02               	movlw	2
  3723  00E996  EC0C  F060         	call	_Lcd_Out
  3724                           
  3725                           ;main.c: 436: Lcd_Out(2, 15, "");
  3726  00E99A  0E0F               	movlw	15
  3727  00E99C  6E57               	movwf	Lcd_Out@x,c
  3728  00E99E  0EB5               	movlw	low (STR_75+20)
  3729  00E9A0  6E58               	movwf	Lcd_Out@buffer,c
  3730  00E9A2  0EFE               	movlw	high (STR_75+20)
  3731  00E9A4  6E59               	movwf	Lcd_Out@buffer+1,c
  3732  00E9A6  0E02               	movlw	2
  3733  00E9A8  EC0C  F060         	call	_Lcd_Out
  3734                           
  3735                           ;main.c: 437: } else if (posicion == 6) {
  3736  00E9AC  D0E6               	goto	l5344
  3737  00E9AE                     l5284:
  3738  00E9AE  0E06               	movlw	6
  3739  00E9B0  0100               	movlb	0	; () banked
  3740  00E9B2  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3741  00E9B4  0100               	movlb	0	; () banked
  3742  00E9B6  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3743  00E9B8  A4D8               	btfss	status,2,c
  3744  00E9BA  D027               	goto	l5296
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;main.c: 438: if (d_min_riego_tr < 59) {
  3748  00E9BC  0E3B               	movlw	59
  3749  00E9BE  0100               	movlb	0	; () banked
  3750  00E9C0  61DB               	cpfslt	V_ProgRiegoIlum@d_min_riego_tr& (0+255),b
  3751  00E9C2  D003               	goto	l5290
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;main.c: 439: d_min_riego_tr++;
  3755  00E9C4  0100               	movlb	0	; () banked
  3756  00E9C6  2BDB               	incf	V_ProgRiegoIlum@d_min_riego_tr& (0+255),f,b
  3757  00E9C8  D000               	goto	l5290
  3758  00E9CA                     l5290:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 440: }
  3762                           ;main.c: 441: sprintf(buffer1, "%02u", d_min_riego_tr);
  3763  00E9CA  0E87               	movlw	low _buffer1
  3764  00E9CC  6E43               	movwf	sprintf@sp,c
  3765  00E9CE  0E00               	movlw	high _buffer1
  3766  00E9D0  6E44               	movwf	sprintf@sp+1,c
  3767  00E9D2  0EB8               	movlw	low (STR_33+10)
  3768  00E9D4  6E45               	movwf	sprintf@f,c
  3769  00E9D6  0EFF               	movlw	high (STR_33+10)
  3770  00E9D8  6E46               	movwf	sprintf@f+1,c
  3771  00E9DA  C0DB  F047         	movff	V_ProgRiegoIlum@d_min_riego_tr,?_sprintf+4
  3772  00E9DE  6A48               	clrf	?_sprintf+5,c
  3773  00E9E0  ECFF  F077         	call	_sprintf	;wreg free
  3774                           
  3775                           ;main.c: 442: Lcd_Out(2, 18, buffer1);
  3776  00E9E4  0E12               	movlw	18
  3777  00E9E6  6E57               	movwf	Lcd_Out@x,c
  3778  00E9E8  0E87               	movlw	low _buffer1
  3779  00E9EA  6E58               	movwf	Lcd_Out@buffer,c
  3780  00E9EC  0E00               	movlw	high _buffer1
  3781  00E9EE  6E59               	movwf	Lcd_Out@buffer+1,c
  3782  00E9F0  0E02               	movlw	2
  3783  00E9F2  EC0C  F060         	call	_Lcd_Out
  3784                           
  3785                           ;main.c: 443: Lcd_Out(2, 18, "");
  3786  00E9F6  0E12               	movlw	18
  3787  00E9F8  6E57               	movwf	Lcd_Out@x,c
  3788  00E9FA  0EB5               	movlw	low (STR_75+20)
  3789  00E9FC  6E58               	movwf	Lcd_Out@buffer,c
  3790  00E9FE  0EFE               	movlw	high (STR_75+20)
  3791  00EA00  6E59               	movwf	Lcd_Out@buffer+1,c
  3792  00EA02  0E02               	movlw	2
  3793  00EA04  EC0C  F060         	call	_Lcd_Out
  3794                           
  3795                           ;main.c: 444: } else if (posicion == 8) {
  3796  00EA08  D0B8               	goto	l5344
  3797  00EA0A                     l5296:
  3798  00EA0A  0E08               	movlw	8
  3799  00EA0C  0100               	movlb	0	; () banked
  3800  00EA0E  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3801  00EA10  0100               	movlb	0	; () banked
  3802  00EA12  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3803  00EA14  A4D8               	btfss	status,2,c
  3804  00EA16  D027               	goto	l5308
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;main.c: 445: if (i_hora_ilum_tr < 23) {
  3808  00EA18  0E17               	movlw	23
  3809  00EA1A  0100               	movlb	0	; () banked
  3810  00EA1C  61D4               	cpfslt	V_ProgRiegoIlum@i_hora_ilum_tr& (0+255),b
  3811  00EA1E  D003               	goto	l5302
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;main.c: 446: i_hora_ilum_tr++;
  3815  00EA20  0100               	movlb	0	; () banked
  3816  00EA22  2BD4               	incf	V_ProgRiegoIlum@i_hora_ilum_tr& (0+255),f,b
  3817  00EA24  D000               	goto	l5302
  3818  00EA26                     l5302:
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;main.c: 447: }
  3822                           ;main.c: 448: sprintf(buffer1, "%02u", i_hora_ilum_tr);
  3823  00EA26  0E87               	movlw	low _buffer1
  3824  00EA28  6E43               	movwf	sprintf@sp,c
  3825  00EA2A  0E00               	movlw	high _buffer1
  3826  00EA2C  6E44               	movwf	sprintf@sp+1,c
  3827  00EA2E  0EB8               	movlw	low (STR_33+10)
  3828  00EA30  6E45               	movwf	sprintf@f,c
  3829  00EA32  0EFF               	movlw	high (STR_33+10)
  3830  00EA34  6E46               	movwf	sprintf@f+1,c
  3831  00EA36  C0D4  F047         	movff	V_ProgRiegoIlum@i_hora_ilum_tr,?_sprintf+4
  3832  00EA3A  6A48               	clrf	?_sprintf+5,c
  3833  00EA3C  ECFF  F077         	call	_sprintf	;wreg free
  3834                           
  3835                           ;main.c: 449: Lcd_Out(4, 5, buffer1);
  3836  00EA40  0E05               	movlw	5
  3837  00EA42  6E57               	movwf	Lcd_Out@x,c
  3838  00EA44  0E87               	movlw	low _buffer1
  3839  00EA46  6E58               	movwf	Lcd_Out@buffer,c
  3840  00EA48  0E00               	movlw	high _buffer1
  3841  00EA4A  6E59               	movwf	Lcd_Out@buffer+1,c
  3842  00EA4C  0E04               	movlw	4
  3843  00EA4E  EC0C  F060         	call	_Lcd_Out
  3844                           
  3845                           ;main.c: 450: Lcd_Out(4, 5, "");
  3846  00EA52  0E05               	movlw	5
  3847  00EA54  6E57               	movwf	Lcd_Out@x,c
  3848  00EA56  0EB5               	movlw	low (STR_75+20)
  3849  00EA58  6E58               	movwf	Lcd_Out@buffer,c
  3850  00EA5A  0EFE               	movlw	high (STR_75+20)
  3851  00EA5C  6E59               	movwf	Lcd_Out@buffer+1,c
  3852  00EA5E  0E04               	movlw	4
  3853  00EA60  EC0C  F060         	call	_Lcd_Out
  3854                           
  3855                           ;main.c: 451: } else if (posicion == 10) {
  3856  00EA64  D08A               	goto	l5344
  3857  00EA66                     l5308:
  3858  00EA66  0E0A               	movlw	10
  3859  00EA68  0100               	movlb	0	; () banked
  3860  00EA6A  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3861  00EA6C  0100               	movlb	0	; () banked
  3862  00EA6E  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3863  00EA70  A4D8               	btfss	status,2,c
  3864  00EA72  D027               	goto	l5320
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;main.c: 452: if (i_min_ilum_tr < 59) {
  3868  00EA74  0E3B               	movlw	59
  3869  00EA76  0100               	movlb	0	; () banked
  3870  00EA78  61D5               	cpfslt	V_ProgRiegoIlum@i_min_ilum_tr& (0+255),b
  3871  00EA7A  D003               	goto	l5314
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;main.c: 453: i_min_ilum_tr++;
  3875  00EA7C  0100               	movlb	0	; () banked
  3876  00EA7E  2BD5               	incf	V_ProgRiegoIlum@i_min_ilum_tr& (0+255),f,b
  3877  00EA80  D000               	goto	l5314
  3878  00EA82                     l5314:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;main.c: 454: }
  3882                           ;main.c: 455: sprintf(buffer1, "%02u", i_min_ilum_tr);
  3883  00EA82  0E87               	movlw	low _buffer1
  3884  00EA84  6E43               	movwf	sprintf@sp,c
  3885  00EA86  0E00               	movlw	high _buffer1
  3886  00EA88  6E44               	movwf	sprintf@sp+1,c
  3887  00EA8A  0EB8               	movlw	low (STR_33+10)
  3888  00EA8C  6E45               	movwf	sprintf@f,c
  3889  00EA8E  0EFF               	movlw	high (STR_33+10)
  3890  00EA90  6E46               	movwf	sprintf@f+1,c
  3891  00EA92  C0D5  F047         	movff	V_ProgRiegoIlum@i_min_ilum_tr,?_sprintf+4
  3892  00EA96  6A48               	clrf	?_sprintf+5,c
  3893  00EA98  ECFF  F077         	call	_sprintf	;wreg free
  3894                           
  3895                           ;main.c: 456: Lcd_Out(4, 8, buffer1);
  3896  00EA9C  0E08               	movlw	8
  3897  00EA9E  6E57               	movwf	Lcd_Out@x,c
  3898  00EAA0  0E87               	movlw	low _buffer1
  3899  00EAA2  6E58               	movwf	Lcd_Out@buffer,c
  3900  00EAA4  0E00               	movlw	high _buffer1
  3901  00EAA6  6E59               	movwf	Lcd_Out@buffer+1,c
  3902  00EAA8  0E04               	movlw	4
  3903  00EAAA  EC0C  F060         	call	_Lcd_Out
  3904                           
  3905                           ;main.c: 457: Lcd_Out(4, 8, "");
  3906  00EAAE  0E08               	movlw	8
  3907  00EAB0  6E57               	movwf	Lcd_Out@x,c
  3908  00EAB2  0EB5               	movlw	low (STR_75+20)
  3909  00EAB4  6E58               	movwf	Lcd_Out@buffer,c
  3910  00EAB6  0EFE               	movlw	high (STR_75+20)
  3911  00EAB8  6E59               	movwf	Lcd_Out@buffer+1,c
  3912  00EABA  0E04               	movlw	4
  3913  00EABC  EC0C  F060         	call	_Lcd_Out
  3914                           
  3915                           ;main.c: 458: } else if (posicion == 12) {
  3916  00EAC0  D05C               	goto	l5344
  3917  00EAC2                     l5320:
  3918  00EAC2  0E0C               	movlw	12
  3919  00EAC4  0100               	movlb	0	; () banked
  3920  00EAC6  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3921  00EAC8  0100               	movlb	0	; () banked
  3922  00EACA  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3923  00EACC  A4D8               	btfss	status,2,c
  3924  00EACE  D027               	goto	l5332
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;main.c: 459: if (d_hora_ilum_tr < 11) {
  3928  00EAD0  0E0B               	movlw	11
  3929  00EAD2  0100               	movlb	0	; () banked
  3930  00EAD4  61D6               	cpfslt	V_ProgRiegoIlum@d_hora_ilum_tr& (0+255),b
  3931  00EAD6  D003               	goto	l5326
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;main.c: 460: d_hora_ilum_tr++;
  3935  00EAD8  0100               	movlb	0	; () banked
  3936  00EADA  2BD6               	incf	V_ProgRiegoIlum@d_hora_ilum_tr& (0+255),f,b
  3937  00EADC  D000               	goto	l5326
  3938  00EADE                     l5326:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;main.c: 461: }
  3942                           ;main.c: 462: sprintf(buffer1, "%02u", d_hora_ilum_tr);
  3943  00EADE  0E87               	movlw	low _buffer1
  3944  00EAE0  6E43               	movwf	sprintf@sp,c
  3945  00EAE2  0E00               	movlw	high _buffer1
  3946  00EAE4  6E44               	movwf	sprintf@sp+1,c
  3947  00EAE6  0EB8               	movlw	low (STR_33+10)
  3948  00EAE8  6E45               	movwf	sprintf@f,c
  3949  00EAEA  0EFF               	movlw	high (STR_33+10)
  3950  00EAEC  6E46               	movwf	sprintf@f+1,c
  3951  00EAEE  C0D6  F047         	movff	V_ProgRiegoIlum@d_hora_ilum_tr,?_sprintf+4
  3952  00EAF2  6A48               	clrf	?_sprintf+5,c
  3953  00EAF4  ECFF  F077         	call	_sprintf	;wreg free
  3954                           
  3955                           ;main.c: 463: Lcd_Out(4, 15, buffer1);
  3956  00EAF8  0E0F               	movlw	15
  3957  00EAFA  6E57               	movwf	Lcd_Out@x,c
  3958  00EAFC  0E87               	movlw	low _buffer1
  3959  00EAFE  6E58               	movwf	Lcd_Out@buffer,c
  3960  00EB00  0E00               	movlw	high _buffer1
  3961  00EB02  6E59               	movwf	Lcd_Out@buffer+1,c
  3962  00EB04  0E04               	movlw	4
  3963  00EB06  EC0C  F060         	call	_Lcd_Out
  3964                           
  3965                           ;main.c: 464: Lcd_Out(4, 15, "");
  3966  00EB0A  0E0F               	movlw	15
  3967  00EB0C  6E57               	movwf	Lcd_Out@x,c
  3968  00EB0E  0EB5               	movlw	low (STR_75+20)
  3969  00EB10  6E58               	movwf	Lcd_Out@buffer,c
  3970  00EB12  0EFE               	movlw	high (STR_75+20)
  3971  00EB14  6E59               	movwf	Lcd_Out@buffer+1,c
  3972  00EB16  0E04               	movlw	4
  3973  00EB18  EC0C  F060         	call	_Lcd_Out
  3974                           
  3975                           ;main.c: 465: } else if (posicion == 14) {
  3976  00EB1C  D02E               	goto	l5344
  3977  00EB1E                     l5332:
  3978  00EB1E  0E0E               	movlw	14
  3979  00EB20  0100               	movlb	0	; () banked
  3980  00EB22  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  3981  00EB24  0100               	movlb	0	; () banked
  3982  00EB26  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  3983  00EB28  A4D8               	btfss	status,2,c
  3984  00EB2A  D027               	goto	l5344
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;main.c: 466: if (d_min_ilum_tr < 59) {
  3988  00EB2C  0E3B               	movlw	59
  3989  00EB2E  0100               	movlb	0	; () banked
  3990  00EB30  61D7               	cpfslt	V_ProgRiegoIlum@d_min_ilum_tr& (0+255),b
  3991  00EB32  D003               	goto	l5338
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;main.c: 467: d_min_ilum_tr++;
  3995  00EB34  0100               	movlb	0	; () banked
  3996  00EB36  2BD7               	incf	V_ProgRiegoIlum@d_min_ilum_tr& (0+255),f,b
  3997  00EB38  D000               	goto	l5338
  3998  00EB3A                     l5338:
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;main.c: 468: }
  4002                           ;main.c: 469: sprintf(buffer1, "%02u", d_min_ilum_tr);
  4003  00EB3A  0E87               	movlw	low _buffer1
  4004  00EB3C  6E43               	movwf	sprintf@sp,c
  4005  00EB3E  0E00               	movlw	high _buffer1
  4006  00EB40  6E44               	movwf	sprintf@sp+1,c
  4007  00EB42  0EB8               	movlw	low (STR_33+10)
  4008  00EB44  6E45               	movwf	sprintf@f,c
  4009  00EB46  0EFF               	movlw	high (STR_33+10)
  4010  00EB48  6E46               	movwf	sprintf@f+1,c
  4011  00EB4A  C0D7  F047         	movff	V_ProgRiegoIlum@d_min_ilum_tr,?_sprintf+4
  4012  00EB4E  6A48               	clrf	?_sprintf+5,c
  4013  00EB50  ECFF  F077         	call	_sprintf	;wreg free
  4014                           
  4015                           ;main.c: 470: Lcd_Out(4, 18, buffer1);
  4016  00EB54  0E12               	movlw	18
  4017  00EB56  6E57               	movwf	Lcd_Out@x,c
  4018  00EB58  0E87               	movlw	low _buffer1
  4019  00EB5A  6E58               	movwf	Lcd_Out@buffer,c
  4020  00EB5C  0E00               	movlw	high _buffer1
  4021  00EB5E  6E59               	movwf	Lcd_Out@buffer+1,c
  4022  00EB60  0E04               	movlw	4
  4023  00EB62  EC0C  F060         	call	_Lcd_Out
  4024                           
  4025                           ;main.c: 471: Lcd_Out(4, 18, "");
  4026  00EB66  0E12               	movlw	18
  4027  00EB68  6E57               	movwf	Lcd_Out@x,c
  4028  00EB6A  0EB5               	movlw	low (STR_75+20)
  4029  00EB6C  6E58               	movwf	Lcd_Out@buffer,c
  4030  00EB6E  0EFE               	movlw	high (STR_75+20)
  4031  00EB70  6E59               	movwf	Lcd_Out@buffer+1,c
  4032  00EB72  0E04               	movlw	4
  4033  00EB74  EC0C  F060         	call	_Lcd_Out
  4034  00EB78  D000               	goto	l5344
  4035  00EB7A                     l5344:
  4036                           
  4037                           ;main.c: 472: }
  4038                           ;main.c: 473: }
  4039                           ;main.c: 475: if (Sw_Right = PORTAbits.RA2 == 0) {
  4040  00EB7A  B480               	btfsc	3968,2,c	;volatile
  4041  00EB7C  D002               	goto	u6340
  4042  00EB7E  0E01               	movlw	1
  4043  00EB80  D001               	goto	u6350
  4044  00EB82                     u6340:
  4045  00EB82  0E00               	movlw	0
  4046  00EB84                     u6350:
  4047  00EB84  0100               	movlb	0	; () banked
  4048  00EB86  6F80               	movwf	_Sw_Right& (0+255),b
  4049  00EB88  0100               	movlb	0	; () banked
  4050  00EB8A  5180               	movf	_Sw_Right& (0+255),w,b
  4051  00EB8C  B4D8               	btfsc	status,2,c
  4052  00EB8E  D03C               	goto	l5354
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;main.c: 476: if (posicion <= 13) {
  4056  00EB90  0100               	movlb	0	; () banked
  4057  00EB92  BFDD               	btfsc	(V_ProgRiegoIlum@posicion+1)& (0+255),7,b
  4058  00EB94  D008               	goto	l5348
  4059  00EB96  0100               	movlb	0	; () banked
  4060  00EB98  51DD               	movf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4061  00EB9A  E10B               	bnz	l5350
  4062  00EB9C  0E0E               	movlw	14
  4063  00EB9E  0100               	movlb	0	; () banked
  4064  00EBA0  5DDC               	subwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4065  00EBA2  B0D8               	btfsc	status,0,c
  4066  00EBA4  D006               	goto	l5350
  4067  00EBA6                     l5348:
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;main.c: 477: posicion += 2;
  4071  00EBA6  0E02               	movlw	2
  4072  00EBA8  0100               	movlb	0	; () banked
  4073  00EBAA  27DC               	addwf	V_ProgRiegoIlum@posicion& (0+255),f,b
  4074  00EBAC  0E00               	movlw	0
  4075  00EBAE  23DD               	addwfc	(V_ProgRiegoIlum@posicion+1)& (0+255),f,b
  4076  00EBB0  D000               	goto	l5350
  4077  00EBB2                     l5350:
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;main.c: 478: }
  4081                           ;main.c: 479: i = 0;
  4082  00EBB2  0E00               	movlw	0
  4083  00EBB4  0100               	movlb	0	; () banked
  4084  00EBB6  6F77               	movwf	(_i+1)& (0+255),b
  4085  00EBB8  0E00               	movlw	0
  4086  00EBBA  6F76               	movwf	_i& (0+255),b
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;main.c: 480: Lcd_Out(posicionesUp[posicion], posicionesUp[posicion + 1], "");
  4090  00EBBC  C0DC  F05C         	movff	V_ProgRiegoIlum@posicion,??_V_ProgRiegoIlum
  4091  00EBC0  C0DD  F05D         	movff	V_ProgRiegoIlum@posicion+1,??_V_ProgRiegoIlum+1
  4092  00EBC4  90D8               	bcf	status,0,c
  4093  00EBC6  365C               	rlcf	??_V_ProgRiegoIlum,f,c
  4094  00EBC8  365D               	rlcf	??_V_ProgRiegoIlum+1,f,c
  4095  00EBCA  0E02               	movlw	2
  4096  00EBCC  265C               	addwf	??_V_ProgRiegoIlum,f,c
  4097  00EBCE  0E00               	movlw	0
  4098  00EBD0  225D               	addwfc	??_V_ProgRiegoIlum+1,f,c
  4099  00EBD2  0E00               	movlw	low _posicionesUp
  4100  00EBD4  245C               	addwf	??_V_ProgRiegoIlum,w,c
  4101  00EBD6  6ED9               	movwf	fsr2l,c
  4102  00EBD8  0E01               	movlw	high _posicionesUp
  4103  00EBDA  205D               	addwfc	??_V_ProgRiegoIlum+1,w,c
  4104  00EBDC  6EDA               	movwf	fsr2h,c
  4105  00EBDE  50DF               	movf	indf2,w,c
  4106  00EBE0  6E57               	movwf	Lcd_Out@x,c
  4107  00EBE2  0EB5               	movlw	low (STR_75+20)
  4108  00EBE4  6E58               	movwf	Lcd_Out@buffer,c
  4109  00EBE6  0EFE               	movlw	high (STR_75+20)
  4110  00EBE8  6E59               	movwf	Lcd_Out@buffer+1,c
  4111  00EBEA  90D8               	bcf	status,0,c
  4112  00EBEC  0100               	movlb	0	; () banked
  4113  00EBEE  35DC               	rlcf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4114  00EBF0  6ED9               	movwf	fsr2l,c
  4115  00EBF2  0100               	movlb	0	; () banked
  4116  00EBF4  35DD               	rlcf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4117  00EBF6  6EDA               	movwf	fsr2h,c
  4118  00EBF8  0E00               	movlw	low _posicionesUp
  4119  00EBFA  26D9               	addwf	fsr2l,f,c
  4120  00EBFC  0E01               	movlw	high _posicionesUp
  4121  00EBFE  22DA               	addwfc	fsr2h,f,c
  4122  00EC00  50DF               	movf	indf2,w,c
  4123  00EC02  EC0C  F060         	call	_Lcd_Out
  4124  00EC06  D000               	goto	l5354
  4125  00EC08                     l5354:
  4126                           
  4127                           ;main.c: 481: }
  4128                           ;main.c: 483: if (Sw_Left = PORTAbits.RA0 == 0) {
  4129  00EC08  B080               	btfsc	3968,0,c	;volatile
  4130  00EC0A  D002               	goto	u6380
  4131  00EC0C  0E01               	movlw	1
  4132  00EC0E  D001               	goto	u6390
  4133  00EC10                     u6380:
  4134  00EC10  0E00               	movlw	0
  4135  00EC12                     u6390:
  4136  00EC12  0100               	movlb	0	; () banked
  4137  00EC14  6F7F               	movwf	_Sw_Left& (0+255),b
  4138  00EC16  0100               	movlb	0	; () banked
  4139  00EC18  517F               	movf	_Sw_Left& (0+255),w,b
  4140  00EC1A  B4D8               	btfsc	status,2,c
  4141  00EC1C  D03C               	goto	l5364
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;main.c: 484: if (posicion >= 2) {
  4145  00EC1E  0100               	movlb	0	; () banked
  4146  00EC20  BFDD               	btfsc	(V_ProgRiegoIlum@posicion+1)& (0+255),7,b
  4147  00EC22  D00E               	goto	l5360
  4148  00EC24  0100               	movlb	0	; () banked
  4149  00EC26  51DD               	movf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4150  00EC28  E105               	bnz	u6410
  4151  00EC2A  0E02               	movlw	2
  4152  00EC2C  0100               	movlb	0	; () banked
  4153  00EC2E  5DDC               	subwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4154  00EC30  A0D8               	btfss	status,0,c
  4155  00EC32  D006               	goto	l5360
  4156  00EC34                     u6410:
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;main.c: 485: posicion -= 2;
  4160  00EC34  0100               	movlb	0	; () banked
  4161  00EC36  0EFE               	movlw	254
  4162  00EC38  27DC               	addwf	V_ProgRiegoIlum@posicion& (0+255),f,b
  4163  00EC3A  0EFF               	movlw	255
  4164  00EC3C  23DD               	addwfc	(V_ProgRiegoIlum@posicion+1)& (0+255),f,b
  4165  00EC3E  D000               	goto	l5360
  4166  00EC40                     l5360:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;main.c: 486: }
  4170                           ;main.c: 487: i = 0;
  4171  00EC40  0E00               	movlw	0
  4172  00EC42  0100               	movlb	0	; () banked
  4173  00EC44  6F77               	movwf	(_i+1)& (0+255),b
  4174  00EC46  0E00               	movlw	0
  4175  00EC48  6F76               	movwf	_i& (0+255),b
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;main.c: 488: Lcd_Out(posicionesUp[posicion], posicionesUp[posicion + 1], "");
  4179  00EC4A  C0DC  F05C         	movff	V_ProgRiegoIlum@posicion,??_V_ProgRiegoIlum
  4180  00EC4E  C0DD  F05D         	movff	V_ProgRiegoIlum@posicion+1,??_V_ProgRiegoIlum+1
  4181  00EC52  90D8               	bcf	status,0,c
  4182  00EC54  365C               	rlcf	??_V_ProgRiegoIlum,f,c
  4183  00EC56  365D               	rlcf	??_V_ProgRiegoIlum+1,f,c
  4184  00EC58  0E02               	movlw	2
  4185  00EC5A  265C               	addwf	??_V_ProgRiegoIlum,f,c
  4186  00EC5C  0E00               	movlw	0
  4187  00EC5E  225D               	addwfc	??_V_ProgRiegoIlum+1,f,c
  4188  00EC60  0E00               	movlw	low _posicionesUp
  4189  00EC62  245C               	addwf	??_V_ProgRiegoIlum,w,c
  4190  00EC64  6ED9               	movwf	fsr2l,c
  4191  00EC66  0E01               	movlw	high _posicionesUp
  4192  00EC68  205D               	addwfc	??_V_ProgRiegoIlum+1,w,c
  4193  00EC6A  6EDA               	movwf	fsr2h,c
  4194  00EC6C  50DF               	movf	indf2,w,c
  4195  00EC6E  6E57               	movwf	Lcd_Out@x,c
  4196  00EC70  0EB5               	movlw	low (STR_75+20)
  4197  00EC72  6E58               	movwf	Lcd_Out@buffer,c
  4198  00EC74  0EFE               	movlw	high (STR_75+20)
  4199  00EC76  6E59               	movwf	Lcd_Out@buffer+1,c
  4200  00EC78  90D8               	bcf	status,0,c
  4201  00EC7A  0100               	movlb	0	; () banked
  4202  00EC7C  35DC               	rlcf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4203  00EC7E  6ED9               	movwf	fsr2l,c
  4204  00EC80  0100               	movlb	0	; () banked
  4205  00EC82  35DD               	rlcf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4206  00EC84  6EDA               	movwf	fsr2h,c
  4207  00EC86  0E00               	movlw	low _posicionesUp
  4208  00EC88  26D9               	addwf	fsr2l,f,c
  4209  00EC8A  0E01               	movlw	high _posicionesUp
  4210  00EC8C  22DA               	addwfc	fsr2h,f,c
  4211  00EC8E  50DF               	movf	indf2,w,c
  4212  00EC90  EC0C  F060         	call	_Lcd_Out
  4213  00EC94  D000               	goto	l5364
  4214  00EC96                     l5364:
  4215                           
  4216                           ;main.c: 489: }
  4217                           ;main.c: 491: if (Sw_Down = PORTCbits.RC4 == 0) {
  4218  00EC96  B882               	btfsc	3970,4,c	;volatile
  4219  00EC98  D002               	goto	u6420
  4220  00EC9A  0E01               	movlw	1
  4221  00EC9C  D001               	goto	u6430
  4222  00EC9E                     u6420:
  4223  00EC9E  0E00               	movlw	0
  4224  00ECA0                     u6430:
  4225  00ECA0  0100               	movlb	0	; () banked
  4226  00ECA2  6F7E               	movwf	_Sw_Down& (0+255),b
  4227  00ECA4  0100               	movlb	0	; () banked
  4228  00ECA6  517E               	movf	_Sw_Down& (0+255),w,b
  4229  00ECA8  B4D8               	btfsc	status,2,c
  4230  00ECAA  D17C               	goto	l5464
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;main.c: 492: i = 0;
  4234  00ECAC  0E00               	movlw	0
  4235  00ECAE  0100               	movlb	0	; () banked
  4236  00ECB0  6F77               	movwf	(_i+1)& (0+255),b
  4237  00ECB2  0E00               	movlw	0
  4238  00ECB4  6F76               	movwf	_i& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;main.c: 493: if (posicion == 0) {
  4242  00ECB6  0100               	movlb	0	; () banked
  4243  00ECB8  51DC               	movf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4244  00ECBA  0100               	movlb	0	; () banked
  4245  00ECBC  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4246  00ECBE  A4D8               	btfss	status,2,c
  4247  00ECC0  D028               	goto	l5380
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;main.c: 494: if (i_hora_riego_tr > 0) {
  4251  00ECC2  0100               	movlb	0	; () banked
  4252  00ECC4  51D8               	movf	V_ProgRiegoIlum@i_hora_riego_tr& (0+255),w,b
  4253  00ECC6  0100               	movlb	0	; () banked
  4254  00ECC8  B4D8               	btfsc	status,2,c
  4255  00ECCA  D003               	goto	l5374
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;main.c: 495: i_hora_riego_tr--;
  4259  00ECCC  0100               	movlb	0	; () banked
  4260  00ECCE  07D8               	decf	V_ProgRiegoIlum@i_hora_riego_tr& (0+255),f,b
  4261  00ECD0  D000               	goto	l5374
  4262  00ECD2                     l5374:
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;main.c: 496: }
  4266                           ;main.c: 497: sprintf(buffer1, "%02u", i_hora_riego_tr);
  4267  00ECD2  0E87               	movlw	low _buffer1
  4268  00ECD4  6E43               	movwf	sprintf@sp,c
  4269  00ECD6  0E00               	movlw	high _buffer1
  4270  00ECD8  6E44               	movwf	sprintf@sp+1,c
  4271  00ECDA  0EB8               	movlw	low (STR_33+10)
  4272  00ECDC  6E45               	movwf	sprintf@f,c
  4273  00ECDE  0EFF               	movlw	high (STR_33+10)
  4274  00ECE0  6E46               	movwf	sprintf@f+1,c
  4275  00ECE2  C0D8  F047         	movff	V_ProgRiegoIlum@i_hora_riego_tr,?_sprintf+4
  4276  00ECE6  6A48               	clrf	?_sprintf+5,c
  4277  00ECE8  ECFF  F077         	call	_sprintf	;wreg free
  4278                           
  4279                           ;main.c: 498: Lcd_Out(2, 5, buffer1);
  4280  00ECEC  0E05               	movlw	5
  4281  00ECEE  6E57               	movwf	Lcd_Out@x,c
  4282  00ECF0  0E87               	movlw	low _buffer1
  4283  00ECF2  6E58               	movwf	Lcd_Out@buffer,c
  4284  00ECF4  0E00               	movlw	high _buffer1
  4285  00ECF6  6E59               	movwf	Lcd_Out@buffer+1,c
  4286  00ECF8  0E02               	movlw	2
  4287  00ECFA  EC0C  F060         	call	_Lcd_Out
  4288                           
  4289                           ;main.c: 499: Lcd_Out(2, 5, "");
  4290  00ECFE  0E05               	movlw	5
  4291  00ED00  6E57               	movwf	Lcd_Out@x,c
  4292  00ED02  0EB5               	movlw	low (STR_75+20)
  4293  00ED04  6E58               	movwf	Lcd_Out@buffer,c
  4294  00ED06  0EFE               	movlw	high (STR_75+20)
  4295  00ED08  6E59               	movwf	Lcd_Out@buffer+1,c
  4296  00ED0A  0E02               	movlw	2
  4297  00ED0C  EC0C  F060         	call	_Lcd_Out
  4298                           
  4299                           ;main.c: 500: } else if (posicion == 2) {
  4300  00ED10  D149               	goto	l5464
  4301  00ED12                     l5380:
  4302  00ED12  0E02               	movlw	2
  4303  00ED14  0100               	movlb	0	; () banked
  4304  00ED16  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4305  00ED18  0100               	movlb	0	; () banked
  4306  00ED1A  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4307  00ED1C  A4D8               	btfss	status,2,c
  4308  00ED1E  D028               	goto	l5392
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;main.c: 501: if (i_min_riego_tr > 0) {
  4312  00ED20  0100               	movlb	0	; () banked
  4313  00ED22  51D9               	movf	V_ProgRiegoIlum@i_min_riego_tr& (0+255),w,b
  4314  00ED24  0100               	movlb	0	; () banked
  4315  00ED26  B4D8               	btfsc	status,2,c
  4316  00ED28  D003               	goto	l5386
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;main.c: 502: i_min_riego_tr--;
  4320  00ED2A  0100               	movlb	0	; () banked
  4321  00ED2C  07D9               	decf	V_ProgRiegoIlum@i_min_riego_tr& (0+255),f,b
  4322  00ED2E  D000               	goto	l5386
  4323  00ED30                     l5386:
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;main.c: 503: }
  4327                           ;main.c: 504: sprintf(buffer1, "%02u", i_min_riego_tr);
  4328  00ED30  0E87               	movlw	low _buffer1
  4329  00ED32  6E43               	movwf	sprintf@sp,c
  4330  00ED34  0E00               	movlw	high _buffer1
  4331  00ED36  6E44               	movwf	sprintf@sp+1,c
  4332  00ED38  0EB8               	movlw	low (STR_33+10)
  4333  00ED3A  6E45               	movwf	sprintf@f,c
  4334  00ED3C  0EFF               	movlw	high (STR_33+10)
  4335  00ED3E  6E46               	movwf	sprintf@f+1,c
  4336  00ED40  C0D9  F047         	movff	V_ProgRiegoIlum@i_min_riego_tr,?_sprintf+4
  4337  00ED44  6A48               	clrf	?_sprintf+5,c
  4338  00ED46  ECFF  F077         	call	_sprintf	;wreg free
  4339                           
  4340                           ;main.c: 505: Lcd_Out(2, 8, buffer1);
  4341  00ED4A  0E08               	movlw	8
  4342  00ED4C  6E57               	movwf	Lcd_Out@x,c
  4343  00ED4E  0E87               	movlw	low _buffer1
  4344  00ED50  6E58               	movwf	Lcd_Out@buffer,c
  4345  00ED52  0E00               	movlw	high _buffer1
  4346  00ED54  6E59               	movwf	Lcd_Out@buffer+1,c
  4347  00ED56  0E02               	movlw	2
  4348  00ED58  EC0C  F060         	call	_Lcd_Out
  4349                           
  4350                           ;main.c: 506: Lcd_Out(2, 8, "");
  4351  00ED5C  0E08               	movlw	8
  4352  00ED5E  6E57               	movwf	Lcd_Out@x,c
  4353  00ED60  0EB5               	movlw	low (STR_75+20)
  4354  00ED62  6E58               	movwf	Lcd_Out@buffer,c
  4355  00ED64  0EFE               	movlw	high (STR_75+20)
  4356  00ED66  6E59               	movwf	Lcd_Out@buffer+1,c
  4357  00ED68  0E02               	movlw	2
  4358  00ED6A  EC0C  F060         	call	_Lcd_Out
  4359                           
  4360                           ;main.c: 507: } else if (posicion == 4) {
  4361  00ED6E  D11A               	goto	l5464
  4362  00ED70                     l5392:
  4363  00ED70  0E04               	movlw	4
  4364  00ED72  0100               	movlb	0	; () banked
  4365  00ED74  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4366  00ED76  0100               	movlb	0	; () banked
  4367  00ED78  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4368  00ED7A  A4D8               	btfss	status,2,c
  4369  00ED7C  D028               	goto	l5404
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;main.c: 508: if (d_hora_riego_tr > 0) {
  4373  00ED7E  0100               	movlb	0	; () banked
  4374  00ED80  51DA               	movf	V_ProgRiegoIlum@d_hora_riego_tr& (0+255),w,b
  4375  00ED82  0100               	movlb	0	; () banked
  4376  00ED84  B4D8               	btfsc	status,2,c
  4377  00ED86  D003               	goto	l5398
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;main.c: 509: d_hora_riego_tr--;
  4381  00ED88  0100               	movlb	0	; () banked
  4382  00ED8A  07DA               	decf	V_ProgRiegoIlum@d_hora_riego_tr& (0+255),f,b
  4383  00ED8C  D000               	goto	l5398
  4384  00ED8E                     l5398:
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;main.c: 510: }
  4388                           ;main.c: 511: sprintf(buffer1, "%02u", d_hora_riego_tr);
  4389  00ED8E  0E87               	movlw	low _buffer1
  4390  00ED90  6E43               	movwf	sprintf@sp,c
  4391  00ED92  0E00               	movlw	high _buffer1
  4392  00ED94  6E44               	movwf	sprintf@sp+1,c
  4393  00ED96  0EB8               	movlw	low (STR_33+10)
  4394  00ED98  6E45               	movwf	sprintf@f,c
  4395  00ED9A  0EFF               	movlw	high (STR_33+10)
  4396  00ED9C  6E46               	movwf	sprintf@f+1,c
  4397  00ED9E  C0DA  F047         	movff	V_ProgRiegoIlum@d_hora_riego_tr,?_sprintf+4
  4398  00EDA2  6A48               	clrf	?_sprintf+5,c
  4399  00EDA4  ECFF  F077         	call	_sprintf	;wreg free
  4400                           
  4401                           ;main.c: 512: Lcd_Out(2, 15, buffer1);
  4402  00EDA8  0E0F               	movlw	15
  4403  00EDAA  6E57               	movwf	Lcd_Out@x,c
  4404  00EDAC  0E87               	movlw	low _buffer1
  4405  00EDAE  6E58               	movwf	Lcd_Out@buffer,c
  4406  00EDB0  0E00               	movlw	high _buffer1
  4407  00EDB2  6E59               	movwf	Lcd_Out@buffer+1,c
  4408  00EDB4  0E02               	movlw	2
  4409  00EDB6  EC0C  F060         	call	_Lcd_Out
  4410                           
  4411                           ;main.c: 513: Lcd_Out(2, 15, "");
  4412  00EDBA  0E0F               	movlw	15
  4413  00EDBC  6E57               	movwf	Lcd_Out@x,c
  4414  00EDBE  0EB5               	movlw	low (STR_75+20)
  4415  00EDC0  6E58               	movwf	Lcd_Out@buffer,c
  4416  00EDC2  0EFE               	movlw	high (STR_75+20)
  4417  00EDC4  6E59               	movwf	Lcd_Out@buffer+1,c
  4418  00EDC6  0E02               	movlw	2
  4419  00EDC8  EC0C  F060         	call	_Lcd_Out
  4420                           
  4421                           ;main.c: 514: } else if (posicion == 6) {
  4422  00EDCC  D0EB               	goto	l5464
  4423  00EDCE                     l5404:
  4424  00EDCE  0E06               	movlw	6
  4425  00EDD0  0100               	movlb	0	; () banked
  4426  00EDD2  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4427  00EDD4  0100               	movlb	0	; () banked
  4428  00EDD6  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4429  00EDD8  A4D8               	btfss	status,2,c
  4430  00EDDA  D028               	goto	l5416
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;main.c: 515: if (d_min_riego_tr > 0) {
  4434  00EDDC  0100               	movlb	0	; () banked
  4435  00EDDE  51DB               	movf	V_ProgRiegoIlum@d_min_riego_tr& (0+255),w,b
  4436  00EDE0  0100               	movlb	0	; () banked
  4437  00EDE2  B4D8               	btfsc	status,2,c
  4438  00EDE4  D003               	goto	l5410
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;main.c: 516: d_min_riego_tr--;
  4442  00EDE6  0100               	movlb	0	; () banked
  4443  00EDE8  07DB               	decf	V_ProgRiegoIlum@d_min_riego_tr& (0+255),f,b
  4444  00EDEA  D000               	goto	l5410
  4445  00EDEC                     l5410:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;main.c: 517: }
  4449                           ;main.c: 518: sprintf(buffer1, "%02u", d_min_riego_tr);
  4450  00EDEC  0E87               	movlw	low _buffer1
  4451  00EDEE  6E43               	movwf	sprintf@sp,c
  4452  00EDF0  0E00               	movlw	high _buffer1
  4453  00EDF2  6E44               	movwf	sprintf@sp+1,c
  4454  00EDF4  0EB8               	movlw	low (STR_33+10)
  4455  00EDF6  6E45               	movwf	sprintf@f,c
  4456  00EDF8  0EFF               	movlw	high (STR_33+10)
  4457  00EDFA  6E46               	movwf	sprintf@f+1,c
  4458  00EDFC  C0DB  F047         	movff	V_ProgRiegoIlum@d_min_riego_tr,?_sprintf+4
  4459  00EE00  6A48               	clrf	?_sprintf+5,c
  4460  00EE02  ECFF  F077         	call	_sprintf	;wreg free
  4461                           
  4462                           ;main.c: 519: Lcd_Out(2, 18, buffer1);
  4463  00EE06  0E12               	movlw	18
  4464  00EE08  6E57               	movwf	Lcd_Out@x,c
  4465  00EE0A  0E87               	movlw	low _buffer1
  4466  00EE0C  6E58               	movwf	Lcd_Out@buffer,c
  4467  00EE0E  0E00               	movlw	high _buffer1
  4468  00EE10  6E59               	movwf	Lcd_Out@buffer+1,c
  4469  00EE12  0E02               	movlw	2
  4470  00EE14  EC0C  F060         	call	_Lcd_Out
  4471                           
  4472                           ;main.c: 520: Lcd_Out(2, 18, "");
  4473  00EE18  0E12               	movlw	18
  4474  00EE1A  6E57               	movwf	Lcd_Out@x,c
  4475  00EE1C  0EB5               	movlw	low (STR_75+20)
  4476  00EE1E  6E58               	movwf	Lcd_Out@buffer,c
  4477  00EE20  0EFE               	movlw	high (STR_75+20)
  4478  00EE22  6E59               	movwf	Lcd_Out@buffer+1,c
  4479  00EE24  0E02               	movlw	2
  4480  00EE26  EC0C  F060         	call	_Lcd_Out
  4481                           
  4482                           ;main.c: 521: } else if (posicion == 8) {
  4483  00EE2A  D0BC               	goto	l5464
  4484  00EE2C                     l5416:
  4485  00EE2C  0E08               	movlw	8
  4486  00EE2E  0100               	movlb	0	; () banked
  4487  00EE30  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4488  00EE32  0100               	movlb	0	; () banked
  4489  00EE34  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4490  00EE36  A4D8               	btfss	status,2,c
  4491  00EE38  D028               	goto	l5428
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;main.c: 522: if (i_hora_ilum_tr > 0) {
  4495  00EE3A  0100               	movlb	0	; () banked
  4496  00EE3C  51D4               	movf	V_ProgRiegoIlum@i_hora_ilum_tr& (0+255),w,b
  4497  00EE3E  0100               	movlb	0	; () banked
  4498  00EE40  B4D8               	btfsc	status,2,c
  4499  00EE42  D003               	goto	l5422
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;main.c: 523: i_hora_ilum_tr--;
  4503  00EE44  0100               	movlb	0	; () banked
  4504  00EE46  07D4               	decf	V_ProgRiegoIlum@i_hora_ilum_tr& (0+255),f,b
  4505  00EE48  D000               	goto	l5422
  4506  00EE4A                     l5422:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;main.c: 524: }
  4510                           ;main.c: 525: sprintf(buffer1, "%02u", i_hora_ilum_tr);
  4511  00EE4A  0E87               	movlw	low _buffer1
  4512  00EE4C  6E43               	movwf	sprintf@sp,c
  4513  00EE4E  0E00               	movlw	high _buffer1
  4514  00EE50  6E44               	movwf	sprintf@sp+1,c
  4515  00EE52  0EB8               	movlw	low (STR_33+10)
  4516  00EE54  6E45               	movwf	sprintf@f,c
  4517  00EE56  0EFF               	movlw	high (STR_33+10)
  4518  00EE58  6E46               	movwf	sprintf@f+1,c
  4519  00EE5A  C0D4  F047         	movff	V_ProgRiegoIlum@i_hora_ilum_tr,?_sprintf+4
  4520  00EE5E  6A48               	clrf	?_sprintf+5,c
  4521  00EE60  ECFF  F077         	call	_sprintf	;wreg free
  4522                           
  4523                           ;main.c: 526: Lcd_Out(4, 5, buffer1);
  4524  00EE64  0E05               	movlw	5
  4525  00EE66  6E57               	movwf	Lcd_Out@x,c
  4526  00EE68  0E87               	movlw	low _buffer1
  4527  00EE6A  6E58               	movwf	Lcd_Out@buffer,c
  4528  00EE6C  0E00               	movlw	high _buffer1
  4529  00EE6E  6E59               	movwf	Lcd_Out@buffer+1,c
  4530  00EE70  0E04               	movlw	4
  4531  00EE72  EC0C  F060         	call	_Lcd_Out
  4532                           
  4533                           ;main.c: 527: Lcd_Out(4, 5, "");
  4534  00EE76  0E05               	movlw	5
  4535  00EE78  6E57               	movwf	Lcd_Out@x,c
  4536  00EE7A  0EB5               	movlw	low (STR_75+20)
  4537  00EE7C  6E58               	movwf	Lcd_Out@buffer,c
  4538  00EE7E  0EFE               	movlw	high (STR_75+20)
  4539  00EE80  6E59               	movwf	Lcd_Out@buffer+1,c
  4540  00EE82  0E04               	movlw	4
  4541  00EE84  EC0C  F060         	call	_Lcd_Out
  4542                           
  4543                           ;main.c: 528: } else if (posicion == 10) {
  4544  00EE88  D08D               	goto	l5464
  4545  00EE8A                     l5428:
  4546  00EE8A  0E0A               	movlw	10
  4547  00EE8C  0100               	movlb	0	; () banked
  4548  00EE8E  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4549  00EE90  0100               	movlb	0	; () banked
  4550  00EE92  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4551  00EE94  A4D8               	btfss	status,2,c
  4552  00EE96  D028               	goto	l5440
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;main.c: 529: if (i_min_ilum_tr > 0) {
  4556  00EE98  0100               	movlb	0	; () banked
  4557  00EE9A  51D5               	movf	V_ProgRiegoIlum@i_min_ilum_tr& (0+255),w,b
  4558  00EE9C  0100               	movlb	0	; () banked
  4559  00EE9E  B4D8               	btfsc	status,2,c
  4560  00EEA0  D003               	goto	l5434
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;main.c: 530: i_min_ilum_tr--;
  4564  00EEA2  0100               	movlb	0	; () banked
  4565  00EEA4  07D5               	decf	V_ProgRiegoIlum@i_min_ilum_tr& (0+255),f,b
  4566  00EEA6  D000               	goto	l5434
  4567  00EEA8                     l5434:
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;main.c: 531: }
  4571                           ;main.c: 532: sprintf(buffer1, "%02u", i_min_ilum_tr);
  4572  00EEA8  0E87               	movlw	low _buffer1
  4573  00EEAA  6E43               	movwf	sprintf@sp,c
  4574  00EEAC  0E00               	movlw	high _buffer1
  4575  00EEAE  6E44               	movwf	sprintf@sp+1,c
  4576  00EEB0  0EB8               	movlw	low (STR_33+10)
  4577  00EEB2  6E45               	movwf	sprintf@f,c
  4578  00EEB4  0EFF               	movlw	high (STR_33+10)
  4579  00EEB6  6E46               	movwf	sprintf@f+1,c
  4580  00EEB8  C0D5  F047         	movff	V_ProgRiegoIlum@i_min_ilum_tr,?_sprintf+4
  4581  00EEBC  6A48               	clrf	?_sprintf+5,c
  4582  00EEBE  ECFF  F077         	call	_sprintf	;wreg free
  4583                           
  4584                           ;main.c: 533: Lcd_Out(4, 8, buffer1);
  4585  00EEC2  0E08               	movlw	8
  4586  00EEC4  6E57               	movwf	Lcd_Out@x,c
  4587  00EEC6  0E87               	movlw	low _buffer1
  4588  00EEC8  6E58               	movwf	Lcd_Out@buffer,c
  4589  00EECA  0E00               	movlw	high _buffer1
  4590  00EECC  6E59               	movwf	Lcd_Out@buffer+1,c
  4591  00EECE  0E04               	movlw	4
  4592  00EED0  EC0C  F060         	call	_Lcd_Out
  4593                           
  4594                           ;main.c: 534: Lcd_Out(4, 8, "");
  4595  00EED4  0E08               	movlw	8
  4596  00EED6  6E57               	movwf	Lcd_Out@x,c
  4597  00EED8  0EB5               	movlw	low (STR_75+20)
  4598  00EEDA  6E58               	movwf	Lcd_Out@buffer,c
  4599  00EEDC  0EFE               	movlw	high (STR_75+20)
  4600  00EEDE  6E59               	movwf	Lcd_Out@buffer+1,c
  4601  00EEE0  0E04               	movlw	4
  4602  00EEE2  EC0C  F060         	call	_Lcd_Out
  4603                           
  4604                           ;main.c: 535: } else if (posicion == 12) {
  4605  00EEE6  D05E               	goto	l5464
  4606  00EEE8                     l5440:
  4607  00EEE8  0E0C               	movlw	12
  4608  00EEEA  0100               	movlb	0	; () banked
  4609  00EEEC  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4610  00EEEE  0100               	movlb	0	; () banked
  4611  00EEF0  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4612  00EEF2  A4D8               	btfss	status,2,c
  4613  00EEF4  D028               	goto	l5452
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;main.c: 536: if (d_hora_ilum_tr > 0) {
  4617  00EEF6  0100               	movlb	0	; () banked
  4618  00EEF8  51D6               	movf	V_ProgRiegoIlum@d_hora_ilum_tr& (0+255),w,b
  4619  00EEFA  0100               	movlb	0	; () banked
  4620  00EEFC  B4D8               	btfsc	status,2,c
  4621  00EEFE  D003               	goto	l5446
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;main.c: 537: d_hora_ilum_tr--;
  4625  00EF00  0100               	movlb	0	; () banked
  4626  00EF02  07D6               	decf	V_ProgRiegoIlum@d_hora_ilum_tr& (0+255),f,b
  4627  00EF04  D000               	goto	l5446
  4628  00EF06                     l5446:
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;main.c: 538: }
  4632                           ;main.c: 539: sprintf(buffer1, "%02u", d_hora_ilum_tr);
  4633  00EF06  0E87               	movlw	low _buffer1
  4634  00EF08  6E43               	movwf	sprintf@sp,c
  4635  00EF0A  0E00               	movlw	high _buffer1
  4636  00EF0C  6E44               	movwf	sprintf@sp+1,c
  4637  00EF0E  0EB8               	movlw	low (STR_33+10)
  4638  00EF10  6E45               	movwf	sprintf@f,c
  4639  00EF12  0EFF               	movlw	high (STR_33+10)
  4640  00EF14  6E46               	movwf	sprintf@f+1,c
  4641  00EF16  C0D6  F047         	movff	V_ProgRiegoIlum@d_hora_ilum_tr,?_sprintf+4
  4642  00EF1A  6A48               	clrf	?_sprintf+5,c
  4643  00EF1C  ECFF  F077         	call	_sprintf	;wreg free
  4644                           
  4645                           ;main.c: 540: Lcd_Out(4, 15, buffer1);
  4646  00EF20  0E0F               	movlw	15
  4647  00EF22  6E57               	movwf	Lcd_Out@x,c
  4648  00EF24  0E87               	movlw	low _buffer1
  4649  00EF26  6E58               	movwf	Lcd_Out@buffer,c
  4650  00EF28  0E00               	movlw	high _buffer1
  4651  00EF2A  6E59               	movwf	Lcd_Out@buffer+1,c
  4652  00EF2C  0E04               	movlw	4
  4653  00EF2E  EC0C  F060         	call	_Lcd_Out
  4654                           
  4655                           ;main.c: 541: Lcd_Out(4, 15, "");
  4656  00EF32  0E0F               	movlw	15
  4657  00EF34  6E57               	movwf	Lcd_Out@x,c
  4658  00EF36  0EB5               	movlw	low (STR_75+20)
  4659  00EF38  6E58               	movwf	Lcd_Out@buffer,c
  4660  00EF3A  0EFE               	movlw	high (STR_75+20)
  4661  00EF3C  6E59               	movwf	Lcd_Out@buffer+1,c
  4662  00EF3E  0E04               	movlw	4
  4663  00EF40  EC0C  F060         	call	_Lcd_Out
  4664                           
  4665                           ;main.c: 542: } else if (posicion == 14) {
  4666  00EF44  D02F               	goto	l5464
  4667  00EF46                     l5452:
  4668  00EF46  0E0E               	movlw	14
  4669  00EF48  0100               	movlb	0	; () banked
  4670  00EF4A  19DC               	xorwf	V_ProgRiegoIlum@posicion& (0+255),w,b
  4671  00EF4C  0100               	movlb	0	; () banked
  4672  00EF4E  11DD               	iorwf	(V_ProgRiegoIlum@posicion+1)& (0+255),w,b
  4673  00EF50  A4D8               	btfss	status,2,c
  4674  00EF52  D028               	goto	l5464
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;main.c: 543: if (d_min_ilum_tr > 0) {
  4678  00EF54  0100               	movlb	0	; () banked
  4679  00EF56  51D7               	movf	V_ProgRiegoIlum@d_min_ilum_tr& (0+255),w,b
  4680  00EF58  0100               	movlb	0	; () banked
  4681  00EF5A  B4D8               	btfsc	status,2,c
  4682  00EF5C  D003               	goto	l5458
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;main.c: 544: d_min_ilum_tr--;
  4686  00EF5E  0100               	movlb	0	; () banked
  4687  00EF60  07D7               	decf	V_ProgRiegoIlum@d_min_ilum_tr& (0+255),f,b
  4688  00EF62  D000               	goto	l5458
  4689  00EF64                     l5458:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;main.c: 545: }
  4693                           ;main.c: 546: sprintf(buffer1, "%02u", d_min_ilum_tr);
  4694  00EF64  0E87               	movlw	low _buffer1
  4695  00EF66  6E43               	movwf	sprintf@sp,c
  4696  00EF68  0E00               	movlw	high _buffer1
  4697  00EF6A  6E44               	movwf	sprintf@sp+1,c
  4698  00EF6C  0EB8               	movlw	low (STR_33+10)
  4699  00EF6E  6E45               	movwf	sprintf@f,c
  4700  00EF70  0EFF               	movlw	high (STR_33+10)
  4701  00EF72  6E46               	movwf	sprintf@f+1,c
  4702  00EF74  C0D7  F047         	movff	V_ProgRiegoIlum@d_min_ilum_tr,?_sprintf+4
  4703  00EF78  6A48               	clrf	?_sprintf+5,c
  4704  00EF7A  ECFF  F077         	call	_sprintf	;wreg free
  4705                           
  4706                           ;main.c: 547: Lcd_Out(4, 18, buffer1);
  4707  00EF7E  0E12               	movlw	18
  4708  00EF80  6E57               	movwf	Lcd_Out@x,c
  4709  00EF82  0E87               	movlw	low _buffer1
  4710  00EF84  6E58               	movwf	Lcd_Out@buffer,c
  4711  00EF86  0E00               	movlw	high _buffer1
  4712  00EF88  6E59               	movwf	Lcd_Out@buffer+1,c
  4713  00EF8A  0E04               	movlw	4
  4714  00EF8C  EC0C  F060         	call	_Lcd_Out
  4715                           
  4716                           ;main.c: 548: Lcd_Out(4, 18, "");
  4717  00EF90  0E12               	movlw	18
  4718  00EF92  6E57               	movwf	Lcd_Out@x,c
  4719  00EF94  0EB5               	movlw	low (STR_75+20)
  4720  00EF96  6E58               	movwf	Lcd_Out@buffer,c
  4721  00EF98  0EFE               	movlw	high (STR_75+20)
  4722  00EF9A  6E59               	movwf	Lcd_Out@buffer+1,c
  4723  00EF9C  0E04               	movlw	4
  4724  00EF9E  EC0C  F060         	call	_Lcd_Out
  4725  00EFA2  D000               	goto	l5464
  4726  00EFA4                     l5464:
  4727                           
  4728                           ;main.c: 549: }
  4729                           ;main.c: 550: }
  4730                           ;main.c: 553: if (Sw_Center = PORTAbits.RA5 == 0) {
  4731  00EFA4  BA80               	btfsc	3968,5,c	;volatile
  4732  00EFA6  D002               	goto	u6610
  4733  00EFA8  0E01               	movlw	1
  4734  00EFAA  D001               	goto	u6620
  4735  00EFAC                     u6610:
  4736  00EFAC  0E00               	movlw	0
  4737  00EFAE                     u6620:
  4738  00EFAE  0100               	movlb	0	; () banked
  4739  00EFB0  6F7D               	movwf	_Sw_Center& (0+255),b
  4740  00EFB2  0100               	movlb	0	; () banked
  4741  00EFB4  517D               	movf	_Sw_Center& (0+255),w,b
  4742  00EFB6  B4D8               	btfsc	status,2,c
  4743  00EFB8  D013               	goto	l5470
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;main.c: 554: inicio_hora_ilum = i_hora_ilum_tr;
  4747  00EFBA  C0D4  F0EF         	movff	V_ProgRiegoIlum@i_hora_ilum_tr,_inicio_hora_ilum
  4748                           
  4749                           ;main.c: 555: inicio_min_ilum = i_min_ilum_tr;
  4750  00EFBE  C0D5  F0F1         	movff	V_ProgRiegoIlum@i_min_ilum_tr,_inicio_min_ilum
  4751                           
  4752                           ;main.c: 556: fin_hora_ilum = d_hora_ilum_tr;
  4753  00EFC2  C0D6  F082         	movff	V_ProgRiegoIlum@d_hora_ilum_tr,_fin_hora_ilum
  4754                           
  4755                           ;main.c: 557: fin_min_ilum = d_min_ilum_tr;
  4756  00EFC6  C0D7  F084         	movff	V_ProgRiegoIlum@d_min_ilum_tr,_fin_min_ilum
  4757                           
  4758                           ;main.c: 558: inicio_hora_riego = i_hora_riego_tr;
  4759  00EFCA  C0D8  F0F0         	movff	V_ProgRiegoIlum@i_hora_riego_tr,_inicio_hora_riego
  4760                           
  4761                           ;main.c: 559: inicio_min_riego = i_min_riego_tr;
  4762  00EFCE  C0D9  F0F2         	movff	V_ProgRiegoIlum@i_min_riego_tr,_inicio_min_riego
  4763                           
  4764                           ;main.c: 560: fin_hora_riego = d_hora_riego_tr;
  4765  00EFD2  C0DA  F083         	movff	V_ProgRiegoIlum@d_hora_riego_tr,_fin_hora_riego
  4766                           
  4767                           ;main.c: 561: fin_min_riego = d_min_riego_tr;
  4768  00EFD6  C0DB  F085         	movff	V_ProgRiegoIlum@d_min_riego_tr,_fin_min_riego
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;main.c: 562: Write_RTC();
  4772  00EFDA  EC5E  F068         	call	_Write_RTC	;wreg free
  4773                           
  4774                           ;main.c: 563: break;
  4775  00EFDE  D00B               	goto	l5474
  4776  00EFE0                     l5470:
  4777  00EFE0  0100               	movlb	0	; () banked
  4778  00EFE2  4B76               	infsnz	_i& (0+255),f,b
  4779  00EFE4  2B77               	incf	(_i+1)& (0+255),f,b
  4780                           
  4781                           ; BSR set to: 0
  4782  00EFE6  0100               	movlb	0	; () banked
  4783  00EFE8  BF77               	btfsc	(_i+1)& (0+255),7,b
  4784  00EFEA  D440               	goto	l5242
  4785  00EFEC  0100               	movlb	0	; () banked
  4786  00EFEE  5177               	movf	(_i+1)& (0+255),w,b
  4787  00EFF0  E102               	bnz	l5474
  4788  00EFF2  D435               	goto	L2
  4789  00EFF4  D000               	goto	l5474
  4790  00EFF6                     l5474:
  4791                           
  4792                           ;main.c: 564: }
  4793                           ;main.c: 565: }
  4794                           ;main.c: 566: Lcd_Cmd(12);
  4795  00EFF6  0E0C               	movlw	12
  4796  00EFF8  ECBD  F064         	call	_Lcd_Cmd
  4797  00EFFC  0012               	return		;funcret
  4798  00EFFE                     __end_of_V_ProgRiegoIlum:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           postinc0	equ	0xFEE
  4805                           wreg	equ	0xFE8
  4806                           postdec1	equ	0xFE5
  4807                           fsr1l	equ	0xFE1
  4808                           indf2	equ	0xFDF
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _V_ProgReloj *****************
  4814 ;; Defined at:
  4815 ;;		line 241 in file "../main.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  posicion        2   55[BANK0 ] int 
  4820 ;;  minuto_tr       1   54[BANK0 ] unsigned char 
  4821 ;;  hora_tr         1   53[BANK0 ] unsigned char 
  4822 ;;  anio_tr         1   52[BANK0 ] unsigned char 
  4823 ;;  mes_tr          1   51[BANK0 ] unsigned char 
  4824 ;;  dia_tr          1   50[BANK0 ] unsigned char 
  4825 ;;  diasem_tr       1   49[BANK0 ] unsigned char 
  4826 ;; Return value:  Size  Location     Type
  4827 ;;		None               void
  4828 ;; Registers used:
  4829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4830 ;; Tracked objects:
  4831 ;;		On entry : 0/0
  4832 ;;		On exit  : 0/0
  4833 ;;		Unchanged: 0/0
  4834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4836 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4838 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4839 ;;Total ram usage:       10 bytes
  4840 ;; Hardware stack levels used:    1
  4841 ;; Hardware stack levels required when called:    5
  4842 ;; This function calls:
  4843 ;;		_Convert_diasem
  4844 ;;		_Lcd_Cmd
  4845 ;;		_Lcd_Out
  4846 ;;		_Write_RTC
  4847 ;;		_sprintf
  4848 ;; This function is called by:
  4849 ;;		_main
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text10
  4854  00E0A2                     __ptext10:
  4855                           	opt stack 0
  4856  00E0A2                     _V_ProgReloj:
  4857                           	opt stack 25
  4858                           
  4859                           ;main.c: 243: Lcd_Out(1, 0, "Program del reloj");
  4860                           
  4861                           ;incstack = 0
  4862  00E0A2  0E00               	movlw	0
  4863  00E0A4  6E57               	movwf	Lcd_Out@x,c
  4864  00E0A6  0E9C               	movlw	low STR_6
  4865  00E0A8  6E58               	movwf	Lcd_Out@buffer,c
  4866  00E0AA  0EFF               	movlw	high STR_6
  4867  00E0AC  6E59               	movwf	Lcd_Out@buffer+1,c
  4868  00E0AE  0E01               	movlw	1
  4869  00E0B0  EC0C  F060         	call	_Lcd_Out
  4870                           
  4871                           ;main.c: 244: char diasem_tr = diasem;
  4872  00E0B4  C074  F0D4         	movff	_diasem,V_ProgReloj@diasem_tr
  4873                           
  4874                           ;main.c: 245: char dia_tr = dia;
  4875  00E0B8  C0E7  F0D5         	movff	_dia,V_ProgReloj@dia_tr
  4876                           
  4877                           ;main.c: 246: char mes_tr = mes;
  4878  00E0BC  C0EB  F0D6         	movff	_mes,V_ProgReloj@mes_tr
  4879                           
  4880                           ;main.c: 247: char anio_tr = anio;
  4881  00E0C0  C0E5  F0D7         	movff	_anio,V_ProgReloj@anio_tr
  4882                           
  4883                           ;main.c: 248: char hora_tr = hora;
  4884  00E0C4  C0E9  F0D8         	movff	_hora,V_ProgReloj@hora_tr
  4885                           
  4886                           ;main.c: 249: char minuto_tr = minuto;
  4887  00E0C8  C0ED  F0D9         	movff	_minuto,V_ProgReloj@minuto_tr
  4888                           
  4889                           ;main.c: 250: int posicion = 0;
  4890  00E0CC  0E00               	movlw	0
  4891  00E0CE  0100               	movlb	0	; () banked
  4892  00E0D0  6FDB               	movwf	(V_ProgReloj@posicion+1)& (0+255),b
  4893  00E0D2  0E00               	movlw	0
  4894  00E0D4  6FDA               	movwf	V_ProgReloj@posicion& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;main.c: 251: Lcd_Cmd(14);
  4898  00E0D6  0E0E               	movlw	14
  4899  00E0D8  ECBD  F064         	call	_Lcd_Cmd
  4900                           
  4901                           ;main.c: 252: Lcd_Out(2, 0, "");
  4902  00E0DC  0E00               	movlw	0
  4903  00E0DE  6E57               	movwf	Lcd_Out@x,c
  4904  00E0E0  0EB5               	movlw	low (STR_75+20)
  4905  00E0E2  6E58               	movwf	Lcd_Out@buffer,c
  4906  00E0E4  0EFE               	movlw	high (STR_75+20)
  4907  00E0E6  6E59               	movwf	Lcd_Out@buffer+1,c
  4908  00E0E8  0E02               	movlw	2
  4909  00E0EA  EC0C  F060         	call	_Lcd_Out
  4910                           
  4911                           ;main.c: 254: for (i = 0; i < 30; i++) {
  4912  00E0EE  0E00               	movlw	0
  4913  00E0F0  0100               	movlb	0	; () banked
  4914  00E0F2  6F77               	movwf	(_i+1)& (0+255),b
  4915  00E0F4  0E00               	movlw	0
  4916  00E0F6  6F76               	movwf	_i& (0+255),b
  4917                           
  4918                           ; BSR set to: 0
  4919  00E0F8  0100               	movlb	0	; () banked
  4920  00E0FA  BF77               	btfsc	(_i+1)& (0+255),7,b
  4921  00E0FC  D00A               	goto	l4960
  4922  00E0FE  0100               	movlb	0	; () banked
  4923  00E100  5177               	movf	(_i+1)& (0+255),w,b
  4924  00E102  E106               	bnz	u5580
  4925  00E104  0E1E               	movlw	30
  4926  00E106  0100               	movlb	0	; () banked
  4927  00E108  5D76               	subwf	_i& (0+255),w,b
  4928  00E10A  B0D8               	btfsc	status,0,c
  4929  00E10C  D302               	goto	l5140
  4930  00E10E  D001               	goto	l4960
  4931  00E110                     u5580:
  4932                           
  4933                           ; BSR set to: 0
  4934  00E110  D300               	goto	l5140
  4935  00E112                     l4960:
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;main.c: 255: _delay((unsigned long)((90)*(8000000/4000.0)));
  4939  00E112  0EEA               	movlw	234
  4940  00E114  6E5C               	movwf	??_V_ProgReloj& (0+255),c
  4941  00E116  0EC3               	movlw	195
  4942  00E118                     u6927:
  4943  00E118  2EE8               	decfsz	wreg,f,c
  4944  00E11A  D7FE               	goto	u6927
  4945  00E11C  2E5C               	decfsz	??_V_ProgReloj& (0+255),f,c
  4946  00E11E  D7FC               	goto	u6927
  4947  00E120  F000               	nop	
  4948                           
  4949                           ;main.c: 257: if (Sw_Up = PORTAbits.RA3 == 0) {
  4950  00E122  B680               	btfsc	3968,3,c	;volatile
  4951  00E124  D002               	goto	u5590
  4952  00E126  0E01               	movlw	1
  4953  00E128  D001               	goto	u5600
  4954  00E12A                     u5590:
  4955  00E12A  0E00               	movlw	0
  4956  00E12C                     u5600:
  4957  00E12C  0100               	movlb	0	; () banked
  4958  00E12E  6F81               	movwf	_Sw_Up& (0+255),b
  4959  00E130  0100               	movlb	0	; () banked
  4960  00E132  5181               	movf	_Sw_Up& (0+255),w,b
  4961  00E134  B4D8               	btfsc	status,2,c
  4962  00E136  D110               	goto	l5036
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;main.c: 258: i = 0;
  4966  00E138  0E00               	movlw	0
  4967  00E13A  0100               	movlb	0	; () banked
  4968  00E13C  6F77               	movwf	(_i+1)& (0+255),b
  4969  00E13E  0E00               	movlw	0
  4970  00E140  6F76               	movwf	_i& (0+255),b
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;main.c: 259: if (posicion == 0) {
  4974  00E142  0100               	movlb	0	; () banked
  4975  00E144  51DA               	movf	V_ProgReloj@posicion& (0+255),w,b
  4976  00E146  0100               	movlb	0	; () banked
  4977  00E148  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  4978  00E14A  A4D8               	btfss	status,2,c
  4979  00E14C  D01F               	goto	l4976
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;main.c: 260: if (diasem_tr < 6) {
  4983  00E14E  0E06               	movlw	6
  4984  00E150  0100               	movlb	0	; () banked
  4985  00E152  61D4               	cpfslt	V_ProgReloj@diasem_tr& (0+255),b
  4986  00E154  D003               	goto	l4972
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;main.c: 261: diasem_tr++;
  4990  00E156  0100               	movlb	0	; () banked
  4991  00E158  2BD4               	incf	V_ProgReloj@diasem_tr& (0+255),f,b
  4992  00E15A  D000               	goto	l4972
  4993  00E15C                     l4972:
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;main.c: 262: }
  4997                           ;main.c: 263: Lcd_Out(2, 0, Convert_diasem(diasem_tr));
  4998  00E15C  0E00               	movlw	0
  4999  00E15E  6E57               	movwf	Lcd_Out@x,c
  5000  00E160  C0D4  F053         	movff	V_ProgReloj@diasem_tr,Convert_diasem@dia
  5001  00E164  6A54               	clrf	Convert_diasem@dia+1,c
  5002  00E166  EC2E  F064         	call	_Convert_diasem	;wreg free
  5003  00E16A  C053  F058         	movff	?_Convert_diasem,Lcd_Out@buffer
  5004  00E16E  C054  F059         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  5005  00E172  0E02               	movlw	2
  5006  00E174  EC0C  F060         	call	_Lcd_Out
  5007                           
  5008                           ;main.c: 264: Lcd_Out(2, 0, "");
  5009  00E178  0E00               	movlw	0
  5010  00E17A  6E57               	movwf	Lcd_Out@x,c
  5011  00E17C  0EB5               	movlw	low (STR_75+20)
  5012  00E17E  6E58               	movwf	Lcd_Out@buffer,c
  5013  00E180  0EFE               	movlw	high (STR_75+20)
  5014  00E182  6E59               	movwf	Lcd_Out@buffer+1,c
  5015  00E184  0E02               	movlw	2
  5016  00E186  EC0C  F060         	call	_Lcd_Out
  5017                           
  5018                           ;main.c: 265: } else if (posicion == 2) {
  5019  00E18A  D0E6               	goto	l5036
  5020  00E18C                     l4976:
  5021  00E18C  0E02               	movlw	2
  5022  00E18E  0100               	movlb	0	; () banked
  5023  00E190  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5024  00E192  0100               	movlb	0	; () banked
  5025  00E194  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5026  00E196  A4D8               	btfss	status,2,c
  5027  00E198  D027               	goto	l4988
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;main.c: 266: if (dia_tr < 31) {
  5031  00E19A  0E1F               	movlw	31
  5032  00E19C  0100               	movlb	0	; () banked
  5033  00E19E  61D5               	cpfslt	V_ProgReloj@dia_tr& (0+255),b
  5034  00E1A0  D003               	goto	l4982
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;main.c: 267: dia_tr++;
  5038  00E1A2  0100               	movlb	0	; () banked
  5039  00E1A4  2BD5               	incf	V_ProgReloj@dia_tr& (0+255),f,b
  5040  00E1A6  D000               	goto	l4982
  5041  00E1A8                     l4982:
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;main.c: 268: }
  5045                           ;main.c: 269: sprintf(buffer1, "%02u", dia_tr);
  5046  00E1A8  0E87               	movlw	low _buffer1
  5047  00E1AA  6E43               	movwf	sprintf@sp,c
  5048  00E1AC  0E00               	movlw	high _buffer1
  5049  00E1AE  6E44               	movwf	sprintf@sp+1,c
  5050  00E1B0  0EB8               	movlw	low (STR_33+10)
  5051  00E1B2  6E45               	movwf	sprintf@f,c
  5052  00E1B4  0EFF               	movlw	high (STR_33+10)
  5053  00E1B6  6E46               	movwf	sprintf@f+1,c
  5054  00E1B8  C0D5  F047         	movff	V_ProgReloj@dia_tr,?_sprintf+4
  5055  00E1BC  6A48               	clrf	?_sprintf+5,c
  5056  00E1BE  ECFF  F077         	call	_sprintf	;wreg free
  5057                           
  5058                           ;main.c: 270: Lcd_Out(3, 0, buffer1);
  5059  00E1C2  0E00               	movlw	0
  5060  00E1C4  6E57               	movwf	Lcd_Out@x,c
  5061  00E1C6  0E87               	movlw	low _buffer1
  5062  00E1C8  6E58               	movwf	Lcd_Out@buffer,c
  5063  00E1CA  0E00               	movlw	high _buffer1
  5064  00E1CC  6E59               	movwf	Lcd_Out@buffer+1,c
  5065  00E1CE  0E03               	movlw	3
  5066  00E1D0  EC0C  F060         	call	_Lcd_Out
  5067                           
  5068                           ;main.c: 271: Lcd_Out(3, 0, "");
  5069  00E1D4  0E00               	movlw	0
  5070  00E1D6  6E57               	movwf	Lcd_Out@x,c
  5071  00E1D8  0EB5               	movlw	low (STR_75+20)
  5072  00E1DA  6E58               	movwf	Lcd_Out@buffer,c
  5073  00E1DC  0EFE               	movlw	high (STR_75+20)
  5074  00E1DE  6E59               	movwf	Lcd_Out@buffer+1,c
  5075  00E1E0  0E03               	movlw	3
  5076  00E1E2  EC0C  F060         	call	_Lcd_Out
  5077                           
  5078                           ;main.c: 272: } else if (posicion == 4) {
  5079  00E1E6  D0B8               	goto	l5036
  5080  00E1E8                     l4988:
  5081  00E1E8  0E04               	movlw	4
  5082  00E1EA  0100               	movlb	0	; () banked
  5083  00E1EC  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5084  00E1EE  0100               	movlb	0	; () banked
  5085  00E1F0  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5086  00E1F2  A4D8               	btfss	status,2,c
  5087  00E1F4  D027               	goto	l5000
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;main.c: 273: if (mes_tr < 12) {
  5091  00E1F6  0E0C               	movlw	12
  5092  00E1F8  0100               	movlb	0	; () banked
  5093  00E1FA  61D6               	cpfslt	V_ProgReloj@mes_tr& (0+255),b
  5094  00E1FC  D003               	goto	l4994
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;main.c: 274: mes_tr++;
  5098  00E1FE  0100               	movlb	0	; () banked
  5099  00E200  2BD6               	incf	V_ProgReloj@mes_tr& (0+255),f,b
  5100  00E202  D000               	goto	l4994
  5101  00E204                     l4994:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;main.c: 275: }
  5105                           ;main.c: 276: sprintf(buffer1, "%02u", mes_tr);
  5106  00E204  0E87               	movlw	low _buffer1
  5107  00E206  6E43               	movwf	sprintf@sp,c
  5108  00E208  0E00               	movlw	high _buffer1
  5109  00E20A  6E44               	movwf	sprintf@sp+1,c
  5110  00E20C  0EB8               	movlw	low (STR_33+10)
  5111  00E20E  6E45               	movwf	sprintf@f,c
  5112  00E210  0EFF               	movlw	high (STR_33+10)
  5113  00E212  6E46               	movwf	sprintf@f+1,c
  5114  00E214  C0D6  F047         	movff	V_ProgReloj@mes_tr,?_sprintf+4
  5115  00E218  6A48               	clrf	?_sprintf+5,c
  5116  00E21A  ECFF  F077         	call	_sprintf	;wreg free
  5117                           
  5118                           ;main.c: 277: Lcd_Out(3, 3, buffer1);
  5119  00E21E  0E03               	movlw	3
  5120  00E220  6E57               	movwf	Lcd_Out@x,c
  5121  00E222  0E87               	movlw	low _buffer1
  5122  00E224  6E58               	movwf	Lcd_Out@buffer,c
  5123  00E226  0E00               	movlw	high _buffer1
  5124  00E228  6E59               	movwf	Lcd_Out@buffer+1,c
  5125  00E22A  0E03               	movlw	3
  5126  00E22C  EC0C  F060         	call	_Lcd_Out
  5127                           
  5128                           ;main.c: 278: Lcd_Out(3, 3, "");
  5129  00E230  0E03               	movlw	3
  5130  00E232  6E57               	movwf	Lcd_Out@x,c
  5131  00E234  0EB5               	movlw	low (STR_75+20)
  5132  00E236  6E58               	movwf	Lcd_Out@buffer,c
  5133  00E238  0EFE               	movlw	high (STR_75+20)
  5134  00E23A  6E59               	movwf	Lcd_Out@buffer+1,c
  5135  00E23C  0E03               	movlw	3
  5136  00E23E  EC0C  F060         	call	_Lcd_Out
  5137                           
  5138                           ;main.c: 279: } else if (posicion == 6) {
  5139  00E242  D08A               	goto	l5036
  5140  00E244                     l5000:
  5141  00E244  0E06               	movlw	6
  5142  00E246  0100               	movlb	0	; () banked
  5143  00E248  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5144  00E24A  0100               	movlb	0	; () banked
  5145  00E24C  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5146  00E24E  A4D8               	btfss	status,2,c
  5147  00E250  D027               	goto	l5012
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;main.c: 280: if (anio_tr < 99) {
  5151  00E252  0E63               	movlw	99
  5152  00E254  0100               	movlb	0	; () banked
  5153  00E256  61D7               	cpfslt	V_ProgReloj@anio_tr& (0+255),b
  5154  00E258  D003               	goto	l5006
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;main.c: 281: anio_tr++;
  5158  00E25A  0100               	movlb	0	; () banked
  5159  00E25C  2BD7               	incf	V_ProgReloj@anio_tr& (0+255),f,b
  5160  00E25E  D000               	goto	l5006
  5161  00E260                     l5006:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;main.c: 282: }
  5165                           ;main.c: 283: sprintf(buffer1, "%02u", anio_tr);
  5166  00E260  0E87               	movlw	low _buffer1
  5167  00E262  6E43               	movwf	sprintf@sp,c
  5168  00E264  0E00               	movlw	high _buffer1
  5169  00E266  6E44               	movwf	sprintf@sp+1,c
  5170  00E268  0EB8               	movlw	low (STR_33+10)
  5171  00E26A  6E45               	movwf	sprintf@f,c
  5172  00E26C  0EFF               	movlw	high (STR_33+10)
  5173  00E26E  6E46               	movwf	sprintf@f+1,c
  5174  00E270  C0D7  F047         	movff	V_ProgReloj@anio_tr,?_sprintf+4
  5175  00E274  6A48               	clrf	?_sprintf+5,c
  5176  00E276  ECFF  F077         	call	_sprintf	;wreg free
  5177                           
  5178                           ;main.c: 284: Lcd_Out(3, 6, buffer1);
  5179  00E27A  0E06               	movlw	6
  5180  00E27C  6E57               	movwf	Lcd_Out@x,c
  5181  00E27E  0E87               	movlw	low _buffer1
  5182  00E280  6E58               	movwf	Lcd_Out@buffer,c
  5183  00E282  0E00               	movlw	high _buffer1
  5184  00E284  6E59               	movwf	Lcd_Out@buffer+1,c
  5185  00E286  0E03               	movlw	3
  5186  00E288  EC0C  F060         	call	_Lcd_Out
  5187                           
  5188                           ;main.c: 285: Lcd_Out(3, 6, "");
  5189  00E28C  0E06               	movlw	6
  5190  00E28E  6E57               	movwf	Lcd_Out@x,c
  5191  00E290  0EB5               	movlw	low (STR_75+20)
  5192  00E292  6E58               	movwf	Lcd_Out@buffer,c
  5193  00E294  0EFE               	movlw	high (STR_75+20)
  5194  00E296  6E59               	movwf	Lcd_Out@buffer+1,c
  5195  00E298  0E03               	movlw	3
  5196  00E29A  EC0C  F060         	call	_Lcd_Out
  5197                           
  5198                           ;main.c: 286: } else if (posicion == 8) {
  5199  00E29E  D05C               	goto	l5036
  5200  00E2A0                     l5012:
  5201  00E2A0  0E08               	movlw	8
  5202  00E2A2  0100               	movlb	0	; () banked
  5203  00E2A4  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5204  00E2A6  0100               	movlb	0	; () banked
  5205  00E2A8  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5206  00E2AA  A4D8               	btfss	status,2,c
  5207  00E2AC  D027               	goto	l5024
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;main.c: 287: if (hora_tr < 23) {
  5211  00E2AE  0E17               	movlw	23
  5212  00E2B0  0100               	movlb	0	; () banked
  5213  00E2B2  61D8               	cpfslt	V_ProgReloj@hora_tr& (0+255),b
  5214  00E2B4  D003               	goto	l5018
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;main.c: 288: hora_tr++;
  5218  00E2B6  0100               	movlb	0	; () banked
  5219  00E2B8  2BD8               	incf	V_ProgReloj@hora_tr& (0+255),f,b
  5220  00E2BA  D000               	goto	l5018
  5221  00E2BC                     l5018:
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;main.c: 289: }
  5225                           ;main.c: 290: sprintf(buffer1, "%02u", hora_tr);
  5226  00E2BC  0E87               	movlw	low _buffer1
  5227  00E2BE  6E43               	movwf	sprintf@sp,c
  5228  00E2C0  0E00               	movlw	high _buffer1
  5229  00E2C2  6E44               	movwf	sprintf@sp+1,c
  5230  00E2C4  0EB8               	movlw	low (STR_33+10)
  5231  00E2C6  6E45               	movwf	sprintf@f,c
  5232  00E2C8  0EFF               	movlw	high (STR_33+10)
  5233  00E2CA  6E46               	movwf	sprintf@f+1,c
  5234  00E2CC  C0D8  F047         	movff	V_ProgReloj@hora_tr,?_sprintf+4
  5235  00E2D0  6A48               	clrf	?_sprintf+5,c
  5236  00E2D2  ECFF  F077         	call	_sprintf	;wreg free
  5237                           
  5238                           ;main.c: 291: Lcd_Out(4, 0, buffer1);
  5239  00E2D6  0E00               	movlw	0
  5240  00E2D8  6E57               	movwf	Lcd_Out@x,c
  5241  00E2DA  0E87               	movlw	low _buffer1
  5242  00E2DC  6E58               	movwf	Lcd_Out@buffer,c
  5243  00E2DE  0E00               	movlw	high _buffer1
  5244  00E2E0  6E59               	movwf	Lcd_Out@buffer+1,c
  5245  00E2E2  0E04               	movlw	4
  5246  00E2E4  EC0C  F060         	call	_Lcd_Out
  5247                           
  5248                           ;main.c: 292: Lcd_Out(4, 0, "");
  5249  00E2E8  0E00               	movlw	0
  5250  00E2EA  6E57               	movwf	Lcd_Out@x,c
  5251  00E2EC  0EB5               	movlw	low (STR_75+20)
  5252  00E2EE  6E58               	movwf	Lcd_Out@buffer,c
  5253  00E2F0  0EFE               	movlw	high (STR_75+20)
  5254  00E2F2  6E59               	movwf	Lcd_Out@buffer+1,c
  5255  00E2F4  0E04               	movlw	4
  5256  00E2F6  EC0C  F060         	call	_Lcd_Out
  5257                           
  5258                           ;main.c: 293: } else if (posicion == 10) {
  5259  00E2FA  D02E               	goto	l5036
  5260  00E2FC                     l5024:
  5261  00E2FC  0E0A               	movlw	10
  5262  00E2FE  0100               	movlb	0	; () banked
  5263  00E300  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5264  00E302  0100               	movlb	0	; () banked
  5265  00E304  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5266  00E306  A4D8               	btfss	status,2,c
  5267  00E308  D027               	goto	l5036
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;main.c: 294: if (minuto_tr < 59) {
  5271  00E30A  0E3B               	movlw	59
  5272  00E30C  0100               	movlb	0	; () banked
  5273  00E30E  61D9               	cpfslt	V_ProgReloj@minuto_tr& (0+255),b
  5274  00E310  D003               	goto	l5030
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;main.c: 295: minuto_tr++;
  5278  00E312  0100               	movlb	0	; () banked
  5279  00E314  2BD9               	incf	V_ProgReloj@minuto_tr& (0+255),f,b
  5280  00E316  D000               	goto	l5030
  5281  00E318                     l5030:
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;main.c: 296: }
  5285                           ;main.c: 297: sprintf(buffer1, "%02u", minuto_tr);
  5286  00E318  0E87               	movlw	low _buffer1
  5287  00E31A  6E43               	movwf	sprintf@sp,c
  5288  00E31C  0E00               	movlw	high _buffer1
  5289  00E31E  6E44               	movwf	sprintf@sp+1,c
  5290  00E320  0EB8               	movlw	low (STR_33+10)
  5291  00E322  6E45               	movwf	sprintf@f,c
  5292  00E324  0EFF               	movlw	high (STR_33+10)
  5293  00E326  6E46               	movwf	sprintf@f+1,c
  5294  00E328  C0D9  F047         	movff	V_ProgReloj@minuto_tr,?_sprintf+4
  5295  00E32C  6A48               	clrf	?_sprintf+5,c
  5296  00E32E  ECFF  F077         	call	_sprintf	;wreg free
  5297                           
  5298                           ;main.c: 298: Lcd_Out(4, 3, buffer1);
  5299  00E332  0E03               	movlw	3
  5300  00E334  6E57               	movwf	Lcd_Out@x,c
  5301  00E336  0E87               	movlw	low _buffer1
  5302  00E338  6E58               	movwf	Lcd_Out@buffer,c
  5303  00E33A  0E00               	movlw	high _buffer1
  5304  00E33C  6E59               	movwf	Lcd_Out@buffer+1,c
  5305  00E33E  0E04               	movlw	4
  5306  00E340  EC0C  F060         	call	_Lcd_Out
  5307                           
  5308                           ;main.c: 299: Lcd_Out(4, 3, "");
  5309  00E344  0E03               	movlw	3
  5310  00E346  6E57               	movwf	Lcd_Out@x,c
  5311  00E348  0EB5               	movlw	low (STR_75+20)
  5312  00E34A  6E58               	movwf	Lcd_Out@buffer,c
  5313  00E34C  0EFE               	movlw	high (STR_75+20)
  5314  00E34E  6E59               	movwf	Lcd_Out@buffer+1,c
  5315  00E350  0E04               	movlw	4
  5316  00E352  EC0C  F060         	call	_Lcd_Out
  5317  00E356  D000               	goto	l5036
  5318  00E358                     l5036:
  5319                           
  5320                           ;main.c: 300: }
  5321                           ;main.c: 301: }
  5322                           ;main.c: 303: if (Sw_Right = PORTAbits.RA2 == 0) {
  5323  00E358  B480               	btfsc	3968,2,c	;volatile
  5324  00E35A  D002               	goto	u5740
  5325  00E35C  0E01               	movlw	1
  5326  00E35E  D001               	goto	u5750
  5327  00E360                     u5740:
  5328  00E360  0E00               	movlw	0
  5329  00E362                     u5750:
  5330  00E362  0100               	movlb	0	; () banked
  5331  00E364  6F80               	movwf	_Sw_Right& (0+255),b
  5332  00E366  0100               	movlb	0	; () banked
  5333  00E368  5180               	movf	_Sw_Right& (0+255),w,b
  5334  00E36A  B4D8               	btfsc	status,2,c
  5335  00E36C  D03C               	goto	l5046
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;main.c: 304: if (posicion <= 9) {
  5339  00E36E  0100               	movlb	0	; () banked
  5340  00E370  BFDB               	btfsc	(V_ProgReloj@posicion+1)& (0+255),7,b
  5341  00E372  D008               	goto	l5040
  5342  00E374  0100               	movlb	0	; () banked
  5343  00E376  51DB               	movf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5344  00E378  E10B               	bnz	l5042
  5345  00E37A  0E0A               	movlw	10
  5346  00E37C  0100               	movlb	0	; () banked
  5347  00E37E  5DDA               	subwf	V_ProgReloj@posicion& (0+255),w,b
  5348  00E380  B0D8               	btfsc	status,0,c
  5349  00E382  D006               	goto	l5042
  5350  00E384                     l5040:
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;main.c: 305: posicion += 2;
  5354  00E384  0E02               	movlw	2
  5355  00E386  0100               	movlb	0	; () banked
  5356  00E388  27DA               	addwf	V_ProgReloj@posicion& (0+255),f,b
  5357  00E38A  0E00               	movlw	0
  5358  00E38C  23DB               	addwfc	(V_ProgReloj@posicion+1)& (0+255),f,b
  5359  00E38E  D000               	goto	l5042
  5360  00E390                     l5042:
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;main.c: 306: }
  5364                           ;main.c: 307: i = 0;
  5365  00E390  0E00               	movlw	0
  5366  00E392  0100               	movlb	0	; () banked
  5367  00E394  6F77               	movwf	(_i+1)& (0+255),b
  5368  00E396  0E00               	movlw	0
  5369  00E398  6F76               	movwf	_i& (0+255),b
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;main.c: 308: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion + 1], "");
  5373  00E39A  C0DA  F05C         	movff	V_ProgReloj@posicion,??_V_ProgReloj
  5374  00E39E  C0DB  F05D         	movff	V_ProgReloj@posicion+1,??_V_ProgReloj+1
  5375  00E3A2  90D8               	bcf	status,0,c
  5376  00E3A4  365C               	rlcf	??_V_ProgReloj,f,c
  5377  00E3A6  365D               	rlcf	??_V_ProgReloj+1,f,c
  5378  00E3A8  0E02               	movlw	2
  5379  00E3AA  265C               	addwf	??_V_ProgReloj,f,c
  5380  00E3AC  0E00               	movlw	0
  5381  00E3AE  225D               	addwfc	??_V_ProgReloj+1,f,c
  5382  00E3B0  0E20               	movlw	low _posicionesLeft
  5383  00E3B2  245C               	addwf	??_V_ProgReloj,w,c
  5384  00E3B4  6ED9               	movwf	fsr2l,c
  5385  00E3B6  0E01               	movlw	high _posicionesLeft
  5386  00E3B8  205D               	addwfc	??_V_ProgReloj+1,w,c
  5387  00E3BA  6EDA               	movwf	fsr2h,c
  5388  00E3BC  50DF               	movf	indf2,w,c
  5389  00E3BE  6E57               	movwf	Lcd_Out@x,c
  5390  00E3C0  0EB5               	movlw	low (STR_75+20)
  5391  00E3C2  6E58               	movwf	Lcd_Out@buffer,c
  5392  00E3C4  0EFE               	movlw	high (STR_75+20)
  5393  00E3C6  6E59               	movwf	Lcd_Out@buffer+1,c
  5394  00E3C8  90D8               	bcf	status,0,c
  5395  00E3CA  0100               	movlb	0	; () banked
  5396  00E3CC  35DA               	rlcf	V_ProgReloj@posicion& (0+255),w,b
  5397  00E3CE  6ED9               	movwf	fsr2l,c
  5398  00E3D0  0100               	movlb	0	; () banked
  5399  00E3D2  35DB               	rlcf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5400  00E3D4  6EDA               	movwf	fsr2h,c
  5401  00E3D6  0E20               	movlw	low _posicionesLeft
  5402  00E3D8  26D9               	addwf	fsr2l,f,c
  5403  00E3DA  0E01               	movlw	high _posicionesLeft
  5404  00E3DC  22DA               	addwfc	fsr2h,f,c
  5405  00E3DE  50DF               	movf	indf2,w,c
  5406  00E3E0  EC0C  F060         	call	_Lcd_Out
  5407  00E3E4  D000               	goto	l5046
  5408  00E3E6                     l5046:
  5409                           
  5410                           ;main.c: 309: }
  5411                           ;main.c: 311: if (Sw_Left = PORTAbits.RA0 == 0) {
  5412  00E3E6  B080               	btfsc	3968,0,c	;volatile
  5413  00E3E8  D002               	goto	u5780
  5414  00E3EA  0E01               	movlw	1
  5415  00E3EC  D001               	goto	u5790
  5416  00E3EE                     u5780:
  5417  00E3EE  0E00               	movlw	0
  5418  00E3F0                     u5790:
  5419  00E3F0  0100               	movlb	0	; () banked
  5420  00E3F2  6F7F               	movwf	_Sw_Left& (0+255),b
  5421  00E3F4  0100               	movlb	0	; () banked
  5422  00E3F6  517F               	movf	_Sw_Left& (0+255),w,b
  5423  00E3F8  B4D8               	btfsc	status,2,c
  5424  00E3FA  D03C               	goto	l5056
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;main.c: 312: if (posicion >= 2) {
  5428  00E3FC  0100               	movlb	0	; () banked
  5429  00E3FE  BFDB               	btfsc	(V_ProgReloj@posicion+1)& (0+255),7,b
  5430  00E400  D00E               	goto	l5052
  5431  00E402  0100               	movlb	0	; () banked
  5432  00E404  51DB               	movf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5433  00E406  E105               	bnz	u5810
  5434  00E408  0E02               	movlw	2
  5435  00E40A  0100               	movlb	0	; () banked
  5436  00E40C  5DDA               	subwf	V_ProgReloj@posicion& (0+255),w,b
  5437  00E40E  A0D8               	btfss	status,0,c
  5438  00E410  D006               	goto	l5052
  5439  00E412                     u5810:
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;main.c: 313: posicion -= 2;
  5443  00E412  0100               	movlb	0	; () banked
  5444  00E414  0EFE               	movlw	254
  5445  00E416  27DA               	addwf	V_ProgReloj@posicion& (0+255),f,b
  5446  00E418  0EFF               	movlw	255
  5447  00E41A  23DB               	addwfc	(V_ProgReloj@posicion+1)& (0+255),f,b
  5448  00E41C  D000               	goto	l5052
  5449  00E41E                     l5052:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;main.c: 314: }
  5453                           ;main.c: 315: i = 0;
  5454  00E41E  0E00               	movlw	0
  5455  00E420  0100               	movlb	0	; () banked
  5456  00E422  6F77               	movwf	(_i+1)& (0+255),b
  5457  00E424  0E00               	movlw	0
  5458  00E426  6F76               	movwf	_i& (0+255),b
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;main.c: 316: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion + 1], "");
  5462  00E428  C0DA  F05C         	movff	V_ProgReloj@posicion,??_V_ProgReloj
  5463  00E42C  C0DB  F05D         	movff	V_ProgReloj@posicion+1,??_V_ProgReloj+1
  5464  00E430  90D8               	bcf	status,0,c
  5465  00E432  365C               	rlcf	??_V_ProgReloj,f,c
  5466  00E434  365D               	rlcf	??_V_ProgReloj+1,f,c
  5467  00E436  0E02               	movlw	2
  5468  00E438  265C               	addwf	??_V_ProgReloj,f,c
  5469  00E43A  0E00               	movlw	0
  5470  00E43C  225D               	addwfc	??_V_ProgReloj+1,f,c
  5471  00E43E  0E20               	movlw	low _posicionesLeft
  5472  00E440  245C               	addwf	??_V_ProgReloj,w,c
  5473  00E442  6ED9               	movwf	fsr2l,c
  5474  00E444  0E01               	movlw	high _posicionesLeft
  5475  00E446  205D               	addwfc	??_V_ProgReloj+1,w,c
  5476  00E448  6EDA               	movwf	fsr2h,c
  5477  00E44A  50DF               	movf	indf2,w,c
  5478  00E44C  6E57               	movwf	Lcd_Out@x,c
  5479  00E44E  0EB5               	movlw	low (STR_75+20)
  5480  00E450  6E58               	movwf	Lcd_Out@buffer,c
  5481  00E452  0EFE               	movlw	high (STR_75+20)
  5482  00E454  6E59               	movwf	Lcd_Out@buffer+1,c
  5483  00E456  90D8               	bcf	status,0,c
  5484  00E458  0100               	movlb	0	; () banked
  5485  00E45A  35DA               	rlcf	V_ProgReloj@posicion& (0+255),w,b
  5486  00E45C  6ED9               	movwf	fsr2l,c
  5487  00E45E  0100               	movlb	0	; () banked
  5488  00E460  35DB               	rlcf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5489  00E462  6EDA               	movwf	fsr2h,c
  5490  00E464  0E20               	movlw	low _posicionesLeft
  5491  00E466  26D9               	addwf	fsr2l,f,c
  5492  00E468  0E01               	movlw	high _posicionesLeft
  5493  00E46A  22DA               	addwfc	fsr2h,f,c
  5494  00E46C  50DF               	movf	indf2,w,c
  5495  00E46E  EC0C  F060         	call	_Lcd_Out
  5496  00E472  D000               	goto	l5056
  5497  00E474                     l5056:
  5498                           
  5499                           ;main.c: 317: }
  5500                           ;main.c: 319: if (Sw_Down = PORTCbits.RC4 == 0) {
  5501  00E474  B882               	btfsc	3970,4,c	;volatile
  5502  00E476  D002               	goto	u5820
  5503  00E478  0E01               	movlw	1
  5504  00E47A  D001               	goto	u5830
  5505  00E47C                     u5820:
  5506  00E47C  0E00               	movlw	0
  5507  00E47E                     u5830:
  5508  00E47E  0100               	movlb	0	; () banked
  5509  00E480  6F7E               	movwf	_Sw_Down& (0+255),b
  5510  00E482  0100               	movlb	0	; () banked
  5511  00E484  517E               	movf	_Sw_Down& (0+255),w,b
  5512  00E486  B4D8               	btfsc	status,2,c
  5513  00E488  D113               	goto	l5130
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;main.c: 320: i = 0;
  5517  00E48A  0E00               	movlw	0
  5518  00E48C  0100               	movlb	0	; () banked
  5519  00E48E  6F77               	movwf	(_i+1)& (0+255),b
  5520  00E490  0E00               	movlw	0
  5521  00E492  6F76               	movwf	_i& (0+255),b
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;main.c: 321: if (posicion == 0) {
  5525  00E494  0100               	movlb	0	; () banked
  5526  00E496  51DA               	movf	V_ProgReloj@posicion& (0+255),w,b
  5527  00E498  0100               	movlb	0	; () banked
  5528  00E49A  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5529  00E49C  A4D8               	btfss	status,2,c
  5530  00E49E  D020               	goto	l5070
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;main.c: 322: if (diasem_tr > 0) {
  5534  00E4A0  0100               	movlb	0	; () banked
  5535  00E4A2  51D4               	movf	V_ProgReloj@diasem_tr& (0+255),w,b
  5536  00E4A4  0100               	movlb	0	; () banked
  5537  00E4A6  B4D8               	btfsc	status,2,c
  5538  00E4A8  D003               	goto	l5066
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;main.c: 323: diasem_tr--;
  5542  00E4AA  0100               	movlb	0	; () banked
  5543  00E4AC  07D4               	decf	V_ProgReloj@diasem_tr& (0+255),f,b
  5544  00E4AE  D000               	goto	l5066
  5545  00E4B0                     l5066:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;main.c: 324: }
  5549                           ;main.c: 325: Lcd_Out(2, 0, Convert_diasem(diasem_tr));
  5550  00E4B0  0E00               	movlw	0
  5551  00E4B2  6E57               	movwf	Lcd_Out@x,c
  5552  00E4B4  C0D4  F053         	movff	V_ProgReloj@diasem_tr,Convert_diasem@dia
  5553  00E4B8  6A54               	clrf	Convert_diasem@dia+1,c
  5554  00E4BA  EC2E  F064         	call	_Convert_diasem	;wreg free
  5555  00E4BE  C053  F058         	movff	?_Convert_diasem,Lcd_Out@buffer
  5556  00E4C2  C054  F059         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  5557  00E4C6  0E02               	movlw	2
  5558  00E4C8  EC0C  F060         	call	_Lcd_Out
  5559                           
  5560                           ;main.c: 326: Lcd_Out(2, 0, "");
  5561  00E4CC  0E00               	movlw	0
  5562  00E4CE  6E57               	movwf	Lcd_Out@x,c
  5563  00E4D0  0EB5               	movlw	low (STR_75+20)
  5564  00E4D2  6E58               	movwf	Lcd_Out@buffer,c
  5565  00E4D4  0EFE               	movlw	high (STR_75+20)
  5566  00E4D6  6E59               	movwf	Lcd_Out@buffer+1,c
  5567  00E4D8  0E02               	movlw	2
  5568  00E4DA  EC0C  F060         	call	_Lcd_Out
  5569                           
  5570                           ;main.c: 327: } else if (posicion == 2) {
  5571  00E4DE  D0E8               	goto	l5130
  5572  00E4E0                     l5070:
  5573  00E4E0  0E02               	movlw	2
  5574  00E4E2  0100               	movlb	0	; () banked
  5575  00E4E4  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5576  00E4E6  0100               	movlb	0	; () banked
  5577  00E4E8  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5578  00E4EA  A4D8               	btfss	status,2,c
  5579  00E4EC  D027               	goto	l5082
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;main.c: 328: if (dia_tr > 1) {
  5583  00E4EE  0E01               	movlw	1
  5584  00E4F0  0100               	movlb	0	; () banked
  5585  00E4F2  65D5               	cpfsgt	V_ProgReloj@dia_tr& (0+255),b
  5586  00E4F4  D003               	goto	l5076
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;main.c: 329: dia_tr--;
  5590  00E4F6  0100               	movlb	0	; () banked
  5591  00E4F8  07D5               	decf	V_ProgReloj@dia_tr& (0+255),f,b
  5592  00E4FA  D000               	goto	l5076
  5593  00E4FC                     l5076:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;main.c: 330: }
  5597                           ;main.c: 331: sprintf(buffer1, "%02u", dia_tr);
  5598  00E4FC  0E87               	movlw	low _buffer1
  5599  00E4FE  6E43               	movwf	sprintf@sp,c
  5600  00E500  0E00               	movlw	high _buffer1
  5601  00E502  6E44               	movwf	sprintf@sp+1,c
  5602  00E504  0EB8               	movlw	low (STR_33+10)
  5603  00E506  6E45               	movwf	sprintf@f,c
  5604  00E508  0EFF               	movlw	high (STR_33+10)
  5605  00E50A  6E46               	movwf	sprintf@f+1,c
  5606  00E50C  C0D5  F047         	movff	V_ProgReloj@dia_tr,?_sprintf+4
  5607  00E510  6A48               	clrf	?_sprintf+5,c
  5608  00E512  ECFF  F077         	call	_sprintf	;wreg free
  5609                           
  5610                           ;main.c: 332: Lcd_Out(3, 0, buffer1);
  5611  00E516  0E00               	movlw	0
  5612  00E518  6E57               	movwf	Lcd_Out@x,c
  5613  00E51A  0E87               	movlw	low _buffer1
  5614  00E51C  6E58               	movwf	Lcd_Out@buffer,c
  5615  00E51E  0E00               	movlw	high _buffer1
  5616  00E520  6E59               	movwf	Lcd_Out@buffer+1,c
  5617  00E522  0E03               	movlw	3
  5618  00E524  EC0C  F060         	call	_Lcd_Out
  5619                           
  5620                           ;main.c: 333: Lcd_Out(3, 0, "");
  5621  00E528  0E00               	movlw	0
  5622  00E52A  6E57               	movwf	Lcd_Out@x,c
  5623  00E52C  0EB5               	movlw	low (STR_75+20)
  5624  00E52E  6E58               	movwf	Lcd_Out@buffer,c
  5625  00E530  0EFE               	movlw	high (STR_75+20)
  5626  00E532  6E59               	movwf	Lcd_Out@buffer+1,c
  5627  00E534  0E03               	movlw	3
  5628  00E536  EC0C  F060         	call	_Lcd_Out
  5629                           
  5630                           ;main.c: 334: } else if (posicion == 4) {
  5631  00E53A  D0BA               	goto	l5130
  5632  00E53C                     l5082:
  5633  00E53C  0E04               	movlw	4
  5634  00E53E  0100               	movlb	0	; () banked
  5635  00E540  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5636  00E542  0100               	movlb	0	; () banked
  5637  00E544  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5638  00E546  A4D8               	btfss	status,2,c
  5639  00E548  D027               	goto	l5094
  5640                           
  5641                           ; BSR set to: 0
  5642                           ;main.c: 335: if (mes_tr > 1) {
  5643  00E54A  0E01               	movlw	1
  5644  00E54C  0100               	movlb	0	; () banked
  5645  00E54E  65D6               	cpfsgt	V_ProgReloj@mes_tr& (0+255),b
  5646  00E550  D003               	goto	l5088
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;main.c: 336: mes_tr--;
  5650  00E552  0100               	movlb	0	; () banked
  5651  00E554  07D6               	decf	V_ProgReloj@mes_tr& (0+255),f,b
  5652  00E556  D000               	goto	l5088
  5653  00E558                     l5088:
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;main.c: 337: }
  5657                           ;main.c: 338: sprintf(buffer1, "%02u", mes_tr);
  5658  00E558  0E87               	movlw	low _buffer1
  5659  00E55A  6E43               	movwf	sprintf@sp,c
  5660  00E55C  0E00               	movlw	high _buffer1
  5661  00E55E  6E44               	movwf	sprintf@sp+1,c
  5662  00E560  0EB8               	movlw	low (STR_33+10)
  5663  00E562  6E45               	movwf	sprintf@f,c
  5664  00E564  0EFF               	movlw	high (STR_33+10)
  5665  00E566  6E46               	movwf	sprintf@f+1,c
  5666  00E568  C0D6  F047         	movff	V_ProgReloj@mes_tr,?_sprintf+4
  5667  00E56C  6A48               	clrf	?_sprintf+5,c
  5668  00E56E  ECFF  F077         	call	_sprintf	;wreg free
  5669                           
  5670                           ;main.c: 339: Lcd_Out(3, 3, buffer1);
  5671  00E572  0E03               	movlw	3
  5672  00E574  6E57               	movwf	Lcd_Out@x,c
  5673  00E576  0E87               	movlw	low _buffer1
  5674  00E578  6E58               	movwf	Lcd_Out@buffer,c
  5675  00E57A  0E00               	movlw	high _buffer1
  5676  00E57C  6E59               	movwf	Lcd_Out@buffer+1,c
  5677  00E57E  0E03               	movlw	3
  5678  00E580  EC0C  F060         	call	_Lcd_Out
  5679                           
  5680                           ;main.c: 340: Lcd_Out(3, 3, "");
  5681  00E584  0E03               	movlw	3
  5682  00E586  6E57               	movwf	Lcd_Out@x,c
  5683  00E588  0EB5               	movlw	low (STR_75+20)
  5684  00E58A  6E58               	movwf	Lcd_Out@buffer,c
  5685  00E58C  0EFE               	movlw	high (STR_75+20)
  5686  00E58E  6E59               	movwf	Lcd_Out@buffer+1,c
  5687  00E590  0E03               	movlw	3
  5688  00E592  EC0C  F060         	call	_Lcd_Out
  5689                           
  5690                           ;main.c: 341: } else if (posicion == 6) {
  5691  00E596  D08C               	goto	l5130
  5692  00E598                     l5094:
  5693  00E598  0E06               	movlw	6
  5694  00E59A  0100               	movlb	0	; () banked
  5695  00E59C  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5696  00E59E  0100               	movlb	0	; () banked
  5697  00E5A0  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5698  00E5A2  A4D8               	btfss	status,2,c
  5699  00E5A4  D027               	goto	l5106
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;main.c: 342: if (anio_tr > 20) {
  5703  00E5A6  0E14               	movlw	20
  5704  00E5A8  0100               	movlb	0	; () banked
  5705  00E5AA  65D7               	cpfsgt	V_ProgReloj@anio_tr& (0+255),b
  5706  00E5AC  D003               	goto	l5100
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;main.c: 343: anio_tr--;
  5710  00E5AE  0100               	movlb	0	; () banked
  5711  00E5B0  07D7               	decf	V_ProgReloj@anio_tr& (0+255),f,b
  5712  00E5B2  D000               	goto	l5100
  5713  00E5B4                     l5100:
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;main.c: 344: }
  5717                           ;main.c: 345: sprintf(buffer1, "%02u", anio_tr);
  5718  00E5B4  0E87               	movlw	low _buffer1
  5719  00E5B6  6E43               	movwf	sprintf@sp,c
  5720  00E5B8  0E00               	movlw	high _buffer1
  5721  00E5BA  6E44               	movwf	sprintf@sp+1,c
  5722  00E5BC  0EB8               	movlw	low (STR_33+10)
  5723  00E5BE  6E45               	movwf	sprintf@f,c
  5724  00E5C0  0EFF               	movlw	high (STR_33+10)
  5725  00E5C2  6E46               	movwf	sprintf@f+1,c
  5726  00E5C4  C0D7  F047         	movff	V_ProgReloj@anio_tr,?_sprintf+4
  5727  00E5C8  6A48               	clrf	?_sprintf+5,c
  5728  00E5CA  ECFF  F077         	call	_sprintf	;wreg free
  5729                           
  5730                           ;main.c: 346: Lcd_Out(3, 6, buffer1);
  5731  00E5CE  0E06               	movlw	6
  5732  00E5D0  6E57               	movwf	Lcd_Out@x,c
  5733  00E5D2  0E87               	movlw	low _buffer1
  5734  00E5D4  6E58               	movwf	Lcd_Out@buffer,c
  5735  00E5D6  0E00               	movlw	high _buffer1
  5736  00E5D8  6E59               	movwf	Lcd_Out@buffer+1,c
  5737  00E5DA  0E03               	movlw	3
  5738  00E5DC  EC0C  F060         	call	_Lcd_Out
  5739                           
  5740                           ;main.c: 347: Lcd_Out(3, 6, "");
  5741  00E5E0  0E06               	movlw	6
  5742  00E5E2  6E57               	movwf	Lcd_Out@x,c
  5743  00E5E4  0EB5               	movlw	low (STR_75+20)
  5744  00E5E6  6E58               	movwf	Lcd_Out@buffer,c
  5745  00E5E8  0EFE               	movlw	high (STR_75+20)
  5746  00E5EA  6E59               	movwf	Lcd_Out@buffer+1,c
  5747  00E5EC  0E03               	movlw	3
  5748  00E5EE  EC0C  F060         	call	_Lcd_Out
  5749                           
  5750                           ;main.c: 348: } else if (posicion == 8) {
  5751  00E5F2  D05E               	goto	l5130
  5752  00E5F4                     l5106:
  5753  00E5F4  0E08               	movlw	8
  5754  00E5F6  0100               	movlb	0	; () banked
  5755  00E5F8  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5756  00E5FA  0100               	movlb	0	; () banked
  5757  00E5FC  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5758  00E5FE  A4D8               	btfss	status,2,c
  5759  00E600  D028               	goto	l5118
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;main.c: 349: if (hora_tr > 0) {
  5763  00E602  0100               	movlb	0	; () banked
  5764  00E604  51D8               	movf	V_ProgReloj@hora_tr& (0+255),w,b
  5765  00E606  0100               	movlb	0	; () banked
  5766  00E608  B4D8               	btfsc	status,2,c
  5767  00E60A  D003               	goto	l5112
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;main.c: 350: hora_tr--;
  5771  00E60C  0100               	movlb	0	; () banked
  5772  00E60E  07D8               	decf	V_ProgReloj@hora_tr& (0+255),f,b
  5773  00E610  D000               	goto	l5112
  5774  00E612                     l5112:
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;main.c: 351: }
  5778                           ;main.c: 352: sprintf(buffer1, "%02u", hora_tr);
  5779  00E612  0E87               	movlw	low _buffer1
  5780  00E614  6E43               	movwf	sprintf@sp,c
  5781  00E616  0E00               	movlw	high _buffer1
  5782  00E618  6E44               	movwf	sprintf@sp+1,c
  5783  00E61A  0EB8               	movlw	low (STR_33+10)
  5784  00E61C  6E45               	movwf	sprintf@f,c
  5785  00E61E  0EFF               	movlw	high (STR_33+10)
  5786  00E620  6E46               	movwf	sprintf@f+1,c
  5787  00E622  C0D8  F047         	movff	V_ProgReloj@hora_tr,?_sprintf+4
  5788  00E626  6A48               	clrf	?_sprintf+5,c
  5789  00E628  ECFF  F077         	call	_sprintf	;wreg free
  5790                           
  5791                           ;main.c: 353: Lcd_Out(4, 0, buffer1);
  5792  00E62C  0E00               	movlw	0
  5793  00E62E  6E57               	movwf	Lcd_Out@x,c
  5794  00E630  0E87               	movlw	low _buffer1
  5795  00E632  6E58               	movwf	Lcd_Out@buffer,c
  5796  00E634  0E00               	movlw	high _buffer1
  5797  00E636  6E59               	movwf	Lcd_Out@buffer+1,c
  5798  00E638  0E04               	movlw	4
  5799  00E63A  EC0C  F060         	call	_Lcd_Out
  5800                           
  5801                           ;main.c: 354: Lcd_Out(4, 0, "");
  5802  00E63E  0E00               	movlw	0
  5803  00E640  6E57               	movwf	Lcd_Out@x,c
  5804  00E642  0EB5               	movlw	low (STR_75+20)
  5805  00E644  6E58               	movwf	Lcd_Out@buffer,c
  5806  00E646  0EFE               	movlw	high (STR_75+20)
  5807  00E648  6E59               	movwf	Lcd_Out@buffer+1,c
  5808  00E64A  0E04               	movlw	4
  5809  00E64C  EC0C  F060         	call	_Lcd_Out
  5810                           
  5811                           ;main.c: 355: } else if (posicion == 10) {
  5812  00E650  D02F               	goto	l5130
  5813  00E652                     l5118:
  5814  00E652  0E0A               	movlw	10
  5815  00E654  0100               	movlb	0	; () banked
  5816  00E656  19DA               	xorwf	V_ProgReloj@posicion& (0+255),w,b
  5817  00E658  0100               	movlb	0	; () banked
  5818  00E65A  11DB               	iorwf	(V_ProgReloj@posicion+1)& (0+255),w,b
  5819  00E65C  A4D8               	btfss	status,2,c
  5820  00E65E  D028               	goto	l5130
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;main.c: 356: if (minuto_tr > 0) {
  5824  00E660  0100               	movlb	0	; () banked
  5825  00E662  51D9               	movf	V_ProgReloj@minuto_tr& (0+255),w,b
  5826  00E664  0100               	movlb	0	; () banked
  5827  00E666  B4D8               	btfsc	status,2,c
  5828  00E668  D003               	goto	l5124
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;main.c: 357: minuto_tr--;
  5832  00E66A  0100               	movlb	0	; () banked
  5833  00E66C  07D9               	decf	V_ProgReloj@minuto_tr& (0+255),f,b
  5834  00E66E  D000               	goto	l5124
  5835  00E670                     l5124:
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;main.c: 358: }
  5839                           ;main.c: 359: sprintf(buffer1, "%02u", minuto_tr);
  5840  00E670  0E87               	movlw	low _buffer1
  5841  00E672  6E43               	movwf	sprintf@sp,c
  5842  00E674  0E00               	movlw	high _buffer1
  5843  00E676  6E44               	movwf	sprintf@sp+1,c
  5844  00E678  0EB8               	movlw	low (STR_33+10)
  5845  00E67A  6E45               	movwf	sprintf@f,c
  5846  00E67C  0EFF               	movlw	high (STR_33+10)
  5847  00E67E  6E46               	movwf	sprintf@f+1,c
  5848  00E680  C0D9  F047         	movff	V_ProgReloj@minuto_tr,?_sprintf+4
  5849  00E684  6A48               	clrf	?_sprintf+5,c
  5850  00E686  ECFF  F077         	call	_sprintf	;wreg free
  5851                           
  5852                           ;main.c: 360: Lcd_Out(4, 3, buffer1);
  5853  00E68A  0E03               	movlw	3
  5854  00E68C  6E57               	movwf	Lcd_Out@x,c
  5855  00E68E  0E87               	movlw	low _buffer1
  5856  00E690  6E58               	movwf	Lcd_Out@buffer,c
  5857  00E692  0E00               	movlw	high _buffer1
  5858  00E694  6E59               	movwf	Lcd_Out@buffer+1,c
  5859  00E696  0E04               	movlw	4
  5860  00E698  EC0C  F060         	call	_Lcd_Out
  5861                           
  5862                           ;main.c: 361: Lcd_Out(4, 3, "");
  5863  00E69C  0E03               	movlw	3
  5864  00E69E  6E57               	movwf	Lcd_Out@x,c
  5865  00E6A0  0EB5               	movlw	low (STR_75+20)
  5866  00E6A2  6E58               	movwf	Lcd_Out@buffer,c
  5867  00E6A4  0EFE               	movlw	high (STR_75+20)
  5868  00E6A6  6E59               	movwf	Lcd_Out@buffer+1,c
  5869  00E6A8  0E04               	movlw	4
  5870  00E6AA  EC0C  F060         	call	_Lcd_Out
  5871  00E6AE  D000               	goto	l5130
  5872  00E6B0                     l5130:
  5873                           
  5874                           ;main.c: 362: }
  5875                           ;main.c: 363: }
  5876                           ;main.c: 365: if (Sw_Center = PORTAbits.RA5 == 0) {
  5877  00E6B0  BA80               	btfsc	3968,5,c	;volatile
  5878  00E6B2  D002               	goto	u5970
  5879  00E6B4  0E01               	movlw	1
  5880  00E6B6  D001               	goto	u5980
  5881  00E6B8                     u5970:
  5882  00E6B8  0E00               	movlw	0
  5883  00E6BA                     u5980:
  5884  00E6BA  0100               	movlb	0	; () banked
  5885  00E6BC  6F7D               	movwf	_Sw_Center& (0+255),b
  5886  00E6BE  0100               	movlb	0	; () banked
  5887  00E6C0  517D               	movf	_Sw_Center& (0+255),w,b
  5888  00E6C2  B4D8               	btfsc	status,2,c
  5889  00E6C4  D01B               	goto	l5136
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;main.c: 366: diasem = diasem_tr;
  5893  00E6C6  C0D4  F074         	movff	V_ProgReloj@diasem_tr,_diasem
  5894  00E6CA  0100               	movlb	0	; () banked
  5895  00E6CC  6B75               	clrf	(_diasem+1)& (0+255),b
  5896                           
  5897                           ;main.c: 367: dia = dia_tr;
  5898  00E6CE  C0D5  F0E7         	movff	V_ProgReloj@dia_tr,_dia
  5899  00E6D2  0100               	movlb	0	; () banked
  5900  00E6D4  6BE8               	clrf	(_dia+1)& (0+255),b
  5901                           
  5902                           ;main.c: 368: mes = mes_tr;
  5903  00E6D6  C0D6  F0EB         	movff	V_ProgReloj@mes_tr,_mes
  5904  00E6DA  0100               	movlb	0	; () banked
  5905  00E6DC  6BEC               	clrf	(_mes+1)& (0+255),b
  5906                           
  5907                           ;main.c: 369: anio = anio_tr;
  5908  00E6DE  C0D7  F0E5         	movff	V_ProgReloj@anio_tr,_anio
  5909  00E6E2  0100               	movlb	0	; () banked
  5910  00E6E4  6BE6               	clrf	(_anio+1)& (0+255),b
  5911                           
  5912                           ;main.c: 370: hora = hora_tr;
  5913  00E6E6  C0D8  F0E9         	movff	V_ProgReloj@hora_tr,_hora
  5914  00E6EA  0100               	movlb	0	; () banked
  5915  00E6EC  6BEA               	clrf	(_hora+1)& (0+255),b
  5916                           
  5917                           ;main.c: 371: minuto = minuto_tr;
  5918  00E6EE  C0D9  F0ED         	movff	V_ProgReloj@minuto_tr,_minuto
  5919  00E6F2  0100               	movlb	0	; () banked
  5920  00E6F4  6BEE               	clrf	(_minuto+1)& (0+255),b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;main.c: 372: Write_RTC();
  5924  00E6F6  EC5E  F068         	call	_Write_RTC	;wreg free
  5925                           
  5926                           ;main.c: 374: break;
  5927  00E6FA  D00B               	goto	l5140
  5928  00E6FC                     l5136:
  5929  00E6FC  0100               	movlb	0	; () banked
  5930  00E6FE  4B76               	infsnz	_i& (0+255),f,b
  5931  00E700  2B77               	incf	(_i+1)& (0+255),f,b
  5932                           
  5933                           ; BSR set to: 0
  5934  00E702  0100               	movlb	0	; () banked
  5935  00E704  BF77               	btfsc	(_i+1)& (0+255),7,b
  5936  00E706  D505               	goto	l4960
  5937  00E708  0100               	movlb	0	; () banked
  5938  00E70A  5177               	movf	(_i+1)& (0+255),w,b
  5939  00E70C  E102               	bnz	l5140
  5940  00E70E  D4FA               	goto	L3
  5941  00E710  D000               	goto	l5140
  5942  00E712                     l5140:
  5943                           
  5944                           ;main.c: 375: }
  5945                           ;main.c: 376: }
  5946                           ;main.c: 378: Lcd_Cmd(12);
  5947  00E712  0E0C               	movlw	12
  5948  00E714  ECBD  F064         	call	_Lcd_Cmd
  5949  00E718  0012               	return		;funcret
  5950  00E71A                     __end_of_V_ProgReloj:
  5951                           	opt stack 0
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           postinc0	equ	0xFEE
  5957                           wreg	equ	0xFE8
  5958                           postdec1	equ	0xFE5
  5959                           fsr1l	equ	0xFE1
  5960                           indf2	equ	0xFDF
  5961                           fsr2h	equ	0xFDA
  5962                           fsr2l	equ	0xFD9
  5963                           status	equ	0xFD8
  5964                           
  5965 ;; *************** function _Write_RTC *****************
  5966 ;; Defined at:
  5967 ;;		line 624 in file "../main.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;		None
  5970 ;; Auto vars:     Size  Location     Type
  5971 ;;		None
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : 0/0
  5978 ;;		On exit  : 0/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5985 ;;Total ram usage:        0 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:    2
  5988 ;; This function calls:
  5989 ;;		_RtccWrOn
  5990 ;;		_RtccWriteDate
  5991 ;;		_RtccWriteTime
  5992 ;;		___awdiv
  5993 ;; This function is called by:
  5994 ;;		_main
  5995 ;;		_V_ProgReloj
  5996 ;;		_V_ProgRiegoIlum
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           	psect	text11
  6001  00D0BC                     __ptext11:
  6002                           	opt stack 0
  6003  00D0BC                     _Write_RTC:
  6004                           	opt stack 28
  6005                           
  6006                           ;main.c: 625: RtccWrOn();
  6007                           
  6008                           ;incstack = 0
  6009  00D0BC  EC28  F05D         	call	_RtccWrOn	;wreg free
  6010                           
  6011                           ;main.c: 627: PIE3bits.RTCCIE = 1;
  6012  00D0C0  80A3               	bsf	4003,0,c	;volatile
  6013                           
  6014                           ;main.c: 628: segundo_d = segundo / 10;
  6015  00D0C2  C078  F007         	movff	_segundo,___awdiv@dividend
  6016  00D0C6  C079  F008         	movff	_segundo+1,___awdiv@dividend+1
  6017  00D0CA  0E00               	movlw	0
  6018  00D0CC  6E0A               	movwf	___awdiv@divisor+1,c
  6019  00D0CE  0E0A               	movlw	10
  6020  00D0D0  6E09               	movwf	___awdiv@divisor,c
  6021  00D0D2  ECA1  F060         	call	___awdiv	;wreg free
  6022  00D0D6  5007               	movf	?___awdiv,w,c
  6023  00D0D8  0100               	movlb	0	; () banked
  6024  00D0DA  6FFE               	movwf	_segundo_d& (0+255),b
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;main.c: 629: segundo_u = segundo - segundo_d * 10;
  6028  00D0DC  0100               	movlb	0	; () banked
  6029  00D0DE  51FE               	movf	_segundo_d& (0+255),w,b
  6030  00D0E0  0D0A               	mullw	10
  6031  00D0E2  50F3               	movf	prodl,w,c
  6032  00D0E4  0800               	sublw	0
  6033  00D0E6  0100               	movlb	0	; () banked
  6034  00D0E8  2578               	addwf	_segundo& (0+255),w,b
  6035  00D0EA  0100               	movlb	0	; () banked
  6036  00D0EC  6FFF               	movwf	_segundo_u& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;main.c: 630: RtccTime.f.sec = segundo_d * 16 + segundo_u;
  6040  00D0EE  0100               	movlb	0	; () banked
  6041  00D0F0  51FE               	movf	_segundo_d& (0+255),w,b
  6042  00D0F2  0D10               	mullw	16
  6043  00D0F4  50F3               	movf	prodl,w,c
  6044  00D0F6  0100               	movlb	0	; () banked
  6045  00D0F8  25FF               	addwf	_segundo_u& (0+255),w,b
  6046  00D0FA  0100               	movlb	0	; () banked
  6047  00D0FC  6FA0               	movwf	(_RtccTime+1)& (0+255),b
  6048                           
  6049                           ; BSR set to: 0
  6050                           ;main.c: 631: minuto_d = minuto / 10;
  6051  00D0FE  C0ED  F007         	movff	_minuto,___awdiv@dividend
  6052  00D102  C0EE  F008         	movff	_minuto+1,___awdiv@dividend+1
  6053  00D106  0E00               	movlw	0
  6054  00D108  6E0A               	movwf	___awdiv@divisor+1,c
  6055  00D10A  0E0A               	movlw	10
  6056  00D10C  6E09               	movwf	___awdiv@divisor,c
  6057  00D10E  ECA1  F060         	call	___awdiv	;wreg free
  6058  00D112  5007               	movf	?___awdiv,w,c
  6059  00D114  0100               	movlb	0	; () banked
  6060  00D116  6FFC               	movwf	_minuto_d& (0+255),b
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;main.c: 632: minuto_u = minuto - minuto_d * 10;
  6064  00D118  0100               	movlb	0	; () banked
  6065  00D11A  51FC               	movf	_minuto_d& (0+255),w,b
  6066  00D11C  0D0A               	mullw	10
  6067  00D11E  50F3               	movf	prodl,w,c
  6068  00D120  0800               	sublw	0
  6069  00D122  0100               	movlb	0	; () banked
  6070  00D124  25ED               	addwf	_minuto& (0+255),w,b
  6071  00D126  0100               	movlb	0	; () banked
  6072  00D128  6FFD               	movwf	_minuto_u& (0+255),b
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;main.c: 633: RtccTime.f.min = minuto_d * 16 + minuto_u;
  6076  00D12A  0100               	movlb	0	; () banked
  6077  00D12C  51FC               	movf	_minuto_d& (0+255),w,b
  6078  00D12E  0D10               	mullw	16
  6079  00D130  50F3               	movf	prodl,w,c
  6080  00D132  0100               	movlb	0	; () banked
  6081  00D134  25FD               	addwf	_minuto_u& (0+255),w,b
  6082  00D136  0100               	movlb	0	; () banked
  6083  00D138  6FA1               	movwf	(_RtccTime+2)& (0+255),b
  6084                           
  6085                           ; BSR set to: 0
  6086                           ;main.c: 634: hora_d = hora / 10;
  6087  00D13A  C0E9  F007         	movff	_hora,___awdiv@dividend
  6088  00D13E  C0EA  F008         	movff	_hora+1,___awdiv@dividend+1
  6089  00D142  0E00               	movlw	0
  6090  00D144  6E0A               	movwf	___awdiv@divisor+1,c
  6091  00D146  0E0A               	movlw	10
  6092  00D148  6E09               	movwf	___awdiv@divisor,c
  6093  00D14A  ECA1  F060         	call	___awdiv	;wreg free
  6094  00D14E  5007               	movf	?___awdiv,w,c
  6095  00D150  0100               	movlb	0	; () banked
  6096  00D152  6FF8               	movwf	_hora_d& (0+255),b
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;main.c: 635: hora_u = hora - hora_d * 10;
  6100  00D154  0100               	movlb	0	; () banked
  6101  00D156  51F8               	movf	_hora_d& (0+255),w,b
  6102  00D158  0D0A               	mullw	10
  6103  00D15A  50F3               	movf	prodl,w,c
  6104  00D15C  0800               	sublw	0
  6105  00D15E  0100               	movlb	0	; () banked
  6106  00D160  25E9               	addwf	_hora& (0+255),w,b
  6107  00D162  0100               	movlb	0	; () banked
  6108  00D164  6FF9               	movwf	_hora_u& (0+255),b
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;main.c: 636: RtccTime.f.hour = hora_d * 16 + hora_u;
  6112  00D166  0100               	movlb	0	; () banked
  6113  00D168  51F8               	movf	_hora_d& (0+255),w,b
  6114  00D16A  0D10               	mullw	16
  6115  00D16C  50F3               	movf	prodl,w,c
  6116  00D16E  0100               	movlb	0	; () banked
  6117  00D170  25F9               	addwf	_hora_u& (0+255),w,b
  6118  00D172  0100               	movlb	0	; () banked
  6119  00D174  6FA2               	movwf	(_RtccTime+3)& (0+255),b
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;main.c: 637: anio_d = anio / 10;
  6123  00D176  C0E5  F007         	movff	_anio,___awdiv@dividend
  6124  00D17A  C0E6  F008         	movff	_anio+1,___awdiv@dividend+1
  6125  00D17E  0E00               	movlw	0
  6126  00D180  6E0A               	movwf	___awdiv@divisor+1,c
  6127  00D182  0E0A               	movlw	10
  6128  00D184  6E09               	movwf	___awdiv@divisor,c
  6129  00D186  ECA1  F060         	call	___awdiv	;wreg free
  6130  00D18A  5007               	movf	?___awdiv,w,c
  6131  00D18C  0100               	movlb	0	; () banked
  6132  00D18E  6FF3               	movwf	_anio_d& (0+255),b
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;main.c: 638: anio_u = anio - anio_d * 10;
  6136  00D190  0100               	movlb	0	; () banked
  6137  00D192  51F3               	movf	_anio_d& (0+255),w,b
  6138  00D194  0D0A               	mullw	10
  6139  00D196  50F3               	movf	prodl,w,c
  6140  00D198  0800               	sublw	0
  6141  00D19A  0100               	movlb	0	; () banked
  6142  00D19C  25E5               	addwf	_anio& (0+255),w,b
  6143  00D19E  0100               	movlb	0	; () banked
  6144  00D1A0  6FF4               	movwf	_anio_u& (0+255),b
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;main.c: 639: RtccDate.f.year = anio_d * 16 + anio_u;
  6148  00D1A2  0100               	movlb	0	; () banked
  6149  00D1A4  51F3               	movf	_anio_d& (0+255),w,b
  6150  00D1A6  0D10               	mullw	16
  6151  00D1A8  50F3               	movf	prodl,w,c
  6152  00D1AA  0100               	movlb	0	; () banked
  6153  00D1AC  25F4               	addwf	_anio_u& (0+255),w,b
  6154  00D1AE  0100               	movlb	0	; () banked
  6155  00D1B0  6F9E               	movwf	(_RtccDate+3)& (0+255),b
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;main.c: 640: mes_d = mes / 10;
  6159  00D1B2  C0EB  F007         	movff	_mes,___awdiv@dividend
  6160  00D1B6  C0EC  F008         	movff	_mes+1,___awdiv@dividend+1
  6161  00D1BA  0E00               	movlw	0
  6162  00D1BC  6E0A               	movwf	___awdiv@divisor+1,c
  6163  00D1BE  0E0A               	movlw	10
  6164  00D1C0  6E09               	movwf	___awdiv@divisor,c
  6165  00D1C2  ECA1  F060         	call	___awdiv	;wreg free
  6166  00D1C6  5007               	movf	?___awdiv,w,c
  6167  00D1C8  0100               	movlb	0	; () banked
  6168  00D1CA  6FFA               	movwf	_mes_d& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;main.c: 641: mes_u = mes - mes_d * 10;
  6172  00D1CC  0100               	movlb	0	; () banked
  6173  00D1CE  51FA               	movf	_mes_d& (0+255),w,b
  6174  00D1D0  0D0A               	mullw	10
  6175  00D1D2  50F3               	movf	prodl,w,c
  6176  00D1D4  0800               	sublw	0
  6177  00D1D6  0100               	movlb	0	; () banked
  6178  00D1D8  25EB               	addwf	_mes& (0+255),w,b
  6179  00D1DA  0100               	movlb	0	; () banked
  6180  00D1DC  6FFB               	movwf	_mes_u& (0+255),b
  6181                           
  6182                           ; BSR set to: 0
  6183                           ;main.c: 642: RtccDate.f.mon = mes_d * 16 + mes_u;
  6184  00D1DE  0100               	movlb	0	; () banked
  6185  00D1E0  51FA               	movf	_mes_d& (0+255),w,b
  6186  00D1E2  0D10               	mullw	16
  6187  00D1E4  50F3               	movf	prodl,w,c
  6188  00D1E6  0100               	movlb	0	; () banked
  6189  00D1E8  25FB               	addwf	_mes_u& (0+255),w,b
  6190  00D1EA  0100               	movlb	0	; () banked
  6191  00D1EC  6F9D               	movwf	(_RtccDate+2)& (0+255),b
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;main.c: 643: fecha_d = dia / 10;
  6195  00D1EE  C0E7  F007         	movff	_dia,___awdiv@dividend
  6196  00D1F2  C0E8  F008         	movff	_dia+1,___awdiv@dividend+1
  6197  00D1F6  0E00               	movlw	0
  6198  00D1F8  6E0A               	movwf	___awdiv@divisor+1,c
  6199  00D1FA  0E0A               	movlw	10
  6200  00D1FC  6E09               	movwf	___awdiv@divisor,c
  6201  00D1FE  ECA1  F060         	call	___awdiv	;wreg free
  6202  00D202  5007               	movf	?___awdiv,w,c
  6203  00D204  0100               	movlb	0	; () banked
  6204  00D206  6FF6               	movwf	_fecha_d& (0+255),b
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;main.c: 644: fecha_u = dia - fecha_d * 10;
  6208  00D208  0100               	movlb	0	; () banked
  6209  00D20A  51F6               	movf	_fecha_d& (0+255),w,b
  6210  00D20C  0D0A               	mullw	10
  6211  00D20E  50F3               	movf	prodl,w,c
  6212  00D210  0800               	sublw	0
  6213  00D212  0100               	movlb	0	; () banked
  6214  00D214  25E7               	addwf	_dia& (0+255),w,b
  6215  00D216  0100               	movlb	0	; () banked
  6216  00D218  6FF7               	movwf	_fecha_u& (0+255),b
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;main.c: 645: RtccDate.f.mday = fecha_d * 16 + fecha_u;
  6220  00D21A  0100               	movlb	0	; () banked
  6221  00D21C  51F6               	movf	_fecha_d& (0+255),w,b
  6222  00D21E  0D10               	mullw	16
  6223  00D220  50F3               	movf	prodl,w,c
  6224  00D222  0100               	movlb	0	; () banked
  6225  00D224  25F7               	addwf	_fecha_u& (0+255),w,b
  6226  00D226  0100               	movlb	0	; () banked
  6227  00D228  6F9C               	movwf	(_RtccDate+1)& (0+255),b
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;main.c: 646: dia_semana = diasem;
  6231  00D22A  C074  F0F5         	movff	_diasem,_dia_semana
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;main.c: 647: RtccDate.f.wday = diasem;
  6235  00D22E  C074  F09B         	movff	_diasem,_RtccDate
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;main.c: 649: RtccWriteTime(&RtccTime, 1);
  6239  00D232  0E9F               	movlw	low _RtccTime
  6240  00D234  6E01               	movwf	RtccWriteTime@pTm,c
  6241  00D236  0E00               	movlw	high _RtccTime
  6242  00D238  6E02               	movwf	RtccWriteTime@pTm+1,c
  6243  00D23A  0E01               	movlw	1
  6244  00D23C  6E03               	movwf	RtccWriteTime@di,c
  6245  00D23E  EC1B  F063         	call	_RtccWriteTime	;wreg free
  6246                           
  6247                           ;main.c: 650: RtccWriteDate(&RtccDate, 1);
  6248  00D242  0E9B               	movlw	low _RtccDate
  6249  00D244  6E01               	movwf	RtccWriteDate@pDt,c
  6250  00D246  0E00               	movlw	high _RtccDate
  6251  00D248  6E02               	movwf	RtccWriteDate@pDt+1,c
  6252  00D24A  0E01               	movlw	1
  6253  00D24C  6E03               	movwf	RtccWriteDate@di,c
  6254  00D24E  ECBB  F067         	call	_RtccWriteDate	;wreg free
  6255                           
  6256                           ;main.c: 651: (RTCCFGbits.RTCEN=1);
  6257  00D252  010F               	movlb	15	; () banked
  6258  00D254  8F3F               	bsf	63,7,b	;volatile
  6259                           
  6260                           ; BSR set to: 15
  6261  00D256  0012               	return		;funcret
  6262  00D258                     __end_of_Write_RTC:
  6263                           	opt stack 0
  6264                           tblptru	equ	0xFF8
  6265                           tblptrh	equ	0xFF7
  6266                           tblptrl	equ	0xFF6
  6267                           tablat	equ	0xFF5
  6268                           prodl	equ	0xFF3
  6269                           postinc0	equ	0xFEE
  6270                           wreg	equ	0xFE8
  6271                           postdec1	equ	0xFE5
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278 ;; *************** function _RtccWriteTime *****************
  6279 ;; Defined at:
  6280 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  pTm             2    0[COMRAM] PTR const struct .
  6283 ;;		 -> RtccTime(4), 
  6284 ;;  di              1    2[COMRAM] enum E7121
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;  tempHourWDay    2    9[COMRAM] struct .
  6287 ;;  tempMinSec      2    7[COMRAM] struct .
  6288 ;;  wasWrEn         1    6[COMRAM] enum E7121
  6289 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6290 ;;  wasOn           1    4[COMRAM] enum E7121
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      enum E7337
  6293 ;; Registers used:
  6294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6300 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6301 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6302 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6303 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6304 ;;Total ram usage:       11 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    1
  6307 ;; This function calls:
  6308 ;;		_RtccWrOn
  6309 ;; This function is called by:
  6310 ;;		_Write_RTC
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text12
  6315  00C636                     __ptext12:
  6316                           	opt stack 0
  6317  00C636                     _RtccWriteTime:
  6318                           	opt stack 28
  6319                           
  6320                           ; BSR set to: 15
  6321                           ;incstack = 0
  6322  00C636  0E00               	movlw	0
  6323  00C638  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6324  00C63A  EE20 F002          	lfsr	2,2
  6325  00C63E  5001               	movf	RtccWriteTime@pTm,w,c
  6326  00C640  26D9               	addwf	fsr2l,f,c
  6327  00C642  5002               	movf	RtccWriteTime@pTm+1,w,c
  6328  00C644  22DA               	addwfc	fsr2h,f,c
  6329  00C646  0E5A               	movlw	90
  6330  00C648  60DF               	cpfslt	indf2,c
  6331  00C64A  0012               	return	
  6332  00C64C  EE20 F001          	lfsr	2,1
  6333  00C650  5001               	movf	RtccWriteTime@pTm,w,c
  6334  00C652  26D9               	addwf	fsr2l,f,c
  6335  00C654  5002               	movf	RtccWriteTime@pTm+1,w,c
  6336  00C656  22DA               	addwfc	fsr2h,f,c
  6337  00C658  0E5A               	movlw	90
  6338  00C65A  60DF               	cpfslt	indf2,c
  6339  00C65C  0012               	return	
  6340  00C65E  EE20 F003          	lfsr	2,3
  6341  00C662  5001               	movf	RtccWriteTime@pTm,w,c
  6342  00C664  26D9               	addwf	fsr2l,f,c
  6343  00C666  5002               	movf	RtccWriteTime@pTm+1,w,c
  6344  00C668  22DA               	addwfc	fsr2h,f,c
  6345  00C66A  0E24               	movlw	36
  6346  00C66C  64DF               	cpfsgt	indf2,c
  6347  00C66E  D002               	goto	l4424
  6348  00C670  0012               	return	
  6349                           
  6350                           ;	Return value of _RtccWriteTime is never used
  6351  00C672  0012               	return	
  6352  00C674                     l4424:
  6353  00C674  EE20 F002          	lfsr	2,2
  6354  00C678  5001               	movf	RtccWriteTime@pTm,w,c
  6355  00C67A  26D9               	addwf	fsr2l,f,c
  6356  00C67C  5002               	movf	RtccWriteTime@pTm+1,w,c
  6357  00C67E  22DA               	addwfc	fsr2h,f,c
  6358  00C680  50DF               	movf	indf2,w,c
  6359  00C682  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  6360  00C684  EE20 F001          	lfsr	2,1
  6361  00C688  5001               	movf	RtccWriteTime@pTm,w,c
  6362  00C68A  26D9               	addwf	fsr2l,f,c
  6363  00C68C  5002               	movf	RtccWriteTime@pTm+1,w,c
  6364  00C68E  22DA               	addwfc	fsr2h,f,c
  6365  00C690  50DF               	movf	indf2,w,c
  6366  00C692  6E08               	movwf	RtccWriteTime@tempMinSec,c
  6367  00C694  5003               	movf	RtccWriteTime@di,w,c
  6368  00C696  B4D8               	btfsc	status,2,c
  6369  00C698  D002               	goto	l4430
  6370  00C69A  9CF2               	bcf	intcon,6,c	;volatile
  6371  00C69C  D000               	goto	l4430
  6372  00C69E                     l4430:
  6373  00C69E  0E00               	movlw	0
  6374  00C6A0  BB3F               	btfsc	63,5,b	;volatile
  6375  00C6A2  0E01               	movlw	1
  6376  00C6A4  6E07               	movwf	RtccWriteTime@wasWrEn,c
  6377  00C6A6  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6378  00C6A8  A4D8               	btfss	status,2,c
  6379  00C6AA  D003               	goto	l4434
  6380  00C6AC  EC28  F05D         	call	_RtccWrOn	;wreg free
  6381  00C6B0  D000               	goto	l4434
  6382  00C6B2                     l4434:
  6383  00C6B2  0E00               	movlw	0
  6384  00C6B4  BF3F               	btfsc	63,7,b	;volatile
  6385  00C6B6  0E01               	movlw	1
  6386  00C6B8  6E05               	movwf	RtccWriteTime@wasOn,c
  6387  00C6BA  5005               	movf	RtccWriteTime@wasOn,w,c
  6388  00C6BC  B4D8               	btfsc	status,2,c
  6389  00C6BE  D007               	goto	l4440
  6390  00C6C0  0E00               	movlw	0
  6391  00C6C2  BE91               	btfsc	3985,7,c	;volatile
  6392  00C6C4  0E01               	movlw	1
  6393  00C6C6  6E06               	movwf	RtccWriteTime@wasAlrm,c
  6394  00C6C8  010F               	movlb	15	; () banked
  6395  00C6CA  9F3F               	bcf	63,7,b	;volatile
  6396  00C6CC  D000               	goto	l4440
  6397  00C6CE                     l4440:
  6398  00C6CE  0EFC               	movlw	252
  6399  00C6D0  010F               	movlb	15	; () banked
  6400  00C6D2  173F               	andwf	63,f,b	;volatile
  6401  00C6D4  010F               	movlb	15	; () banked
  6402  00C6D6  813F               	bsf	63,0,b	;volatile
  6403                           
  6404                           ; BSR set to: 15
  6405  00C6D8  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  6406                           
  6407                           ; BSR set to: 15
  6408  00C6DC  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  6409                           
  6410                           ; BSR set to: 15
  6411  00C6E0  EE20 F003          	lfsr	2,3
  6412  00C6E4  5001               	movf	RtccWriteTime@pTm,w,c
  6413  00C6E6  26D9               	addwf	fsr2l,f,c
  6414  00C6E8  5002               	movf	RtccWriteTime@pTm+1,w,c
  6415  00C6EA  22DA               	addwfc	fsr2h,f,c
  6416  00C6EC  50DF               	movf	indf2,w,c
  6417  00C6EE  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  6418                           
  6419                           ; BSR set to: 15
  6420  00C6F0  0EFC               	movlw	252
  6421  00C6F2  010F               	movlb	15	; () banked
  6422  00C6F4  173F               	andwf	63,f,b	;volatile
  6423                           
  6424                           ; BSR set to: 15
  6425  00C6F6  010F               	movlb	15	; () banked
  6426  00C6F8  813F               	bsf	63,0,b	;volatile
  6427                           
  6428                           ; BSR set to: 15
  6429  00C6FA  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  6430                           
  6431                           ; BSR set to: 15
  6432  00C6FE  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  6433                           
  6434                           ; BSR set to: 15
  6435  00C702  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  6436                           
  6437                           ; BSR set to: 15
  6438  00C706  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  6439                           
  6440                           ; BSR set to: 15
  6441  00C70A  5005               	movf	RtccWriteTime@wasOn,w,c
  6442  00C70C  B4D8               	btfsc	status,2,c
  6443  00C70E  D00D               	goto	l4472
  6444                           
  6445                           ; BSR set to: 15
  6446  00C710  010F               	movlb	15	; () banked
  6447  00C712  8F3F               	bsf	63,7,b	;volatile
  6448                           
  6449                           ; BSR set to: 15
  6450  00C714  5006               	movf	RtccWriteTime@wasAlrm,w,c
  6451  00C716  B4D8               	btfsc	status,2,c
  6452  00C718  D002               	goto	l4468
  6453                           
  6454                           ; BSR set to: 15
  6455  00C71A  8E91               	bsf	3985,7,c	;volatile
  6456  00C71C  D000               	goto	l4468
  6457  00C71E                     l4468:
  6458                           
  6459                           ; BSR set to: 15
  6460  00C71E  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6461  00C720  B4D8               	btfsc	status,2,c
  6462  00C722  D009               	goto	l4476
  6463                           
  6464                           ; BSR set to: 15
  6465  00C724  EC28  F05D         	call	_RtccWrOn	;wreg free
  6466  00C728  D006               	goto	l4476
  6467  00C72A                     l4472:
  6468  00C72A  5007               	movf	RtccWriteTime@wasWrEn,w,c
  6469  00C72C  A4D8               	btfss	status,2,c
  6470  00C72E  D003               	goto	l4476
  6471  00C730  010F               	movlb	15	; () banked
  6472  00C732  9B3F               	bcf	63,5,b	;volatile
  6473                           
  6474                           ; BSR set to: 15
  6475  00C734  D000               	goto	l4476
  6476  00C736                     l4476:
  6477  00C736  5003               	movf	RtccWriteTime@di,w,c
  6478  00C738  B4D8               	btfsc	status,2,c
  6479  00C73A  0012               	return	
  6480  00C73C  8CF2               	bsf	intcon,6,c	;volatile
  6481  00C73E  0012               	return	
  6482                           
  6483                           ;	Return value of _RtccWriteTime is never used
  6484  00C740  0012               	return		;funcret
  6485  00C742                     __end_of_RtccWriteTime:
  6486                           	opt stack 0
  6487                           tblptru	equ	0xFF8
  6488                           tblptrh	equ	0xFF7
  6489                           tblptrl	equ	0xFF6
  6490                           tablat	equ	0xFF5
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           postdec1	equ	0xFE5
  6496                           fsr1l	equ	0xFE1
  6497                           indf2	equ	0xFDF
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _RtccWriteDate *****************
  6503 ;; Defined at:
  6504 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  pDt             2    0[COMRAM] PTR const struct .
  6507 ;;		 -> RtccDate(4), 
  6508 ;;  di              1    2[COMRAM] enum E7121
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  tempHourWDay    2   11[COMRAM] struct .
  6511 ;;  tempDayMonth    2    9[COMRAM] struct .
  6512 ;;  tempYear        2    6[COMRAM] struct .
  6513 ;;  wasWrEn         1    8[COMRAM] enum E7121
  6514 ;;  wasAlrm         1    5[COMRAM] enum E7121
  6515 ;;  wasOn           1    4[COMRAM] enum E7121
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      enum E7337
  6518 ;; Registers used:
  6519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 0/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6525 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6526 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6528 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6529 ;;Total ram usage:       13 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:    1
  6532 ;; This function calls:
  6533 ;;		_RtccWrOn
  6534 ;; This function is called by:
  6535 ;;		_Write_RTC
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text13
  6540  00CF76                     __ptext13:
  6541                           	opt stack 0
  6542  00CF76                     _RtccWriteDate:
  6543                           	opt stack 28
  6544                           
  6545                           ;incstack = 0
  6546  00CF76  0E00               	movlw	0
  6547  00CF78  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6548  00CF7A  EE20 F002          	lfsr	2,2
  6549  00CF7E  5001               	movf	RtccWriteDate@pDt,w,c
  6550  00CF80  26D9               	addwf	fsr2l,f,c
  6551  00CF82  5002               	movf	RtccWriteDate@pDt+1,w,c
  6552  00CF84  22DA               	addwfc	fsr2h,f,c
  6553  00CF86  0E13               	movlw	19
  6554  00CF88  60DF               	cpfslt	indf2,c
  6555  00CF8A  0012               	return	
  6556  00CF8C  EE20 F002          	lfsr	2,2
  6557  00CF90  5001               	movf	RtccWriteDate@pDt,w,c
  6558  00CF92  26D9               	addwf	fsr2l,f,c
  6559  00CF94  5002               	movf	RtccWriteDate@pDt+1,w,c
  6560  00CF96  22DA               	addwfc	fsr2h,f,c
  6561  00CF98  50DF               	movf	indf2,w,c
  6562  00CF9A  B4D8               	btfsc	status,2,c
  6563  00CF9C  0012               	return	
  6564  00CF9E  EE20 F001          	lfsr	2,1
  6565  00CFA2  5001               	movf	RtccWriteDate@pDt,w,c
  6566  00CFA4  26D9               	addwf	fsr2l,f,c
  6567  00CFA6  5002               	movf	RtccWriteDate@pDt+1,w,c
  6568  00CFA8  22DA               	addwfc	fsr2h,f,c
  6569  00CFAA  0E32               	movlw	50
  6570  00CFAC  60DF               	cpfslt	indf2,c
  6571  00CFAE  0012               	return	
  6572  00CFB0  EE20 F001          	lfsr	2,1
  6573  00CFB4  5001               	movf	RtccWriteDate@pDt,w,c
  6574  00CFB6  26D9               	addwf	fsr2l,f,c
  6575  00CFB8  5002               	movf	RtccWriteDate@pDt+1,w,c
  6576  00CFBA  22DA               	addwfc	fsr2h,f,c
  6577  00CFBC  50DF               	movf	indf2,w,c
  6578  00CFBE  B4D8               	btfsc	status,2,c
  6579  00CFC0  0012               	return	
  6580  00CFC2  EE20 F003          	lfsr	2,3
  6581  00CFC6  5001               	movf	RtccWriteDate@pDt,w,c
  6582  00CFC8  26D9               	addwf	fsr2l,f,c
  6583  00CFCA  5002               	movf	RtccWriteDate@pDt+1,w,c
  6584  00CFCC  22DA               	addwfc	fsr2h,f,c
  6585  00CFCE  0E99               	movlw	153
  6586  00CFD0  64DF               	cpfsgt	indf2,c
  6587  00CFD2  D002               	goto	l4492
  6588  00CFD4  0012               	return	
  6589                           
  6590                           ;	Return value of _RtccWriteDate is never used
  6591  00CFD6  0012               	return	
  6592  00CFD8                     l4492:
  6593  00CFD8  EE20 F003          	lfsr	2,3
  6594  00CFDC  5001               	movf	RtccWriteDate@pDt,w,c
  6595  00CFDE  26D9               	addwf	fsr2l,f,c
  6596  00CFE0  5002               	movf	RtccWriteDate@pDt+1,w,c
  6597  00CFE2  22DA               	addwfc	fsr2h,f,c
  6598  00CFE4  50DF               	movf	indf2,w,c
  6599  00CFE6  6E07               	movwf	RtccWriteDate@tempYear,c
  6600  00CFE8  EE20 F001          	lfsr	2,1
  6601  00CFEC  5001               	movf	RtccWriteDate@pDt,w,c
  6602  00CFEE  26D9               	addwf	fsr2l,f,c
  6603  00CFF0  5002               	movf	RtccWriteDate@pDt+1,w,c
  6604  00CFF2  22DA               	addwfc	fsr2h,f,c
  6605  00CFF4  50DF               	movf	indf2,w,c
  6606  00CFF6  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  6607  00CFF8  EE20 F002          	lfsr	2,2
  6608  00CFFC  5001               	movf	RtccWriteDate@pDt,w,c
  6609  00CFFE  26D9               	addwf	fsr2l,f,c
  6610  00D000  5002               	movf	RtccWriteDate@pDt+1,w,c
  6611  00D002  22DA               	addwfc	fsr2h,f,c
  6612  00D004  50DF               	movf	indf2,w,c
  6613  00D006  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  6614  00D008  5003               	movf	RtccWriteDate@di,w,c
  6615  00D00A  B4D8               	btfsc	status,2,c
  6616  00D00C  D002               	goto	l4498
  6617  00D00E  9CF2               	bcf	intcon,6,c	;volatile
  6618  00D010  D000               	goto	l4498
  6619  00D012                     l4498:
  6620  00D012  0E00               	movlw	0
  6621  00D014  BB3F               	btfsc	63,5,b	;volatile
  6622  00D016  0E01               	movlw	1
  6623  00D018  6E09               	movwf	RtccWriteDate@wasWrEn,c
  6624  00D01A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6625  00D01C  A4D8               	btfss	status,2,c
  6626  00D01E  D003               	goto	l4502
  6627  00D020  EC28  F05D         	call	_RtccWrOn	;wreg free
  6628  00D024  D000               	goto	l4502
  6629  00D026                     l4502:
  6630  00D026  0E00               	movlw	0
  6631  00D028  BF3F               	btfsc	63,7,b	;volatile
  6632  00D02A  0E01               	movlw	1
  6633  00D02C  6E05               	movwf	RtccWriteDate@wasOn,c
  6634  00D02E  5005               	movf	RtccWriteDate@wasOn,w,c
  6635  00D030  B4D8               	btfsc	status,2,c
  6636  00D032  D007               	goto	l4508
  6637  00D034  0E00               	movlw	0
  6638  00D036  BE91               	btfsc	3985,7,c	;volatile
  6639  00D038  0E01               	movlw	1
  6640  00D03A  6E06               	movwf	RtccWriteDate@wasAlrm,c
  6641  00D03C  010F               	movlb	15	; () banked
  6642  00D03E  9F3F               	bcf	63,7,b	;volatile
  6643  00D040  D000               	goto	l4508
  6644  00D042                     l4508:
  6645  00D042  0EFC               	movlw	252
  6646  00D044  010F               	movlb	15	; () banked
  6647  00D046  173F               	andwf	63,f,b	;volatile
  6648  00D048  010F               	movlb	15	; () banked
  6649  00D04A  813F               	bsf	63,0,b	;volatile
  6650                           
  6651                           ; BSR set to: 15
  6652  00D04C  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  6653                           
  6654                           ; BSR set to: 15
  6655  00D050  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  6656                           
  6657                           ; BSR set to: 15
  6658  00D054  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  6659  00D058  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  6660  00D05C  50DF               	movf	indf2,w,c
  6661  00D05E  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  6662                           
  6663                           ; BSR set to: 15
  6664  00D060  0EFC               	movlw	252
  6665  00D062  010F               	movlb	15	; () banked
  6666  00D064  173F               	andwf	63,f,b	;volatile
  6667                           
  6668                           ; BSR set to: 15
  6669  00D066  0E03               	movlw	3
  6670  00D068  010F               	movlb	15	; () banked
  6671  00D06A  133F               	iorwf	63,f,b	;volatile
  6672                           
  6673                           ; BSR set to: 15
  6674  00D06C  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  6675                           
  6676                           ; BSR set to: 15
  6677  00D070  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  6678                           
  6679                           ; BSR set to: 15
  6680  00D074  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  6681                           
  6682                           ; BSR set to: 15
  6683  00D078  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  6684                           
  6685                           ; BSR set to: 15
  6686  00D07C  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  6687                           
  6688                           ; BSR set to: 15
  6689  00D080  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  6690                           
  6691                           ; BSR set to: 15
  6692  00D084  5005               	movf	RtccWriteDate@wasOn,w,c
  6693  00D086  B4D8               	btfsc	status,2,c
  6694  00D088  D00D               	goto	l4544
  6695                           
  6696                           ; BSR set to: 15
  6697  00D08A  010F               	movlb	15	; () banked
  6698  00D08C  8F3F               	bsf	63,7,b	;volatile
  6699                           
  6700                           ; BSR set to: 15
  6701  00D08E  5006               	movf	RtccWriteDate@wasAlrm,w,c
  6702  00D090  B4D8               	btfsc	status,2,c
  6703  00D092  D002               	goto	l4540
  6704                           
  6705                           ; BSR set to: 15
  6706  00D094  8E91               	bsf	3985,7,c	;volatile
  6707  00D096  D000               	goto	l4540
  6708  00D098                     l4540:
  6709                           
  6710                           ; BSR set to: 15
  6711  00D098  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6712  00D09A  B4D8               	btfsc	status,2,c
  6713  00D09C  D009               	goto	l4548
  6714                           
  6715                           ; BSR set to: 15
  6716  00D09E  EC28  F05D         	call	_RtccWrOn	;wreg free
  6717  00D0A2  D006               	goto	l4548
  6718  00D0A4                     l4544:
  6719  00D0A4  5009               	movf	RtccWriteDate@wasWrEn,w,c
  6720  00D0A6  A4D8               	btfss	status,2,c
  6721  00D0A8  D003               	goto	l4548
  6722  00D0AA  010F               	movlb	15	; () banked
  6723  00D0AC  9B3F               	bcf	63,5,b	;volatile
  6724                           
  6725                           ; BSR set to: 15
  6726  00D0AE  D000               	goto	l4548
  6727  00D0B0                     l4548:
  6728  00D0B0  5003               	movf	RtccWriteDate@di,w,c
  6729  00D0B2  B4D8               	btfsc	status,2,c
  6730  00D0B4  0012               	return	
  6731  00D0B6  9CF2               	bcf	intcon,6,c	;volatile
  6732  00D0B8  0012               	return	
  6733                           
  6734                           ;	Return value of _RtccWriteDate is never used
  6735  00D0BA  0012               	return		;funcret
  6736  00D0BC                     __end_of_RtccWriteDate:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           postdec1	equ	0xFE5
  6747                           fsr1l	equ	0xFE1
  6748                           indf2	equ	0xFDF
  6749                           fsr2h	equ	0xFDA
  6750                           fsr2l	equ	0xFD9
  6751                           status	equ	0xFD8
  6752                           
  6753 ;; *************** function _RtccWrOn *****************
  6754 ;; Defined at:
  6755 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  6756 ;; Parameters:    Size  Location     Type
  6757 ;;		None
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  data            2    0        unsigned int 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;		None               void
  6762 ;; Registers used:
  6763 ;;		wreg, status,2
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6773 ;;Total ram usage:        0 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_Write_RTC
  6779 ;;		_RtccWriteDate
  6780 ;;		_RtccWriteTime
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text14
  6785  00BA50                     __ptext14:
  6786                           	opt stack 0
  6787  00BA50                     _RtccWrOn:
  6788                           	opt stack 28
  6789                           
  6790                           ;incstack = 0
  6791  00BA50  9CF2               	bcf	intcon,6,c	;volatile
  6792  00BA52  0E55               	movlw	85
  6793  00BA54  6EA7               	movwf	4007,c	;volatile
  6794  00BA56  0EAA               	movlw	170
  6795  00BA58  6EA7               	movwf	4007,c	;volatile
  6796  00BA5A  010F               	movlb	15	; () banked
  6797  00BA5C  8B3F               	bsf	63,5,b	;volatile
  6798                           
  6799                           ; BSR set to: 15
  6800  00BA5E  8CF2               	bsf	intcon,6,c	;volatile
  6801                           
  6802                           ; BSR set to: 15
  6803  00BA60  0012               	return		;funcret
  6804  00BA62                     __end_of_RtccWrOn:
  6805                           	opt stack 0
  6806                           tblptru	equ	0xFF8
  6807                           tblptrh	equ	0xFF7
  6808                           tblptrl	equ	0xFF6
  6809                           tablat	equ	0xFF5
  6810                           prodl	equ	0xFF3
  6811                           intcon	equ	0xFF2
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           fsr2h	equ	0xFDA
  6818                           fsr2l	equ	0xFD9
  6819                           status	equ	0xFD8
  6820                           
  6821 ;; *************** function _V_Principal *****************
  6822 ;; Defined at:
  6823 ;;		line 226 in file "../main.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;  cte             2   91[COMRAM] PTR unsigned char 
  6828 ;;		 -> Convert_diasem@buffer_dia(20), 
  6829 ;; Return value:  Size  Location     Type
  6830 ;;		None               void
  6831 ;; Registers used:
  6832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 0/0
  6835 ;;		On exit  : 0/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6842 ;;Total ram usage:        2 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:    5
  6845 ;; This function calls:
  6846 ;;		_Convert_diasem
  6847 ;;		_Lcd_Out
  6848 ;;		_Read_RTC
  6849 ;;		_sprintf
  6850 ;; This function is called by:
  6851 ;;		_main
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text15
  6856  00C1D8                     __ptext15:
  6857                           	opt stack 0
  6858  00C1D8                     _V_Principal:
  6859                           	opt stack 25
  6860                           
  6861                           ;main.c: 228: Read_RTC();
  6862                           
  6863                           ; BSR set to: 15
  6864                           ;incstack = 0
  6865  00C1D8  EC18  F067         	call	_Read_RTC	;wreg free
  6866                           
  6867                           ;main.c: 229: char* cte = Convert_diasem(diasem);
  6868  00C1DC  C074  F053         	movff	_diasem,Convert_diasem@dia
  6869  00C1E0  C075  F054         	movff	_diasem+1,Convert_diasem@dia+1
  6870  00C1E4  EC2E  F064         	call	_Convert_diasem	;wreg free
  6871  00C1E8  C053  F05C         	movff	?_Convert_diasem,V_Principal@cte
  6872  00C1EC  C054  F05D         	movff	?_Convert_diasem+1,V_Principal@cte+1
  6873                           
  6874                           ;main.c: 230: Lcd_Out(2, 0, cte);
  6875  00C1F0  0E00               	movlw	0
  6876  00C1F2  6E57               	movwf	Lcd_Out@x,c
  6877  00C1F4  C05C  F058         	movff	V_Principal@cte,Lcd_Out@buffer
  6878  00C1F8  C05D  F059         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  6879  00C1FC  0E02               	movlw	2
  6880  00C1FE  EC0C  F060         	call	_Lcd_Out
  6881                           
  6882                           ;main.c: 231: sprintf(buffer1, "%02u/%02u/%02u             ", dia, mes, anio);
  6883  00C202  0E87               	movlw	low _buffer1
  6884  00C204  6E43               	movwf	sprintf@sp,c
  6885  00C206  0E00               	movlw	high _buffer1
  6886  00C208  6E44               	movwf	sprintf@sp+1,c
  6887  00C20A  0E69               	movlw	low STR_4
  6888  00C20C  6E45               	movwf	sprintf@f,c
  6889  00C20E  0EFE               	movlw	high STR_4
  6890  00C210  6E46               	movwf	sprintf@f+1,c
  6891  00C212  C0E7  F047         	movff	_dia,?_sprintf+4
  6892  00C216  C0E8  F048         	movff	_dia+1,?_sprintf+5
  6893  00C21A  C0EB  F049         	movff	_mes,?_sprintf+6
  6894  00C21E  C0EC  F04A         	movff	_mes+1,?_sprintf+7
  6895  00C222  C0E5  F04B         	movff	_anio,?_sprintf+8
  6896  00C226  C0E6  F04C         	movff	_anio+1,?_sprintf+9
  6897  00C22A  ECFF  F077         	call	_sprintf	;wreg free
  6898                           
  6899                           ;main.c: 232: Lcd_Out(3, 0, buffer1);
  6900  00C22E  0E00               	movlw	0
  6901  00C230  6E57               	movwf	Lcd_Out@x,c
  6902  00C232  0E87               	movlw	low _buffer1
  6903  00C234  6E58               	movwf	Lcd_Out@buffer,c
  6904  00C236  0E00               	movlw	high _buffer1
  6905  00C238  6E59               	movwf	Lcd_Out@buffer+1,c
  6906  00C23A  0E03               	movlw	3
  6907  00C23C  EC0C  F060         	call	_Lcd_Out
  6908                           
  6909                           ;main.c: 233: sprintf(buffer1, "%02u:%02u:%02u             ", hora, minuto, segundo);
  6910  00C240  0E87               	movlw	low _buffer1
  6911  00C242  6E43               	movwf	sprintf@sp,c
  6912  00C244  0E00               	movlw	high _buffer1
  6913  00C246  6E44               	movwf	sprintf@sp+1,c
  6914  00C248  0E85               	movlw	low STR_5
  6915  00C24A  6E45               	movwf	sprintf@f,c
  6916  00C24C  0EFE               	movlw	high STR_5
  6917  00C24E  6E46               	movwf	sprintf@f+1,c
  6918  00C250  C0E9  F047         	movff	_hora,?_sprintf+4
  6919  00C254  C0EA  F048         	movff	_hora+1,?_sprintf+5
  6920  00C258  C0ED  F049         	movff	_minuto,?_sprintf+6
  6921  00C25C  C0EE  F04A         	movff	_minuto+1,?_sprintf+7
  6922  00C260  C078  F04B         	movff	_segundo,?_sprintf+8
  6923  00C264  C079  F04C         	movff	_segundo+1,?_sprintf+9
  6924  00C268  ECFF  F077         	call	_sprintf	;wreg free
  6925                           
  6926                           ;main.c: 234: Lcd_Out(4, 0, buffer1);
  6927  00C26C  0E00               	movlw	0
  6928  00C26E  6E57               	movwf	Lcd_Out@x,c
  6929  00C270  0E87               	movlw	low _buffer1
  6930  00C272  6E58               	movwf	Lcd_Out@buffer,c
  6931  00C274  0E00               	movlw	high _buffer1
  6932  00C276  6E59               	movwf	Lcd_Out@buffer+1,c
  6933  00C278  0E04               	movlw	4
  6934  00C27A  EC0C  F060         	call	_Lcd_Out
  6935  00C27E  0012               	return		;funcret
  6936  00C280                     __end_of_V_Principal:
  6937                           	opt stack 0
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           postdec1	equ	0xFE5
  6947                           fsr1l	equ	0xFE1
  6948                           indf2	equ	0xFDF
  6949                           fsr2h	equ	0xFDA
  6950                           fsr2l	equ	0xFD9
  6951                           status	equ	0xFD8
  6952                           
  6953 ;; *************** function _Read_RTC *****************
  6954 ;; Defined at:
  6955 ;;		line 661 in file "../main.c"
  6956 ;; Parameters:    Size  Location     Type
  6957 ;;		None
  6958 ;; Auto vars:     Size  Location     Type
  6959 ;;		None
  6960 ;; Return value:  Size  Location     Type
  6961 ;;		None               void
  6962 ;; Registers used:
  6963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6964 ;; Tracked objects:
  6965 ;;		On entry : 0/0
  6966 ;;		On exit  : 0/0
  6967 ;;		Unchanged: 0/0
  6968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6973 ;;Total ram usage:        0 bytes
  6974 ;; Hardware stack levels used:    1
  6975 ;; Hardware stack levels required when called:    1
  6976 ;; This function calls:
  6977 ;;		_RtccReadDate
  6978 ;;		_RtccReadTime
  6979 ;; This function is called by:
  6980 ;;		_V_Principal
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text16
  6985  00CE30                     __ptext16:
  6986                           	opt stack 0
  6987  00CE30                     _Read_RTC:
  6988                           	opt stack 28
  6989                           
  6990                           ;main.c: 664: RtccReadTime(&RtccTime);
  6991                           
  6992                           ;incstack = 0
  6993  00CE30  0E9F               	movlw	low _RtccTime
  6994  00CE32  6E01               	movwf	RtccReadTime@pTm,c
  6995  00CE34  0E00               	movlw	high _RtccTime
  6996  00CE36  6E02               	movwf	RtccReadTime@pTm+1,c
  6997  00CE38  EC52  F05E         	call	_RtccReadTime	;wreg free
  6998                           
  6999                           ;main.c: 665: segundo_u = (RtccTime.f.sec & 0x0F);
  7000  00CE3C  0100               	movlb	0	; () banked
  7001  00CE3E  51A0               	movf	(_RtccTime+1)& (0+255),w,b
  7002  00CE40  0B0F               	andlw	15
  7003  00CE42  0100               	movlb	0	; () banked
  7004  00CE44  6FFF               	movwf	_segundo_u& (0+255),b
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;main.c: 666: segundo_d = ((RtccTime.f.sec & 0xF0) >> 4);
  7008  00CE46  0100               	movlb	0	; () banked
  7009  00CE48  39A0               	swapf	(_RtccTime+1)& (0+255),w,b
  7010  00CE4A  0B0F               	andlw	15
  7011  00CE4C  0B0F               	andlw	15
  7012  00CE4E  0100               	movlb	0	; () banked
  7013  00CE50  6FFE               	movwf	_segundo_d& (0+255),b
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;main.c: 667: minuto_u = (RtccTime.f.min & 0x0F);
  7017  00CE52  0100               	movlb	0	; () banked
  7018  00CE54  51A1               	movf	(_RtccTime+2)& (0+255),w,b
  7019  00CE56  0B0F               	andlw	15
  7020  00CE58  0100               	movlb	0	; () banked
  7021  00CE5A  6FFD               	movwf	_minuto_u& (0+255),b
  7022                           
  7023                           ; BSR set to: 0
  7024                           ;main.c: 668: minuto_d = ((RtccTime.f.min & 0xF0) >> 4);
  7025  00CE5C  0100               	movlb	0	; () banked
  7026  00CE5E  39A1               	swapf	(_RtccTime+2)& (0+255),w,b
  7027  00CE60  0B0F               	andlw	15
  7028  00CE62  0B0F               	andlw	15
  7029  00CE64  0100               	movlb	0	; () banked
  7030  00CE66  6FFC               	movwf	_minuto_d& (0+255),b
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;main.c: 669: hora_u = (RtccTime.f.hour & 0x0F);
  7034  00CE68  0100               	movlb	0	; () banked
  7035  00CE6A  51A2               	movf	(_RtccTime+3)& (0+255),w,b
  7036  00CE6C  0B0F               	andlw	15
  7037  00CE6E  0100               	movlb	0	; () banked
  7038  00CE70  6FF9               	movwf	_hora_u& (0+255),b
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;main.c: 670: hora_d = ((RtccTime.f.hour & 0xF0) >> 4);
  7042  00CE72  0100               	movlb	0	; () banked
  7043  00CE74  39A2               	swapf	(_RtccTime+3)& (0+255),w,b
  7044  00CE76  0B0F               	andlw	15
  7045  00CE78  0B0F               	andlw	15
  7046  00CE7A  0100               	movlb	0	; () banked
  7047  00CE7C  6FF8               	movwf	_hora_d& (0+255),b
  7048                           
  7049                           ;main.c: 671: RtccReadDate(&RtccDate);
  7050  00CE7E  0E9B               	movlw	low _RtccDate
  7051  00CE80  6E01               	movwf	RtccReadDate@pDt,c
  7052  00CE82  0E00               	movlw	high _RtccDate
  7053  00CE84  6E02               	movwf	RtccReadDate@pDt+1,c
  7054  00CE86  ECC5  F05F         	call	_RtccReadDate	;wreg free
  7055                           
  7056                           ;main.c: 672: fecha_u = (RtccDate.f.mday & 0x0F);
  7057  00CE8A  0100               	movlb	0	; () banked
  7058  00CE8C  519C               	movf	(_RtccDate+1)& (0+255),w,b
  7059  00CE8E  0B0F               	andlw	15
  7060  00CE90  0100               	movlb	0	; () banked
  7061  00CE92  6FF7               	movwf	_fecha_u& (0+255),b
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;main.c: 673: fecha_d = ((RtccDate.f.mday & 0xF0) >> 4);
  7065  00CE94  0100               	movlb	0	; () banked
  7066  00CE96  399C               	swapf	(_RtccDate+1)& (0+255),w,b
  7067  00CE98  0B0F               	andlw	15
  7068  00CE9A  0B0F               	andlw	15
  7069  00CE9C  0100               	movlb	0	; () banked
  7070  00CE9E  6FF6               	movwf	_fecha_d& (0+255),b
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;main.c: 674: mes_u = (RtccDate.f.mon & 0x0F);
  7074  00CEA0  0100               	movlb	0	; () banked
  7075  00CEA2  519D               	movf	(_RtccDate+2)& (0+255),w,b
  7076  00CEA4  0B0F               	andlw	15
  7077  00CEA6  0100               	movlb	0	; () banked
  7078  00CEA8  6FFB               	movwf	_mes_u& (0+255),b
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;main.c: 675: mes_d = ((RtccDate.f.mon & 0xF0) >> 4);
  7082  00CEAA  0100               	movlb	0	; () banked
  7083  00CEAC  399D               	swapf	(_RtccDate+2)& (0+255),w,b
  7084  00CEAE  0B0F               	andlw	15
  7085  00CEB0  0B0F               	andlw	15
  7086  00CEB2  0100               	movlb	0	; () banked
  7087  00CEB4  6FFA               	movwf	_mes_d& (0+255),b
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;main.c: 676: dia_semana = RtccDate.f.wday;
  7091  00CEB6  C09B  F0F5         	movff	_RtccDate,_dia_semana
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;main.c: 677: anio_u = (RtccDate.f.year & 0x0F);
  7095  00CEBA  0100               	movlb	0	; () banked
  7096  00CEBC  519E               	movf	(_RtccDate+3)& (0+255),w,b
  7097  00CEBE  0B0F               	andlw	15
  7098  00CEC0  0100               	movlb	0	; () banked
  7099  00CEC2  6FF4               	movwf	_anio_u& (0+255),b
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;main.c: 678: anio_d = ((RtccDate.f.year & 0xF0) >> 4);
  7103  00CEC4  0100               	movlb	0	; () banked
  7104  00CEC6  399E               	swapf	(_RtccDate+3)& (0+255),w,b
  7105  00CEC8  0B0F               	andlw	15
  7106  00CECA  0B0F               	andlw	15
  7107  00CECC  0100               	movlb	0	; () banked
  7108  00CECE  6FF3               	movwf	_anio_d& (0+255),b
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;main.c: 679: segundo = segundo_d * 10 + segundo_u;
  7112  00CED0  0100               	movlb	0	; () banked
  7113  00CED2  51FE               	movf	_segundo_d& (0+255),w,b
  7114  00CED4  0D0A               	mullw	10
  7115  00CED6  0100               	movlb	0	; () banked
  7116  00CED8  51FF               	movf	_segundo_u& (0+255),w,b
  7117  00CEDA  24F3               	addwf	prodl,w,c
  7118  00CEDC  0100               	movlb	0	; () banked
  7119  00CEDE  6F78               	movwf	_segundo& (0+255),b
  7120  00CEE0  0100               	movlb	0	; () banked
  7121  00CEE2  0E00               	movlw	0
  7122  00CEE4  20F4               	addwfc	prodh,w,c
  7123  00CEE6  0100               	movlb	0	; () banked
  7124  00CEE8  6F79               	movwf	(_segundo+1)& (0+255),b
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;main.c: 680: minuto = minuto_d * 10 + minuto_u;
  7128  00CEEA  0100               	movlb	0	; () banked
  7129  00CEEC  51FC               	movf	_minuto_d& (0+255),w,b
  7130  00CEEE  0D0A               	mullw	10
  7131  00CEF0  0100               	movlb	0	; () banked
  7132  00CEF2  51FD               	movf	_minuto_u& (0+255),w,b
  7133  00CEF4  24F3               	addwf	prodl,w,c
  7134  00CEF6  0100               	movlb	0	; () banked
  7135  00CEF8  6FED               	movwf	_minuto& (0+255),b
  7136  00CEFA  0100               	movlb	0	; () banked
  7137  00CEFC  0E00               	movlw	0
  7138  00CEFE  20F4               	addwfc	prodh,w,c
  7139  00CF00  0100               	movlb	0	; () banked
  7140  00CF02  6FEE               	movwf	(_minuto+1)& (0+255),b
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;main.c: 681: hora = hora_d * 10 + hora_u;
  7144  00CF04  0100               	movlb	0	; () banked
  7145  00CF06  51F8               	movf	_hora_d& (0+255),w,b
  7146  00CF08  0D0A               	mullw	10
  7147  00CF0A  0100               	movlb	0	; () banked
  7148  00CF0C  51F9               	movf	_hora_u& (0+255),w,b
  7149  00CF0E  24F3               	addwf	prodl,w,c
  7150  00CF10  0100               	movlb	0	; () banked
  7151  00CF12  6FE9               	movwf	_hora& (0+255),b
  7152  00CF14  0100               	movlb	0	; () banked
  7153  00CF16  0E00               	movlw	0
  7154  00CF18  20F4               	addwfc	prodh,w,c
  7155  00CF1A  0100               	movlb	0	; () banked
  7156  00CF1C  6FEA               	movwf	(_hora+1)& (0+255),b
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 682: dia = fecha_d * 10 + fecha_u;
  7160  00CF1E  0100               	movlb	0	; () banked
  7161  00CF20  51F6               	movf	_fecha_d& (0+255),w,b
  7162  00CF22  0D0A               	mullw	10
  7163  00CF24  0100               	movlb	0	; () banked
  7164  00CF26  51F7               	movf	_fecha_u& (0+255),w,b
  7165  00CF28  24F3               	addwf	prodl,w,c
  7166  00CF2A  0100               	movlb	0	; () banked
  7167  00CF2C  6FE7               	movwf	_dia& (0+255),b
  7168  00CF2E  0100               	movlb	0	; () banked
  7169  00CF30  0E00               	movlw	0
  7170  00CF32  20F4               	addwfc	prodh,w,c
  7171  00CF34  0100               	movlb	0	; () banked
  7172  00CF36  6FE8               	movwf	(_dia+1)& (0+255),b
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;main.c: 683: diasem = dia_semana;
  7176  00CF38  C0F5  F074         	movff	_dia_semana,_diasem
  7177  00CF3C  0100               	movlb	0	; () banked
  7178  00CF3E  6B75               	clrf	(_diasem+1)& (0+255),b
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;main.c: 684: mes = mes_d * 10 + mes_u;
  7182  00CF40  0100               	movlb	0	; () banked
  7183  00CF42  51FA               	movf	_mes_d& (0+255),w,b
  7184  00CF44  0D0A               	mullw	10
  7185  00CF46  0100               	movlb	0	; () banked
  7186  00CF48  51FB               	movf	_mes_u& (0+255),w,b
  7187  00CF4A  24F3               	addwf	prodl,w,c
  7188  00CF4C  0100               	movlb	0	; () banked
  7189  00CF4E  6FEB               	movwf	_mes& (0+255),b
  7190  00CF50  0100               	movlb	0	; () banked
  7191  00CF52  0E00               	movlw	0
  7192  00CF54  20F4               	addwfc	prodh,w,c
  7193  00CF56  0100               	movlb	0	; () banked
  7194  00CF58  6FEC               	movwf	(_mes+1)& (0+255),b
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;main.c: 685: anio = anio_d * 10 + anio_u;
  7198  00CF5A  0100               	movlb	0	; () banked
  7199  00CF5C  51F3               	movf	_anio_d& (0+255),w,b
  7200  00CF5E  0D0A               	mullw	10
  7201  00CF60  0100               	movlb	0	; () banked
  7202  00CF62  51F4               	movf	_anio_u& (0+255),w,b
  7203  00CF64  24F3               	addwf	prodl,w,c
  7204  00CF66  0100               	movlb	0	; () banked
  7205  00CF68  6FE5               	movwf	_anio& (0+255),b
  7206  00CF6A  0100               	movlb	0	; () banked
  7207  00CF6C  0E00               	movlw	0
  7208  00CF6E  20F4               	addwfc	prodh,w,c
  7209  00CF70  0100               	movlb	0	; () banked
  7210  00CF72  6FE6               	movwf	(_anio+1)& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213  00CF74  0012               	return		;funcret
  7214  00CF76                     __end_of_Read_RTC:
  7215                           	opt stack 0
  7216                           tblptru	equ	0xFF8
  7217                           tblptrh	equ	0xFF7
  7218                           tblptrl	equ	0xFF6
  7219                           tablat	equ	0xFF5
  7220                           prodh	equ	0xFF4
  7221                           prodl	equ	0xFF3
  7222                           intcon	equ	0xFF2
  7223                           postinc0	equ	0xFEE
  7224                           wreg	equ	0xFE8
  7225                           postdec1	equ	0xFE5
  7226                           fsr1l	equ	0xFE1
  7227                           indf2	equ	0xFDF
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8
  7231                           
  7232 ;; *************** function _RtccReadTime *****************
  7233 ;; Defined at:
  7234 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  pTm             2    0[COMRAM] PTR struct .
  7237 ;;		 -> RtccTime(4), 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;  rTD0            8   10[COMRAM] struct .
  7240 ;;  rTD1            8    2[COMRAM] struct .
  7241 ;; Return value:  Size  Location     Type
  7242 ;;		None               void
  7243 ;; Registers used:
  7244 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7245 ;; Tracked objects:
  7246 ;;		On entry : 0/0
  7247 ;;		On exit  : 0/0
  7248 ;;		Unchanged: 0/0
  7249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7250 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7251 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7253 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7254 ;;Total ram usage:       18 bytes
  7255 ;; Hardware stack levels used:    1
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_Read_RTC
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text17
  7264  00BCA4                     __ptext17:
  7265                           	opt stack 0
  7266  00BCA4                     _RtccReadTime:
  7267                           	opt stack 28
  7268  00BCA4  0EFC               	movlw	252
  7269  00BCA6  010F               	movlb	15	; () banked
  7270  00BCA8  173F               	andwf	63,f,b	;volatile
  7271                           
  7272                           ; BSR set to: 15
  7273  00BCAA  010F               	movlb	15	; () banked
  7274  00BCAC  813F               	bsf	63,0,b	;volatile
  7275                           
  7276                           ; BSR set to: 15
  7277  00BCAE  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  7278                           
  7279                           ; BSR set to: 15
  7280  00BCB2  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  7281                           
  7282                           ; BSR set to: 15
  7283  00BCB6  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  7284                           
  7285                           ; BSR set to: 15
  7286  00BCBA  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  7287                           
  7288                           ; BSR set to: 15
  7289  00BCBE  0EFC               	movlw	252
  7290  00BCC0  010F               	movlb	15	; () banked
  7291  00BCC2  173F               	andwf	63,f,b	;volatile
  7292  00BCC4  010F               	movlb	15	; () banked
  7293  00BCC6  813F               	bsf	63,0,b	;volatile
  7294                           
  7295                           ; BSR set to: 15
  7296  00BCC8  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  7297                           
  7298                           ; BSR set to: 15
  7299  00BCCC  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  7300                           
  7301                           ; BSR set to: 15
  7302  00BCD0  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  7303                           
  7304                           ; BSR set to: 15
  7305  00BCD4  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  7306                           
  7307                           ; BSR set to: 15
  7308  00BCD8  5009               	movf	RtccReadTime@rTD1+6,w,c
  7309  00BCDA  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  7310  00BCDC  A4D8               	btfss	status,2,c
  7311  00BCDE  D7E2               	goto	l4552
  7312                           
  7313                           ; BSR set to: 15
  7314                           
  7315                           ; BSR set to: 15
  7316  00BCE0  EE20 F003          	lfsr	2,3
  7317  00BCE4  5001               	movf	RtccReadTime@pTm,w,c
  7318  00BCE6  26D9               	addwf	fsr2l,f,c
  7319  00BCE8  5002               	movf	RtccReadTime@pTm+1,w,c
  7320  00BCEA  22DA               	addwfc	fsr2h,f,c
  7321  00BCEC  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  7322  00BCF0  EE20 F002          	lfsr	2,2
  7323  00BCF4  5001               	movf	RtccReadTime@pTm,w,c
  7324  00BCF6  26D9               	addwf	fsr2l,f,c
  7325  00BCF8  5002               	movf	RtccReadTime@pTm+1,w,c
  7326  00BCFA  22DA               	addwfc	fsr2h,f,c
  7327  00BCFC  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  7328  00BD00  EE20 F001          	lfsr	2,1
  7329  00BD04  5001               	movf	RtccReadTime@pTm,w,c
  7330  00BD06  26D9               	addwf	fsr2l,f,c
  7331  00BD08  5002               	movf	RtccReadTime@pTm+1,w,c
  7332  00BD0A  22DA               	addwfc	fsr2h,f,c
  7333  00BD0C  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  7334                           
  7335                           ; BSR set to: 15
  7336  00BD10  0012               	return		;funcret
  7337  00BD12                     __end_of_RtccReadTime:
  7338                           	opt stack 0
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           postinc0	equ	0xFEE
  7347                           wreg	equ	0xFE8
  7348                           postdec1	equ	0xFE5
  7349                           fsr1l	equ	0xFE1
  7350                           indf2	equ	0xFDF
  7351                           fsr2h	equ	0xFDA
  7352                           fsr2l	equ	0xFD9
  7353                           status	equ	0xFD8
  7354                           
  7355 ;; *************** function _RtccReadDate *****************
  7356 ;; Defined at:
  7357 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;  pDt             2    0[COMRAM] PTR struct .
  7360 ;;		 -> RtccDate(4), 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  rTD0            8   10[COMRAM] struct .
  7363 ;;  rTD1            8    2[COMRAM] struct .
  7364 ;; Return value:  Size  Location     Type
  7365 ;;		None               void
  7366 ;; Registers used:
  7367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7368 ;; Tracked objects:
  7369 ;;		On entry : 0/0
  7370 ;;		On exit  : 0/0
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7373 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7374 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7376 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7377 ;;Total ram usage:       18 bytes
  7378 ;; Hardware stack levels used:    1
  7379 ;; This function calls:
  7380 ;;		Nothing
  7381 ;; This function is called by:
  7382 ;;		_Read_RTC
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text18
  7387  00BF8A                     __ptext18:
  7388                           	opt stack 0
  7389  00BF8A                     _RtccReadDate:
  7390                           	opt stack 28
  7391  00BF8A  0EFC               	movlw	252
  7392  00BF8C  010F               	movlb	15	; () banked
  7393  00BF8E  173F               	andwf	63,f,b	;volatile
  7394  00BF90  0E03               	movlw	3
  7395  00BF92  010F               	movlb	15	; () banked
  7396  00BF94  133F               	iorwf	63,f,b	;volatile
  7397                           
  7398                           ; BSR set to: 15
  7399  00BF96  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  7400                           
  7401                           ; BSR set to: 15
  7402  00BF9A  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  7403                           
  7404                           ; BSR set to: 15
  7405  00BF9E  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  7406                           
  7407                           ; BSR set to: 15
  7408  00BFA2  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  7409                           
  7410                           ; BSR set to: 15
  7411  00BFA6  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  7412                           
  7413                           ; BSR set to: 15
  7414  00BFAA  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  7415  00BFAE  0EFC               	movlw	252
  7416  00BFB0  010F               	movlb	15	; () banked
  7417  00BFB2  173F               	andwf	63,f,b	;volatile
  7418  00BFB4  0E03               	movlw	3
  7419  00BFB6  010F               	movlb	15	; () banked
  7420  00BFB8  133F               	iorwf	63,f,b	;volatile
  7421                           
  7422                           ; BSR set to: 15
  7423  00BFBA  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  7424                           
  7425                           ; BSR set to: 15
  7426  00BFBE  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  7427                           
  7428                           ; BSR set to: 15
  7429  00BFC2  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  7430                           
  7431                           ; BSR set to: 15
  7432  00BFC6  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  7433                           
  7434                           ; BSR set to: 15
  7435  00BFCA  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  7436                           
  7437                           ; BSR set to: 15
  7438  00BFCE  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  7439  00BFD2  5005               	movf	RtccReadDate@rTD1+2,w,c
  7440  00BFD4  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  7441  00BFD6  A4D8               	btfss	status,2,c
  7442  00BFD8  D7D8               	goto	l4578
  7443                           
  7444                           ; BSR set to: 15
  7445                           
  7446                           ; BSR set to: 15
  7447  00BFDA  EE20 F001          	lfsr	2,1
  7448  00BFDE  5001               	movf	RtccReadDate@pDt,w,c
  7449  00BFE0  26D9               	addwf	fsr2l,f,c
  7450  00BFE2  5002               	movf	RtccReadDate@pDt+1,w,c
  7451  00BFE4  22DA               	addwfc	fsr2h,f,c
  7452  00BFE6  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  7453  00BFEA  EE20 F002          	lfsr	2,2
  7454  00BFEE  5001               	movf	RtccReadDate@pDt,w,c
  7455  00BFF0  26D9               	addwf	fsr2l,f,c
  7456  00BFF2  5002               	movf	RtccReadDate@pDt+1,w,c
  7457  00BFF4  22DA               	addwfc	fsr2h,f,c
  7458  00BFF6  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  7459                           
  7460                           ; BSR set to: 15
  7461  00BFFA  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  7462  00BFFE  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  7463  00C002  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  7464                           
  7465                           ; BSR set to: 15
  7466  00C006  EE20 F003          	lfsr	2,3
  7467  00C00A  5001               	movf	RtccReadDate@pDt,w,c
  7468  00C00C  26D9               	addwf	fsr2l,f,c
  7469  00C00E  5002               	movf	RtccReadDate@pDt+1,w,c
  7470  00C010  22DA               	addwfc	fsr2h,f,c
  7471  00C012  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  7472                           
  7473                           ; BSR set to: 15
  7474  00C016  0012               	return		;funcret
  7475  00C018                     __end_of_RtccReadDate:
  7476                           	opt stack 0
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           prodh	equ	0xFF4
  7482                           prodl	equ	0xFF3
  7483                           intcon	equ	0xFF2
  7484                           postinc0	equ	0xFEE
  7485                           wreg	equ	0xFE8
  7486                           postdec1	equ	0xFE5
  7487                           fsr1l	equ	0xFE1
  7488                           indf2	equ	0xFDF
  7489                           fsr2h	equ	0xFDA
  7490                           fsr2l	equ	0xFD9
  7491                           status	equ	0xFD8
  7492                           
  7493 ;; *************** function _Lcd_Out *****************
  7494 ;; Defined at:
  7495 ;;		line 84 in file "../lcd.h"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;  y               1    wreg     unsigned char 
  7498 ;;  x               1   86[COMRAM] unsigned char 
  7499 ;;  buffer          2   87[COMRAM] PTR const unsigned char 
  7500 ;;		 -> Convert_diasem@buffer_dia(20), STR_81(1), STR_79(1), STR_77(1), 
  7501 ;;		 -> STR_75(21), STR_74(21), STR_73(21), STR_72(1), 
  7502 ;;		 -> STR_70(1), STR_68(1), STR_66(1), STR_64(1), 
  7503 ;;		 -> STR_62(1), STR_60(1), STR_58(1), STR_56(1), 
  7504 ;;		 -> STR_55(1), STR_54(1), STR_52(1), STR_50(1), 
  7505 ;;		 -> STR_48(1), STR_46(1), STR_44(1), STR_42(1), 
  7506 ;;		 -> STR_40(1), STR_38(1), STR_35(12), STR_32(6), 
  7507 ;;		 -> STR_31(1), STR_29(1), STR_27(1), STR_25(1), 
  7508 ;;		 -> STR_23(1), STR_21(1), STR_20(1), STR_19(1), 
  7509 ;;		 -> STR_18(1), STR_16(1), STR_14(1), STR_12(1), 
  7510 ;;		 -> STR_10(1), STR_8(1), STR_7(1), STR_6(18), 
  7511 ;;		 -> STR_3(20), buffer1(20), 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  y               1   89[COMRAM] unsigned char 
  7514 ;;  data            1   90[COMRAM] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;		None               void
  7517 ;; Registers used:
  7518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7524 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7527 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7528 ;;Total ram usage:        5 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    1
  7531 ;; This function calls:
  7532 ;;		_Lcd_Chr_CP
  7533 ;;		_Lcd_Cmd
  7534 ;; This function is called by:
  7535 ;;		_main
  7536 ;;		_V_Principal
  7537 ;;		_V_ProgReloj
  7538 ;;		_V_ProgRiegoIlum
  7539 ;;		_V_ProgTempAgua
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text19
  7544  00C018                     __ptext19:
  7545                           	opt stack 0
  7546  00C018                     _Lcd_Out:
  7547                           	opt stack 28
  7548                           
  7549                           ; BSR set to: 15
  7550                           ;incstack = 0
  7551                           ;Lcd_Out@y stored from wreg
  7552  00C018  6E5A               	movwf	Lcd_Out@y,c
  7553                           
  7554                           ;lcd.h: 86: unsigned char data;
  7555                           ;lcd.h: 87: switch (y)
  7556  00C01A  D00D               	goto	l4622
  7557  00C01C                     l4612:
  7558  00C01C  5057               	movf	Lcd_Out@x,w,c
  7559  00C01E  0F80               	addlw	128
  7560  00C020  D008               	goto	L6
  7561  00C022                     l4614:
  7562  00C022  5057               	movf	Lcd_Out@x,w,c
  7563  00C024  0FC0               	addlw	192
  7564  00C026  D005               	goto	L6
  7565  00C028                     l4616:
  7566  00C028  5057               	movf	Lcd_Out@x,w,c
  7567  00C02A  0F94               	addlw	148
  7568  00C02C  D002               	goto	L6
  7569  00C02E                     l4618:
  7570  00C02E  5057               	movf	Lcd_Out@x,w,c
  7571  00C030  0FD4               	addlw	212
  7572  00C032                     L6:
  7573  00C032  6E5B               	movwf	Lcd_Out@data,c
  7574                           
  7575                           ;lcd.h: 94: }
  7576                           
  7577                           ;lcd.h: 93: default: break;
  7578  00C034  D00E               	goto	l4624
  7579  00C036                     l4622:
  7580  00C036  505A               	movf	Lcd_Out@y,w,c
  7581                           
  7582                           ; Switch size 1, requested type "space"
  7583                           ; Number of cases is 4, Range of values is 1 to 4
  7584                           ; switch strategies available:
  7585                           ; Name         Instructions Cycles
  7586                           ; simple_byte           13     7 (average)
  7587                           ;	Chosen strategy is simple_byte
  7588  00C038  0A01               	xorlw	1	; case 1
  7589  00C03A  B4D8               	btfsc	status,2,c
  7590  00C03C  D7EF               	goto	l4612
  7591  00C03E  0A03               	xorlw	3	; case 2
  7592  00C040  B4D8               	btfsc	status,2,c
  7593  00C042  D7EF               	goto	l4614
  7594  00C044  0A01               	xorlw	1	; case 3
  7595  00C046  B4D8               	btfsc	status,2,c
  7596  00C048  D7EF               	goto	l4616
  7597  00C04A  0A07               	xorlw	7	; case 4
  7598  00C04C  B4D8               	btfsc	status,2,c
  7599  00C04E  D7EF               	goto	l4618
  7600  00C050  D000               	goto	l4624
  7601  00C052                     l4624:
  7602                           
  7603                           ;lcd.h: 95: Lcd_Cmd(data);
  7604  00C052  505B               	movf	Lcd_Out@data,w,c
  7605  00C054  ECBD  F064         	call	_Lcd_Cmd
  7606                           
  7607                           ;lcd.h: 96: while(*buffer)
  7608  00C058  D015               	goto	l4630
  7609  00C05A                     l4626:
  7610                           
  7611                           ;lcd.h: 97: {
  7612                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  7613  00C05A  C058  FFF6         	movff	Lcd_Out@buffer,tblptrl
  7614  00C05E  C059  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  7615  00C062  6AF8               	clrf	tblptru,c
  7616  00C064  0E0E               	movlw	(high __ramtop+-1)
  7617  00C066  64F7               	cpfsgt	tblptrh,c
  7618  00C068  D003               	bra	u5307
  7619  00C06A  0008               	tblrd		*
  7620  00C06C  50F5               	movf	tablat,w,c
  7621  00C06E  D005               	bra	u5300
  7622  00C070                     u5307:
  7623  00C070  CFF6 FFE9          	movff	tblptrl,fsr0l
  7624  00C074  CFF7 FFEA          	movff	tblptrh,fsr0h
  7625  00C078  50EF               	movf	indf0,w,c
  7626  00C07A                     u5300:
  7627  00C07A  EC4D  F065         	call	_Lcd_Chr_CP
  7628                           
  7629                           ;lcd.h: 99: buffer++;
  7630  00C07E  4A58               	infsnz	Lcd_Out@buffer,f,c
  7631  00C080  2A59               	incf	Lcd_Out@buffer+1,f,c
  7632  00C082  D000               	goto	l4630
  7633  00C084                     l4630:
  7634  00C084  C058  FFF6         	movff	Lcd_Out@buffer,tblptrl
  7635  00C088  C059  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  7636  00C08C  6AF8               	clrf	tblptru,c
  7637  00C08E  0E0E               	movlw	(high __ramtop+-1)
  7638  00C090  64F7               	cpfsgt	tblptrh,c
  7639  00C092  D003               	bra	u5317
  7640  00C094  0008               	tblrd		*
  7641  00C096  50F5               	movf	tablat,w,c
  7642  00C098  D005               	bra	u5310
  7643  00C09A                     u5317:
  7644  00C09A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7645  00C09E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7646  00C0A2  50EF               	movf	indf0,w,c
  7647  00C0A4                     u5310:
  7648  00C0A4  0900               	iorlw	0
  7649  00C0A6  A4D8               	btfss	status,2,c
  7650  00C0A8  D7D8               	goto	l4626
  7651                           
  7652                           ;lcd.h: 100: }
  7653                           ;lcd.h: 101: return;
  7654  00C0AA  0012               	return		;funcret
  7655  00C0AC                     __end_of_Lcd_Out:
  7656                           	opt stack 0
  7657                           tblptru	equ	0xFF8
  7658                           tblptrh	equ	0xFF7
  7659                           tblptrl	equ	0xFF6
  7660                           tablat	equ	0xFF5
  7661                           prodh	equ	0xFF4
  7662                           prodl	equ	0xFF3
  7663                           intcon	equ	0xFF2
  7664                           indf0	equ	0xFEF
  7665                           postinc0	equ	0xFEE
  7666                           fsr0h	equ	0xFEA
  7667                           fsr0l	equ	0xFE9
  7668                           wreg	equ	0xFE8
  7669                           postdec1	equ	0xFE5
  7670                           fsr1l	equ	0xFE1
  7671                           indf2	equ	0xFDF
  7672                           fsr2h	equ	0xFDA
  7673                           fsr2l	equ	0xFD9
  7674                           status	equ	0xFD8
  7675                           
  7676 ;; *************** function _Lcd_Chr_CP *****************
  7677 ;; Defined at:
  7678 ;;		line 126 in file "../lcd.h"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  data            1    wreg     unsigned char 
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;  data            1    2[COMRAM] unsigned char 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;		None               void
  7685 ;; Registers used:
  7686 ;;		wreg, status,2, status,0
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7694 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7695 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7696 ;;Total ram usage:        3 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_Lcd_Out
  7702 ;;		_Lcd_Out2
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           	psect	text20
  7707  00CA9A                     __ptext20:
  7708                           	opt stack 0
  7709  00CA9A                     _Lcd_Chr_CP:
  7710                           	opt stack 28
  7711                           
  7712                           ;incstack = 0
  7713                           ;Lcd_Chr_CP@data stored from wreg
  7714  00CA9A  6E03               	movwf	Lcd_Chr_CP@data,c
  7715                           
  7716                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  7717  00CA9C  988A               	bcf	3978,4,c	;volatile
  7718  00CA9E  8A8A               	bsf	3978,5,c	;volatile
  7719                           
  7720                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  7721  00CAA0  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  7722  00CAA2  AE03               	btfss	Lcd_Chr_CP@data,7,c
  7723  00CAA4  D001               	bra	u4365
  7724  00CAA6  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  7725  00CAA8                     u4365:
  7726  00CAA8  0E01               	movlw	1
  7727  00CAAA  1601               	andwf	??_Lcd_Chr_CP,f,c
  7728  00CAAC  508A               	movf	3978,w,c	;volatile
  7729  00CAAE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7730  00CAB0  0BFE               	andlw	-2
  7731  00CAB2  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7732  00CAB4  6E8A               	movwf	3978,c	;volatile
  7733  00CAB6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7734  00CABA  0E06               	movlw	6
  7735  00CABC  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  7736  00CABE                     u4375:
  7737  00CABE  90D8               	bcf	status,0,c
  7738  00CAC0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7739  00CAC2  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  7740  00CAC4  D7FC               	goto	u4375
  7741  00CAC6  0E01               	movlw	1
  7742  00CAC8  1601               	andwf	??_Lcd_Chr_CP,f,c
  7743  00CACA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7744  00CACC  508A               	movf	3978,w,c	;volatile
  7745  00CACE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7746  00CAD0  0BFD               	andlw	-3
  7747  00CAD2  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7748  00CAD4  6E8A               	movwf	3978,c	;volatile
  7749                           
  7750                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  7751  00CAD6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7752  00CADA  0E05               	movlw	5
  7753  00CADC  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  7754  00CADE                     u4385:
  7755  00CADE  90D8               	bcf	status,0,c
  7756  00CAE0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7757  00CAE2  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  7758  00CAE4  D7FC               	goto	u4385
  7759  00CAE6  0E01               	movlw	1
  7760  00CAE8  1601               	andwf	??_Lcd_Chr_CP,f,c
  7761  00CAEA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7762  00CAEC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7763  00CAEE  508A               	movf	3978,w,c	;volatile
  7764  00CAF0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7765  00CAF2  0BFB               	andlw	-5
  7766  00CAF4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7767  00CAF6  6E8A               	movwf	3978,c	;volatile
  7768  00CAF8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7769  00CAFC  3A01               	swapf	??_Lcd_Chr_CP,f,c
  7770  00CAFE  0E0F               	movlw	15
  7771  00CB00  1601               	andwf	??_Lcd_Chr_CP,f,c
  7772  00CB02  0E01               	movlw	1
  7773  00CB04  1601               	andwf	??_Lcd_Chr_CP,f,c
  7774  00CB06  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7775  00CB08  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7776  00CB0A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7777  00CB0C  508A               	movf	3978,w,c	;volatile
  7778  00CB0E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7779  00CB10  0BF7               	andlw	-9
  7780  00CB12  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7781  00CB14  6E8A               	movwf	3978,c	;volatile
  7782                           
  7783                           ;lcd.h: 130: _delay(10);
  7784  00CB16  0E03               	movlw	3
  7785  00CB18                     u6937:
  7786  00CB18  2EE8               	decfsz	wreg,f,c
  7787  00CB1A  D7FE               	goto	u6937
  7788  00CB1C  F000               	nop	
  7789                           
  7790                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  7791  00CB1E  888A               	bsf	3978,4,c	;volatile
  7792  00CB20  0E03               	movlw	3
  7793  00CB22                     u6947:
  7794  00CB22  2EE8               	decfsz	wreg,f,c
  7795  00CB24  D7FE               	goto	u6947
  7796  00CB26  F000               	nop	
  7797  00CB28  988A               	bcf	3978,4,c	;volatile
  7798                           
  7799                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  7800  00CB2A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7801  00CB2E  90D8               	bcf	status,0,c
  7802  00CB30  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7803  00CB32  90D8               	bcf	status,0,c
  7804  00CB34  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7805  00CB36  90D8               	bcf	status,0,c
  7806  00CB38  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7807  00CB3A  0E01               	movlw	1
  7808  00CB3C  1601               	andwf	??_Lcd_Chr_CP,f,c
  7809  00CB3E  508A               	movf	3978,w,c	;volatile
  7810  00CB40  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7811  00CB42  0BFE               	andlw	-2
  7812  00CB44  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7813  00CB46  6E8A               	movwf	3978,c	;volatile
  7814  00CB48  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7815  00CB4C  90D8               	bcf	status,0,c
  7816  00CB4E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7817  00CB50  90D8               	bcf	status,0,c
  7818  00CB52  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7819  00CB54  0E01               	movlw	1
  7820  00CB56  1601               	andwf	??_Lcd_Chr_CP,f,c
  7821  00CB58  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7822  00CB5A  508A               	movf	3978,w,c	;volatile
  7823  00CB5C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7824  00CB5E  0BFD               	andlw	-3
  7825  00CB60  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7826  00CB62  6E8A               	movwf	3978,c	;volatile
  7827                           
  7828                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  7829  00CB64  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7830  00CB68  90D8               	bcf	status,0,c
  7831  00CB6A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  7832  00CB6C  0E01               	movlw	1
  7833  00CB6E  1601               	andwf	??_Lcd_Chr_CP,f,c
  7834  00CB70  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7835  00CB72  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7836  00CB74  508A               	movf	3978,w,c	;volatile
  7837  00CB76  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7838  00CB78  0BFB               	andlw	-5
  7839  00CB7A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7840  00CB7C  6E8A               	movwf	3978,c	;volatile
  7841  00CB7E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  7842  00CB82  0E01               	movlw	1
  7843  00CB84  1601               	andwf	??_Lcd_Chr_CP,f,c
  7844  00CB86  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7845  00CB88  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7846  00CB8A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  7847  00CB8C  508A               	movf	3978,w,c	;volatile
  7848  00CB8E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7849  00CB90  0BF7               	andlw	-9
  7850  00CB92  1801               	xorwf	??_Lcd_Chr_CP,w,c
  7851  00CB94  6E8A               	movwf	3978,c	;volatile
  7852                           
  7853                           ;lcd.h: 134: _delay(10);
  7854  00CB96  0E03               	movlw	3
  7855  00CB98                     u6957:
  7856  00CB98  2EE8               	decfsz	wreg,f,c
  7857  00CB9A  D7FE               	goto	u6957
  7858  00CB9C  F000               	nop	
  7859                           
  7860                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  7861  00CB9E  888A               	bsf	3978,4,c	;volatile
  7862  00CBA0  0E03               	movlw	3
  7863  00CBA2                     u6967:
  7864  00CBA2  2EE8               	decfsz	wreg,f,c
  7865  00CBA4  D7FE               	goto	u6967
  7866  00CBA6  F000               	nop	
  7867  00CBA8  988A               	bcf	3978,4,c	;volatile
  7868                           
  7869                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  7870  00CBAA  0E03               	movlw	3
  7871  00CBAC                     u6977:
  7872  00CBAC  2EE8               	decfsz	wreg,f,c
  7873  00CBAE  D7FE               	goto	u6977
  7874  00CBB0  F000               	nop	
  7875  00CBB2  0E0F               	movlw	15
  7876  00CBB4  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  7877  00CBB6  0E48               	movlw	72
  7878  00CBB8                     u6987:
  7879  00CBB8  2EE8               	decfsz	wreg,f,c
  7880  00CBBA  D7FE               	goto	u6987
  7881  00CBBC  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  7882  00CBBE  D7FC               	goto	u6987
  7883  00CBC0  0012               	return		;funcret
  7884  00CBC2                     __end_of_Lcd_Chr_CP:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           intcon	equ	0xFF2
  7893                           indf0	equ	0xFEF
  7894                           postinc0	equ	0xFEE
  7895                           fsr0h	equ	0xFEA
  7896                           fsr0l	equ	0xFE9
  7897                           wreg	equ	0xFE8
  7898                           postdec1	equ	0xFE5
  7899                           fsr1l	equ	0xFE1
  7900                           indf2	equ	0xFDF
  7901                           fsr2h	equ	0xFDA
  7902                           fsr2l	equ	0xFD9
  7903                           status	equ	0xFD8
  7904                           
  7905 ;; *************** function _Convert_diasem *****************
  7906 ;; Defined at:
  7907 ;;		line 704 in file "../main.c"
  7908 ;; Parameters:    Size  Location     Type
  7909 ;;  dia             2   82[COMRAM] int 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  buffer_dia     20   29[BANK0 ] unsigned char [20]
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  2   82[COMRAM] PTR unsigned char 
  7914 ;; Registers used:
  7915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7922 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7924 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7925 ;;Total ram usage:       24 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    4
  7928 ;; This function calls:
  7929 ;;		_sprintf
  7930 ;; This function is called by:
  7931 ;;		_V_Principal
  7932 ;;		_V_ProgReloj
  7933 ;; This function uses a non-reentrant model
  7934 ;;
  7935                           
  7936                           	psect	text21
  7937  00C85C                     __ptext21:
  7938                           	opt stack 0
  7939  00C85C                     _Convert_diasem:
  7940                           	opt stack 25
  7941                           
  7942                           ;main.c: 706: unsigned char buffer_dia[20];
  7943                           ;main.c: 708: switch (dia) {
  7944                           
  7945                           ;incstack = 0
  7946  00C85C  D069               	goto	l4742
  7947  00C85E                     l4726:
  7948                           
  7949                           ;main.c: 710: {
  7950                           ;main.c: 711: sprintf(buffer_dia, "%s", "Domingo             ");
  7951  00C85E  0EC0               	movlw	low Convert_diasem@buffer_dia
  7952  00C860  6E43               	movwf	sprintf@sp,c
  7953  00C862  0E00               	movlw	high Convert_diasem@buffer_dia
  7954  00C864  6E44               	movwf	sprintf@sp+1,c
  7955  00C866  0EF4               	movlw	low STR_82
  7956  00C868  6E45               	movwf	sprintf@f,c
  7957  00C86A  0EFF               	movlw	high STR_82
  7958  00C86C  6E46               	movwf	sprintf@f+1,c
  7959  00C86E  0E0A               	movlw	low STR_83
  7960  00C870  6E47               	movwf	?_sprintf+4,c
  7961  00C872  0EFF               	movlw	high STR_83
  7962  00C874  6E48               	movwf	?_sprintf+5,c
  7963  00C876  ECFF  F077         	call	_sprintf	;wreg free
  7964                           
  7965                           ;main.c: 712: break;
  7966  00C87A  D079               	goto	l4744
  7967  00C87C                     l4728:
  7968                           
  7969                           ;main.c: 715: {
  7970                           ;main.c: 716: sprintf(buffer_dia, "%s", "Lunes               ");
  7971  00C87C  0EC0               	movlw	low Convert_diasem@buffer_dia
  7972  00C87E  6E43               	movwf	sprintf@sp,c
  7973  00C880  0E00               	movlw	high Convert_diasem@buffer_dia
  7974  00C882  6E44               	movwf	sprintf@sp+1,c
  7975  00C884  0EF4               	movlw	low STR_82
  7976  00C886  6E45               	movwf	sprintf@f,c
  7977  00C888  0EFF               	movlw	high STR_82
  7978  00C88A  6E46               	movwf	sprintf@f+1,c
  7979  00C88C  0EB6               	movlw	low STR_85
  7980  00C88E  6E47               	movwf	?_sprintf+4,c
  7981  00C890  0EFE               	movlw	high STR_85
  7982  00C892  6E48               	movwf	?_sprintf+5,c
  7983  00C894  ECFF  F077         	call	_sprintf	;wreg free
  7984                           
  7985                           ;main.c: 717: break;
  7986  00C898  D06A               	goto	l4744
  7987  00C89A                     l4730:
  7988                           
  7989                           ;main.c: 720: {
  7990                           ;main.c: 721: sprintf(buffer_dia, "%s", "Martes              ");
  7991  00C89A  0EC0               	movlw	low Convert_diasem@buffer_dia
  7992  00C89C  6E43               	movwf	sprintf@sp,c
  7993  00C89E  0E00               	movlw	high Convert_diasem@buffer_dia
  7994  00C8A0  6E44               	movwf	sprintf@sp+1,c
  7995  00C8A2  0EF4               	movlw	low STR_82
  7996  00C8A4  6E45               	movwf	sprintf@f,c
  7997  00C8A6  0EFF               	movlw	high STR_82
  7998  00C8A8  6E46               	movwf	sprintf@f+1,c
  7999  00C8AA  0EE0               	movlw	low STR_87
  8000  00C8AC  6E47               	movwf	?_sprintf+4,c
  8001  00C8AE  0EFE               	movlw	high STR_87
  8002  00C8B0  6E48               	movwf	?_sprintf+5,c
  8003  00C8B2  ECFF  F077         	call	_sprintf	;wreg free
  8004                           
  8005                           ;main.c: 722: break;
  8006  00C8B6  D05B               	goto	l4744
  8007  00C8B8                     l4732:
  8008                           
  8009                           ;main.c: 725: {
  8010                           ;main.c: 726: sprintf(buffer_dia, "%s", "Miercoles           ");
  8011  00C8B8  0EC0               	movlw	low Convert_diasem@buffer_dia
  8012  00C8BA  6E43               	movwf	sprintf@sp,c
  8013  00C8BC  0E00               	movlw	high Convert_diasem@buffer_dia
  8014  00C8BE  6E44               	movwf	sprintf@sp+1,c
  8015  00C8C0  0EF4               	movlw	low STR_82
  8016  00C8C2  6E45               	movwf	sprintf@f,c
  8017  00C8C4  0EFF               	movlw	high STR_82
  8018  00C8C6  6E46               	movwf	sprintf@f+1,c
  8019  00C8C8  0E34               	movlw	low STR_89
  8020  00C8CA  6E47               	movwf	?_sprintf+4,c
  8021  00C8CC  0EFF               	movlw	high STR_89
  8022  00C8CE  6E48               	movwf	?_sprintf+5,c
  8023  00C8D0  ECFF  F077         	call	_sprintf	;wreg free
  8024                           
  8025                           ;main.c: 727: break;
  8026  00C8D4  D04C               	goto	l4744
  8027  00C8D6                     l4734:
  8028                           
  8029                           ;main.c: 730: {
  8030                           ;main.c: 731: sprintf(buffer_dia, "%s", "Jueves              ");
  8031  00C8D6  0EC0               	movlw	low Convert_diasem@buffer_dia
  8032  00C8D8  6E43               	movwf	sprintf@sp,c
  8033  00C8DA  0E00               	movlw	high Convert_diasem@buffer_dia
  8034  00C8DC  6E44               	movwf	sprintf@sp+1,c
  8035  00C8DE  0EF4               	movlw	low STR_82
  8036  00C8E0  6E45               	movwf	sprintf@f,c
  8037  00C8E2  0EFF               	movlw	high STR_82
  8038  00C8E4  6E46               	movwf	sprintf@f+1,c
  8039  00C8E6  0EF5               	movlw	low STR_91
  8040  00C8E8  6E47               	movwf	?_sprintf+4,c
  8041  00C8EA  0EFE               	movlw	high STR_91
  8042  00C8EC  6E48               	movwf	?_sprintf+5,c
  8043  00C8EE  ECFF  F077         	call	_sprintf	;wreg free
  8044                           
  8045                           ;main.c: 732: break;
  8046  00C8F2  D03D               	goto	l4744
  8047  00C8F4                     l4736:
  8048                           
  8049                           ;main.c: 735: {
  8050                           ;main.c: 736: sprintf(buffer_dia, "%s", "Viernes             ");
  8051  00C8F4  0EC0               	movlw	low Convert_diasem@buffer_dia
  8052  00C8F6  6E43               	movwf	sprintf@sp,c
  8053  00C8F8  0E00               	movlw	high Convert_diasem@buffer_dia
  8054  00C8FA  6E44               	movwf	sprintf@sp+1,c
  8055  00C8FC  0EF4               	movlw	low STR_82
  8056  00C8FE  6E45               	movwf	sprintf@f,c
  8057  00C900  0EFF               	movlw	high STR_82
  8058  00C902  6E46               	movwf	sprintf@f+1,c
  8059  00C904  0E1F               	movlw	low STR_93
  8060  00C906  6E47               	movwf	?_sprintf+4,c
  8061  00C908  0EFF               	movlw	high STR_93
  8062  00C90A  6E48               	movwf	?_sprintf+5,c
  8063  00C90C  ECFF  F077         	call	_sprintf	;wreg free
  8064                           
  8065                           ;main.c: 737: break;
  8066  00C910  D02E               	goto	l4744
  8067  00C912                     l4738:
  8068                           
  8069                           ;main.c: 740: {
  8070                           ;main.c: 741: sprintf(buffer_dia, "%s", "Sabado              ");
  8071  00C912  0EC0               	movlw	low Convert_diasem@buffer_dia
  8072  00C914  6E43               	movwf	sprintf@sp,c
  8073  00C916  0E00               	movlw	high Convert_diasem@buffer_dia
  8074  00C918  6E44               	movwf	sprintf@sp+1,c
  8075  00C91A  0EF4               	movlw	low STR_82
  8076  00C91C  6E45               	movwf	sprintf@f,c
  8077  00C91E  0EFF               	movlw	high STR_82
  8078  00C920  6E46               	movwf	sprintf@f+1,c
  8079  00C922  0ECB               	movlw	low STR_95
  8080  00C924  6E47               	movwf	?_sprintf+4,c
  8081  00C926  0EFE               	movlw	high STR_95
  8082  00C928  6E48               	movwf	?_sprintf+5,c
  8083  00C92A  ECFF  F077         	call	_sprintf	;wreg free
  8084                           
  8085                           ;main.c: 743: }
  8086                           ;main.c: 744: }
  8087                           
  8088                           ;main.c: 742: break;
  8089  00C92E  D01F               	goto	l4744
  8090  00C930                     l4742:
  8091  00C930  C053  F055         	movff	Convert_diasem@dia,??_Convert_diasem
  8092  00C934  C054  F056         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  8093                           
  8094                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8095                           ; Switch size 1, requested type "space"
  8096                           ; Number of cases is 1, Range of values is 0 to 0
  8097                           ; switch strategies available:
  8098                           ; Name         Instructions Cycles
  8099                           ; simple_byte            4     3 (average)
  8100                           ;	Chosen strategy is simple_byte
  8101  00C938  5056               	movf	??_Convert_diasem+1,w,c
  8102  00C93A  0A00               	xorlw	0	; case 0
  8103  00C93C  A4D8               	btfss	status,2,c
  8104  00C93E  D017               	goto	l4744
  8105                           
  8106                           ; Switch size 1, requested type "space"
  8107                           ; Number of cases is 7, Range of values is 0 to 6
  8108                           ; switch strategies available:
  8109                           ; Name         Instructions Cycles
  8110                           ; simple_byte           22    12 (average)
  8111                           ;	Chosen strategy is simple_byte
  8112  00C940  5055               	movf	??_Convert_diasem,w,c
  8113  00C942  0A00               	xorlw	0	; case 0
  8114  00C944  B4D8               	btfsc	status,2,c
  8115  00C946  D78B               	goto	l4726
  8116  00C948  0A01               	xorlw	1	; case 1
  8117  00C94A  B4D8               	btfsc	status,2,c
  8118  00C94C  D797               	goto	l4728
  8119  00C94E  0A03               	xorlw	3	; case 2
  8120  00C950  B4D8               	btfsc	status,2,c
  8121  00C952  D7A3               	goto	l4730
  8122  00C954  0A01               	xorlw	1	; case 3
  8123  00C956  B4D8               	btfsc	status,2,c
  8124  00C958  D7AF               	goto	l4732
  8125  00C95A  0A07               	xorlw	7	; case 4
  8126  00C95C  B4D8               	btfsc	status,2,c
  8127  00C95E  D7BB               	goto	l4734
  8128  00C960  0A01               	xorlw	1	; case 5
  8129  00C962  B4D8               	btfsc	status,2,c
  8130  00C964  D7C7               	goto	l4736
  8131  00C966  0A03               	xorlw	3	; case 6
  8132  00C968  B4D8               	btfsc	status,2,c
  8133  00C96A  D7D3               	goto	l4738
  8134  00C96C  D000               	goto	l4744
  8135  00C96E                     l4744:
  8136                           
  8137                           ;main.c: 745: return buffer_dia;
  8138  00C96E  0EC0               	movlw	low Convert_diasem@buffer_dia
  8139  00C970  6E53               	movwf	?_Convert_diasem,c
  8140  00C972  0E00               	movlw	high Convert_diasem@buffer_dia
  8141  00C974  6E54               	movwf	?_Convert_diasem+1,c
  8142  00C976  0012               	return	
  8143  00C978  0012               	return		;funcret
  8144  00C97A                     __end_of_Convert_diasem:
  8145                           	opt stack 0
  8146                           tblptru	equ	0xFF8
  8147                           tblptrh	equ	0xFF7
  8148                           tblptrl	equ	0xFF6
  8149                           tablat	equ	0xFF5
  8150                           prodh	equ	0xFF4
  8151                           prodl	equ	0xFF3
  8152                           intcon	equ	0xFF2
  8153                           indf0	equ	0xFEF
  8154                           postinc0	equ	0xFEE
  8155                           fsr0h	equ	0xFEA
  8156                           fsr0l	equ	0xFE9
  8157                           wreg	equ	0xFE8
  8158                           postdec1	equ	0xFE5
  8159                           fsr1l	equ	0xFE1
  8160                           indf2	equ	0xFDF
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function _sprintf *****************
  8166 ;; Defined at:
  8167 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  sp              2   66[COMRAM] PTR unsigned char 
  8170 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  8171 ;;  f               2   68[COMRAM] PTR const unsigned char 
  8172 ;;		 -> STR_94(3), STR_92(3), STR_90(3), STR_88(3), 
  8173 ;;		 -> STR_86(3), STR_84(3), STR_82(3), STR_80(5), 
  8174 ;;		 -> STR_78(6), STR_76(21), STR_71(5), STR_69(5), 
  8175 ;;		 -> STR_67(5), STR_65(5), STR_63(5), STR_61(5), 
  8176 ;;		 -> STR_59(5), STR_57(5), STR_53(5), STR_51(5), 
  8177 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(5), 
  8178 ;;		 -> STR_41(5), STR_39(5), STR_37(14), STR_36(15), 
  8179 ;;		 -> STR_34(14), STR_33(15), STR_30(5), STR_28(5), 
  8180 ;;		 -> STR_26(5), STR_24(5), STR_22(5), STR_17(5), 
  8181 ;;		 -> STR_15(5), STR_13(5), STR_11(5), STR_9(5), 
  8182 ;;		 -> STR_5(28), STR_4(28), STR_2(5), STR_1(5), 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  tmpval          4   13[BANK0 ] struct .
  8185 ;;  val             4    9[BANK0 ] unsigned long 
  8186 ;;  fval            3   21[BANK0 ] unsigned long 
  8187 ;;  prec            2   26[BANK0 ] int 
  8188 ;;  width           2   24[BANK0 ] int 
  8189 ;;  flag            2   19[BANK0 ] unsigned short 
  8190 ;;  exp             2   17[BANK0 ] int 
  8191 ;;  len             2    7[BANK0 ] unsigned int 
  8192 ;;  ap              2    5[BANK0 ] PTR void [1]
  8193 ;;		 -> ?_sprintf(2), 
  8194 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
  8195 ;;		 -> STR_96(7), sprintf@c(1), STR_95(21), STR_93(21), 
  8196 ;;		 -> STR_91(21), STR_89(21), STR_87(21), STR_85(21), 
  8197 ;;		 -> STR_83(21), 
  8198 ;;  c               1   28[BANK0 ] char 
  8199 ;;  d               1    0        unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  2   66[COMRAM] int 
  8202 ;; Registers used:
  8203 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8209 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8210 ;;      Locals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8211 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8212 ;;      Totals:        16      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8213 ;;Total ram usage:       45 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    3
  8216 ;; This function calls:
  8217 ;;		___awdiv
  8218 ;;		___ftadd
  8219 ;;		___ftge
  8220 ;;		___ftmul
  8221 ;;		___ftneg
  8222 ;;		___ftsub
  8223 ;;		___fttol
  8224 ;;		___lldiv
  8225 ;;		___llmod
  8226 ;;		___lltoft
  8227 ;;		___wmul
  8228 ;;		__div_to_l_
  8229 ;;		__tdiv_to_l_
  8230 ;;		_fround
  8231 ;;		_isdigit
  8232 ;;		_scale
  8233 ;; This function is called by:
  8234 ;;		_main
  8235 ;;		_V_Principal
  8236 ;;		_V_ProgReloj
  8237 ;;		_V_ProgRiegoIlum
  8238 ;;		_V_ProgTempAgua
  8239 ;;		_Convert_diasem
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           	psect	text22
  8244  00EFFE                     __ptext22:
  8245                           	opt stack 0
  8246  00EFFE                     _sprintf:
  8247                           	opt stack 27
  8248                           
  8249                           ;doprnt.c: 494: va_list ap;
  8250                           ;doprnt.c: 499: signed char c;
  8251                           ;doprnt.c: 501: int width;
  8252                           ;doprnt.c: 504: int prec;
  8253                           ;doprnt.c: 508: unsigned short flag;
  8254                           ;doprnt.c: 515: char d;
  8255                           ;doprnt.c: 516: double fval;
  8256                           ;doprnt.c: 517: int exp;
  8257                           ;doprnt.c: 523: union {
  8258                           ;doprnt.c: 524: unsigned long vd;
  8259                           ;doprnt.c: 525: double integ;
  8260                           ;doprnt.c: 526: } tmpval;
  8261                           ;doprnt.c: 528: unsigned long val;
  8262                           ;doprnt.c: 529: unsigned len;
  8263                           ;doprnt.c: 530: const char * cp;
  8264                           ;doprnt.c: 533: *ap = __va_start();
  8265                           
  8266                           ;incstack = 0
  8267  00EFFE  0E47               	movlw	low (?_sprintf+4)
  8268  00F000  0100               	movlb	0	; () banked
  8269  00F002  6FA8               	movwf	sprintf@ap& (0+255),b
  8270  00F004  0E00               	movlw	high (?_sprintf+4)
  8271  00F006  0100               	movlb	0	; () banked
  8272  00F008  6FA9               	movwf	(sprintf@ap+1)& (0+255),b
  8273                           
  8274                           ;doprnt.c: 536: while(c = *f++) {
  8275  00F00A  EFE1  F07E         	goto	l4410
  8276  00F00E                     l4042:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;doprnt.c: 538: if(c != '%')
  8280  00F00E  0E25               	movlw	37
  8281  00F010  0100               	movlb	0	; () banked
  8282  00F012  19BF               	xorwf	sprintf@c& (0+255),w,b
  8283  00F014  B4D8               	btfsc	status,2,c
  8284  00F016  D00A               	goto	l4048
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;doprnt.c: 540: {
  8288                           ;doprnt.c: 541: ((*sp++ = (c)));
  8289  00F018  C043  FFD9         	movff	sprintf@sp,fsr2l
  8290  00F01C  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8291  00F020  C0BF  FFDF         	movff	sprintf@c,indf2
  8292                           
  8293                           ; BSR set to: 0
  8294  00F024  4A43               	infsnz	sprintf@sp,f,c
  8295  00F026  2A44               	incf	sprintf@sp+1,f,c
  8296                           
  8297                           ;doprnt.c: 542: continue;
  8298  00F028  EFE1  F07E         	goto	l4410
  8299  00F02C                     l4048:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;doprnt.c: 543: }
  8303                           ;doprnt.c: 546: width = 0;
  8304  00F02C  0E00               	movlw	0
  8305  00F02E  0100               	movlb	0	; () banked
  8306  00F030  6FBC               	movwf	(sprintf@width+1)& (0+255),b
  8307  00F032  0E00               	movlw	0
  8308  00F034  6FBB               	movwf	sprintf@width& (0+255),b
  8309                           
  8310                           ;doprnt.c: 548: flag = 0;
  8311  00F036  0E00               	movlw	0
  8312  00F038  0100               	movlb	0	; () banked
  8313  00F03A  6FB7               	movwf	(sprintf@flag+1)& (0+255),b
  8314  00F03C  0E00               	movlw	0
  8315  00F03E  6FB6               	movwf	sprintf@flag& (0+255),b
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;doprnt.c: 551: switch(*f) {
  8319                           
  8320                           ;doprnt.c: 550: for(;;) {
  8321  00F040  D006               	goto	l4054
  8322  00F042                     l4050:
  8323                           
  8324                           ;doprnt.c: 580: flag |= 0x04;
  8325  00F042  0100               	movlb	0	; () banked
  8326  00F044  85B6               	bsf	sprintf@flag& (0+255),2,b
  8327                           
  8328                           ;doprnt.c: 581: f++;
  8329  00F046  4A45               	infsnz	sprintf@f,f,c
  8330  00F048  2A46               	incf	sprintf@f+1,f,c
  8331                           
  8332                           ;doprnt.c: 582: continue;
  8333  00F04A  D001               	goto	l4054
  8334                           
  8335                           ; BSR set to: 0
  8336                           ;doprnt.c: 584: }
  8337  00F04C  D00B               	goto	l4056
  8338  00F04E                     l4054:
  8339  00F04E  C045  FFF6         	movff	sprintf@f,tblptrl
  8340  00F052  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8341  00F056                     	if	0	;tblptru may be non-zero
  8342  00F056                     	endif
  8343  00F056                     	if	0	;tblptru may be non-zero
  8344  00F056                     	endif
  8345  00F056  0008               	tblrd		*
  8346  00F058  50F5               	movf	tablat,w,c
  8347                           
  8348                           ; Switch size 1, requested type "space"
  8349                           ; Number of cases is 1, Range of values is 48 to 48
  8350                           ; switch strategies available:
  8351                           ; Name         Instructions Cycles
  8352                           ; simple_byte            4     3 (average)
  8353                           ;	Chosen strategy is simple_byte
  8354  00F05A  0A30               	xorlw	48	; case 48
  8355  00F05C  B4D8               	btfsc	status,2,c
  8356  00F05E  D7F1               	goto	l4050
  8357                           
  8358                           ;doprnt.c: 585: break;
  8359  00F060  D001               	goto	l4056
  8360                           
  8361                           ;doprnt.c: 586: }
  8362  00F062  D7F5               	goto	l4054
  8363  00F064                     l4056:
  8364                           
  8365                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8366  00F064  C045  FFF6         	movff	sprintf@f,tblptrl
  8367  00F068  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8368  00F06C                     	if	0	;tblptru may be non-zero
  8369  00F06C                     	endif
  8370  00F06C                     	if	0	;tblptru may be non-zero
  8371  00F06C                     	endif
  8372  00F06C  0008               	tblrd		*
  8373  00F06E  50F5               	movf	tablat,w,c
  8374  00F070  EC4B  F05D         	call	_isdigit
  8375  00F074  A0D8               	btfss	status,0,c
  8376  00F076  D038               	goto	l4068
  8377                           
  8378                           ;doprnt.c: 598: width = 0;
  8379  00F078  0E00               	movlw	0
  8380  00F07A  0100               	movlb	0	; () banked
  8381  00F07C  6FBC               	movwf	(sprintf@width+1)& (0+255),b
  8382  00F07E  0E00               	movlw	0
  8383  00F080  6FBB               	movwf	sprintf@width& (0+255),b
  8384  00F082  D000               	goto	l4060
  8385  00F084                     l4060:
  8386                           
  8387                           ;doprnt.c: 600: width *= 10;
  8388  00F084  C0BB  F00F         	movff	sprintf@width,___wmul@multiplier
  8389  00F088  C0BC  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  8390  00F08C  0E00               	movlw	0
  8391  00F08E  6E12               	movwf	___wmul@multiplicand+1,c
  8392  00F090  0E0A               	movlw	10
  8393  00F092  6E11               	movwf	___wmul@multiplicand,c
  8394  00F094  EC81  F05D         	call	___wmul	;wreg free
  8395  00F098  C00F  F0BB         	movff	?___wmul,sprintf@width
  8396  00F09C  C010  F0BC         	movff	?___wmul+1,sprintf@width+1
  8397                           
  8398                           ;doprnt.c: 601: width += *f++ - '0';
  8399  00F0A0  0ED0               	movlw	208
  8400  00F0A2  6E4D               	movwf	??_sprintf& (0+255),c
  8401  00F0A4  0EFF               	movlw	255
  8402  00F0A6  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  8403  00F0A8  C045  FFF6         	movff	sprintf@f,tblptrl
  8404  00F0AC  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8405  00F0B0                     	if	0	;tblptru may be non-zero
  8406  00F0B0                     	endif
  8407  00F0B0                     	if	0	;tblptru may be non-zero
  8408  00F0B0                     	endif
  8409  00F0B0  0008               	tblrd		*
  8410  00F0B2  50F5               	movf	tablat,w,c
  8411  00F0B4  6E4F               	movwf	(??_sprintf+2)& (0+255),c
  8412  00F0B6  6A50               	clrf	(??_sprintf+3)& (0+255),c
  8413  00F0B8  504D               	movf	??_sprintf,w,c
  8414  00F0BA  264F               	addwf	??_sprintf+2,f,c
  8415  00F0BC  504E               	movf	??_sprintf+1,w,c
  8416  00F0BE  2250               	addwfc	??_sprintf+3,f,c
  8417  00F0C0  504F               	movf	??_sprintf+2,w,c
  8418  00F0C2  0100               	movlb	0	; () banked
  8419  00F0C4  27BB               	addwf	sprintf@width& (0+255),f,b
  8420  00F0C6  5050               	movf	??_sprintf+3,w,c
  8421  00F0C8  0100               	movlb	0	; () banked
  8422  00F0CA  23BC               	addwfc	(sprintf@width+1)& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425  00F0CC  4A45               	infsnz	sprintf@f,f,c
  8426  00F0CE  2A46               	incf	sprintf@f+1,f,c
  8427                           
  8428                           ; BSR set to: 0
  8429                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8430  00F0D0  C045  FFF6         	movff	sprintf@f,tblptrl
  8431  00F0D4  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8432  00F0D8                     	if	0	;tblptru may be non-zero
  8433  00F0D8                     	endif
  8434  00F0D8                     	if	0	;tblptru may be non-zero
  8435  00F0D8                     	endif
  8436  00F0D8  0008               	tblrd		*
  8437  00F0DA  50F5               	movf	tablat,w,c
  8438  00F0DC  EC4B  F05D         	call	_isdigit
  8439  00F0E0  A0D8               	btfss	status,0,c
  8440  00F0E2  D002               	goto	l4068
  8441  00F0E4  D7CF               	goto	l4060
  8442  00F0E6  D000               	goto	l4068
  8443  00F0E8                     l4068:
  8444                           
  8445                           ;doprnt.c: 608: }
  8446                           ;doprnt.c: 611: if(*f == '.') {
  8447  00F0E8  C045  FFF6         	movff	sprintf@f,tblptrl
  8448  00F0EC  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8449  00F0F0                     	if	0	;tblptru may be non-zero
  8450  00F0F0                     	endif
  8451  00F0F0                     	if	0	;tblptru may be non-zero
  8452  00F0F0                     	endif
  8453  00F0F0  0008               	tblrd		*
  8454  00F0F2  50F5               	movf	tablat,w,c
  8455  00F0F4  0A2E               	xorlw	46
  8456  00F0F6  A4D8               	btfss	status,2,c
  8457  00F0F8  D034               	goto	l4080
  8458                           
  8459                           ;doprnt.c: 612: flag |= 0x4000;
  8460  00F0FA  0100               	movlb	0	; () banked
  8461  00F0FC  8DB7               	bsf	(sprintf@flag+1)& (0+255),6,b
  8462                           
  8463                           ;doprnt.c: 613: f++;
  8464  00F0FE  4A45               	infsnz	sprintf@f,f,c
  8465  00F100  2A46               	incf	sprintf@f+1,f,c
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;doprnt.c: 620: {
  8469                           ;doprnt.c: 621: prec = 0;
  8470  00F102  0E00               	movlw	0
  8471  00F104  0100               	movlb	0	; () banked
  8472  00F106  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  8473  00F108  0E00               	movlw	0
  8474  00F10A  6FBD               	movwf	sprintf@prec& (0+255),b
  8475                           
  8476                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8477  00F10C  D01E               	goto	l4078
  8478  00F10E                     l4074:
  8479                           
  8480                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8481  00F10E  C0BD  F00F         	movff	sprintf@prec,___wmul@multiplier
  8482  00F112  C0BE  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  8483  00F116  0E00               	movlw	0
  8484  00F118  6E12               	movwf	___wmul@multiplicand+1,c
  8485  00F11A  0E0A               	movlw	10
  8486  00F11C  6E11               	movwf	___wmul@multiplicand,c
  8487  00F11E  EC81  F05D         	call	___wmul	;wreg free
  8488  00F122  C045  FFF6         	movff	sprintf@f,tblptrl
  8489  00F126  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8490  00F12A                     	if	0	;tblptru may be non-zero
  8491  00F12A                     	endif
  8492  00F12A                     	if	0	;tblptru may be non-zero
  8493  00F12A                     	endif
  8494  00F12A  0008               	tblrd		*
  8495  00F12C  50F5               	movf	tablat,w,c
  8496  00F12E  260F               	addwf	?___wmul,f,c
  8497  00F130  0E00               	movlw	0
  8498  00F132  2210               	addwfc	?___wmul+1,f,c
  8499  00F134  0ED0               	movlw	208
  8500  00F136  240F               	addwf	?___wmul,w,c
  8501  00F138  0100               	movlb	0	; () banked
  8502  00F13A  6FBD               	movwf	sprintf@prec& (0+255),b
  8503  00F13C  0EFF               	movlw	255
  8504  00F13E  2010               	addwfc	?___wmul+1,w,c
  8505  00F140  0100               	movlb	0	; () banked
  8506  00F142  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  8507                           
  8508                           ; BSR set to: 0
  8509  00F144  4A45               	infsnz	sprintf@f,f,c
  8510  00F146  2A46               	incf	sprintf@f+1,f,c
  8511  00F148  D000               	goto	l4078
  8512  00F14A                     l4078:
  8513                           
  8514                           ; BSR set to: 0
  8515  00F14A  C045  FFF6         	movff	sprintf@f,tblptrl
  8516  00F14E  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8517  00F152                     	if	0	;tblptru may be non-zero
  8518  00F152                     	endif
  8519  00F152                     	if	0	;tblptru may be non-zero
  8520  00F152                     	endif
  8521  00F152  0008               	tblrd		*
  8522  00F154  50F5               	movf	tablat,w,c
  8523  00F156  EC4B  F05D         	call	_isdigit
  8524  00F15A  A0D8               	btfss	status,0,c
  8525  00F15C  D0DD               	goto	l4138
  8526  00F15E  D7D7               	goto	l4074
  8527                           
  8528                           ;doprnt.c: 624: }
  8529                           ;doprnt.c: 625: } else {
  8530  00F160  D0DB               	goto	l4138
  8531  00F162                     l4080:
  8532                           
  8533                           ;doprnt.c: 626: prec = 0;
  8534  00F162  0E00               	movlw	0
  8535  00F164  0100               	movlb	0	; () banked
  8536  00F166  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  8537  00F168  0E00               	movlw	0
  8538  00F16A  6FBD               	movwf	sprintf@prec& (0+255),b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;doprnt.c: 628: flag |= 0x1000;
  8542  00F16C  0100               	movlb	0	; () banked
  8543  00F16E  89B7               	bsf	(sprintf@flag+1)& (0+255),4,b
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;doprnt.c: 630: }
  8547                           ;doprnt.c: 635: switch(c = *f++) {
  8548  00F170  D0D3               	goto	l4138
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;doprnt.c: 638: goto alldone;
  8552                           
  8553                           ;doprnt.c: 637: case 0:
  8554  00F172  EFF1  F07E         	goto	l4412
  8555  00F176                     l4084:
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;doprnt.c: 663: flag |= 0x400;
  8559  00F176  0100               	movlb	0	; () banked
  8560  00F178  85B7               	bsf	(sprintf@flag+1)& (0+255),2,b
  8561                           
  8562                           ;doprnt.c: 664: break;
  8563  00F17A  D0EA               	goto	l4140
  8564  00F17C                     l4086:
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  8568  00F17C  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  8569  00F180  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  8570  00F184  CFDE F0A6          	movff	postinc2,sprintf@cp
  8571  00F188  CFDD F0A7          	movff	postdec2,sprintf@cp+1
  8572                           
  8573                           ; BSR set to: 0
  8574  00F18C  0E02               	movlw	2
  8575  00F18E  0100               	movlb	0	; () banked
  8576  00F190  27A8               	addwf	sprintf@ap& (0+255),f,b
  8577  00F192  0E00               	movlw	0
  8578  00F194  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;doprnt.c: 740: if(!cp)
  8582  00F196  0100               	movlb	0	; () banked
  8583  00F198  51A6               	movf	sprintf@cp& (0+255),w,b
  8584  00F19A  0100               	movlb	0	; () banked
  8585  00F19C  11A7               	iorwf	(sprintf@cp+1)& (0+255),w,b
  8586  00F19E  A4D8               	btfss	status,2,c
  8587  00F1A0  D007               	goto	l4094
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;doprnt.c: 741: cp = "(null)";
  8591  00F1A2  0ED7               	movlw	low STR_96
  8592  00F1A4  0100               	movlb	0	; () banked
  8593  00F1A6  6FA6               	movwf	sprintf@cp& (0+255),b
  8594  00F1A8  0EFF               	movlw	high STR_96
  8595  00F1AA  0100               	movlb	0	; () banked
  8596  00F1AC  6FA7               	movwf	(sprintf@cp+1)& (0+255),b
  8597  00F1AE  D000               	goto	l4094
  8598  00F1B0                     l4094:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;doprnt.c: 745: len = 0;
  8602  00F1B0  0E00               	movlw	0
  8603  00F1B2  0100               	movlb	0	; () banked
  8604  00F1B4  6FAB               	movwf	(sprintf@len+1)& (0+255),b
  8605  00F1B6  0E00               	movlw	0
  8606  00F1B8  6FAA               	movwf	sprintf@len& (0+255),b
  8607                           
  8608                           ;doprnt.c: 746: while(cp[len])
  8609  00F1BA  D004               	goto	l4098
  8610  00F1BC                     l4096:
  8611                           
  8612                           ;doprnt.c: 747: len++;
  8613  00F1BC  0100               	movlb	0	; () banked
  8614  00F1BE  4BAA               	infsnz	sprintf@len& (0+255),f,b
  8615  00F1C0  2BAB               	incf	(sprintf@len+1)& (0+255),f,b
  8616  00F1C2  D000               	goto	l4098
  8617  00F1C4                     l4098:
  8618                           
  8619                           ; BSR set to: 0
  8620  00F1C4  0100               	movlb	0	; () banked
  8621  00F1C6  51AA               	movf	sprintf@len& (0+255),w,b
  8622  00F1C8  0100               	movlb	0	; () banked
  8623  00F1CA  25A6               	addwf	sprintf@cp& (0+255),w,b
  8624  00F1CC  6E4D               	movwf	??_sprintf& (0+255),c
  8625  00F1CE  0100               	movlb	0	; () banked
  8626  00F1D0  51AB               	movf	(sprintf@len+1)& (0+255),w,b
  8627  00F1D2  0100               	movlb	0	; () banked
  8628  00F1D4  21A7               	addwfc	(sprintf@cp+1)& (0+255),w,b
  8629  00F1D6  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  8630  00F1D8  C04D  FFF6         	movff	??_sprintf,tblptrl
  8631  00F1DC  C04E  FFF7         	movff	??_sprintf+1,tblptrh
  8632  00F1E0  6AF8               	clrf	tblptru,c
  8633  00F1E2  0E0E               	movlw	(high __ramtop+-1)
  8634  00F1E4  64F7               	cpfsgt	tblptrh,c
  8635  00F1E6  D003               	bra	u4457
  8636  00F1E8  0008               	tblrd		*
  8637  00F1EA  50F5               	movf	tablat,w,c
  8638  00F1EC  D005               	bra	u4450
  8639  00F1EE                     u4457:
  8640  00F1EE  CFF6 FFE9          	movff	tblptrl,fsr0l
  8641  00F1F2  CFF7 FFEA          	movff	tblptrh,fsr0h
  8642  00F1F6  50EF               	movf	indf0,w,c
  8643  00F1F8                     u4450:
  8644  00F1F8  0900               	iorlw	0
  8645  00F1FA  B4D8               	btfsc	status,2,c
  8646  00F1FC  D002               	goto	l4100
  8647  00F1FE  D7DE               	goto	l4096
  8648  00F200  D000               	goto	l4100
  8649  00F202                     l4100:
  8650                           
  8651                           ;doprnt.c: 753: if(prec && prec < len)
  8652  00F202  0100               	movlb	0	; () banked
  8653  00F204  51BD               	movf	sprintf@prec& (0+255),w,b
  8654  00F206  0100               	movlb	0	; () banked
  8655  00F208  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  8656  00F20A  B4D8               	btfsc	status,2,c
  8657  00F20C  D00F               	goto	l4106
  8658                           
  8659                           ; BSR set to: 0
  8660  00F20E  0100               	movlb	0	; () banked
  8661  00F210  51AA               	movf	sprintf@len& (0+255),w,b
  8662  00F212  0100               	movlb	0	; () banked
  8663  00F214  5DBD               	subwf	sprintf@prec& (0+255),w,b
  8664  00F216  0100               	movlb	0	; () banked
  8665  00F218  51AB               	movf	(sprintf@len+1)& (0+255),w,b
  8666  00F21A  0100               	movlb	0	; () banked
  8667  00F21C  59BE               	subwfb	(sprintf@prec+1)& (0+255),w,b
  8668  00F21E  B0D8               	btfsc	status,0,c
  8669  00F220  D005               	goto	l4106
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;doprnt.c: 754: len = prec;
  8673  00F222  C0BD  F0AA         	movff	sprintf@prec,sprintf@len
  8674  00F226  C0BE  F0AB         	movff	sprintf@prec+1,sprintf@len+1
  8675  00F22A  D000               	goto	l4106
  8676  00F22C                     l4106:
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;doprnt.c: 757: if(width > len)
  8680  00F22C  0100               	movlb	0	; () banked
  8681  00F22E  51BB               	movf	sprintf@width& (0+255),w,b
  8682  00F230  0100               	movlb	0	; () banked
  8683  00F232  5DAA               	subwf	sprintf@len& (0+255),w,b
  8684  00F234  0100               	movlb	0	; () banked
  8685  00F236  51BC               	movf	(sprintf@width+1)& (0+255),w,b
  8686  00F238  0100               	movlb	0	; () banked
  8687  00F23A  59AB               	subwfb	(sprintf@len+1)& (0+255),w,b
  8688  00F23C  B0D8               	btfsc	status,0,c
  8689  00F23E  D009               	goto	l4110
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;doprnt.c: 758: width -= len;
  8693  00F240  0100               	movlb	0	; () banked
  8694  00F242  51AA               	movf	sprintf@len& (0+255),w,b
  8695  00F244  0100               	movlb	0	; () banked
  8696  00F246  5FBB               	subwf	sprintf@width& (0+255),f,b
  8697  00F248  0100               	movlb	0	; () banked
  8698  00F24A  51AB               	movf	(sprintf@len+1)& (0+255),w,b
  8699  00F24C  0100               	movlb	0	; () banked
  8700  00F24E  5BBC               	subwfb	(sprintf@width+1)& (0+255),f,b
  8701  00F250  D00F               	goto	l4116
  8702  00F252                     l4110:
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;doprnt.c: 759: else
  8706                           ;doprnt.c: 760: width = 0;
  8707  00F252  0E00               	movlw	0
  8708  00F254  0100               	movlb	0	; () banked
  8709  00F256  6FBC               	movwf	(sprintf@width+1)& (0+255),b
  8710  00F258  0E00               	movlw	0
  8711  00F25A  6FBB               	movwf	sprintf@width& (0+255),b
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;doprnt.c: 764: while(width--)
  8715  00F25C  D009               	goto	l4116
  8716  00F25E                     l4112:
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;doprnt.c: 765: ((*sp++ = (' ')));
  8720  00F25E  C043  FFD9         	movff	sprintf@sp,fsr2l
  8721  00F262  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8722  00F266  0E20               	movlw	32
  8723  00F268  6EDF               	movwf	indf2,c
  8724                           
  8725                           ; BSR set to: 0
  8726  00F26A  4A43               	infsnz	sprintf@sp,f,c
  8727  00F26C  2A44               	incf	sprintf@sp+1,f,c
  8728  00F26E  D000               	goto	l4116
  8729  00F270                     l4116:
  8730                           
  8731                           ; BSR set to: 0
  8732  00F270  0100               	movlb	0	; () banked
  8733  00F272  07BB               	decf	sprintf@width& (0+255),f,b
  8734  00F274  A0D8               	btfss	status,0,c
  8735  00F276  07BC               	decf	(sprintf@width+1)& (0+255),f,b
  8736  00F278  0100               	movlb	0	; () banked
  8737  00F27A  29BB               	incf	sprintf@width& (0+255),w,b
  8738  00F27C  E1F0               	bnz	l4112
  8739  00F27E  0100               	movlb	0	; () banked
  8740  00F280  29BC               	incf	(sprintf@width+1)& (0+255),w,b
  8741  00F282  B4D8               	btfsc	status,2,c
  8742  00F284  D01D               	goto	l4124
  8743  00F286  D7EB               	goto	l4112
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;doprnt.c: 767: while(len--)
  8747  00F288  D01B               	goto	l4124
  8748  00F28A                     l4118:
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  8752  00F28A  C0A6  FFF6         	movff	sprintf@cp,tblptrl
  8753  00F28E  C0A7  FFF7         	movff	sprintf@cp+1,tblptrh
  8754  00F292  6AF8               	clrf	tblptru,c
  8755  00F294  C043  FFD9         	movff	sprintf@sp,fsr2l
  8756  00F298  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  8757  00F29C  0E0E               	movlw	(high __ramtop+-1)
  8758  00F29E  64F7               	cpfsgt	tblptrh,c
  8759  00F2A0  D003               	bra	u4517
  8760  00F2A2  0008               	tblrd		*
  8761  00F2A4  50F5               	movf	tablat,w,c
  8762  00F2A6  D005               	bra	u4510
  8763  00F2A8                     u4517:
  8764  00F2A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  8765  00F2AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  8766  00F2B0  50EF               	movf	indf0,w,c
  8767  00F2B2                     u4510:
  8768  00F2B2  6EDF               	movwf	indf2,c
  8769  00F2B4  0100               	movlb	0	; () banked
  8770  00F2B6  4BA6               	infsnz	sprintf@cp& (0+255),f,b
  8771  00F2B8  2BA7               	incf	(sprintf@cp+1)& (0+255),f,b
  8772                           
  8773                           ; BSR set to: 0
  8774  00F2BA  4A43               	infsnz	sprintf@sp,f,c
  8775  00F2BC  2A44               	incf	sprintf@sp+1,f,c
  8776  00F2BE  D000               	goto	l4124
  8777  00F2C0                     l4124:
  8778                           
  8779                           ; BSR set to: 0
  8780  00F2C0  0100               	movlb	0	; () banked
  8781  00F2C2  07AA               	decf	sprintf@len& (0+255),f,b
  8782  00F2C4  A0D8               	btfss	status,0,c
  8783  00F2C6  07AB               	decf	(sprintf@len+1)& (0+255),f,b
  8784  00F2C8  0100               	movlb	0	; () banked
  8785  00F2CA  29AA               	incf	sprintf@len& (0+255),w,b
  8786  00F2CC  E1DE               	bnz	l4118
  8787  00F2CE  0100               	movlb	0	; () banked
  8788  00F2D0  29AB               	incf	(sprintf@len+1)& (0+255),w,b
  8789  00F2D2  B4D8               	btfsc	status,2,c
  8790  00F2D4  EFE1  F07E         	goto	l4410
  8791  00F2D8  D7D8               	goto	l4118
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;doprnt.c: 774: continue;
  8795  00F2DA  EFE1  F07E         	goto	l4410
  8796  00F2DE                     l4126:
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8800  00F2DE  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  8801  00F2E2  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  8802  00F2E6  50DF               	movf	indf2,w,c
  8803  00F2E8  0100               	movlb	0	; () banked
  8804  00F2EA  6FBF               	movwf	sprintf@c& (0+255),b
  8805                           
  8806                           ; BSR set to: 0
  8807  00F2EC  0E02               	movlw	2
  8808  00F2EE  0100               	movlb	0	; () banked
  8809  00F2F0  27A8               	addwf	sprintf@ap& (0+255),f,b
  8810  00F2F2  0E00               	movlw	0
  8811  00F2F4  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8812  00F2F6  D000               	goto	l4130
  8813  00F2F8                     l4130:
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;doprnt.c: 805: cp = (char *)&c;
  8817  00F2F8  0EBF               	movlw	low sprintf@c
  8818  00F2FA  0100               	movlb	0	; () banked
  8819  00F2FC  6FA6               	movwf	sprintf@cp& (0+255),b
  8820  00F2FE  0E00               	movlw	high sprintf@c
  8821  00F300  0100               	movlb	0	; () banked
  8822  00F302  6FA7               	movwf	(sprintf@cp+1)& (0+255),b
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;doprnt.c: 806: len = 1;
  8826  00F304  0E00               	movlw	0
  8827  00F306  0100               	movlb	0	; () banked
  8828  00F308  6FAB               	movwf	(sprintf@len+1)& (0+255),b
  8829  00F30A  0E01               	movlw	1
  8830  00F30C  6FAA               	movwf	sprintf@len& (0+255),b
  8831                           
  8832                           ;doprnt.c: 807: goto dostring;
  8833  00F30E  D779               	goto	l4100
  8834  00F310                     l4134:
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;doprnt.c: 818: flag |= 0xC0;
  8838  00F310  0EC0               	movlw	192
  8839  00F312  0100               	movlb	0	; () banked
  8840  00F314  13B6               	iorwf	sprintf@flag& (0+255),f,b
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;doprnt.c: 822: }
  8844                           
  8845                           ;doprnt.c: 819: break;
  8846  00F316  D01C               	goto	l4140
  8847  00F318                     l4138:
  8848  00F318  C045  FFF6         	movff	sprintf@f,tblptrl
  8849  00F31C  C046  FFF7         	movff	sprintf@f+1,tblptrh
  8850  00F320  4A45               	infsnz	sprintf@f,f,c
  8851  00F322  2A46               	incf	sprintf@f+1,f,c
  8852  00F324                     	if	0	;tblptru may be non-zero
  8853  00F324                     	endif
  8854  00F324                     	if	0	;tblptru may be non-zero
  8855  00F324                     	endif
  8856  00F324  0008               	tblrd		*
  8857  00F326  CFF5 F0BF          	movff	tablat,sprintf@c
  8858  00F32A  0100               	movlb	0	; () banked
  8859  00F32C  51BF               	movf	sprintf@c& (0+255),w,b
  8860                           
  8861                           ; Switch size 1, requested type "space"
  8862                           ; Number of cases is 5, Range of values is 0 to 117
  8863                           ; switch strategies available:
  8864                           ; Name         Instructions Cycles
  8865                           ; simple_byte           16     9 (average)
  8866                           ;	Chosen strategy is simple_byte
  8867  00F32E  0A00               	xorlw	0	; case 0
  8868  00F330  B4D8               	btfsc	status,2,c
  8869  00F332  EFF1  F07E         	goto	l4412
  8870  00F336  0A63               	xorlw	99	; case 99
  8871  00F338  B4D8               	btfsc	status,2,c
  8872  00F33A  D7D1               	goto	l4126
  8873  00F33C  0A05               	xorlw	5	; case 102
  8874  00F33E  B4D8               	btfsc	status,2,c
  8875  00F340  D71A               	goto	l4084
  8876  00F342  0A15               	xorlw	21	; case 115
  8877  00F344  B4D8               	btfsc	status,2,c
  8878  00F346  D71A               	goto	l4086
  8879  00F348  0A06               	xorlw	6	; case 117
  8880  00F34A  B4D8               	btfsc	status,2,c
  8881  00F34C  D7E1               	goto	l4134
  8882  00F34E  D7D4               	goto	l4130
  8883  00F350                     l4140:
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;doprnt.c: 825: if(flag & (0x700)) {
  8887  00F350  0E07               	movlw	7
  8888  00F352  0100               	movlb	0	; () banked
  8889  00F354  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
  8890  00F356  B4D8               	btfsc	status,2,c
  8891  00F358  D3B0               	goto	l4320
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;doprnt.c: 827: if(flag & 0x1000)
  8895  00F35A  0100               	movlb	0	; () banked
  8896  00F35C  A9B7               	btfss	(sprintf@flag+1)& (0+255),4,b
  8897  00F35E  D006               	goto	l4146
  8898                           
  8899                           ; BSR set to: 0
  8900                           ;doprnt.c: 829: prec = 6;
  8901  00F360  0E00               	movlw	0
  8902  00F362  0100               	movlb	0	; () banked
  8903  00F364  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  8904  00F366  0E06               	movlw	6
  8905  00F368  6FBD               	movwf	sprintf@prec& (0+255),b
  8906  00F36A  D000               	goto	l4146
  8907  00F36C                     l4146:
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8911  00F36C  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  8912  00F370  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  8913  00F374  CFDE F0B8          	movff	postinc2,sprintf@fval
  8914  00F378  CFDE F0B9          	movff	postinc2,sprintf@fval+1
  8915  00F37C  CFDD F0BA          	movff	postdec2,sprintf@fval+2
  8916                           
  8917                           ; BSR set to: 0
  8918  00F380  0E03               	movlw	3
  8919  00F382  0100               	movlb	0	; () banked
  8920  00F384  27A8               	addwf	sprintf@ap& (0+255),f,b
  8921  00F386  0E00               	movlw	0
  8922  00F388  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;doprnt.c: 831: if(fval < 0.0) {
  8926  00F38A  0100               	movlb	0	; () banked
  8927  00F38C  AFBA               	btfss	(sprintf@fval+2)& (0+255),7,b
  8928  00F38E  D012               	goto	l4156
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;doprnt.c: 832: fval = -fval;
  8932  00F390  C0B8  F001         	movff	sprintf@fval,___ftneg@f1
  8933  00F394  C0B9  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  8934  00F398  C0BA  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  8935  00F39C  EC5C  F05D         	call	___ftneg	;wreg free
  8936  00F3A0  C001  F0B8         	movff	?___ftneg,sprintf@fval
  8937  00F3A4  C002  F0B9         	movff	?___ftneg+1,sprintf@fval+1
  8938  00F3A8  C003  F0BA         	movff	?___ftneg+2,sprintf@fval+2
  8939                           
  8940                           ;doprnt.c: 833: flag |= 0x03;
  8941  00F3AC  0E03               	movlw	3
  8942  00F3AE  0100               	movlb	0	; () banked
  8943  00F3B0  13B6               	iorwf	sprintf@flag& (0+255),f,b
  8944  00F3B2  D000               	goto	l4156
  8945  00F3B4                     l4156:
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;doprnt.c: 834: }
  8949                           ;doprnt.c: 835: exp = 0;
  8950  00F3B4  0E00               	movlw	0
  8951  00F3B6  0100               	movlb	0	; () banked
  8952  00F3B8  6FB5               	movwf	(sprintf@exp+1)& (0+255),b
  8953  00F3BA  0E00               	movlw	0
  8954  00F3BC  6FB4               	movwf	sprintf@exp& (0+255),b
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;doprnt.c: 836: if( fval!=0) {
  8958  00F3BE  0100               	movlb	0	; () banked
  8959  00F3C0  51B8               	movf	sprintf@fval& (0+255),w,b
  8960  00F3C2  0100               	movlb	0	; () banked
  8961  00F3C4  11B9               	iorwf	(sprintf@fval+1)& (0+255),w,b
  8962  00F3C6  0100               	movlb	0	; () banked
  8963  00F3C8  11BA               	iorwf	(sprintf@fval+2)& (0+255),w,b
  8964  00F3CA  B4D8               	btfsc	status,2,c
  8965  00F3CC  D08D               	goto	l4184
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  8969  00F3CE  0E82               	movlw	130
  8970  00F3D0  6E4D               	movwf	??_sprintf& (0+255),c
  8971  00F3D2  0EFF               	movlw	255
  8972  00F3D4  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  8973  00F3D6  C0B8  F04F         	movff	sprintf@fval,??_sprintf+2
  8974  00F3DA  C0B9  F050         	movff	sprintf@fval+1,??_sprintf+3
  8975  00F3DE  C0BA  F051         	movff	sprintf@fval+2,??_sprintf+4
  8976  00F3E2  C0BB  F052         	movff	sprintf@fval+3,??_sprintf+5
  8977  00F3E6  0E10               	movlw	16
  8978  00F3E8  D005               	goto	u4570
  8979  00F3EA                     u4575:
  8980  00F3EA  90D8               	bcf	status,0,c
  8981  00F3EC  3252               	rrcf	??_sprintf+5,f,c
  8982  00F3EE  3251               	rrcf	??_sprintf+4,f,c
  8983  00F3F0  3250               	rrcf	??_sprintf+3,f,c
  8984  00F3F2  324F               	rrcf	??_sprintf+2,f,c
  8985  00F3F4                     u4570:
  8986  00F3F4  2EE8               	decfsz	wreg,f,c
  8987  00F3F6  D7F9               	goto	u4575
  8988  00F3F8  504F               	movf	??_sprintf+2,w,c
  8989  00F3FA  244D               	addwf	??_sprintf,w,c
  8990  00F3FC  0100               	movlb	0	; () banked
  8991  00F3FE  6FB4               	movwf	sprintf@exp& (0+255),b
  8992  00F400  0E00               	movlw	0
  8993  00F402  204E               	addwfc	??_sprintf+1,w,c
  8994  00F404  0100               	movlb	0	; () banked
  8995  00F406  6FB5               	movwf	(sprintf@exp+1)& (0+255),b
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;doprnt.c: 838: exp--;
  8999  00F408  0100               	movlb	0	; () banked
  9000  00F40A  07B4               	decf	sprintf@exp& (0+255),f,b
  9001  00F40C  A0D8               	btfss	status,0,c
  9002  00F40E  07B5               	decf	(sprintf@exp+1)& (0+255),f,b
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;doprnt.c: 839: exp *= 3;
  9006  00F410  C0B4  F00F         	movff	sprintf@exp,___wmul@multiplier
  9007  00F414  C0B5  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  9008  00F418  0E00               	movlw	0
  9009  00F41A  6E12               	movwf	___wmul@multiplicand+1,c
  9010  00F41C  0E03               	movlw	3
  9011  00F41E  6E11               	movwf	___wmul@multiplicand,c
  9012  00F420  EC81  F05D         	call	___wmul	;wreg free
  9013  00F424  C00F  F0B4         	movff	?___wmul,sprintf@exp
  9014  00F428  C010  F0B5         	movff	?___wmul+1,sprintf@exp+1
  9015                           
  9016                           ;doprnt.c: 840: exp /= 10;
  9017  00F42C  C0B4  F007         	movff	sprintf@exp,___awdiv@dividend
  9018  00F430  C0B5  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  9019  00F434  0E00               	movlw	0
  9020  00F436  6E0A               	movwf	___awdiv@divisor+1,c
  9021  00F438  0E0A               	movlw	10
  9022  00F43A  6E09               	movwf	___awdiv@divisor,c
  9023  00F43C  ECA1  F060         	call	___awdiv	;wreg free
  9024  00F440  C007  F0B4         	movff	?___awdiv,sprintf@exp
  9025  00F444  C008  F0B5         	movff	?___awdiv+1,sprintf@exp+1
  9026                           
  9027                           ;doprnt.c: 841: if(exp < 0)
  9028  00F448  0100               	movlb	0	; () banked
  9029  00F44A  AFB5               	btfss	(sprintf@exp+1)& (0+255),7,b
  9030  00F44C  D005               	goto	l4172
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;doprnt.c: 842: exp--;
  9034  00F44E  0100               	movlb	0	; () banked
  9035  00F450  07B4               	decf	sprintf@exp& (0+255),f,b
  9036  00F452  A0D8               	btfss	status,0,c
  9037  00F454  07B5               	decf	(sprintf@exp+1)& (0+255),f,b
  9038  00F456  D000               	goto	l4172
  9039  00F458                     l4172:
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  9043  00F458  0100               	movlb	0	; () banked
  9044  00F45A  51B4               	movf	sprintf@exp& (0+255),w,b
  9045  00F45C  0800               	sublw	0
  9046  00F45E  EC52  F06E         	call	_scale
  9047  00F462  C024  F0B0         	movff	?_scale,sprintf@tmpval
  9048  00F466  C025  F0B1         	movff	?_scale+1,sprintf@tmpval+1
  9049  00F46A  C026  F0B2         	movff	?_scale+2,sprintf@tmpval+2
  9050                           
  9051                           ;doprnt.c: 847: tmpval.integ *= fval;
  9052  00F46E  C0B0  F015         	movff	sprintf@tmpval,___ftmul@f1
  9053  00F472  C0B1  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  9054  00F476  C0B2  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  9055  00F47A  C0B8  F018         	movff	sprintf@fval,___ftmul@f2
  9056  00F47E  C0B9  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  9057  00F482  C0BA  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  9058  00F486  EC9A  F062         	call	___ftmul	;wreg free
  9059  00F48A  C015  F0B0         	movff	?___ftmul,sprintf@tmpval
  9060  00F48E  C016  F0B1         	movff	?___ftmul+1,sprintf@tmpval+1
  9061  00F492  C017  F0B2         	movff	?___ftmul+2,sprintf@tmpval+2
  9062                           
  9063                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  9064  00F496  C0B0  F03A         	movff	sprintf@tmpval,___ftge@ff1
  9065  00F49A  C0B1  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  9066  00F49E  C0B2  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  9067  00F4A2  0E00               	movlw	0
  9068  00F4A4  6E3D               	movwf	___ftge@ff2,c
  9069  00F4A6  0E80               	movlw	128
  9070  00F4A8  6E3E               	movwf	___ftge@ff2+1,c
  9071  00F4AA  0E3F               	movlw	63
  9072  00F4AC  6E3F               	movwf	___ftge@ff2+2,c
  9073  00F4AE  EC56  F060         	call	___ftge	;wreg free
  9074  00F4B2  B0D8               	btfsc	status,0,c
  9075  00F4B4  D005               	goto	l4180
  9076                           
  9077                           ;doprnt.c: 849: exp--;
  9078  00F4B6  0100               	movlb	0	; () banked
  9079  00F4B8  07B4               	decf	sprintf@exp& (0+255),f,b
  9080  00F4BA  A0D8               	btfss	status,0,c
  9081  00F4BC  07B5               	decf	(sprintf@exp+1)& (0+255),f,b
  9082  00F4BE  D014               	goto	l4184
  9083  00F4C0                     l4180:
  9084                           
  9085                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  9086  00F4C0  C0B0  F03A         	movff	sprintf@tmpval,___ftge@ff1
  9087  00F4C4  C0B1  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  9088  00F4C8  C0B2  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  9089  00F4CC  0E00               	movlw	0
  9090  00F4CE  6E3D               	movwf	___ftge@ff2,c
  9091  00F4D0  0E20               	movlw	32
  9092  00F4D2  6E3E               	movwf	___ftge@ff2+1,c
  9093  00F4D4  0E41               	movlw	65
  9094  00F4D6  6E3F               	movwf	___ftge@ff2+2,c
  9095  00F4D8  EC56  F060         	call	___ftge	;wreg free
  9096  00F4DC  A0D8               	btfss	status,0,c
  9097  00F4DE  D004               	goto	l4184
  9098                           
  9099                           ;doprnt.c: 851: exp++;
  9100  00F4E0  0100               	movlb	0	; () banked
  9101  00F4E2  4BB4               	infsnz	sprintf@exp& (0+255),f,b
  9102  00F4E4  2BB5               	incf	(sprintf@exp+1)& (0+255),f,b
  9103                           
  9104                           ; BSR set to: 0
  9105                           
  9106                           ; BSR set to: 0
  9107  00F4E6  D000               	goto	l4184
  9108  00F4E8                     l4184:
  9109                           
  9110                           ;doprnt.c: 852: }
  9111                           ;doprnt.c: 1112: if(prec <= 12)
  9112  00F4E8  0100               	movlb	0	; () banked
  9113  00F4EA  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  9114  00F4EC  D008               	goto	l4186
  9115  00F4EE  0100               	movlb	0	; () banked
  9116  00F4F0  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  9117  00F4F2  E11E               	bnz	l4188
  9118  00F4F4  0E0D               	movlw	13
  9119  00F4F6  0100               	movlb	0	; () banked
  9120  00F4F8  5DBD               	subwf	sprintf@prec& (0+255),w,b
  9121  00F4FA  B0D8               	btfsc	status,0,c
  9122  00F4FC  D019               	goto	l4188
  9123  00F4FE                     l4186:
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;doprnt.c: 1113: fval += fround(prec);
  9127  00F4FE  C0B8  F02E         	movff	sprintf@fval,___ftadd@f1
  9128  00F502  C0B9  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  9129  00F506  C0BA  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  9130  00F50A  0100               	movlb	0	; () banked
  9131  00F50C  51BD               	movf	sprintf@prec& (0+255),w,b
  9132  00F50E  ECF6  F06B         	call	_fround
  9133  00F512  C024  F031         	movff	?_fround,___ftadd@f2
  9134  00F516  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  9135  00F51A  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  9136  00F51E  EC2C  F069         	call	___ftadd	;wreg free
  9137  00F522  C02E  F0B8         	movff	?___ftadd,sprintf@fval
  9138  00F526  C02F  F0B9         	movff	?___ftadd+1,sprintf@fval+1
  9139  00F52A  C030  F0BA         	movff	?___ftadd+2,sprintf@fval+2
  9140  00F52E  D000               	goto	l4188
  9141  00F530                     l4188:
  9142                           
  9143                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  9144  00F530  0100               	movlb	0	; () banked
  9145  00F532  BFB5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  9146  00F534  D008               	goto	l4190
  9147  00F536  0100               	movlb	0	; () banked
  9148  00F538  51B5               	movf	(sprintf@exp+1)& (0+255),w,b
  9149  00F53A  E128               	bnz	l4196
  9150  00F53C  0E0A               	movlw	10
  9151  00F53E  0100               	movlb	0	; () banked
  9152  00F540  5DB4               	subwf	sprintf@exp& (0+255),w,b
  9153  00F542  B0D8               	btfsc	status,0,c
  9154  00F544  D023               	goto	l4196
  9155  00F546                     l4190:
  9156                           
  9157                           ; BSR set to: 0
  9158  00F546  0100               	movlb	0	; () banked
  9159  00F548  51B8               	movf	sprintf@fval& (0+255),w,b
  9160  00F54A  0100               	movlb	0	; () banked
  9161  00F54C  11B9               	iorwf	(sprintf@fval+1)& (0+255),w,b
  9162  00F54E  0100               	movlb	0	; () banked
  9163  00F550  11BA               	iorwf	(sprintf@fval+2)& (0+255),w,b
  9164  00F552  B4D8               	btfsc	status,2,c
  9165  00F554  D077               	goto	l4210
  9166                           
  9167                           ; BSR set to: 0
  9168  00F556  C0B8  F02B         	movff	sprintf@fval,___fttol@f1
  9169  00F55A  C0B9  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  9170  00F55E  C0BA  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  9171  00F562  EC19  F062         	call	___fttol	;wreg free
  9172  00F566  502B               	movf	?___fttol,w,c
  9173  00F568  102C               	iorwf	?___fttol+1,w,c
  9174  00F56A  102D               	iorwf	?___fttol+2,w,c
  9175  00F56C  102E               	iorwf	?___fttol+3,w,c
  9176  00F56E  A4D8               	btfss	status,2,c
  9177  00F570  D069               	goto	l4210
  9178  00F572  0100               	movlb	0	; () banked
  9179  00F574  BFB5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  9180  00F576  D066               	goto	l4210
  9181  00F578  0100               	movlb	0	; () banked
  9182  00F57A  51B5               	movf	(sprintf@exp+1)& (0+255),w,b
  9183  00F57C  E107               	bnz	l4196
  9184  00F57E  0E02               	movlw	2
  9185  00F580  0100               	movlb	0	; () banked
  9186  00F582  5DB4               	subwf	sprintf@exp& (0+255),w,b
  9187  00F584  B0D8               	btfsc	status,0,c
  9188  00F586  D002               	goto	l4196
  9189  00F588  D05D               	goto	l4210
  9190  00F58A  D000               	goto	l4196
  9191  00F58C                     l4196:
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  9195  00F58C  C0B0  F03A         	movff	sprintf@tmpval,___ftge@ff1
  9196  00F590  C0B1  F03B         	movff	sprintf@tmpval+1,___ftge@ff1+1
  9197  00F594  C0B2  F03C         	movff	sprintf@tmpval+2,___ftge@ff1+2
  9198  00F598  0E70               	movlw	112
  9199  00F59A  6E3D               	movwf	___ftge@ff2,c
  9200  00F59C  0E89               	movlw	137
  9201  00F59E  6E3E               	movwf	___ftge@ff2+1,c
  9202  00F5A0  0E40               	movlw	64
  9203  00F5A2  6E3F               	movwf	___ftge@ff2+2,c
  9204  00F5A4  EC56  F060         	call	___ftge	;wreg free
  9205  00F5A8  B0D8               	btfsc	status,0,c
  9206  00F5AA  D003               	goto	l4200
  9207                           
  9208                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  9209  00F5AC  0100               	movlb	0	; () banked
  9210  00F5AE  0EF7               	movlw	247
  9211  00F5B0  D002               	goto	L7
  9212  00F5B2                     l4200:
  9213                           
  9214                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  9215  00F5B2  0100               	movlb	0	; () banked
  9216  00F5B4  0EF8               	movlw	248
  9217  00F5B6                     L7:
  9218  00F5B6  27B4               	addwf	sprintf@exp& (0+255),f,b
  9219  00F5B8  0EFF               	movlw	255
  9220  00F5BA  23B5               	addwfc	(sprintf@exp+1)& (0+255),f,b
  9221  00F5BC  D000               	goto	l4202
  9222  00F5BE                     l4202:
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;doprnt.c: 1124: }
  9226                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  9227  00F5BE  0100               	movlb	0	; () banked
  9228  00F5C0  51B4               	movf	sprintf@exp& (0+255),w,b
  9229  00F5C2  EC52  F06E         	call	_scale
  9230  00F5C6  C024  F0B0         	movff	?_scale,sprintf@tmpval
  9231  00F5CA  C025  F0B1         	movff	?_scale+1,sprintf@tmpval+1
  9232  00F5CE  C026  F0B2         	movff	?_scale+2,sprintf@tmpval+2
  9233                           
  9234                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  9235  00F5D2  D017               	goto	l4206
  9236  00F5D4  C0B8  F001         	movff	sprintf@fval,__div_to_l_@f1
  9237  00F5D8  C0B9  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  9238  00F5DC  C0BA  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  9239  00F5E0  C0B0  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  9240  00F5E4  C0B1  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  9241  00F5E8  C0B2  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  9242  00F5EC  ECE1  F065         	call	__div_to_l_	;wreg free
  9243  00F5F0  C001  F0AC         	movff	?__div_to_l_,sprintf@val
  9244  00F5F4  C002  F0AD         	movff	?__div_to_l_+1,sprintf@val+1
  9245  00F5F8  C003  F0AE         	movff	?__div_to_l_+2,sprintf@val+2
  9246  00F5FC  C004  F0AF         	movff	?__div_to_l_+3,sprintf@val+3
  9247  00F600  D017               	goto	l4208
  9248  00F602                     l4206:
  9249  00F602  C0B8  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  9250  00F606  C0B9  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  9251  00F60A  C0BA  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  9252  00F60E  C0B0  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  9253  00F612  C0B1  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  9254  00F616  C0B2  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  9255  00F61A  EC7B  F066         	call	__tdiv_to_l_	;wreg free
  9256  00F61E  C001  F0AC         	movff	?__tdiv_to_l_,sprintf@val
  9257  00F622  C002  F0AD         	movff	?__tdiv_to_l_+1,sprintf@val+1
  9258  00F626  C003  F0AE         	movff	?__tdiv_to_l_+2,sprintf@val+2
  9259  00F62A  C004  F0AF         	movff	?__tdiv_to_l_+3,sprintf@val+3
  9260  00F62E  D000               	goto	l4208
  9261  00F630                     l4208:
  9262                           
  9263                           ;doprnt.c: 1129: fval = 0.0;
  9264  00F630  0E00               	movlw	0
  9265  00F632  0100               	movlb	0	; () banked
  9266  00F634  6FB8               	movwf	sprintf@fval& (0+255),b
  9267  00F636  0E00               	movlw	0
  9268  00F638  0100               	movlb	0	; () banked
  9269  00F63A  6FB9               	movwf	(sprintf@fval+1)& (0+255),b
  9270  00F63C  0E00               	movlw	0
  9271  00F63E  0100               	movlb	0	; () banked
  9272  00F640  6FBA               	movwf	(sprintf@fval+2)& (0+255),b
  9273                           
  9274                           ;doprnt.c: 1130: } else {
  9275  00F642  D034               	goto	l4214
  9276  00F644                     l4210:
  9277                           
  9278                           ;doprnt.c: 1131: val = (unsigned long)fval;
  9279  00F644  C0B8  F02B         	movff	sprintf@fval,___fttol@f1
  9280  00F648  C0B9  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  9281  00F64C  C0BA  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  9282  00F650  EC19  F062         	call	___fttol	;wreg free
  9283  00F654  C02B  F0AC         	movff	?___fttol,sprintf@val
  9284  00F658  C02C  F0AD         	movff	?___fttol+1,sprintf@val+1
  9285  00F65C  C02D  F0AE         	movff	?___fttol+2,sprintf@val+2
  9286  00F660  C02E  F0AF         	movff	?___fttol+3,sprintf@val+3
  9287                           
  9288                           ;doprnt.c: 1132: fval -= (double)val;
  9289  00F664  C0B8  F03A         	movff	sprintf@fval,___ftsub@f1
  9290  00F668  C0B9  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  9291  00F66C  C0BA  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  9292  00F670  C0AC  F009         	movff	sprintf@val,___lltoft@c
  9293  00F674  C0AD  F00A         	movff	sprintf@val+1,___lltoft@c+1
  9294  00F678  C0AE  F00B         	movff	sprintf@val+2,___lltoft@c+2
  9295  00F67C  C0AF  F00C         	movff	sprintf@val+3,___lltoft@c+3
  9296  00F680  ECF1  F05D         	call	___lltoft	;wreg free
  9297  00F684  C009  F03D         	movff	?___lltoft,___ftsub@f2
  9298  00F688  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  9299  00F68C  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  9300  00F690  ECCF  F05D         	call	___ftsub	;wreg free
  9301  00F694  C03A  F0B8         	movff	?___ftsub,sprintf@fval
  9302  00F698  C03B  F0B9         	movff	?___ftsub+1,sprintf@fval+1
  9303  00F69C  C03C  F0BA         	movff	?___ftsub+2,sprintf@fval+2
  9304                           
  9305                           ;doprnt.c: 1133: exp = 0;
  9306  00F6A0  0E00               	movlw	0
  9307  00F6A2  0100               	movlb	0	; () banked
  9308  00F6A4  6FB5               	movwf	(sprintf@exp+1)& (0+255),b
  9309  00F6A6  0E00               	movlw	0
  9310  00F6A8  6FB4               	movwf	sprintf@exp& (0+255),b
  9311  00F6AA  D000               	goto	l4214
  9312  00F6AC                     l4214:
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;doprnt.c: 1134: }
  9316                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  9317  00F6AC  0E01               	movlw	1
  9318  00F6AE  0100               	movlb	0	; () banked
  9319  00F6B0  6FBF               	movwf	sprintf@c& (0+255),b
  9320  00F6B2                     l4216:
  9321                           
  9322                           ; BSR set to: 0
  9323  00F6B2  0E0A               	movlw	10
  9324  00F6B4  0100               	movlb	0	; () banked
  9325  00F6B6  19BF               	xorwf	sprintf@c& (0+255),w,b
  9326  00F6B8  B4D8               	btfsc	status,2,c
  9327  00F6BA  D022               	goto	l4228
  9328  00F6BC  D001               	goto	l4220
  9329                           
  9330                           ; BSR set to: 0
  9331  00F6BE  D020               	goto	l4228
  9332  00F6C0                     l4220:
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;doprnt.c: 1137: if(val < dpowers[c])
  9336  00F6C0  0100               	movlb	0	; () banked
  9337  00F6C2  51BF               	movf	sprintf@c& (0+255),w,b
  9338  00F6C4  0D04               	mullw	4
  9339  00F6C6  0EF3               	movlw	low _dpowers
  9340  00F6C8  24F3               	addwf	prodl,w,c
  9341  00F6CA  6EF6               	movwf	tblptrl,c
  9342  00F6CC  0EFD               	movlw	high _dpowers
  9343  00F6CE  20F4               	addwfc	prodh,w,c
  9344  00F6D0  6EF7               	movwf	tblptrh,c
  9345  00F6D2                     	if	0	;There are less than 3 active tblptr bytes
  9346  00F6D2                     	endif
  9347  00F6D2  0009               	tblrd		*+
  9348  00F6D4  50F5               	movf	tablat,w,c
  9349  00F6D6  0100               	movlb	0	; () banked
  9350  00F6D8  5DAC               	subwf	sprintf@val& (0+255),w,b
  9351  00F6DA  0009               	tblrd		*+
  9352  00F6DC  50F5               	movf	tablat,w,c
  9353  00F6DE  0100               	movlb	0	; () banked
  9354  00F6E0  59AD               	subwfb	(sprintf@val+1)& (0+255),w,b
  9355  00F6E2  0009               	tblrd		*+
  9356  00F6E4  50F5               	movf	tablat,w,c
  9357  00F6E6  0100               	movlb	0	; () banked
  9358  00F6E8  59AE               	subwfb	(sprintf@val+2)& (0+255),w,b
  9359  00F6EA  0009               	tblrd		*+
  9360  00F6EC  50F5               	movf	tablat,w,c
  9361  00F6EE  0100               	movlb	0	; () banked
  9362  00F6F0  59AF               	subwfb	(sprintf@val+3)& (0+255),w,b
  9363  00F6F2  A0D8               	btfss	status,0,c
  9364  00F6F4  D005               	goto	l4228
  9365  00F6F6  D001               	goto	l4224
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;doprnt.c: 1138: break;
  9369  00F6F8  D003               	goto	l4228
  9370  00F6FA                     l4224:
  9371                           
  9372                           ; BSR set to: 0
  9373  00F6FA  0100               	movlb	0	; () banked
  9374  00F6FC  2BBF               	incf	sprintf@c& (0+255),f,b
  9375  00F6FE  D7D9               	goto	l4216
  9376  00F700                     l4228:
  9377                           
  9378                           ; BSR set to: 0
  9379                           ;doprnt.c: 1142: width -= prec + c + exp;
  9380  00F700  C0BF  F04D         	movff	sprintf@c,??_sprintf
  9381  00F704  6A4E               	clrf	(??_sprintf+1)& (0+255),c
  9382  00F706  BE4D               	btfsc	??_sprintf& (0+255),7,c
  9383  00F708  064E               	decf	(??_sprintf+1)& (0+255),f,c
  9384  00F70A  0100               	movlb	0	; () banked
  9385  00F70C  51BD               	movf	sprintf@prec& (0+255),w,b
  9386  00F70E  264D               	addwf	??_sprintf,f,c
  9387  00F710  0100               	movlb	0	; () banked
  9388  00F712  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  9389  00F714  224E               	addwfc	??_sprintf+1,f,c
  9390  00F716  0100               	movlb	0	; () banked
  9391  00F718  51B4               	movf	sprintf@exp& (0+255),w,b
  9392  00F71A  264D               	addwf	??_sprintf,f,c
  9393  00F71C  0100               	movlb	0	; () banked
  9394  00F71E  51B5               	movf	(sprintf@exp+1)& (0+255),w,b
  9395  00F720  224E               	addwfc	??_sprintf+1,f,c
  9396  00F722  504D               	movf	??_sprintf,w,c
  9397  00F724  0100               	movlb	0	; () banked
  9398  00F726  5FBB               	subwf	sprintf@width& (0+255),f,b
  9399  00F728  504E               	movf	??_sprintf+1,w,c
  9400  00F72A  0100               	movlb	0	; () banked
  9401  00F72C  5BBC               	subwfb	(sprintf@width+1)& (0+255),f,b
  9402                           
  9403                           ;doprnt.c: 1143: if(
  9404                           ;doprnt.c: 1147: prec)
  9405  00F72E  0100               	movlb	0	; () banked
  9406  00F730  51BD               	movf	sprintf@prec& (0+255),w,b
  9407  00F732  0100               	movlb	0	; () banked
  9408  00F734  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9409  00F736  B4D8               	btfsc	status,2,c
  9410  00F738  D005               	goto	l4232
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;doprnt.c: 1148: width--;
  9414  00F73A  0100               	movlb	0	; () banked
  9415  00F73C  07BB               	decf	sprintf@width& (0+255),f,b
  9416  00F73E  A0D8               	btfss	status,0,c
  9417  00F740  07BC               	decf	(sprintf@width+1)& (0+255),f,b
  9418  00F742  D000               	goto	l4232
  9419  00F744                     l4232:
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;doprnt.c: 1149: if(flag & 0x03)
  9423  00F744  0E03               	movlw	3
  9424  00F746  0100               	movlb	0	; () banked
  9425  00F748  15B6               	andwf	sprintf@flag& (0+255),w,b
  9426  00F74A  6E4D               	movwf	??_sprintf& (0+255),c
  9427  00F74C  0E00               	movlw	0
  9428  00F74E  0100               	movlb	0	; () banked
  9429  00F750  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
  9430  00F752  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  9431  00F754  504D               	movf	??_sprintf,w,c
  9432  00F756  104E               	iorwf	??_sprintf+1,w,c
  9433  00F758  B4D8               	btfsc	status,2,c
  9434  00F75A  D005               	goto	l4236
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;doprnt.c: 1150: width--;
  9438  00F75C  0100               	movlb	0	; () banked
  9439  00F75E  07BB               	decf	sprintf@width& (0+255),f,b
  9440  00F760  A0D8               	btfss	status,0,c
  9441  00F762  07BC               	decf	(sprintf@width+1)& (0+255),f,b
  9442  00F764  D000               	goto	l4236
  9443  00F766                     l4236:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;doprnt.c: 1153: if(flag & 0x04) {
  9447  00F766  0100               	movlb	0	; () banked
  9448  00F768  A5B6               	btfss	sprintf@flag& (0+255),2,b
  9449  00F76A  D03C               	goto	l4258
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;doprnt.c: 1157: if(flag & 0x03)
  9453  00F76C  0E03               	movlw	3
  9454  00F76E  0100               	movlb	0	; () banked
  9455  00F770  15B6               	andwf	sprintf@flag& (0+255),w,b
  9456  00F772  6E4D               	movwf	??_sprintf& (0+255),c
  9457  00F774  0E00               	movlw	0
  9458  00F776  0100               	movlb	0	; () banked
  9459  00F778  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
  9460  00F77A  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  9461  00F77C  504D               	movf	??_sprintf,w,c
  9462  00F77E  104E               	iorwf	??_sprintf+1,w,c
  9463  00F780  B4D8               	btfsc	status,2,c
  9464  00F782  D016               	goto	l4250
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  9468  00F784  C043  FFD9         	movff	sprintf@sp,fsr2l
  9469  00F788  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9470  00F78C  0E2D               	movlw	45
  9471  00F78E  6EDF               	movwf	indf2,c
  9472                           
  9473                           ; BSR set to: 0
  9474  00F790  4A43               	infsnz	sprintf@sp,f,c
  9475  00F792  2A44               	incf	sprintf@sp+1,f,c
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;doprnt.c: 1168: while(width > 0) {
  9479  00F794  D00D               	goto	l4250
  9480  00F796                     l4244:
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  9484  00F796  C043  FFD9         	movff	sprintf@sp,fsr2l
  9485  00F79A  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9486  00F79E  0E30               	movlw	48
  9487  00F7A0  6EDF               	movwf	indf2,c
  9488                           
  9489                           ; BSR set to: 0
  9490  00F7A2  4A43               	infsnz	sprintf@sp,f,c
  9491  00F7A4  2A44               	incf	sprintf@sp+1,f,c
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;doprnt.c: 1170: width--;
  9495  00F7A6  0100               	movlb	0	; () banked
  9496  00F7A8  07BB               	decf	sprintf@width& (0+255),f,b
  9497  00F7AA  A0D8               	btfss	status,0,c
  9498  00F7AC  07BC               	decf	(sprintf@width+1)& (0+255),f,b
  9499  00F7AE  D000               	goto	l4250
  9500  00F7B0                     l4250:
  9501                           
  9502                           ; BSR set to: 0
  9503  00F7B0  0100               	movlb	0	; () banked
  9504  00F7B2  BFBC               	btfsc	(sprintf@width+1)& (0+255),7,b
  9505  00F7B4  D080               	goto	l4274
  9506  00F7B6  0100               	movlb	0	; () banked
  9507  00F7B8  51BC               	movf	(sprintf@width+1)& (0+255),w,b
  9508  00F7BA  E1ED               	bnz	l4244
  9509  00F7BC  0100               	movlb	0	; () banked
  9510  00F7BE  05BB               	decf	sprintf@width& (0+255),w,b
  9511  00F7C0  A0D8               	btfss	status,0,c
  9512  00F7C2  D079               	goto	l4274
  9513  00F7C4  D7E8               	goto	l4244
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;doprnt.c: 1171: }
  9517                           ;doprnt.c: 1173: } else
  9518  00F7C6  D077               	goto	l4274
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;doprnt.c: 1175: {
  9522                           ;doprnt.c: 1180: while(width > 0) {
  9523  00F7C8  D00D               	goto	l4258
  9524  00F7CA                     l4252:
  9525                           
  9526                           ; BSR set to: 0
  9527                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  9528  00F7CA  C043  FFD9         	movff	sprintf@sp,fsr2l
  9529  00F7CE  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9530  00F7D2  0E20               	movlw	32
  9531  00F7D4  6EDF               	movwf	indf2,c
  9532                           
  9533                           ; BSR set to: 0
  9534  00F7D6  4A43               	infsnz	sprintf@sp,f,c
  9535  00F7D8  2A44               	incf	sprintf@sp+1,f,c
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;doprnt.c: 1182: width--;
  9539  00F7DA  0100               	movlb	0	; () banked
  9540  00F7DC  07BB               	decf	sprintf@width& (0+255),f,b
  9541  00F7DE  A0D8               	btfss	status,0,c
  9542  00F7E0  07BC               	decf	(sprintf@width+1)& (0+255),f,b
  9543  00F7E2  D000               	goto	l4258
  9544  00F7E4                     l4258:
  9545                           
  9546                           ; BSR set to: 0
  9547  00F7E4  0100               	movlb	0	; () banked
  9548  00F7E6  BFBC               	btfsc	(sprintf@width+1)& (0+255),7,b
  9549  00F7E8  D007               	goto	l4260
  9550  00F7EA  0100               	movlb	0	; () banked
  9551  00F7EC  51BC               	movf	(sprintf@width+1)& (0+255),w,b
  9552  00F7EE  E1ED               	bnz	l4252
  9553  00F7F0  0100               	movlb	0	; () banked
  9554  00F7F2  05BB               	decf	sprintf@width& (0+255),w,b
  9555  00F7F4  B0D8               	btfsc	status,0,c
  9556  00F7F6  D7E9               	goto	l4252
  9557  00F7F8                     l4260:
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;doprnt.c: 1183: }
  9561                           ;doprnt.c: 1188: if(flag & 0x03)
  9562  00F7F8  0E03               	movlw	3
  9563  00F7FA  0100               	movlb	0	; () banked
  9564  00F7FC  15B6               	andwf	sprintf@flag& (0+255),w,b
  9565  00F7FE  6E4D               	movwf	??_sprintf& (0+255),c
  9566  00F800  0E00               	movlw	0
  9567  00F802  0100               	movlb	0	; () banked
  9568  00F804  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
  9569  00F806  6E4E               	movwf	(??_sprintf+1)& (0+255),c
  9570  00F808  504D               	movf	??_sprintf,w,c
  9571  00F80A  104E               	iorwf	??_sprintf+1,w,c
  9572  00F80C  B4D8               	btfsc	status,2,c
  9573  00F80E  D053               	goto	l4274
  9574                           
  9575                           ; BSR set to: 0
  9576                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  9577  00F810  C043  FFD9         	movff	sprintf@sp,fsr2l
  9578  00F814  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9579  00F818  0E2D               	movlw	45
  9580  00F81A  D04B               	goto	L8
  9581  00F81C                     l4264:
  9582                           
  9583                           ; BSR set to: 0
  9584  00F81C  4A43               	infsnz	sprintf@sp,f,c
  9585  00F81E  2A44               	incf	sprintf@sp+1,f,c
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;doprnt.c: 1195: }
  9589                           ;doprnt.c: 1196: while(c--) {
  9590                           
  9591                           ; BSR set to: 0
  9592  00F820  D04A               	goto	l4274
  9593  00F822                     l4266:
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;doprnt.c: 1200: {
  9597                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  9598  00F822  C0AC  F001         	movff	sprintf@val,___lldiv@dividend
  9599  00F826  C0AD  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  9600  00F82A  C0AE  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  9601  00F82E  C0AF  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  9602  00F832  0100               	movlb	0	; () banked
  9603  00F834  51BF               	movf	sprintf@c& (0+255),w,b
  9604  00F836  0D04               	mullw	4
  9605  00F838  0EF3               	movlw	low _dpowers
  9606  00F83A  24F3               	addwf	prodl,w,c
  9607  00F83C  6EF6               	movwf	tblptrl,c
  9608  00F83E  0EFD               	movlw	high _dpowers
  9609  00F840  20F4               	addwfc	prodh,w,c
  9610  00F842  6EF7               	movwf	tblptrh,c
  9611  00F844                     	if	0	;There are less than 3 active tblptr bytes
  9612  00F844                     	endif
  9613  00F844  0009               	tblrd		*+
  9614  00F846  CFF5 F005          	movff	tablat,___lldiv@divisor
  9615  00F84A  0009               	tblrd		*+
  9616  00F84C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  9617  00F850  0009               	tblrd		*+
  9618  00F852  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  9619  00F856  000A               	tblrd		*-
  9620  00F858  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  9621  00F85C  EC7F  F05F         	call	___lldiv	;wreg free
  9622  00F860  C001  F0B0         	movff	?___lldiv,sprintf@tmpval
  9623  00F864  C002  F0B1         	movff	?___lldiv+1,sprintf@tmpval+1
  9624  00F868  C003  F0B2         	movff	?___lldiv+2,sprintf@tmpval+2
  9625  00F86C  C004  F0B3         	movff	?___lldiv+3,sprintf@tmpval+3
  9626                           
  9627                           ;doprnt.c: 1202: tmpval.vd %= 10;
  9628  00F870  C0B0  F00E         	movff	sprintf@tmpval,___llmod@dividend
  9629  00F874  C0B1  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  9630  00F878  C0B2  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  9631  00F87C  C0B3  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  9632  00F880  0E0A               	movlw	10
  9633  00F882  6E12               	movwf	___llmod@divisor,c
  9634  00F884  0E00               	movlw	0
  9635  00F886  6E13               	movwf	___llmod@divisor+1,c
  9636  00F888  0E00               	movlw	0
  9637  00F88A  6E14               	movwf	___llmod@divisor+2,c
  9638  00F88C  0E00               	movlw	0
  9639  00F88E  6E15               	movwf	___llmod@divisor+3,c
  9640  00F890  EC89  F05E         	call	___llmod	;wreg free
  9641  00F894  C00E  F0B0         	movff	?___llmod,sprintf@tmpval
  9642  00F898  C00F  F0B1         	movff	?___llmod+1,sprintf@tmpval+1
  9643  00F89C  C010  F0B2         	movff	?___llmod+2,sprintf@tmpval+2
  9644  00F8A0  C011  F0B3         	movff	?___llmod+3,sprintf@tmpval+3
  9645                           
  9646                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  9647  00F8A4  0100               	movlb	0	; () banked
  9648  00F8A6  51B0               	movf	sprintf@tmpval& (0+255),w,b
  9649  00F8A8  0F30               	addlw	48
  9650  00F8AA  C043  FFD9         	movff	sprintf@sp,fsr2l
  9651  00F8AE  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9652  00F8B2                     L8:
  9653  00F8B2  6EDF               	movwf	indf2,c
  9654  00F8B4  D7B3               	goto	l4264
  9655  00F8B6                     l4274:
  9656                           
  9657                           ; BSR set to: 0
  9658  00F8B6  0100               	movlb	0	; () banked
  9659  00F8B8  07BF               	decf	sprintf@c& (0+255),f,b
  9660  00F8BA  0100               	movlb	0	; () banked
  9661  00F8BC  29BF               	incf	sprintf@c& (0+255),w,b
  9662  00F8BE  B4D8               	btfsc	status,2,c
  9663  00F8C0  D00F               	goto	l4282
  9664  00F8C2  D7AF               	goto	l4266
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;doprnt.c: 1204: }
  9668                           ;doprnt.c: 1206: }
  9669                           ;doprnt.c: 1207: while(exp > 0) {
  9670  00F8C4  D00D               	goto	l4282
  9671  00F8C6                     l4276:
  9672                           
  9673                           ; BSR set to: 0
  9674                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  9675  00F8C6  C043  FFD9         	movff	sprintf@sp,fsr2l
  9676  00F8CA  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9677  00F8CE  0E30               	movlw	48
  9678  00F8D0  6EDF               	movwf	indf2,c
  9679                           
  9680                           ; BSR set to: 0
  9681  00F8D2  4A43               	infsnz	sprintf@sp,f,c
  9682  00F8D4  2A44               	incf	sprintf@sp+1,f,c
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;doprnt.c: 1209: exp--;
  9686  00F8D6  0100               	movlb	0	; () banked
  9687  00F8D8  07B4               	decf	sprintf@exp& (0+255),f,b
  9688  00F8DA  A0D8               	btfss	status,0,c
  9689  00F8DC  07B5               	decf	(sprintf@exp+1)& (0+255),f,b
  9690  00F8DE  D000               	goto	l4282
  9691  00F8E0                     l4282:
  9692                           
  9693                           ; BSR set to: 0
  9694  00F8E0  0100               	movlb	0	; () banked
  9695  00F8E2  BFB5               	btfsc	(sprintf@exp+1)& (0+255),7,b
  9696  00F8E4  D007               	goto	l4284
  9697  00F8E6  0100               	movlb	0	; () banked
  9698  00F8E8  51B5               	movf	(sprintf@exp+1)& (0+255),w,b
  9699  00F8EA  E1ED               	bnz	l4276
  9700  00F8EC  0100               	movlb	0	; () banked
  9701  00F8EE  05B4               	decf	sprintf@exp& (0+255),w,b
  9702  00F8F0  B0D8               	btfsc	status,0,c
  9703  00F8F2  D7E9               	goto	l4276
  9704  00F8F4                     l4284:
  9705                           
  9706                           ; BSR set to: 0
  9707                           ;doprnt.c: 1210: }
  9708                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  9709  00F8F4  0100               	movlb	0	; () banked
  9710  00F8F6  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  9711  00F8F8  D00C               	goto	l498
  9712  00F8FA  0100               	movlb	0	; () banked
  9713  00F8FC  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  9714  00F8FE  E105               	bnz	u4790
  9715  00F900  0E09               	movlw	9
  9716  00F902  0100               	movlb	0	; () banked
  9717  00F904  5DBD               	subwf	sprintf@prec& (0+255),w,b
  9718  00F906  A0D8               	btfss	status,0,c
  9719  00F908  D004               	goto	l498
  9720  00F90A                     u4790:
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  9724  00F90A  0E08               	movlw	8
  9725  00F90C  0100               	movlb	0	; () banked
  9726  00F90E  6FBF               	movwf	sprintf@c& (0+255),b
  9727  00F910  D003               	goto	l4288
  9728  00F912                     l498:
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;doprnt.c: 1213: else
  9732                           ;doprnt.c: 1214: c = prec;
  9733  00F912  C0BD  F0BF         	movff	sprintf@prec,sprintf@c
  9734  00F916  D000               	goto	l4288
  9735  00F918                     l4288:
  9736                           
  9737                           ; BSR set to: 0
  9738                           ;doprnt.c: 1215: prec -= c;
  9739  00F918  0100               	movlb	0	; () banked
  9740  00F91A  51BF               	movf	sprintf@c& (0+255),w,b
  9741  00F91C  0100               	movlb	0	; () banked
  9742  00F91E  5FBD               	subwf	sprintf@prec& (0+255),f,b
  9743  00F920  0E00               	movlw	0
  9744  00F922  0100               	movlb	0	; () banked
  9745  00F924  BFBF               	btfsc	sprintf@c& (0+255),7,b
  9746  00F926  0EFF               	movlw	255
  9747  00F928  0100               	movlb	0	; () banked
  9748  00F92A  5BBE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;doprnt.c: 1219: if(c)
  9752  00F92C  0100               	movlb	0	; () banked
  9753  00F92E  51BF               	movf	sprintf@c& (0+255),w,b
  9754  00F930  0100               	movlb	0	; () banked
  9755  00F932  B4D8               	btfsc	status,2,c
  9756  00F934  D009               	goto	l4296
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  9760  00F936  C043  FFD9         	movff	sprintf@sp,fsr2l
  9761  00F93A  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9762  00F93E  0E2E               	movlw	46
  9763  00F940  6EDF               	movwf	indf2,c
  9764                           
  9765                           ; BSR set to: 0
  9766  00F942  4A43               	infsnz	sprintf@sp,f,c
  9767  00F944  2A44               	incf	sprintf@sp+1,f,c
  9768  00F946  D000               	goto	l4296
  9769  00F948                     l4296:
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9773  00F948  0100               	movlb	0	; () banked
  9774  00F94A  51BF               	movf	sprintf@c& (0+255),w,b
  9775  00F94C  EC52  F06E         	call	_scale
  9776  00F950  C024  F0A3         	movff	?_scale,_sprintf$2458
  9777  00F954  C025  F0A4         	movff	?_scale+1,_sprintf$2458+1
  9778  00F958  C026  F0A5         	movff	?_scale+2,_sprintf$2458+2
  9779                           
  9780                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  9781  00F95C  C0B8  F018         	movff	sprintf@fval,___ftmul@f2
  9782  00F960  C0B9  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  9783  00F964  C0BA  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  9784  00F968  C0A3  F015         	movff	_sprintf$2458,___ftmul@f1
  9785  00F96C  C0A4  F016         	movff	_sprintf$2458+1,___ftmul@f1+1
  9786  00F970  C0A5  F017         	movff	_sprintf$2458+2,___ftmul@f1+2
  9787  00F974  EC9A  F062         	call	___ftmul	;wreg free
  9788  00F978  C015  F02B         	movff	?___ftmul,___fttol@f1
  9789  00F97C  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  9790  00F980  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  9791  00F984  EC19  F062         	call	___fttol	;wreg free
  9792  00F988  C02B  F0AC         	movff	?___fttol,sprintf@val
  9793  00F98C  C02C  F0AD         	movff	?___fttol+1,sprintf@val+1
  9794  00F990  C02D  F0AE         	movff	?___fttol+2,sprintf@val+2
  9795  00F994  C02E  F0AF         	movff	?___fttol+3,sprintf@val+3
  9796                           
  9797                           ;doprnt.c: 1228: while(c--) {
  9798  00F998  D073               	goto	l4310
  9799  00F99A                     l4300:
  9800                           
  9801                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  9802  00F99A  C0AC  F001         	movff	sprintf@val,___lldiv@dividend
  9803  00F99E  C0AD  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  9804  00F9A2  C0AE  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  9805  00F9A6  C0AF  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  9806  00F9AA  0100               	movlb	0	; () banked
  9807  00F9AC  51BF               	movf	sprintf@c& (0+255),w,b
  9808  00F9AE  0D04               	mullw	4
  9809  00F9B0  0EF3               	movlw	low _dpowers
  9810  00F9B2  24F3               	addwf	prodl,w,c
  9811  00F9B4  6EF6               	movwf	tblptrl,c
  9812  00F9B6  0EFD               	movlw	high _dpowers
  9813  00F9B8  20F4               	addwfc	prodh,w,c
  9814  00F9BA  6EF7               	movwf	tblptrh,c
  9815  00F9BC                     	if	0	;There are less than 3 active tblptr bytes
  9816  00F9BC                     	endif
  9817  00F9BC  0009               	tblrd		*+
  9818  00F9BE  CFF5 F005          	movff	tablat,___lldiv@divisor
  9819  00F9C2  0009               	tblrd		*+
  9820  00F9C4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  9821  00F9C8  0009               	tblrd		*+
  9822  00F9CA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  9823  00F9CE  000A               	tblrd		*-
  9824  00F9D0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  9825  00F9D4  EC7F  F05F         	call	___lldiv	;wreg free
  9826  00F9D8  C001  F0B0         	movff	?___lldiv,sprintf@tmpval
  9827  00F9DC  C002  F0B1         	movff	?___lldiv+1,sprintf@tmpval+1
  9828  00F9E0  C003  F0B2         	movff	?___lldiv+2,sprintf@tmpval+2
  9829  00F9E4  C004  F0B3         	movff	?___lldiv+3,sprintf@tmpval+3
  9830                           
  9831                           ;doprnt.c: 1230: tmpval.vd %= 10;
  9832  00F9E8  C0B0  F00E         	movff	sprintf@tmpval,___llmod@dividend
  9833  00F9EC  C0B1  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  9834  00F9F0  C0B2  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  9835  00F9F4  C0B3  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  9836  00F9F8  0E0A               	movlw	10
  9837  00F9FA  6E12               	movwf	___llmod@divisor,c
  9838  00F9FC  0E00               	movlw	0
  9839  00F9FE  6E13               	movwf	___llmod@divisor+1,c
  9840  00FA00  0E00               	movlw	0
  9841  00FA02  6E14               	movwf	___llmod@divisor+2,c
  9842  00FA04  0E00               	movlw	0
  9843  00FA06  6E15               	movwf	___llmod@divisor+3,c
  9844  00FA08  EC89  F05E         	call	___llmod	;wreg free
  9845  00FA0C  C00E  F0B0         	movff	?___llmod,sprintf@tmpval
  9846  00FA10  C00F  F0B1         	movff	?___llmod+1,sprintf@tmpval+1
  9847  00FA14  C010  F0B2         	movff	?___llmod+2,sprintf@tmpval+2
  9848  00FA18  C011  F0B3         	movff	?___llmod+3,sprintf@tmpval+3
  9849                           
  9850                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  9851  00FA1C  0100               	movlb	0	; () banked
  9852  00FA1E  51B0               	movf	sprintf@tmpval& (0+255),w,b
  9853  00FA20  0F30               	addlw	48
  9854  00FA22  C043  FFD9         	movff	sprintf@sp,fsr2l
  9855  00FA26  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9856  00FA2A  6EDF               	movwf	indf2,c
  9857                           
  9858                           ; BSR set to: 0
  9859  00FA2C  4A43               	infsnz	sprintf@sp,f,c
  9860  00FA2E  2A44               	incf	sprintf@sp+1,f,c
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;doprnt.c: 1232: val %= dpowers[c];
  9864  00FA30  C0AC  F00E         	movff	sprintf@val,___llmod@dividend
  9865  00FA34  C0AD  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  9866  00FA38  C0AE  F010         	movff	sprintf@val+2,___llmod@dividend+2
  9867  00FA3C  C0AF  F011         	movff	sprintf@val+3,___llmod@dividend+3
  9868  00FA40  0100               	movlb	0	; () banked
  9869  00FA42  51BF               	movf	sprintf@c& (0+255),w,b
  9870  00FA44  0D04               	mullw	4
  9871  00FA46  0EF3               	movlw	low _dpowers
  9872  00FA48  24F3               	addwf	prodl,w,c
  9873  00FA4A  6EF6               	movwf	tblptrl,c
  9874  00FA4C  0EFD               	movlw	high _dpowers
  9875  00FA4E  20F4               	addwfc	prodh,w,c
  9876  00FA50  6EF7               	movwf	tblptrh,c
  9877  00FA52                     	if	0	;There are less than 3 active tblptr bytes
  9878  00FA52                     	endif
  9879  00FA52  0009               	tblrd		*+
  9880  00FA54  CFF5 F012          	movff	tablat,___llmod@divisor
  9881  00FA58  0009               	tblrd		*+
  9882  00FA5A  CFF5 F013          	movff	tablat,___llmod@divisor+1
  9883  00FA5E  0009               	tblrd		*+
  9884  00FA60  CFF5 F014          	movff	tablat,___llmod@divisor+2
  9885  00FA64  000A               	tblrd		*-
  9886  00FA66  CFF5 F015          	movff	tablat,___llmod@divisor+3
  9887  00FA6A  EC89  F05E         	call	___llmod	;wreg free
  9888  00FA6E  C00E  F0AC         	movff	?___llmod,sprintf@val
  9889  00FA72  C00F  F0AD         	movff	?___llmod+1,sprintf@val+1
  9890  00FA76  C010  F0AE         	movff	?___llmod+2,sprintf@val+2
  9891  00FA7A  C011  F0AF         	movff	?___llmod+3,sprintf@val+3
  9892  00FA7E  D000               	goto	l4310
  9893  00FA80                     l4310:
  9894  00FA80  0100               	movlb	0	; () banked
  9895  00FA82  07BF               	decf	sprintf@c& (0+255),f,b
  9896  00FA84  0100               	movlb	0	; () banked
  9897  00FA86  29BF               	incf	sprintf@c& (0+255),w,b
  9898  00FA88  B4D8               	btfsc	status,2,c
  9899  00FA8A  D00F               	goto	l4318
  9900  00FA8C  D786               	goto	l4300
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;doprnt.c: 1233: }
  9904                           ;doprnt.c: 1235: while(prec) {
  9905  00FA8E  D00D               	goto	l4318
  9906  00FA90                     l4312:
  9907                           
  9908                           ; BSR set to: 0
  9909                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  9910  00FA90  C043  FFD9         	movff	sprintf@sp,fsr2l
  9911  00FA94  C044  FFDA         	movff	sprintf@sp+1,fsr2h
  9912  00FA98  0E30               	movlw	48
  9913  00FA9A  6EDF               	movwf	indf2,c
  9914                           
  9915                           ; BSR set to: 0
  9916  00FA9C  4A43               	infsnz	sprintf@sp,f,c
  9917  00FA9E  2A44               	incf	sprintf@sp+1,f,c
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;doprnt.c: 1237: prec--;
  9921  00FAA0  0100               	movlb	0	; () banked
  9922  00FAA2  07BD               	decf	sprintf@prec& (0+255),f,b
  9923  00FAA4  A0D8               	btfss	status,0,c
  9924  00FAA6  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  9925  00FAA8  D000               	goto	l4318
  9926  00FAAA                     l4318:
  9927                           
  9928                           ; BSR set to: 0
  9929  00FAAA  0100               	movlb	0	; () banked
  9930  00FAAC  51BD               	movf	sprintf@prec& (0+255),w,b
  9931  00FAAE  0100               	movlb	0	; () banked
  9932  00FAB0  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9933  00FAB2  B4D8               	btfsc	status,2,c
  9934  00FAB4  D186               	goto	l4410
  9935  00FAB6  D7EC               	goto	l4312
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;doprnt.c: 1238: }
  9939                           ;doprnt.c: 1245: continue;
  9940  00FAB8  D184               	goto	l4410
  9941  00FABA                     l4320:
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;doprnt.c: 1246: }
  9945                           ;doprnt.c: 1273: {
  9946                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9947  00FABA  C0A8  FFD9         	movff	sprintf@ap,fsr2l
  9948  00FABE  C0A9  FFDA         	movff	sprintf@ap+1,fsr2h
  9949  00FAC2  CFDE F04D          	movff	postinc2,??_sprintf
  9950  00FAC6  CFDD F04E          	movff	postdec2,??_sprintf+1
  9951  00FACA  C04D  F0AC         	movff	??_sprintf,sprintf@val
  9952  00FACE  C04E  F0AD         	movff	??_sprintf+1,sprintf@val+1
  9953  00FAD2  0100               	movlb	0	; () banked
  9954  00FAD4  6BAE               	clrf	(sprintf@val+2)& (0+255),b
  9955  00FAD6  6BAF               	clrf	(sprintf@val+3)& (0+255),b
  9956                           
  9957                           ; BSR set to: 0
  9958  00FAD8  0E02               	movlw	2
  9959  00FADA  0100               	movlb	0	; () banked
  9960  00FADC  27A8               	addwf	sprintf@ap& (0+255),f,b
  9961  00FADE  0E00               	movlw	0
  9962  00FAE0  23A9               	addwfc	(sprintf@ap+1)& (0+255),f,b
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;doprnt.c: 1287: }
  9966                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  9967  00FAE2  0100               	movlb	0	; () banked
  9968  00FAE4  51BD               	movf	sprintf@prec& (0+255),w,b
  9969  00FAE6  0100               	movlb	0	; () banked
  9970  00FAE8  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  9971  00FAEA  A4D8               	btfss	status,2,c
  9972  00FAEC  D00E               	goto	l4330
  9973                           
  9974                           ; BSR set to: 0
  9975  00FAEE  0100               	movlb	0	; () banked
  9976  00FAF0  51AC               	movf	sprintf@val& (0+255),w,b
  9977  00FAF2  0100               	movlb	0	; () banked
  9978  00FAF4  11AD               	iorwf	(sprintf@val+1)& (0+255),w,b
  9979  00FAF6  0100               	movlb	0	; () banked
  9980  00FAF8  11AE               	iorwf	(sprintf@val+2)& (0+255),w,b
  9981  00FAFA  0100               	movlb	0	; () banked
  9982  00FAFC  11AF               	iorwf	(sprintf@val+3)& (0+255),w,b
  9983  00FAFE  A4D8               	btfss	status,2,c
  9984  00FB00  D004               	goto	l4330
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;doprnt.c: 1291: prec++;
  9988  00FB02  0100               	movlb	0	; () banked
  9989  00FB04  4BBD               	infsnz	sprintf@prec& (0+255),f,b
  9990  00FB06  2BBE               	incf	(sprintf@prec+1)& (0+255),f,b
  9991  00FB08  D000               	goto	l4330
  9992  00FB0A                     l4330:
  9993                           
  9994                           ; BSR set to: 0
  9995                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9996  00FB0A  0E01               	movlw	1
  9997  00FB0C  0100               	movlb	0	; () banked
  9998  00FB0E  6FBF               	movwf	sprintf@c& (0+255),b
  9999  00FB10                     l4332:
 10000                           
 10001                           ; BSR set to: 0
 10002  00FB10  0E0A               	movlw	10
 10003  00FB12  0100               	movlb	0	; () banked
 10004  00FB14  19BF               	xorwf	sprintf@c& (0+255),w,b
 10005  00FB16  B4D8               	btfsc	status,2,c
 10006  00FB18  D022               	goto	l4344
 10007  00FB1A  D001               	goto	l4336
 10008                           
 10009                           ; BSR set to: 0
 10010  00FB1C  D020               	goto	l4344
 10011  00FB1E                     l4336:
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;doprnt.c: 1306: if(val < dpowers[c])
 10015  00FB1E  0100               	movlb	0	; () banked
 10016  00FB20  51BF               	movf	sprintf@c& (0+255),w,b
 10017  00FB22  0D04               	mullw	4
 10018  00FB24  0EF3               	movlw	low _dpowers
 10019  00FB26  24F3               	addwf	prodl,w,c
 10020  00FB28  6EF6               	movwf	tblptrl,c
 10021  00FB2A  0EFD               	movlw	high _dpowers
 10022  00FB2C  20F4               	addwfc	prodh,w,c
 10023  00FB2E  6EF7               	movwf	tblptrh,c
 10024  00FB30                     	if	0	;There are less than 3 active tblptr bytes
 10025  00FB30                     	endif
 10026  00FB30  0009               	tblrd		*+
 10027  00FB32  50F5               	movf	tablat,w,c
 10028  00FB34  0100               	movlb	0	; () banked
 10029  00FB36  5DAC               	subwf	sprintf@val& (0+255),w,b
 10030  00FB38  0009               	tblrd		*+
 10031  00FB3A  50F5               	movf	tablat,w,c
 10032  00FB3C  0100               	movlb	0	; () banked
 10033  00FB3E  59AD               	subwfb	(sprintf@val+1)& (0+255),w,b
 10034  00FB40  0009               	tblrd		*+
 10035  00FB42  50F5               	movf	tablat,w,c
 10036  00FB44  0100               	movlb	0	; () banked
 10037  00FB46  59AE               	subwfb	(sprintf@val+2)& (0+255),w,b
 10038  00FB48  0009               	tblrd		*+
 10039  00FB4A  50F5               	movf	tablat,w,c
 10040  00FB4C  0100               	movlb	0	; () banked
 10041  00FB4E  59AF               	subwfb	(sprintf@val+3)& (0+255),w,b
 10042  00FB50  A0D8               	btfss	status,0,c
 10043  00FB52  D005               	goto	l4344
 10044  00FB54  D001               	goto	l4340
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;doprnt.c: 1307: break;
 10048  00FB56  D003               	goto	l4344
 10049  00FB58                     l4340:
 10050                           
 10051                           ; BSR set to: 0
 10052  00FB58  0100               	movlb	0	; () banked
 10053  00FB5A  2BBF               	incf	sprintf@c& (0+255),f,b
 10054  00FB5C  D7D9               	goto	l4332
 10055  00FB5E                     l4344:
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;doprnt.c: 1339: if(c < prec)
 10059  00FB5E  0E80               	movlw	128
 10060  00FB60  0100               	movlb	0	; () banked
 10061  00FB62  BFBF               	btfsc	sprintf@c& (0+255),7,b
 10062  00FB64  0E7F               	movlw	127
 10063  00FB66  6E4D               	movwf	??_sprintf& (0+255),c
 10064  00FB68  0100               	movlb	0	; () banked
 10065  00FB6A  51BD               	movf	sprintf@prec& (0+255),w,b
 10066  00FB6C  0100               	movlb	0	; () banked
 10067  00FB6E  5DBF               	subwf	sprintf@c& (0+255),w,b
 10068  00FB70  0100               	movlb	0	; () banked
 10069  00FB72  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
 10070  00FB74  0A80               	xorlw	128
 10071  00FB76  584D               	subwfb	??_sprintf& (0+255),w,c
 10072  00FB78  B0D8               	btfsc	status,0,c
 10073  00FB7A  D003               	goto	l4348
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;doprnt.c: 1340: c = prec;
 10077  00FB7C  C0BD  F0BF         	movff	sprintf@prec,sprintf@c
 10078  00FB80  D017               	goto	l4352
 10079  00FB82                     l4348:
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;doprnt.c: 1341: else if(prec < c)
 10083  00FB82  0100               	movlb	0	; () banked
 10084  00FB84  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
 10085  00FB86  0A80               	xorlw	128
 10086  00FB88  6E4D               	movwf	??_sprintf& (0+255),c
 10087  00FB8A  0100               	movlb	0	; () banked
 10088  00FB8C  51BF               	movf	sprintf@c& (0+255),w,b
 10089  00FB8E  0100               	movlb	0	; () banked
 10090  00FB90  5DBD               	subwf	sprintf@prec& (0+255),w,b
 10091  00FB92  0E80               	movlw	128
 10092  00FB94  0100               	movlb	0	; () banked
 10093  00FB96  BFBF               	btfsc	sprintf@c& (0+255),7,b
 10094  00FB98  0E7F               	movlw	127
 10095  00FB9A  584D               	subwfb	??_sprintf& (0+255),w,c
 10096  00FB9C  B0D8               	btfsc	status,0,c
 10097  00FB9E  D008               	goto	l4352
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;doprnt.c: 1342: prec = c;
 10101  00FBA0  0100               	movlb	0	; () banked
 10102  00FBA2  51BF               	movf	sprintf@c& (0+255),w,b
 10103  00FBA4  0100               	movlb	0	; () banked
 10104  00FBA6  6FBD               	movwf	sprintf@prec& (0+255),b
 10105  00FBA8  6BBE               	clrf	(sprintf@prec+1)& (0+255),b
 10106  00FBAA  BFBD               	btfsc	sprintf@prec& (0+255),7,b
 10107  00FBAC  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
 10108                           
 10109                           ; BSR set to: 0
 10110  00FBAE  D000               	goto	l4352
 10111  00FBB0                     l4352:
 10112                           
 10113                           ; BSR set to: 0
 10114                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10115  00FBB0  0100               	movlb	0	; () banked
 10116  00FBB2  51BB               	movf	sprintf@width& (0+255),w,b
 10117  00FBB4  0100               	movlb	0	; () banked
 10118  00FBB6  11BC               	iorwf	(sprintf@width+1)& (0+255),w,b
 10119  00FBB8  B4D8               	btfsc	status,2,c
 10120  00FBBA  D011               	goto	l4358
 10121                           
 10122                           ; BSR set to: 0
 10123  00FBBC  0E03               	movlw	3
 10124  00FBBE  0100               	movlb	0	; () banked
 10125  00FBC0  15B6               	andwf	sprintf@flag& (0+255),w,b
 10126  00FBC2  6E4D               	movwf	??_sprintf& (0+255),c
 10127  00FBC4  0E00               	movlw	0
 10128  00FBC6  0100               	movlb	0	; () banked
 10129  00FBC8  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
 10130  00FBCA  6E4E               	movwf	(??_sprintf+1)& (0+255),c
 10131  00FBCC  504D               	movf	??_sprintf,w,c
 10132  00FBCE  104E               	iorwf	??_sprintf+1,w,c
 10133  00FBD0  B4D8               	btfsc	status,2,c
 10134  00FBD2  D005               	goto	l4358
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;doprnt.c: 1346: width--;
 10138  00FBD4  0100               	movlb	0	; () banked
 10139  00FBD6  07BB               	decf	sprintf@width& (0+255),f,b
 10140  00FBD8  A0D8               	btfss	status,0,c
 10141  00FBDA  07BC               	decf	(sprintf@width+1)& (0+255),f,b
 10142  00FBDC  D000               	goto	l4358
 10143  00FBDE                     l4358:
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;doprnt.c: 1348: if(flag & 0x4000) {
 10147  00FBDE  0100               	movlb	0	; () banked
 10148  00FBE0  ADB7               	btfss	(sprintf@flag+1)& (0+255),6,b
 10149  00FBE2  D01D               	goto	l4366
 10150                           
 10151                           ; BSR set to: 0
 10152                           ;doprnt.c: 1349: if(width > prec)
 10153  00FBE4  0100               	movlb	0	; () banked
 10154  00FBE6  51BB               	movf	sprintf@width& (0+255),w,b
 10155  00FBE8  0100               	movlb	0	; () banked
 10156  00FBEA  5DBD               	subwf	sprintf@prec& (0+255),w,b
 10157  00FBEC  0100               	movlb	0	; () banked
 10158  00FBEE  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
 10159  00FBF0  0A80               	xorlw	128
 10160  00FBF2  6E4D               	movwf	??_sprintf& (0+255),c
 10161  00FBF4  0100               	movlb	0	; () banked
 10162  00FBF6  51BC               	movf	(sprintf@width+1)& (0+255),w,b
 10163  00FBF8  0A80               	xorlw	128
 10164  00FBFA  584D               	subwfb	??_sprintf& (0+255),w,c
 10165  00FBFC  B0D8               	btfsc	status,0,c
 10166  00FBFE  D009               	goto	l4364
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;doprnt.c: 1350: width -= prec;
 10170  00FC00  0100               	movlb	0	; () banked
 10171  00FC02  51BD               	movf	sprintf@prec& (0+255),w,b
 10172  00FC04  0100               	movlb	0	; () banked
 10173  00FC06  5FBB               	subwf	sprintf@width& (0+255),f,b
 10174  00FC08  0100               	movlb	0	; () banked
 10175  00FC0A  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
 10176  00FC0C  0100               	movlb	0	; () banked
 10177  00FC0E  5BBC               	subwfb	(sprintf@width+1)& (0+255),f,b
 10178  00FC10  D006               	goto	l4366
 10179  00FC12                     l4364:
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;doprnt.c: 1351: else
 10183                           ;doprnt.c: 1352: width = 0;
 10184  00FC12  0E00               	movlw	0
 10185  00FC14  0100               	movlb	0	; () banked
 10186  00FC16  6FBC               	movwf	(sprintf@width+1)& (0+255),b
 10187  00FC18  0E00               	movlw	0
 10188  00FC1A  6FBB               	movwf	sprintf@width& (0+255),b
 10189                           
 10190                           ; BSR set to: 0
 10191  00FC1C  D000               	goto	l4366
 10192  00FC1E                     l4366:
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;doprnt.c: 1353: }
 10196                           ;doprnt.c: 1381: if(width > c)
 10197  00FC1E  0E80               	movlw	128
 10198  00FC20  0100               	movlb	0	; () banked
 10199  00FC22  BFBF               	btfsc	sprintf@c& (0+255),7,b
 10200  00FC24  0E7F               	movlw	127
 10201  00FC26  6E4D               	movwf	??_sprintf& (0+255),c
 10202  00FC28  0100               	movlb	0	; () banked
 10203  00FC2A  51BB               	movf	sprintf@width& (0+255),w,b
 10204  00FC2C  0100               	movlb	0	; () banked
 10205  00FC2E  5DBF               	subwf	sprintf@c& (0+255),w,b
 10206  00FC30  0100               	movlb	0	; () banked
 10207  00FC32  51BC               	movf	(sprintf@width+1)& (0+255),w,b
 10208  00FC34  0A80               	xorlw	128
 10209  00FC36  584D               	subwfb	??_sprintf& (0+255),w,c
 10210  00FC38  B0D8               	btfsc	status,0,c
 10211  00FC3A  D00B               	goto	l4370
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;doprnt.c: 1382: width -= c;
 10215  00FC3C  0100               	movlb	0	; () banked
 10216  00FC3E  51BF               	movf	sprintf@c& (0+255),w,b
 10217  00FC40  0100               	movlb	0	; () banked
 10218  00FC42  5FBB               	subwf	sprintf@width& (0+255),f,b
 10219  00FC44  0E00               	movlw	0
 10220  00FC46  0100               	movlb	0	; () banked
 10221  00FC48  BFBF               	btfsc	sprintf@c& (0+255),7,b
 10222  00FC4A  0EFF               	movlw	255
 10223  00FC4C  0100               	movlb	0	; () banked
 10224  00FC4E  5BBC               	subwfb	(sprintf@width+1)& (0+255),f,b
 10225  00FC50  D006               	goto	l4372
 10226  00FC52                     l4370:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;doprnt.c: 1383: else
 10230                           ;doprnt.c: 1384: width = 0;
 10231  00FC52  0E00               	movlw	0
 10232  00FC54  0100               	movlb	0	; () banked
 10233  00FC56  6FBC               	movwf	(sprintf@width+1)& (0+255),b
 10234  00FC58  0E00               	movlw	0
 10235  00FC5A  6FBB               	movwf	sprintf@width& (0+255),b
 10236  00FC5C  D000               	goto	l4372
 10237  00FC5E                     l4372:
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;doprnt.c: 1387: if(flag & 0x04) {
 10241  00FC5E  0100               	movlb	0	; () banked
 10242  00FC60  A5B6               	btfss	sprintf@flag& (0+255),2,b
 10243  00FC62  D02F               	goto	l4388
 10244                           
 10245                           ; BSR set to: 0
 10246                           ;doprnt.c: 1392: if(flag & 0x03)
 10247  00FC64  0E03               	movlw	3
 10248  00FC66  0100               	movlb	0	; () banked
 10249  00FC68  15B6               	andwf	sprintf@flag& (0+255),w,b
 10250  00FC6A  6E4D               	movwf	??_sprintf& (0+255),c
 10251  00FC6C  0E00               	movlw	0
 10252  00FC6E  0100               	movlb	0	; () banked
 10253  00FC70  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
 10254  00FC72  6E4E               	movwf	(??_sprintf+1)& (0+255),c
 10255  00FC74  504D               	movf	??_sprintf,w,c
 10256  00FC76  104E               	iorwf	??_sprintf+1,w,c
 10257  00FC78  B4D8               	btfsc	status,2,c
 10258  00FC7A  D009               	goto	l4380
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;doprnt.c: 1393: ((*sp++ = ('-')));
 10262  00FC7C  C043  FFD9         	movff	sprintf@sp,fsr2l
 10263  00FC80  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10264  00FC84  0E2D               	movlw	45
 10265  00FC86  6EDF               	movwf	indf2,c
 10266                           
 10267                           ; BSR set to: 0
 10268  00FC88  4A43               	infsnz	sprintf@sp,f,c
 10269  00FC8A  2A44               	incf	sprintf@sp+1,f,c
 10270  00FC8C  D000               	goto	l4380
 10271  00FC8E                     l4380:
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;doprnt.c: 1415: if(width)
 10275  00FC8E  0100               	movlb	0	; () banked
 10276  00FC90  51BB               	movf	sprintf@width& (0+255),w,b
 10277  00FC92  0100               	movlb	0	; () banked
 10278  00FC94  11BC               	iorwf	(sprintf@width+1)& (0+255),w,b
 10279  00FC96  B4D8               	btfsc	status,2,c
 10280  00FC98  D087               	goto	l4408
 10281  00FC9A                     l4382:
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;doprnt.c: 1417: ((*sp++ = ('0')));
 10285  00FC9A  C043  FFD9         	movff	sprintf@sp,fsr2l
 10286  00FC9E  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10287  00FCA2  0E30               	movlw	48
 10288  00FCA4  6EDF               	movwf	indf2,c
 10289                           
 10290                           ; BSR set to: 0
 10291  00FCA6  4A43               	infsnz	sprintf@sp,f,c
 10292  00FCA8  2A44               	incf	sprintf@sp+1,f,c
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;doprnt.c: 1418: while(--width);
 10296  00FCAA  0100               	movlb	0	; () banked
 10297  00FCAC  07BB               	decf	sprintf@width& (0+255),f,b
 10298  00FCAE  A0D8               	btfss	status,0,c
 10299  00FCB0  07BC               	decf	(sprintf@width+1)& (0+255),f,b
 10300  00FCB2  0100               	movlb	0	; () banked
 10301  00FCB4  51BB               	movf	sprintf@width& (0+255),w,b
 10302  00FCB6  0100               	movlb	0	; () banked
 10303  00FCB8  11BC               	iorwf	(sprintf@width+1)& (0+255),w,b
 10304  00FCBA  B4D8               	btfsc	status,2,c
 10305  00FCBC  D075               	goto	l4408
 10306  00FCBE  D7ED               	goto	l4382
 10307                           
 10308                           ; BSR set to: 0
 10309                           ;doprnt.c: 1420: } else
 10310                           
 10311                           ; BSR set to: 0
 10312  00FCC0  D073               	goto	l4408
 10313  00FCC2                     l4388:
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;doprnt.c: 1422: {
 10317                           ;doprnt.c: 1424: if(width
 10318                           ;doprnt.c: 1428: )
 10319  00FCC2  0100               	movlb	0	; () banked
 10320  00FCC4  51BB               	movf	sprintf@width& (0+255),w,b
 10321  00FCC6  0100               	movlb	0	; () banked
 10322  00FCC8  11BC               	iorwf	(sprintf@width+1)& (0+255),w,b
 10323  00FCCA  B4D8               	btfsc	status,2,c
 10324  00FCCC  D014               	goto	l4396
 10325  00FCCE                     l4390:
 10326                           
 10327                           ; BSR set to: 0
 10328                           ;doprnt.c: 1430: ((*sp++ = (' ')));
 10329  00FCCE  C043  FFD9         	movff	sprintf@sp,fsr2l
 10330  00FCD2  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10331  00FCD6  0E20               	movlw	32
 10332  00FCD8  6EDF               	movwf	indf2,c
 10333                           
 10334                           ; BSR set to: 0
 10335  00FCDA  4A43               	infsnz	sprintf@sp,f,c
 10336  00FCDC  2A44               	incf	sprintf@sp+1,f,c
 10337                           
 10338                           ; BSR set to: 0
 10339                           ;doprnt.c: 1431: while(--width);
 10340  00FCDE  0100               	movlb	0	; () banked
 10341  00FCE0  07BB               	decf	sprintf@width& (0+255),f,b
 10342  00FCE2  A0D8               	btfss	status,0,c
 10343  00FCE4  07BC               	decf	(sprintf@width+1)& (0+255),f,b
 10344  00FCE6  0100               	movlb	0	; () banked
 10345  00FCE8  51BB               	movf	sprintf@width& (0+255),w,b
 10346  00FCEA  0100               	movlb	0	; () banked
 10347  00FCEC  11BC               	iorwf	(sprintf@width+1)& (0+255),w,b
 10348  00FCEE  B4D8               	btfsc	status,2,c
 10349  00FCF0  D002               	goto	l4396
 10350  00FCF2  D7ED               	goto	l4390
 10351                           
 10352                           ; BSR set to: 0
 10353  00FCF4  D000               	goto	l4396
 10354  00FCF6                     l4396:
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;doprnt.c: 1438: if(flag & 0x03)
 10358  00FCF6  0E03               	movlw	3
 10359  00FCF8  0100               	movlb	0	; () banked
 10360  00FCFA  15B6               	andwf	sprintf@flag& (0+255),w,b
 10361  00FCFC  6E4D               	movwf	??_sprintf& (0+255),c
 10362  00FCFE  0E00               	movlw	0
 10363  00FD00  0100               	movlb	0	; () banked
 10364  00FD02  15B7               	andwf	(sprintf@flag+1)& (0+255),w,b
 10365  00FD04  6E4E               	movwf	(??_sprintf+1)& (0+255),c
 10366  00FD06  504D               	movf	??_sprintf,w,c
 10367  00FD08  104E               	iorwf	??_sprintf+1,w,c
 10368  00FD0A  B4D8               	btfsc	status,2,c
 10369  00FD0C  D04D               	goto	l4408
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;doprnt.c: 1439: ((*sp++ = ('-')));
 10373  00FD0E  C043  FFD9         	movff	sprintf@sp,fsr2l
 10374  00FD12  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10375  00FD16  0E2D               	movlw	45
 10376  00FD18  6EDF               	movwf	indf2,c
 10377  00FD1A  D043               	goto	l4406
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;doprnt.c: 1469: }
 10381                           ;doprnt.c: 1474: while(prec--) {
 10382                           
 10383                           ; BSR set to: 0
 10384                           
 10385                           ; BSR set to: 0
 10386  00FD1C  D045               	goto	l4408
 10387  00FD1E                     l4402:
 10388                           
 10389                           ; BSR set to: 0
 10390                           ;doprnt.c: 1478: {
 10391                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10392  00FD1E  C0BD  F04D         	movff	sprintf@prec,??_sprintf
 10393  00FD22  C0BE  F04E         	movff	sprintf@prec+1,??_sprintf+1
 10394  00FD26  90D8               	bcf	status,0,c
 10395  00FD28  364D               	rlcf	??_sprintf,f,c
 10396  00FD2A  364E               	rlcf	??_sprintf+1,f,c
 10397  00FD2C  90D8               	bcf	status,0,c
 10398  00FD2E  364D               	rlcf	??_sprintf,f,c
 10399  00FD30  364E               	rlcf	??_sprintf+1,f,c
 10400  00FD32  0EF3               	movlw	low _dpowers
 10401  00FD34  244D               	addwf	??_sprintf,w,c
 10402  00FD36  6EF6               	movwf	tblptrl,c
 10403  00FD38  0EFD               	movlw	high _dpowers
 10404  00FD3A  204E               	addwfc	??_sprintf+1,w,c
 10405  00FD3C  6EF7               	movwf	tblptrh,c
 10406  00FD3E                     	if	0	;There are less than 3 active tblptr bytes
 10407  00FD3E                     	endif
 10408  00FD3E  0009               	tblrd		*+
 10409  00FD40  CFF5 F005          	movff	tablat,___lldiv@divisor
 10410  00FD44  0009               	tblrd		*+
 10411  00FD46  CFF5 F006          	movff	tablat,___lldiv@divisor+1
 10412  00FD4A  0009               	tblrd		*+
 10413  00FD4C  CFF5 F007          	movff	tablat,___lldiv@divisor+2
 10414  00FD50  000A               	tblrd		*-
 10415  00FD52  CFF5 F008          	movff	tablat,___lldiv@divisor+3
 10416  00FD56  C0AC  F001         	movff	sprintf@val,___lldiv@dividend
 10417  00FD5A  C0AD  F002         	movff	sprintf@val+1,___lldiv@dividend+1
 10418  00FD5E  C0AE  F003         	movff	sprintf@val+2,___lldiv@dividend+2
 10419  00FD62  C0AF  F004         	movff	sprintf@val+3,___lldiv@dividend+3
 10420  00FD66  EC7F  F05F         	call	___lldiv	;wreg free
 10421  00FD6A  C001  F00E         	movff	?___lldiv,___llmod@dividend
 10422  00FD6E  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
 10423  00FD72  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
 10424  00FD76  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
 10425  00FD7A  0E0A               	movlw	10
 10426  00FD7C  6E12               	movwf	___llmod@divisor,c
 10427  00FD7E  0E00               	movlw	0
 10428  00FD80  6E13               	movwf	___llmod@divisor+1,c
 10429  00FD82  0E00               	movlw	0
 10430  00FD84  6E14               	movwf	___llmod@divisor+2,c
 10431  00FD86  0E00               	movlw	0
 10432  00FD88  6E15               	movwf	___llmod@divisor+3,c
 10433  00FD8A  EC89  F05E         	call	___llmod	;wreg free
 10434  00FD8E  500E               	movf	?___llmod,w,c
 10435  00FD90  0F30               	addlw	48
 10436  00FD92  0100               	movlb	0	; () banked
 10437  00FD94  6FBF               	movwf	sprintf@c& (0+255),b
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;doprnt.c: 1523: }
 10441                           ;doprnt.c: 1524: ((*sp++ = (c)));
 10442  00FD96  C043  FFD9         	movff	sprintf@sp,fsr2l
 10443  00FD9A  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10444  00FD9E  C0BF  FFDF         	movff	sprintf@c,indf2
 10445  00FDA2                     l4406:
 10446                           
 10447                           ; BSR set to: 0
 10448  00FDA2  4A43               	infsnz	sprintf@sp,f,c
 10449  00FDA4  2A44               	incf	sprintf@sp+1,f,c
 10450  00FDA6  D000               	goto	l4408
 10451  00FDA8                     l4408:
 10452                           
 10453                           ; BSR set to: 0
 10454  00FDA8  0100               	movlb	0	; () banked
 10455  00FDAA  07BD               	decf	sprintf@prec& (0+255),f,b
 10456  00FDAC  A0D8               	btfss	status,0,c
 10457  00FDAE  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
 10458  00FDB0  0100               	movlb	0	; () banked
 10459  00FDB2  29BD               	incf	sprintf@prec& (0+255),w,b
 10460  00FDB4  E1B4               	bnz	l4402
 10461  00FDB6  0100               	movlb	0	; () banked
 10462  00FDB8  29BE               	incf	(sprintf@prec+1)& (0+255),w,b
 10463  00FDBA  B4D8               	btfsc	status,2,c
 10464  00FDBC  D002               	goto	l4410
 10465  00FDBE  D7AF               	goto	l4402
 10466                           
 10467                           ; BSR set to: 0
 10468  00FDC0  D000               	goto	l4410
 10469  00FDC2                     l4410:
 10470                           
 10471                           ; BSR set to: 0
 10472  00FDC2  C045  FFF6         	movff	sprintf@f,tblptrl
 10473  00FDC6  C046  FFF7         	movff	sprintf@f+1,tblptrh
 10474  00FDCA  4A45               	infsnz	sprintf@f,f,c
 10475  00FDCC  2A46               	incf	sprintf@f+1,f,c
 10476  00FDCE                     	if	0	;tblptru may be non-zero
 10477  00FDCE                     	endif
 10478  00FDCE                     	if	0	;tblptru may be non-zero
 10479  00FDCE                     	endif
 10480  00FDCE  0008               	tblrd		*
 10481  00FDD0  CFF5 F0BF          	movff	tablat,sprintf@c
 10482  00FDD4  0100               	movlb	0	; () banked
 10483  00FDD6  51BF               	movf	sprintf@c& (0+255),w,b
 10484  00FDD8  B4D8               	btfsc	status,2,c
 10485  00FDDA  D003               	goto	l4412
 10486  00FDDC  EF07  F078         	goto	l4042
 10487                           
 10488                           ; BSR set to: 0
 10489  00FDE0  D000               	goto	l4412
 10490  00FDE2                     l4412:
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;doprnt.c: 1538: *sp = 0;
 10494  00FDE2  C043  FFD9         	movff	sprintf@sp,fsr2l
 10495  00FDE6  C044  FFDA         	movff	sprintf@sp+1,fsr2h
 10496  00FDEA  0E00               	movlw	0
 10497  00FDEC  6EDF               	movwf	indf2,c
 10498  00FDEE  0012               	return	
 10499                           
 10500                           ; BSR set to: 0
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;doprnt.c: 1540: return 0;
 10504                           ;	Return value of _sprintf is never used
 10505  00FDF0  0012               	return		;funcret
 10506  00FDF2                     __end_of_sprintf:
 10507                           	opt stack 0
 10508                           tblptru	equ	0xFF8
 10509                           tblptrh	equ	0xFF7
 10510                           tblptrl	equ	0xFF6
 10511                           tablat	equ	0xFF5
 10512                           prodh	equ	0xFF4
 10513                           prodl	equ	0xFF3
 10514                           intcon	equ	0xFF2
 10515                           indf0	equ	0xFEF
 10516                           postinc0	equ	0xFEE
 10517                           fsr0h	equ	0xFEA
 10518                           fsr0l	equ	0xFE9
 10519                           wreg	equ	0xFE8
 10520                           postdec1	equ	0xFE5
 10521                           fsr1l	equ	0xFE1
 10522                           indf2	equ	0xFDF
 10523                           postinc2	equ	0xFDE
 10524                           postdec2	equ	0xFDD
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _scale *****************
 10530 ;; Defined at:
 10531 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;  scl             1    wreg     char 
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  scl             1   41[COMRAM] char 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  3   35[COMRAM] char 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10540 ;; Tracked objects:
 10541 ;;		On entry : 0/0
 10542 ;;		On exit  : 0/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10545 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10546 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10548 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10549 ;;Total ram usage:        7 bytes
 10550 ;; Hardware stack levels used:    1
 10551 ;; Hardware stack levels required when called:    2
 10552 ;; This function calls:
 10553 ;;		___awdiv
 10554 ;;		___awmod
 10555 ;;		___ftmul
 10556 ;;		___wmul
 10557 ;; This function is called by:
 10558 ;;		_sprintf
 10559 ;; This function uses a non-reentrant model
 10560 ;;
 10561                           
 10562                           	psect	text23
 10563  00DCA4                     __ptext23:
 10564                           	opt stack 0
 10565  00DCA4                     _scale:
 10566                           	opt stack 27
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;incstack = 0
 10570                           ;scale@scl stored from wreg
 10571  00DCA4  6E2A               	movwf	scale@scl,c
 10572                           
 10573                           ;doprnt.c: 428: if(scl < 0) {
 10574  00DCA6  AE2A               	btfss	scale@scl,7,c
 10575  00DCA8  D0FE               	goto	l3724
 10576                           
 10577                           ;doprnt.c: 429: scl = -scl;
 10578  00DCAA  6C2A               	negf	scale@scl,c
 10579                           
 10580                           ;doprnt.c: 430: if(scl>=110)
 10581  00DCAC  502A               	movf	scale@scl,w,c
 10582  00DCAE  0A80               	xorlw	128
 10583  00DCB0  0F12               	addlw	-238
 10584  00DCB2  A0D8               	btfss	status,0,c
 10585  00DCB4  D092               	goto	l3714
 10586                           
 10587                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10588  00DCB6  0E00               	movlw	0
 10589  00DCB8  6E12               	movwf	___wmul@multiplicand+1,c
 10590  00DCBA  0E03               	movlw	3
 10591  00DCBC  6E11               	movwf	___wmul@multiplicand,c
 10592  00DCBE  0E00               	movlw	0
 10593  00DCC0  6E0A               	movwf	___awdiv@divisor+1,c
 10594  00DCC2  0E0A               	movlw	10
 10595  00DCC4  6E09               	movwf	___awdiv@divisor,c
 10596  00DCC6  0E00               	movlw	0
 10597  00DCC8  6E04               	movwf	___awmod@divisor+1,c
 10598  00DCCA  0E64               	movlw	100
 10599  00DCCC  6E03               	movwf	___awmod@divisor,c
 10600  00DCCE  502A               	movf	scale@scl,w,c
 10601  00DCD0  6E01               	movwf	___awmod@dividend,c
 10602  00DCD2  6A02               	clrf	___awmod@dividend+1,c
 10603  00DCD4  BE01               	btfsc	___awmod@dividend,7,c
 10604  00DCD6  0602               	decf	___awmod@dividend+1,f,c
 10605  00DCD8  ECFA  F05E         	call	___awmod	;wreg free
 10606  00DCDC  C001  F007         	movff	?___awmod,___awdiv@dividend
 10607  00DCE0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 10608  00DCE4  ECA1  F060         	call	___awdiv	;wreg free
 10609  00DCE8  0E09               	movlw	9
 10610  00DCEA  2407               	addwf	?___awdiv,w,c
 10611  00DCEC  6E0F               	movwf	___wmul@multiplier,c
 10612  00DCEE  0E00               	movlw	0
 10613  00DCF0  2008               	addwfc	?___awdiv+1,w,c
 10614  00DCF2  6E10               	movwf	___wmul@multiplier+1,c
 10615  00DCF4  EC81  F05D         	call	___wmul	;wreg free
 10616  00DCF8  0E1B               	movlw	low __npowers_
 10617  00DCFA  240F               	addwf	?___wmul,w,c
 10618  00DCFC  6EF6               	movwf	tblptrl,c
 10619  00DCFE  0EFE               	movlw	high __npowers_
 10620  00DD00  2010               	addwfc	?___wmul+1,w,c
 10621  00DD02  6EF7               	movwf	tblptrh,c
 10622  00DD04                     	if	0	;There are less than 3 active tblptr bytes
 10623  00DD04                     	endif
 10624  00DD04  0009               	tblrd		*+
 10625  00DD06  CFF5 F018          	movff	tablat,___ftmul@f2
 10626  00DD0A  0009               	tblrd		*+
 10627  00DD0C  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10628  00DD10  000A               	tblrd		*-
 10629  00DD12  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10630  00DD16  0E00               	movlw	0
 10631  00DD18  6E0A               	movwf	___awdiv@divisor+1,c
 10632  00DD1A  0E64               	movlw	100
 10633  00DD1C  6E09               	movwf	___awdiv@divisor,c
 10634  00DD1E  502A               	movf	scale@scl,w,c
 10635  00DD20  6E07               	movwf	___awdiv@dividend,c
 10636  00DD22  6A08               	clrf	___awdiv@dividend+1,c
 10637  00DD24  BE07               	btfsc	___awdiv@dividend,7,c
 10638  00DD26  0608               	decf	___awdiv@dividend+1,f,c
 10639  00DD28  ECA1  F060         	call	___awdiv	;wreg free
 10640  00DD2C  0E12               	movlw	18
 10641  00DD2E  2407               	addwf	?___awdiv,w,c
 10642  00DD30  6E0F               	movwf	___wmul@multiplier,c
 10643  00DD32  0E00               	movlw	0
 10644  00DD34  2008               	addwfc	?___awdiv+1,w,c
 10645  00DD36  6E10               	movwf	___wmul@multiplier+1,c
 10646  00DD38  0E00               	movlw	0
 10647  00DD3A  6E12               	movwf	___wmul@multiplicand+1,c
 10648  00DD3C  0E03               	movlw	3
 10649  00DD3E  6E11               	movwf	___wmul@multiplicand,c
 10650  00DD40  EC81  F05D         	call	___wmul	;wreg free
 10651  00DD44  0E1B               	movlw	low __npowers_
 10652  00DD46  240F               	addwf	?___wmul,w,c
 10653  00DD48  6EF6               	movwf	tblptrl,c
 10654  00DD4A  0EFE               	movlw	high __npowers_
 10655  00DD4C  2010               	addwfc	?___wmul+1,w,c
 10656  00DD4E  6EF7               	movwf	tblptrh,c
 10657  00DD50                     	if	0	;There are less than 3 active tblptr bytes
 10658  00DD50                     	endif
 10659  00DD50  0009               	tblrd		*+
 10660  00DD52  CFF5 F015          	movff	tablat,___ftmul@f1
 10661  00DD56  0009               	tblrd		*+
 10662  00DD58  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10663  00DD5C  000A               	tblrd		*-
 10664  00DD5E  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10665  00DD62  EC9A  F062         	call	___ftmul	;wreg free
 10666  00DD66  C015  F027         	movff	?___ftmul,_scale$2457
 10667  00DD6A  C016  F028         	movff	?___ftmul+1,_scale$2457+1
 10668  00DD6E  C017  F029         	movff	?___ftmul+2,_scale$2457+2
 10669                           
 10670                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 10671  00DD72  C027  F015         	movff	_scale$2457,___ftmul@f1
 10672  00DD76  C028  F016         	movff	_scale$2457+1,___ftmul@f1+1
 10673  00DD7A  C029  F017         	movff	_scale$2457+2,___ftmul@f1+2
 10674  00DD7E  0E00               	movlw	0
 10675  00DD80  6E12               	movwf	___wmul@multiplicand+1,c
 10676  00DD82  0E03               	movlw	3
 10677  00DD84  6E11               	movwf	___wmul@multiplicand,c
 10678  00DD86  0E00               	movlw	0
 10679  00DD88  6E04               	movwf	___awmod@divisor+1,c
 10680  00DD8A  0E0A               	movlw	10
 10681  00DD8C  6E03               	movwf	___awmod@divisor,c
 10682  00DD8E  502A               	movf	scale@scl,w,c
 10683  00DD90  6E01               	movwf	___awmod@dividend,c
 10684  00DD92  6A02               	clrf	___awmod@dividend+1,c
 10685  00DD94  BE01               	btfsc	___awmod@dividend,7,c
 10686  00DD96  0602               	decf	___awmod@dividend+1,f,c
 10687  00DD98  ECFA  F05E         	call	___awmod	;wreg free
 10688  00DD9C  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10689  00DDA0  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10690  00DDA4  EC81  F05D         	call	___wmul	;wreg free
 10691  00DDA8  0E1B               	movlw	low __npowers_
 10692  00DDAA  240F               	addwf	?___wmul,w,c
 10693  00DDAC  6EF6               	movwf	tblptrl,c
 10694  00DDAE  0EFE               	movlw	high __npowers_
 10695  00DDB0  2010               	addwfc	?___wmul+1,w,c
 10696  00DDB2  6EF7               	movwf	tblptrh,c
 10697  00DDB4                     	if	0	;There are less than 3 active tblptr bytes
 10698  00DDB4                     	endif
 10699  00DDB4  0009               	tblrd		*+
 10700  00DDB6  CFF5 F018          	movff	tablat,___ftmul@f2
 10701  00DDBA  0009               	tblrd		*+
 10702  00DDBC  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10703  00DDC0  000A               	tblrd		*-
 10704  00DDC2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10705  00DDC6  EC9A  F062         	call	___ftmul	;wreg free
 10706  00DDCA  C015  F024         	movff	?___ftmul,?_scale
 10707  00DDCE  C016  F025         	movff	?___ftmul+1,?_scale+1
 10708  00DDD2  C017  F026         	movff	?___ftmul+2,?_scale+2
 10709  00DDD6  0012               	return	
 10710  00DDD8  D054               	goto	l3720
 10711  00DDDA                     l3714:
 10712                           
 10713                           ;doprnt.c: 432: else if(scl > 10)
 10714  00DDDA  502A               	movf	scale@scl,w,c
 10715  00DDDC  0A80               	xorlw	128
 10716  00DDDE  0F75               	addlw	-139
 10717  00DDE0  A0D8               	btfss	status,0,c
 10718  00DDE2  D04F               	goto	l3720
 10719                           
 10720                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 10721  00DDE4  0E00               	movlw	0
 10722  00DDE6  6E0A               	movwf	___awdiv@divisor+1,c
 10723  00DDE8  0E0A               	movlw	10
 10724  00DDEA  6E09               	movwf	___awdiv@divisor,c
 10725  00DDEC  502A               	movf	scale@scl,w,c
 10726  00DDEE  6E07               	movwf	___awdiv@dividend,c
 10727  00DDF0  6A08               	clrf	___awdiv@dividend+1,c
 10728  00DDF2  BE07               	btfsc	___awdiv@dividend,7,c
 10729  00DDF4  0608               	decf	___awdiv@dividend+1,f,c
 10730  00DDF6  ECA1  F060         	call	___awdiv	;wreg free
 10731  00DDFA  0E09               	movlw	9
 10732  00DDFC  2407               	addwf	?___awdiv,w,c
 10733  00DDFE  6E0F               	movwf	___wmul@multiplier,c
 10734  00DE00  0E00               	movlw	0
 10735  00DE02  2008               	addwfc	?___awdiv+1,w,c
 10736  00DE04  6E10               	movwf	___wmul@multiplier+1,c
 10737  00DE06  0E00               	movlw	0
 10738  00DE08  6E12               	movwf	___wmul@multiplicand+1,c
 10739  00DE0A  0E03               	movlw	3
 10740  00DE0C  6E11               	movwf	___wmul@multiplicand,c
 10741  00DE0E  EC81  F05D         	call	___wmul	;wreg free
 10742  00DE12  0E1B               	movlw	low __npowers_
 10743  00DE14  240F               	addwf	?___wmul,w,c
 10744  00DE16  6EF6               	movwf	tblptrl,c
 10745  00DE18  0EFE               	movlw	high __npowers_
 10746  00DE1A  2010               	addwfc	?___wmul+1,w,c
 10747  00DE1C  6EF7               	movwf	tblptrh,c
 10748  00DE1E                     	if	0	;There are less than 3 active tblptr bytes
 10749  00DE1E                     	endif
 10750  00DE1E  0009               	tblrd		*+
 10751  00DE20  CFF5 F015          	movff	tablat,___ftmul@f1
 10752  00DE24  0009               	tblrd		*+
 10753  00DE26  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10754  00DE2A  000A               	tblrd		*-
 10755  00DE2C  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10756  00DE30  0E00               	movlw	0
 10757  00DE32  6E12               	movwf	___wmul@multiplicand+1,c
 10758  00DE34  0E03               	movlw	3
 10759  00DE36  6E11               	movwf	___wmul@multiplicand,c
 10760  00DE38  0E00               	movlw	0
 10761  00DE3A  6E04               	movwf	___awmod@divisor+1,c
 10762  00DE3C  0E0A               	movlw	10
 10763  00DE3E  6E03               	movwf	___awmod@divisor,c
 10764  00DE40  502A               	movf	scale@scl,w,c
 10765  00DE42  6E01               	movwf	___awmod@dividend,c
 10766  00DE44  6A02               	clrf	___awmod@dividend+1,c
 10767  00DE46  BE01               	btfsc	___awmod@dividend,7,c
 10768  00DE48  0602               	decf	___awmod@dividend+1,f,c
 10769  00DE4A  ECFA  F05E         	call	___awmod	;wreg free
 10770  00DE4E  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10771  00DE52  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10772  00DE56  EC81  F05D         	call	___wmul	;wreg free
 10773  00DE5A  0E1B               	movlw	low __npowers_
 10774  00DE5C  240F               	addwf	?___wmul,w,c
 10775  00DE5E  6EF6               	movwf	tblptrl,c
 10776  00DE60  0EFE               	movlw	high __npowers_
 10777  00DE62  2010               	addwfc	?___wmul+1,w,c
 10778  00DE64  6EF7               	movwf	tblptrh,c
 10779  00DE66                     	if	0	;There are less than 3 active tblptr bytes
 10780  00DE66                     	endif
 10781  00DE66  0009               	tblrd		*+
 10782  00DE68  CFF5 F018          	movff	tablat,___ftmul@f2
 10783  00DE6C  0009               	tblrd		*+
 10784  00DE6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10785  00DE72  000A               	tblrd		*-
 10786  00DE74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10787  00DE78  EC9A  F062         	call	___ftmul	;wreg free
 10788  00DE7C  D7A6               	goto	L9
 10789  00DE7E  0012               	return	
 10790  00DE80  D000               	goto	l3720
 10791  00DE82                     l3720:
 10792                           
 10793                           ;doprnt.c: 434: return _npowers_[scl];
 10794  00DE82  502A               	movf	scale@scl,w,c
 10795  00DE84  0D03               	mullw	3
 10796  00DE86  0E1B               	movlw	low __npowers_
 10797  00DE88  24F3               	addwf	prodl,w,c
 10798  00DE8A  6EF6               	movwf	tblptrl,c
 10799  00DE8C  0EFE               	movlw	high __npowers_
 10800  00DE8E  20F4               	addwfc	prodh,w,c
 10801  00DE90  6EF7               	movwf	tblptrh,c
 10802  00DE92                     	if	0	;There are less than 3 active tblptr bytes
 10803  00DE92                     	endif
 10804  00DE92  0009               	tblrd		*+
 10805  00DE94  CFF5 F024          	movff	tablat,?_scale
 10806  00DE98  0009               	tblrd		*+
 10807  00DE9A  CFF5 F025          	movff	tablat,?_scale+1
 10808  00DE9E  000A               	tblrd		*-
 10809  00DEA0  CFF5 F026          	movff	tablat,?_scale+2
 10810  00DEA4  0012               	return	
 10811  00DEA6                     l3724:
 10812                           
 10813                           ;doprnt.c: 435: }
 10814                           ;doprnt.c: 436: if(scl>=110)
 10815  00DEA6  502A               	movf	scale@scl,w,c
 10816  00DEA8  0A80               	xorlw	128
 10817  00DEAA  0F12               	addlw	-238
 10818  00DEAC  A0D8               	btfss	status,0,c
 10819  00DEAE  D092               	goto	l3732
 10820                           
 10821                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10822  00DEB0  0E00               	movlw	0
 10823  00DEB2  6E12               	movwf	___wmul@multiplicand+1,c
 10824  00DEB4  0E03               	movlw	3
 10825  00DEB6  6E11               	movwf	___wmul@multiplicand,c
 10826  00DEB8  0E00               	movlw	0
 10827  00DEBA  6E0A               	movwf	___awdiv@divisor+1,c
 10828  00DEBC  0E0A               	movlw	10
 10829  00DEBE  6E09               	movwf	___awdiv@divisor,c
 10830  00DEC0  0E00               	movlw	0
 10831  00DEC2  6E04               	movwf	___awmod@divisor+1,c
 10832  00DEC4  0E64               	movlw	100
 10833  00DEC6  6E03               	movwf	___awmod@divisor,c
 10834  00DEC8  502A               	movf	scale@scl,w,c
 10835  00DECA  6E01               	movwf	___awmod@dividend,c
 10836  00DECC  6A02               	clrf	___awmod@dividend+1,c
 10837  00DECE  BE01               	btfsc	___awmod@dividend,7,c
 10838  00DED0  0602               	decf	___awmod@dividend+1,f,c
 10839  00DED2  ECFA  F05E         	call	___awmod	;wreg free
 10840  00DED6  C001  F007         	movff	?___awmod,___awdiv@dividend
 10841  00DEDA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 10842  00DEDE  ECA1  F060         	call	___awdiv	;wreg free
 10843  00DEE2  0E09               	movlw	9
 10844  00DEE4  2407               	addwf	?___awdiv,w,c
 10845  00DEE6  6E0F               	movwf	___wmul@multiplier,c
 10846  00DEE8  0E00               	movlw	0
 10847  00DEEA  2008               	addwfc	?___awdiv+1,w,c
 10848  00DEEC  6E10               	movwf	___wmul@multiplier+1,c
 10849  00DEEE  EC81  F05D         	call	___wmul	;wreg free
 10850  00DEF2  0E42               	movlw	low __powers_
 10851  00DEF4  240F               	addwf	?___wmul,w,c
 10852  00DEF6  6EF6               	movwf	tblptrl,c
 10853  00DEF8  0EFE               	movlw	high __powers_
 10854  00DEFA  2010               	addwfc	?___wmul+1,w,c
 10855  00DEFC  6EF7               	movwf	tblptrh,c
 10856  00DEFE                     	if	0	;There are less than 3 active tblptr bytes
 10857  00DEFE                     	endif
 10858  00DEFE  0009               	tblrd		*+
 10859  00DF00  CFF5 F018          	movff	tablat,___ftmul@f2
 10860  00DF04  0009               	tblrd		*+
 10861  00DF06  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10862  00DF0A  000A               	tblrd		*-
 10863  00DF0C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10864  00DF10  0E00               	movlw	0
 10865  00DF12  6E0A               	movwf	___awdiv@divisor+1,c
 10866  00DF14  0E64               	movlw	100
 10867  00DF16  6E09               	movwf	___awdiv@divisor,c
 10868  00DF18  502A               	movf	scale@scl,w,c
 10869  00DF1A  6E07               	movwf	___awdiv@dividend,c
 10870  00DF1C  6A08               	clrf	___awdiv@dividend+1,c
 10871  00DF1E  BE07               	btfsc	___awdiv@dividend,7,c
 10872  00DF20  0608               	decf	___awdiv@dividend+1,f,c
 10873  00DF22  ECA1  F060         	call	___awdiv	;wreg free
 10874  00DF26  0E12               	movlw	18
 10875  00DF28  2407               	addwf	?___awdiv,w,c
 10876  00DF2A  6E0F               	movwf	___wmul@multiplier,c
 10877  00DF2C  0E00               	movlw	0
 10878  00DF2E  2008               	addwfc	?___awdiv+1,w,c
 10879  00DF30  6E10               	movwf	___wmul@multiplier+1,c
 10880  00DF32  0E00               	movlw	0
 10881  00DF34  6E12               	movwf	___wmul@multiplicand+1,c
 10882  00DF36  0E03               	movlw	3
 10883  00DF38  6E11               	movwf	___wmul@multiplicand,c
 10884  00DF3A  EC81  F05D         	call	___wmul	;wreg free
 10885  00DF3E  0E42               	movlw	low __powers_
 10886  00DF40  240F               	addwf	?___wmul,w,c
 10887  00DF42  6EF6               	movwf	tblptrl,c
 10888  00DF44  0EFE               	movlw	high __powers_
 10889  00DF46  2010               	addwfc	?___wmul+1,w,c
 10890  00DF48  6EF7               	movwf	tblptrh,c
 10891  00DF4A                     	if	0	;There are less than 3 active tblptr bytes
 10892  00DF4A                     	endif
 10893  00DF4A  0009               	tblrd		*+
 10894  00DF4C  CFF5 F015          	movff	tablat,___ftmul@f1
 10895  00DF50  0009               	tblrd		*+
 10896  00DF52  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10897  00DF56  000A               	tblrd		*-
 10898  00DF58  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10899  00DF5C  EC9A  F062         	call	___ftmul	;wreg free
 10900  00DF60  C015  F027         	movff	?___ftmul,_scale$2457
 10901  00DF64  C016  F028         	movff	?___ftmul+1,_scale$2457+1
 10902  00DF68  C017  F029         	movff	?___ftmul+2,_scale$2457+2
 10903                           
 10904                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 10905  00DF6C  C027  F015         	movff	_scale$2457,___ftmul@f1
 10906  00DF70  C028  F016         	movff	_scale$2457+1,___ftmul@f1+1
 10907  00DF74  C029  F017         	movff	_scale$2457+2,___ftmul@f1+2
 10908  00DF78  0E00               	movlw	0
 10909  00DF7A  6E12               	movwf	___wmul@multiplicand+1,c
 10910  00DF7C  0E03               	movlw	3
 10911  00DF7E  6E11               	movwf	___wmul@multiplicand,c
 10912  00DF80  0E00               	movlw	0
 10913  00DF82  6E04               	movwf	___awmod@divisor+1,c
 10914  00DF84  0E0A               	movlw	10
 10915  00DF86  6E03               	movwf	___awmod@divisor,c
 10916  00DF88  502A               	movf	scale@scl,w,c
 10917  00DF8A  6E01               	movwf	___awmod@dividend,c
 10918  00DF8C  6A02               	clrf	___awmod@dividend+1,c
 10919  00DF8E  BE01               	btfsc	___awmod@dividend,7,c
 10920  00DF90  0602               	decf	___awmod@dividend+1,f,c
 10921  00DF92  ECFA  F05E         	call	___awmod	;wreg free
 10922  00DF96  C001  F00F         	movff	?___awmod,___wmul@multiplier
 10923  00DF9A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 10924  00DF9E  EC81  F05D         	call	___wmul	;wreg free
 10925  00DFA2  0E42               	movlw	low __powers_
 10926  00DFA4  240F               	addwf	?___wmul,w,c
 10927  00DFA6  6EF6               	movwf	tblptrl,c
 10928  00DFA8  0EFE               	movlw	high __powers_
 10929  00DFAA  2010               	addwfc	?___wmul+1,w,c
 10930  00DFAC  6EF7               	movwf	tblptrh,c
 10931  00DFAE                     	if	0	;There are less than 3 active tblptr bytes
 10932  00DFAE                     	endif
 10933  00DFAE  0009               	tblrd		*+
 10934  00DFB0  CFF5 F018          	movff	tablat,___ftmul@f2
 10935  00DFB4  0009               	tblrd		*+
 10936  00DFB6  CFF5 F019          	movff	tablat,___ftmul@f2+1
 10937  00DFBA  000A               	tblrd		*-
 10938  00DFBC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 10939  00DFC0  EC9A  F062         	call	___ftmul	;wreg free
 10940  00DFC4  C015  F024         	movff	?___ftmul,?_scale
 10941  00DFC8  C016  F025         	movff	?___ftmul+1,?_scale+1
 10942  00DFCC  C017  F026         	movff	?___ftmul+2,?_scale+2
 10943  00DFD0  0012               	return	
 10944  00DFD2  D054               	goto	l3738
 10945  00DFD4                     l3732:
 10946                           
 10947                           ;doprnt.c: 438: else if(scl > 10)
 10948  00DFD4  502A               	movf	scale@scl,w,c
 10949  00DFD6  0A80               	xorlw	128
 10950  00DFD8  0F75               	addlw	-139
 10951  00DFDA  A0D8               	btfss	status,0,c
 10952  00DFDC  D04F               	goto	l3738
 10953                           
 10954                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 10955  00DFDE  0E00               	movlw	0
 10956  00DFE0  6E0A               	movwf	___awdiv@divisor+1,c
 10957  00DFE2  0E0A               	movlw	10
 10958  00DFE4  6E09               	movwf	___awdiv@divisor,c
 10959  00DFE6  502A               	movf	scale@scl,w,c
 10960  00DFE8  6E07               	movwf	___awdiv@dividend,c
 10961  00DFEA  6A08               	clrf	___awdiv@dividend+1,c
 10962  00DFEC  BE07               	btfsc	___awdiv@dividend,7,c
 10963  00DFEE  0608               	decf	___awdiv@dividend+1,f,c
 10964  00DFF0  ECA1  F060         	call	___awdiv	;wreg free
 10965  00DFF4  0E09               	movlw	9
 10966  00DFF6  2407               	addwf	?___awdiv,w,c
 10967  00DFF8  6E0F               	movwf	___wmul@multiplier,c
 10968  00DFFA  0E00               	movlw	0
 10969  00DFFC  2008               	addwfc	?___awdiv+1,w,c
 10970  00DFFE  6E10               	movwf	___wmul@multiplier+1,c
 10971  00E000  0E00               	movlw	0
 10972  00E002  6E12               	movwf	___wmul@multiplicand+1,c
 10973  00E004  0E03               	movlw	3
 10974  00E006  6E11               	movwf	___wmul@multiplicand,c
 10975  00E008  EC81  F05D         	call	___wmul	;wreg free
 10976  00E00C  0E42               	movlw	low __powers_
 10977  00E00E  240F               	addwf	?___wmul,w,c
 10978  00E010  6EF6               	movwf	tblptrl,c
 10979  00E012  0EFE               	movlw	high __powers_
 10980  00E014  2010               	addwfc	?___wmul+1,w,c
 10981  00E016  6EF7               	movwf	tblptrh,c
 10982  00E018                     	if	0	;There are less than 3 active tblptr bytes
 10983  00E018                     	endif
 10984  00E018  0009               	tblrd		*+
 10985  00E01A  CFF5 F015          	movff	tablat,___ftmul@f1
 10986  00E01E  0009               	tblrd		*+
 10987  00E020  CFF5 F016          	movff	tablat,___ftmul@f1+1
 10988  00E024  000A               	tblrd		*-
 10989  00E026  CFF5 F017          	movff	tablat,___ftmul@f1+2
 10990  00E02A  0E00               	movlw	0
 10991  00E02C  6E12               	movwf	___wmul@multiplicand+1,c
 10992  00E02E  0E03               	movlw	3
 10993  00E030  6E11               	movwf	___wmul@multiplicand,c
 10994  00E032  0E00               	movlw	0
 10995  00E034  6E04               	movwf	___awmod@divisor+1,c
 10996  00E036  0E0A               	movlw	10
 10997  00E038  6E03               	movwf	___awmod@divisor,c
 10998  00E03A  502A               	movf	scale@scl,w,c
 10999  00E03C  6E01               	movwf	___awmod@dividend,c
 11000  00E03E  6A02               	clrf	___awmod@dividend+1,c
 11001  00E040  BE01               	btfsc	___awmod@dividend,7,c
 11002  00E042  0602               	decf	___awmod@dividend+1,f,c
 11003  00E044  ECFA  F05E         	call	___awmod	;wreg free
 11004  00E048  C001  F00F         	movff	?___awmod,___wmul@multiplier
 11005  00E04C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 11006  00E050  EC81  F05D         	call	___wmul	;wreg free
 11007  00E054  0E42               	movlw	low __powers_
 11008  00E056  240F               	addwf	?___wmul,w,c
 11009  00E058  6EF6               	movwf	tblptrl,c
 11010  00E05A  0EFE               	movlw	high __powers_
 11011  00E05C  2010               	addwfc	?___wmul+1,w,c
 11012  00E05E  6EF7               	movwf	tblptrh,c
 11013  00E060                     	if	0	;There are less than 3 active tblptr bytes
 11014  00E060                     	endif
 11015  00E060  0009               	tblrd		*+
 11016  00E062  CFF5 F018          	movff	tablat,___ftmul@f2
 11017  00E066  0009               	tblrd		*+
 11018  00E068  CFF5 F019          	movff	tablat,___ftmul@f2+1
 11019  00E06C  000A               	tblrd		*-
 11020  00E06E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 11021  00E072  EC9A  F062         	call	___ftmul	;wreg free
 11022  00E076  D7A6               	goto	L10
 11023  00E078  0012               	return	
 11024  00E07A  D000               	goto	l3738
 11025  00E07C                     l3738:
 11026                           
 11027                           ;doprnt.c: 440: return _powers_[scl];
 11028  00E07C  502A               	movf	scale@scl,w,c
 11029  00E07E  0D03               	mullw	3
 11030  00E080  0E42               	movlw	low __powers_
 11031  00E082  24F3               	addwf	prodl,w,c
 11032  00E084  6EF6               	movwf	tblptrl,c
 11033  00E086  0EFE               	movlw	high __powers_
 11034  00E088  20F4               	addwfc	prodh,w,c
 11035  00E08A  6EF7               	movwf	tblptrh,c
 11036  00E08C                     	if	0	;There are less than 3 active tblptr bytes
 11037  00E08C                     	endif
 11038  00E08C  0009               	tblrd		*+
 11039  00E08E  CFF5 F024          	movff	tablat,?_scale
 11040  00E092  0009               	tblrd		*+
 11041  00E094  CFF5 F025          	movff	tablat,?_scale+1
 11042  00E098  000A               	tblrd		*-
 11043  00E09A  CFF5 F026          	movff	tablat,?_scale+2
 11044  00E09E  0012               	return	
 11045  00E0A0  0012               	return		;funcret
 11046  00E0A2                     __end_of_scale:
 11047                           	opt stack 0
 11048                           tblptru	equ	0xFF8
 11049                           tblptrh	equ	0xFF7
 11050                           tblptrl	equ	0xFF6
 11051                           tablat	equ	0xFF5
 11052                           prodh	equ	0xFF4
 11053                           prodl	equ	0xFF3
 11054                           intcon	equ	0xFF2
 11055                           indf0	equ	0xFEF
 11056                           postinc0	equ	0xFEE
 11057                           fsr0h	equ	0xFEA
 11058                           fsr0l	equ	0xFE9
 11059                           wreg	equ	0xFE8
 11060                           postdec1	equ	0xFE5
 11061                           fsr1l	equ	0xFE1
 11062                           indf2	equ	0xFDF
 11063                           postinc2	equ	0xFDE
 11064                           postdec2	equ	0xFDD
 11065                           fsr2h	equ	0xFDA
 11066                           fsr2l	equ	0xFD9
 11067                           status	equ	0xFD8
 11068                           
 11069 ;; *************** function _isdigit *****************
 11070 ;; Defined at:
 11071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
 11072 ;; Parameters:    Size  Location     Type
 11073 ;;  c               1    wreg     unsigned char 
 11074 ;; Auto vars:     Size  Location     Type
 11075 ;;  c               1    2[COMRAM] unsigned char 
 11076 ;; Return value:  Size  Location     Type
 11077 ;;		None               void
 11078 ;; Registers used:
 11079 ;;		wreg, status,2, status,0
 11080 ;; Tracked objects:
 11081 ;;		On entry : 0/0
 11082 ;;		On exit  : 0/0
 11083 ;;		Unchanged: 0/0
 11084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11086 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11088 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11089 ;;Total ram usage:        3 bytes
 11090 ;; Hardware stack levels used:    1
 11091 ;; This function calls:
 11092 ;;		Nothing
 11093 ;; This function is called by:
 11094 ;;		_sprintf
 11095 ;; This function uses a non-reentrant model
 11096 ;;
 11097                           
 11098                           	psect	text24
 11099  00BA96                     __ptext24:
 11100                           	opt stack 0
 11101  00BA96                     _isdigit:
 11102                           	opt stack 29
 11103                           
 11104                           ;incstack = 0
 11105                           ;isdigit@c stored from wreg
 11106  00BA96  6E03               	movwf	isdigit@c,c
 11107  00BA98  0E00               	movlw	0
 11108  00BA9A  6E02               	movwf	_isdigit$2222,c
 11109  00BA9C  0E3A               	movlw	58
 11110  00BA9E  6003               	cpfslt	isdigit@c,c
 11111  00BAA0  D006               	goto	l3750
 11112  00BAA2  0E2F               	movlw	47
 11113  00BAA4  6403               	cpfsgt	isdigit@c,c
 11114  00BAA6  D003               	goto	l3750
 11115  00BAA8  0E01               	movlw	1
 11116  00BAAA  6E02               	movwf	_isdigit$2222,c
 11117  00BAAC  D000               	goto	l3750
 11118  00BAAE                     l3750:
 11119  00BAAE  C002  F001         	movff	_isdigit$2222,??_isdigit
 11120  00BAB2  3001               	rrcf	??_isdigit,w,c
 11121  00BAB4  0012               	return	
 11122  00BAB6  0012               	return		;funcret
 11123  00BAB8                     __end_of_isdigit:
 11124                           	opt stack 0
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           indf0	equ	0xFEF
 11133                           postinc0	equ	0xFEE
 11134                           fsr0h	equ	0xFEA
 11135                           fsr0l	equ	0xFE9
 11136                           wreg	equ	0xFE8
 11137                           postdec1	equ	0xFE5
 11138                           fsr1l	equ	0xFE1
 11139                           indf2	equ	0xFDF
 11140                           postinc2	equ	0xFDE
 11141                           postdec2	equ	0xFDD
 11142                           fsr2h	equ	0xFDA
 11143                           fsr2l	equ	0xFD9
 11144                           status	equ	0xFD8
 11145                           
 11146 ;; *************** function _fround *****************
 11147 ;; Defined at:
 11148 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;  prec            1    wreg     unsigned char 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  prec            1   44[COMRAM] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  3   35[COMRAM] unsigned char 
 11155 ;; Registers used:
 11156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11162 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11163 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11165 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11166 ;;Total ram usage:       10 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    2
 11169 ;; This function calls:
 11170 ;;		___awdiv
 11171 ;;		___awmod
 11172 ;;		___ftmul
 11173 ;;		___wmul
 11174 ;; This function is called by:
 11175 ;;		_sprintf
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	text25
 11180  00D7EC                     __ptext25:
 11181                           	opt stack 0
 11182  00D7EC                     _fround:
 11183                           	opt stack 27
 11184                           
 11185                           ;incstack = 0
 11186                           ;fround@prec stored from wreg
 11187  00D7EC  6E2D               	movwf	fround@prec,c
 11188                           
 11189                           ;doprnt.c: 413: if(prec>=110)
 11190  00D7EE  0E6D               	movlw	109
 11191  00D7F0  642D               	cpfsgt	fround@prec,c
 11192  00D7F2  D0A0               	goto	l3692
 11193                           
 11194                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11195  00D7F4  0E00               	movlw	0
 11196  00D7F6  6E12               	movwf	___wmul@multiplicand+1,c
 11197  00D7F8  0E03               	movlw	3
 11198  00D7FA  6E11               	movwf	___wmul@multiplicand,c
 11199  00D7FC  0E00               	movlw	0
 11200  00D7FE  6E0A               	movwf	___awdiv@divisor+1,c
 11201  00D800  0E0A               	movlw	10
 11202  00D802  6E09               	movwf	___awdiv@divisor,c
 11203  00D804  0E00               	movlw	0
 11204  00D806  6E04               	movwf	___awmod@divisor+1,c
 11205  00D808  0E64               	movlw	100
 11206  00D80A  6E03               	movwf	___awmod@divisor,c
 11207  00D80C  C02D  F001         	movff	fround@prec,___awmod@dividend
 11208  00D810  6A02               	clrf	___awmod@dividend+1,c
 11209  00D812  ECFA  F05E         	call	___awmod	;wreg free
 11210  00D816  C001  F007         	movff	?___awmod,___awdiv@dividend
 11211  00D81A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
 11212  00D81E  ECA1  F060         	call	___awdiv	;wreg free
 11213  00D822  0E09               	movlw	9
 11214  00D824  2407               	addwf	?___awdiv,w,c
 11215  00D826  6E0F               	movwf	___wmul@multiplier,c
 11216  00D828  0E00               	movlw	0
 11217  00D82A  2008               	addwfc	?___awdiv+1,w,c
 11218  00D82C  6E10               	movwf	___wmul@multiplier+1,c
 11219  00D82E  EC81  F05D         	call	___wmul	;wreg free
 11220  00D832  0E1B               	movlw	low __npowers_
 11221  00D834  240F               	addwf	?___wmul,w,c
 11222  00D836  6EF6               	movwf	tblptrl,c
 11223  00D838  0EFE               	movlw	high __npowers_
 11224  00D83A  2010               	addwfc	?___wmul+1,w,c
 11225  00D83C  6EF7               	movwf	tblptrh,c
 11226  00D83E                     	if	0	;There are less than 3 active tblptr bytes
 11227  00D83E                     	endif
 11228  00D83E  0009               	tblrd		*+
 11229  00D840  CFF5 F018          	movff	tablat,___ftmul@f2
 11230  00D844  0009               	tblrd		*+
 11231  00D846  CFF5 F019          	movff	tablat,___ftmul@f2+1
 11232  00D84A  000A               	tblrd		*-
 11233  00D84C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 11234  00D850  0E00               	movlw	0
 11235  00D852  6E0A               	movwf	___awdiv@divisor+1,c
 11236  00D854  0E64               	movlw	100
 11237  00D856  6E09               	movwf	___awdiv@divisor,c
 11238  00D858  C02D  F007         	movff	fround@prec,___awdiv@dividend
 11239  00D85C  6A08               	clrf	___awdiv@dividend+1,c
 11240  00D85E  ECA1  F060         	call	___awdiv	;wreg free
 11241  00D862  0E12               	movlw	18
 11242  00D864  2407               	addwf	?___awdiv,w,c
 11243  00D866  6E0F               	movwf	___wmul@multiplier,c
 11244  00D868  0E00               	movlw	0
 11245  00D86A  2008               	addwfc	?___awdiv+1,w,c
 11246  00D86C  6E10               	movwf	___wmul@multiplier+1,c
 11247  00D86E  0E00               	movlw	0
 11248  00D870  6E12               	movwf	___wmul@multiplicand+1,c
 11249  00D872  0E03               	movlw	3
 11250  00D874  6E11               	movwf	___wmul@multiplicand,c
 11251  00D876  EC81  F05D         	call	___wmul	;wreg free
 11252  00D87A  0E1B               	movlw	low __npowers_
 11253  00D87C  240F               	addwf	?___wmul,w,c
 11254  00D87E  6EF6               	movwf	tblptrl,c
 11255  00D880  0EFE               	movlw	high __npowers_
 11256  00D882  2010               	addwfc	?___wmul+1,w,c
 11257  00D884  6EF7               	movwf	tblptrh,c
 11258  00D886                     	if	0	;There are less than 3 active tblptr bytes
 11259  00D886                     	endif
 11260  00D886  0009               	tblrd		*+
 11261  00D888  CFF5 F015          	movff	tablat,___ftmul@f1
 11262  00D88C  0009               	tblrd		*+
 11263  00D88E  CFF5 F016          	movff	tablat,___ftmul@f1+1
 11264  00D892  000A               	tblrd		*-
 11265  00D894  CFF5 F017          	movff	tablat,___ftmul@f1+2
 11266  00D898  EC9A  F062         	call	___ftmul	;wreg free
 11267  00D89C  C015  F02A         	movff	?___ftmul,_fround$2455
 11268  00D8A0  C016  F02B         	movff	?___ftmul+1,_fround$2455+1
 11269  00D8A4  C017  F02C         	movff	?___ftmul+2,_fround$2455+2
 11270                           
 11271                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11272  00D8A8  0E00               	movlw	0
 11273  00D8AA  6E12               	movwf	___wmul@multiplicand+1,c
 11274  00D8AC  0E03               	movlw	3
 11275  00D8AE  6E11               	movwf	___wmul@multiplicand,c
 11276  00D8B0  0E00               	movlw	0
 11277  00D8B2  6E04               	movwf	___awmod@divisor+1,c
 11278  00D8B4  0E0A               	movlw	10
 11279  00D8B6  6E03               	movwf	___awmod@divisor,c
 11280  00D8B8  C02D  F001         	movff	fround@prec,___awmod@dividend
 11281  00D8BC  6A02               	clrf	___awmod@dividend+1,c
 11282  00D8BE  ECFA  F05E         	call	___awmod	;wreg free
 11283  00D8C2  C001  F00F         	movff	?___awmod,___wmul@multiplier
 11284  00D8C6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 11285  00D8CA  EC81  F05D         	call	___wmul	;wreg free
 11286  00D8CE  0E1B               	movlw	low __npowers_
 11287  00D8D0  240F               	addwf	?___wmul,w,c
 11288  00D8D2  6EF6               	movwf	tblptrl,c
 11289  00D8D4  0EFE               	movlw	high __npowers_
 11290  00D8D6  2010               	addwfc	?___wmul+1,w,c
 11291  00D8D8  6EF7               	movwf	tblptrh,c
 11292  00D8DA                     	if	0	;There are less than 3 active tblptr bytes
 11293  00D8DA                     	endif
 11294  00D8DA  0009               	tblrd		*+
 11295  00D8DC  CFF5 F018          	movff	tablat,___ftmul@f2
 11296  00D8E0  0009               	tblrd		*+
 11297  00D8E2  CFF5 F019          	movff	tablat,___ftmul@f2+1
 11298  00D8E6  000A               	tblrd		*-
 11299  00D8E8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 11300  00D8EC  C02A  F015         	movff	_fround$2455,___ftmul@f1
 11301  00D8F0  C02B  F016         	movff	_fround$2455+1,___ftmul@f1+1
 11302  00D8F4  C02C  F017         	movff	_fround$2455+2,___ftmul@f1+2
 11303  00D8F8  EC9A  F062         	call	___ftmul	;wreg free
 11304  00D8FC  C015  F027         	movff	?___ftmul,_fround$2456
 11305  00D900  C016  F028         	movff	?___ftmul+1,_fround$2456+1
 11306  00D904  C017  F029         	movff	?___ftmul+2,_fround$2456+2
 11307                           
 11308                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 11309  00D908  C027  F015         	movff	_fround$2456,___ftmul@f1
 11310  00D90C  C028  F016         	movff	_fround$2456+1,___ftmul@f1+1
 11311  00D910  C029  F017         	movff	_fround$2456+2,___ftmul@f1+2
 11312  00D914  0E00               	movlw	0
 11313  00D916  6E18               	movwf	___ftmul@f2,c
 11314  00D918  0E00               	movlw	0
 11315  00D91A  6E19               	movwf	___ftmul@f2+1,c
 11316  00D91C  0E3F               	movlw	63
 11317  00D91E  6E1A               	movwf	___ftmul@f2+2,c
 11318  00D920  EC9A  F062         	call	___ftmul	;wreg free
 11319  00D924  C015  F024         	movff	?___ftmul,?_fround
 11320  00D928  C016  F025         	movff	?___ftmul+1,?_fround+1
 11321  00D92C  C017  F026         	movff	?___ftmul+2,?_fround+2
 11322  00D930  0012               	return	
 11323  00D932  D062               	goto	l3700
 11324  00D934                     l3692:
 11325                           
 11326                           ;doprnt.c: 415: else if(prec > 10)
 11327  00D934  0E0A               	movlw	10
 11328  00D936  642D               	cpfsgt	fround@prec,c
 11329  00D938  D05F               	goto	l3700
 11330                           
 11331                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11332  00D93A  0E00               	movlw	0
 11333  00D93C  6E12               	movwf	___wmul@multiplicand+1,c
 11334  00D93E  0E03               	movlw	3
 11335  00D940  6E11               	movwf	___wmul@multiplicand,c
 11336  00D942  0E00               	movlw	0
 11337  00D944  6E04               	movwf	___awmod@divisor+1,c
 11338  00D946  0E0A               	movlw	10
 11339  00D948  6E03               	movwf	___awmod@divisor,c
 11340  00D94A  C02D  F001         	movff	fround@prec,___awmod@dividend
 11341  00D94E  6A02               	clrf	___awmod@dividend+1,c
 11342  00D950  ECFA  F05E         	call	___awmod	;wreg free
 11343  00D954  C001  F00F         	movff	?___awmod,___wmul@multiplier
 11344  00D958  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
 11345  00D95C  EC81  F05D         	call	___wmul	;wreg free
 11346  00D960  0E1B               	movlw	low __npowers_
 11347  00D962  240F               	addwf	?___wmul,w,c
 11348  00D964  6EF6               	movwf	tblptrl,c
 11349  00D966  0EFE               	movlw	high __npowers_
 11350  00D968  2010               	addwfc	?___wmul+1,w,c
 11351  00D96A  6EF7               	movwf	tblptrh,c
 11352  00D96C                     	if	0	;There are less than 3 active tblptr bytes
 11353  00D96C                     	endif
 11354  00D96C  0009               	tblrd		*+
 11355  00D96E  CFF5 F018          	movff	tablat,___ftmul@f2
 11356  00D972  0009               	tblrd		*+
 11357  00D974  CFF5 F019          	movff	tablat,___ftmul@f2+1
 11358  00D978  000A               	tblrd		*-
 11359  00D97A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
 11360  00D97E  0E00               	movlw	0
 11361  00D980  6E0A               	movwf	___awdiv@divisor+1,c
 11362  00D982  0E0A               	movlw	10
 11363  00D984  6E09               	movwf	___awdiv@divisor,c
 11364  00D986  C02D  F007         	movff	fround@prec,___awdiv@dividend
 11365  00D98A  6A08               	clrf	___awdiv@dividend+1,c
 11366  00D98C  ECA1  F060         	call	___awdiv	;wreg free
 11367  00D990  0E09               	movlw	9
 11368  00D992  2407               	addwf	?___awdiv,w,c
 11369  00D994  6E0F               	movwf	___wmul@multiplier,c
 11370  00D996  0E00               	movlw	0
 11371  00D998  2008               	addwfc	?___awdiv+1,w,c
 11372  00D99A  6E10               	movwf	___wmul@multiplier+1,c
 11373  00D99C  0E00               	movlw	0
 11374  00D99E  6E12               	movwf	___wmul@multiplicand+1,c
 11375  00D9A0  0E03               	movlw	3
 11376  00D9A2  6E11               	movwf	___wmul@multiplicand,c
 11377  00D9A4  EC81  F05D         	call	___wmul	;wreg free
 11378  00D9A8  0E1B               	movlw	low __npowers_
 11379  00D9AA  240F               	addwf	?___wmul,w,c
 11380  00D9AC  6EF6               	movwf	tblptrl,c
 11381  00D9AE  0EFE               	movlw	high __npowers_
 11382  00D9B0  2010               	addwfc	?___wmul+1,w,c
 11383  00D9B2  6EF7               	movwf	tblptrh,c
 11384  00D9B4                     	if	0	;There are less than 3 active tblptr bytes
 11385  00D9B4                     	endif
 11386  00D9B4  0009               	tblrd		*+
 11387  00D9B6  CFF5 F015          	movff	tablat,___ftmul@f1
 11388  00D9BA  0009               	tblrd		*+
 11389  00D9BC  CFF5 F016          	movff	tablat,___ftmul@f1+1
 11390  00D9C0  000A               	tblrd		*-
 11391  00D9C2  CFF5 F017          	movff	tablat,___ftmul@f1+2
 11392  00D9C6  EC9A  F062         	call	___ftmul	;wreg free
 11393  00D9CA  C015  F02A         	movff	?___ftmul,_fround$2455
 11394  00D9CE  C016  F02B         	movff	?___ftmul+1,_fround$2455+1
 11395  00D9D2  C017  F02C         	movff	?___ftmul+2,_fround$2455+2
 11396                           
 11397                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 11398  00D9D6  C02A  F015         	movff	_fround$2455,___ftmul@f1
 11399  00D9DA  C02B  F016         	movff	_fround$2455+1,___ftmul@f1+1
 11400  00D9DE  C02C  F017         	movff	_fround$2455+2,___ftmul@f1+2
 11401  00D9E2  0E00               	movlw	0
 11402  00D9E4  6E18               	movwf	___ftmul@f2,c
 11403  00D9E6  0E00               	movlw	0
 11404  00D9E8  6E19               	movwf	___ftmul@f2+1,c
 11405  00D9EA  0E3F               	movlw	63
 11406  00D9EC  6E1A               	movwf	___ftmul@f2+2,c
 11407  00D9EE  EC9A  F062         	call	___ftmul	;wreg free
 11408  00D9F2  D798               	goto	L11
 11409  00D9F4  0012               	return	
 11410  00D9F6  D000               	goto	l3700
 11411  00D9F8                     l3700:
 11412                           
 11413                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 11414  00D9F8  502D               	movf	fround@prec,w,c
 11415  00D9FA  0D03               	mullw	3
 11416  00D9FC  0E1B               	movlw	low __npowers_
 11417  00D9FE  24F3               	addwf	prodl,w,c
 11418  00DA00  6EF6               	movwf	tblptrl,c
 11419  00DA02  0EFE               	movlw	high __npowers_
 11420  00DA04  20F4               	addwfc	prodh,w,c
 11421  00DA06  6EF7               	movwf	tblptrh,c
 11422  00DA08                     	if	0	;There are less than 3 active tblptr bytes
 11423  00DA08                     	endif
 11424  00DA08  0009               	tblrd		*+
 11425  00DA0A  CFF5 F015          	movff	tablat,___ftmul@f1
 11426  00DA0E  0009               	tblrd		*+
 11427  00DA10  CFF5 F016          	movff	tablat,___ftmul@f1+1
 11428  00DA14  000A               	tblrd		*-
 11429  00DA16  CFF5 F017          	movff	tablat,___ftmul@f1+2
 11430  00DA1A  0E00               	movlw	0
 11431  00DA1C  6E18               	movwf	___ftmul@f2,c
 11432  00DA1E  0E00               	movlw	0
 11433  00DA20  6E19               	movwf	___ftmul@f2+1,c
 11434  00DA22  0E3F               	movlw	63
 11435  00DA24  6E1A               	movwf	___ftmul@f2+2,c
 11436  00DA26  EC9A  F062         	call	___ftmul	;wreg free
 11437  00DA2A  C015  F024         	movff	?___ftmul,?_fround
 11438  00DA2E  C016  F025         	movff	?___ftmul+1,?_fround+1
 11439  00DA32  C017  F026         	movff	?___ftmul+2,?_fround+2
 11440  00DA36  0012               	return	
 11441  00DA38  0012               	return		;funcret
 11442  00DA3A                     __end_of_fround:
 11443                           	opt stack 0
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           indf0	equ	0xFEF
 11452                           postinc0	equ	0xFEE
 11453                           fsr0h	equ	0xFEA
 11454                           fsr0l	equ	0xFE9
 11455                           wreg	equ	0xFE8
 11456                           postdec1	equ	0xFE5
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           fsr2h	equ	0xFDA
 11462                           fsr2l	equ	0xFD9
 11463                           status	equ	0xFD8
 11464                           
 11465 ;; *************** function ___wmul *****************
 11466 ;; Defined at:
 11467 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  multiplier      2   14[COMRAM] unsigned int 
 11470 ;;  multiplicand    2   16[COMRAM] unsigned int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  product         2   18[COMRAM] unsigned int 
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  2   14[COMRAM] unsigned int 
 11475 ;; Registers used:
 11476 ;;		wreg, status,2, status,0, prodl, prodh
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11483 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11485 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11486 ;;Total ram usage:        6 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; This function calls:
 11489 ;;		Nothing
 11490 ;; This function is called by:
 11491 ;;		_fround
 11492 ;;		_scale
 11493 ;;		_sprintf
 11494 ;; This function uses a non-reentrant model
 11495 ;;
 11496                           
 11497                           	psect	text26
 11498  00BB02                     __ptext26:
 11499                           	opt stack 0
 11500  00BB02                     ___wmul:
 11501                           	opt stack 28
 11502                           
 11503                           ;incstack = 0
 11504  00BB02  500F               	movf	___wmul@multiplier,w,c
 11505  00BB04  0211               	mulwf	___wmul@multiplicand,c
 11506  00BB06  CFF3 F013          	movff	prodl,___wmul@product
 11507  00BB0A  CFF4 F014          	movff	prodh,___wmul@product+1
 11508  00BB0E  500F               	movf	___wmul@multiplier,w,c
 11509  00BB10  0212               	mulwf	___wmul@multiplicand+1,c
 11510  00BB12  50F3               	movf	prodl,w,c
 11511  00BB14  2614               	addwf	___wmul@product+1,f,c
 11512  00BB16  5010               	movf	___wmul@multiplier+1,w,c
 11513  00BB18  0211               	mulwf	___wmul@multiplicand,c
 11514  00BB1A  50F3               	movf	prodl,w,c
 11515  00BB1C  2614               	addwf	___wmul@product+1,f,c
 11516  00BB1E  C013  F00F         	movff	___wmul@product,?___wmul
 11517  00BB22  C014  F010         	movff	___wmul@product+1,?___wmul+1
 11518  00BB26  0012               	return	
 11519  00BB28  0012               	return		;funcret
 11520  00BB2A                     __end_of___wmul:
 11521                           	opt stack 0
 11522                           tblptru	equ	0xFF8
 11523                           tblptrh	equ	0xFF7
 11524                           tblptrl	equ	0xFF6
 11525                           tablat	equ	0xFF5
 11526                           prodh	equ	0xFF4
 11527                           prodl	equ	0xFF3
 11528                           intcon	equ	0xFF2
 11529                           indf0	equ	0xFEF
 11530                           postinc0	equ	0xFEE
 11531                           fsr0h	equ	0xFEA
 11532                           fsr0l	equ	0xFE9
 11533                           wreg	equ	0xFE8
 11534                           postdec1	equ	0xFE5
 11535                           fsr1l	equ	0xFE1
 11536                           indf2	equ	0xFDF
 11537                           postinc2	equ	0xFDE
 11538                           postdec2	equ	0xFDD
 11539                           fsr2h	equ	0xFDA
 11540                           fsr2l	equ	0xFD9
 11541                           status	equ	0xFD8
 11542                           
 11543 ;; *************** function ___ftmul *****************
 11544 ;; Defined at:
 11545 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;  f1              3   20[COMRAM] float 
 11548 ;;  f2              3   23[COMRAM] float 
 11549 ;; Auto vars:     Size  Location     Type
 11550 ;;  f3_as_produc    3   30[COMRAM] unsigned um
 11551 ;;  sign            1   34[COMRAM] unsigned char 
 11552 ;;  cntr            1   33[COMRAM] unsigned char 
 11553 ;;  exp             1   29[COMRAM] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  3   20[COMRAM] float 
 11556 ;; Registers used:
 11557 ;;		wreg, status,2, status,0, cstack
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11563 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11566 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11567 ;;Total ram usage:       15 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    1
 11570 ;; This function calls:
 11571 ;;		___ftpack
 11572 ;; This function is called by:
 11573 ;;		_control_temperatura_agua
 11574 ;;		_fround
 11575 ;;		_scale
 11576 ;;		_sprintf
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           	psect	text27
 11581  00C534                     __ptext27:
 11582                           	opt stack 0
 11583  00C534                     ___ftmul:
 11584                           	opt stack 27
 11585                           
 11586                           ;incstack = 0
 11587  00C534  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
 11588  00C538  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 11589  00C53A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 11590  00C53C  3416               	rlcf	___ftmul@f1+1,w,c
 11591  00C53E  361B               	rlcf	??___ftmul& (0+255),f,c
 11592  00C540  E301               	bnc	u3701
 11593  00C542  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 11594  00C544                     u3701:
 11595  00C544  501B               	movf	??___ftmul,w,c
 11596  00C546  6E1E               	movwf	___ftmul@exp,c
 11597  00C548  501E               	movf	___ftmul@exp,w,c
 11598  00C54A  A4D8               	btfss	status,2,c
 11599  00C54C  D007               	goto	l3552
 11600  00C54E  0E00               	movlw	0
 11601  00C550  6E15               	movwf	?___ftmul,c
 11602  00C552  0E00               	movlw	0
 11603  00C554  6E16               	movwf	?___ftmul+1,c
 11604  00C556  0E00               	movlw	0
 11605  00C558  6E17               	movwf	?___ftmul+2,c
 11606  00C55A  0012               	return	
 11607  00C55C                     l3552:
 11608  00C55C  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
 11609  00C560  6A1C               	clrf	(??___ftmul+1)& (0+255),c
 11610  00C562  6A1D               	clrf	(??___ftmul+2)& (0+255),c
 11611  00C564  3419               	rlcf	___ftmul@f2+1,w,c
 11612  00C566  361B               	rlcf	??___ftmul& (0+255),f,c
 11613  00C568  E301               	bnc	u3721
 11614  00C56A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
 11615  00C56C                     u3721:
 11616  00C56C  501B               	movf	??___ftmul,w,c
 11617  00C56E  6E23               	movwf	___ftmul@sign,c
 11618  00C570  5023               	movf	___ftmul@sign,w,c
 11619  00C572  A4D8               	btfss	status,2,c
 11620  00C574  D007               	goto	l3558
 11621  00C576  0E00               	movlw	0
 11622  00C578  6E15               	movwf	?___ftmul,c
 11623  00C57A  0E00               	movlw	0
 11624  00C57C  6E16               	movwf	?___ftmul+1,c
 11625  00C57E  0E00               	movlw	0
 11626  00C580  6E17               	movwf	?___ftmul+2,c
 11627  00C582  0012               	return	
 11628  00C584                     l3558:
 11629  00C584  5023               	movf	___ftmul@sign,w,c
 11630  00C586  0F7B               	addlw	123
 11631  00C588  261E               	addwf	___ftmul@exp,f,c
 11632  00C58A  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
 11633  00C58E  501A               	movf	___ftmul@f2+2,w,c
 11634  00C590  1A23               	xorwf	___ftmul@sign,f,c
 11635  00C592  0E80               	movlw	128
 11636  00C594  1623               	andwf	___ftmul@sign,f,c
 11637  00C596  8E16               	bsf	___ftmul@f1+1,7,c
 11638  00C598  8E19               	bsf	___ftmul@f2+1,7,c
 11639  00C59A  0EFF               	movlw	255
 11640  00C59C  1618               	andwf	___ftmul@f2,f,c
 11641  00C59E  0EFF               	movlw	255
 11642  00C5A0  1619               	andwf	___ftmul@f2+1,f,c
 11643  00C5A2  0E00               	movlw	0
 11644  00C5A4  161A               	andwf	___ftmul@f2+2,f,c
 11645  00C5A6  0E00               	movlw	0
 11646  00C5A8  6E1F               	movwf	___ftmul@f3_as_product,c
 11647  00C5AA  0E00               	movlw	0
 11648  00C5AC  6E20               	movwf	___ftmul@f3_as_product+1,c
 11649  00C5AE  0E00               	movlw	0
 11650  00C5B0  6E21               	movwf	___ftmul@f3_as_product+2,c
 11651  00C5B2  0E07               	movlw	7
 11652  00C5B4  6E22               	movwf	___ftmul@cntr,c
 11653  00C5B6  D000               	goto	l3572
 11654  00C5B8                     l3572:
 11655  00C5B8  A015               	btfss	___ftmul@f1,0,c
 11656  00C5BA  D007               	goto	l3576
 11657  00C5BC  5018               	movf	___ftmul@f2,w,c
 11658  00C5BE  261F               	addwf	___ftmul@f3_as_product,f,c
 11659  00C5C0  5019               	movf	___ftmul@f2+1,w,c
 11660  00C5C2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 11661  00C5C4  501A               	movf	___ftmul@f2+2,w,c
 11662  00C5C6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 11663  00C5C8  D000               	goto	l3576
 11664  00C5CA                     l3576:
 11665  00C5CA  90D8               	bcf	status,0,c
 11666  00C5CC  3217               	rrcf	___ftmul@f1+2,f,c
 11667  00C5CE  3216               	rrcf	___ftmul@f1+1,f,c
 11668  00C5D0  3215               	rrcf	___ftmul@f1,f,c
 11669  00C5D2  90D8               	bcf	status,0,c
 11670  00C5D4  3618               	rlcf	___ftmul@f2,f,c
 11671  00C5D6  3619               	rlcf	___ftmul@f2+1,f,c
 11672  00C5D8  361A               	rlcf	___ftmul@f2+2,f,c
 11673  00C5DA  2E22               	decfsz	___ftmul@cntr,f,c
 11674  00C5DC  D7ED               	goto	l3572
 11675  00C5DE  D000               	goto	l3580
 11676  00C5E0                     l3580:
 11677  00C5E0  0E09               	movlw	9
 11678  00C5E2  6E22               	movwf	___ftmul@cntr,c
 11679  00C5E4  D000               	goto	l3582
 11680  00C5E6                     l3582:
 11681  00C5E6  A015               	btfss	___ftmul@f1,0,c
 11682  00C5E8  D007               	goto	l3586
 11683  00C5EA  5018               	movf	___ftmul@f2,w,c
 11684  00C5EC  261F               	addwf	___ftmul@f3_as_product,f,c
 11685  00C5EE  5019               	movf	___ftmul@f2+1,w,c
 11686  00C5F0  2220               	addwfc	___ftmul@f3_as_product+1,f,c
 11687  00C5F2  501A               	movf	___ftmul@f2+2,w,c
 11688  00C5F4  2221               	addwfc	___ftmul@f3_as_product+2,f,c
 11689  00C5F6  D000               	goto	l3586
 11690  00C5F8                     l3586:
 11691  00C5F8  90D8               	bcf	status,0,c
 11692  00C5FA  3217               	rrcf	___ftmul@f1+2,f,c
 11693  00C5FC  3216               	rrcf	___ftmul@f1+1,f,c
 11694  00C5FE  3215               	rrcf	___ftmul@f1,f,c
 11695  00C600  90D8               	bcf	status,0,c
 11696  00C602  3221               	rrcf	___ftmul@f3_as_product+2,f,c
 11697  00C604  3220               	rrcf	___ftmul@f3_as_product+1,f,c
 11698  00C606  321F               	rrcf	___ftmul@f3_as_product,f,c
 11699  00C608  2E22               	decfsz	___ftmul@cntr,f,c
 11700  00C60A  D7ED               	goto	l3582
 11701  00C60C  D000               	goto	l3590
 11702  00C60E                     l3590:
 11703  00C60E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11704  00C612  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11705  00C616  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11706  00C61A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
 11707  00C61E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
 11708  00C622  EC40  F061         	call	___ftpack	;wreg free
 11709  00C626  C001  F015         	movff	?___ftpack,?___ftmul
 11710  00C62A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
 11711  00C62E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
 11712  00C632  0012               	return	
 11713  00C634  0012               	return		;funcret
 11714  00C636                     __end_of___ftmul:
 11715                           	opt stack 0
 11716                           tblptru	equ	0xFF8
 11717                           tblptrh	equ	0xFF7
 11718                           tblptrl	equ	0xFF6
 11719                           tablat	equ	0xFF5
 11720                           prodh	equ	0xFF4
 11721                           prodl	equ	0xFF3
 11722                           intcon	equ	0xFF2
 11723                           indf0	equ	0xFEF
 11724                           postinc0	equ	0xFEE
 11725                           fsr0h	equ	0xFEA
 11726                           fsr0l	equ	0xFE9
 11727                           wreg	equ	0xFE8
 11728                           postdec1	equ	0xFE5
 11729                           fsr1l	equ	0xFE1
 11730                           indf2	equ	0xFDF
 11731                           postinc2	equ	0xFDE
 11732                           postdec2	equ	0xFDD
 11733                           fsr2h	equ	0xFDA
 11734                           fsr2l	equ	0xFD9
 11735                           status	equ	0xFD8
 11736                           
 11737 ;; *************** function ___awmod *****************
 11738 ;; Defined at:
 11739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;  dividend        2    0[COMRAM] int 
 11742 ;;  divisor         2    2[COMRAM] int 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;  sign            1    5[COMRAM] unsigned char 
 11745 ;;  counter         1    4[COMRAM] unsigned char 
 11746 ;; Return value:  Size  Location     Type
 11747 ;;                  2    0[COMRAM] int 
 11748 ;; Registers used:
 11749 ;;		wreg, status,2, status,0
 11750 ;; Tracked objects:
 11751 ;;		On entry : 0/0
 11752 ;;		On exit  : 0/0
 11753 ;;		Unchanged: 0/0
 11754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11755 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11756 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11758 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11759 ;;Total ram usage:        6 bytes
 11760 ;; Hardware stack levels used:    1
 11761 ;; This function calls:
 11762 ;;		Nothing
 11763 ;; This function is called by:
 11764 ;;		_fround
 11765 ;;		_scale
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           	psect	text28
 11770  00BDF4                     __ptext28:
 11771                           	opt stack 0
 11772  00BDF4                     ___awmod:
 11773                           	opt stack 28
 11774                           
 11775                           ;incstack = 0
 11776  00BDF4  0E00               	movlw	0
 11777  00BDF6  6E06               	movwf	___awmod@sign,c
 11778  00BDF8  AE02               	btfss	___awmod@dividend+1,7,c
 11779  00BDFA  D007               	goto	l3646
 11780  00BDFC  6C01               	negf	___awmod@dividend,c
 11781  00BDFE  1E02               	comf	___awmod@dividend+1,f,c
 11782  00BE00  B0D8               	btfsc	status,0,c
 11783  00BE02  2A02               	incf	___awmod@dividend+1,f,c
 11784  00BE04  0E01               	movlw	1
 11785  00BE06  6E06               	movwf	___awmod@sign,c
 11786  00BE08  D000               	goto	l3646
 11787  00BE0A                     l3646:
 11788  00BE0A  AE04               	btfss	___awmod@divisor+1,7,c
 11789  00BE0C  D005               	goto	l3650
 11790  00BE0E  6C03               	negf	___awmod@divisor,c
 11791  00BE10  1E04               	comf	___awmod@divisor+1,f,c
 11792  00BE12  B0D8               	btfsc	status,0,c
 11793  00BE14  2A04               	incf	___awmod@divisor+1,f,c
 11794  00BE16  D000               	goto	l3650
 11795  00BE18                     l3650:
 11796  00BE18  5003               	movf	___awmod@divisor,w,c
 11797  00BE1A  1004               	iorwf	___awmod@divisor+1,w,c
 11798  00BE1C  B4D8               	btfsc	status,2,c
 11799  00BE1E  D01D               	goto	l3666
 11800  00BE20  0E01               	movlw	1
 11801  00BE22  6E05               	movwf	___awmod@counter,c
 11802  00BE24  D005               	goto	l3656
 11803  00BE26                     l3654:
 11804  00BE26  90D8               	bcf	status,0,c
 11805  00BE28  3603               	rlcf	___awmod@divisor,f,c
 11806  00BE2A  3604               	rlcf	___awmod@divisor+1,f,c
 11807  00BE2C  2A05               	incf	___awmod@counter,f,c
 11808  00BE2E  D000               	goto	l3656
 11809  00BE30                     l3656:
 11810  00BE30  BE04               	btfsc	___awmod@divisor+1,7,c
 11811  00BE32  D002               	goto	l3658
 11812  00BE34  D7F8               	goto	l3654
 11813  00BE36  D000               	goto	l3658
 11814  00BE38                     l3658:
 11815  00BE38  5003               	movf	___awmod@divisor,w,c
 11816  00BE3A  5C01               	subwf	___awmod@dividend,w,c
 11817  00BE3C  5004               	movf	___awmod@divisor+1,w,c
 11818  00BE3E  5802               	subwfb	___awmod@dividend+1,w,c
 11819  00BE40  A0D8               	btfss	status,0,c
 11820  00BE42  D005               	goto	l3662
 11821  00BE44  5003               	movf	___awmod@divisor,w,c
 11822  00BE46  5E01               	subwf	___awmod@dividend,f,c
 11823  00BE48  5004               	movf	___awmod@divisor+1,w,c
 11824  00BE4A  5A02               	subwfb	___awmod@dividend+1,f,c
 11825  00BE4C  D000               	goto	l3662
 11826  00BE4E                     l3662:
 11827  00BE4E  90D8               	bcf	status,0,c
 11828  00BE50  3204               	rrcf	___awmod@divisor+1,f,c
 11829  00BE52  3203               	rrcf	___awmod@divisor,f,c
 11830  00BE54  2E05               	decfsz	___awmod@counter,f,c
 11831  00BE56  D7F0               	goto	l3658
 11832  00BE58  D000               	goto	l3666
 11833  00BE5A                     l3666:
 11834  00BE5A  5006               	movf	___awmod@sign,w,c
 11835  00BE5C  B4D8               	btfsc	status,2,c
 11836  00BE5E  D005               	goto	l3670
 11837  00BE60  6C01               	negf	___awmod@dividend,c
 11838  00BE62  1E02               	comf	___awmod@dividend+1,f,c
 11839  00BE64  B0D8               	btfsc	status,0,c
 11840  00BE66  2A02               	incf	___awmod@dividend+1,f,c
 11841  00BE68  D000               	goto	l3670
 11842  00BE6A                     l3670:
 11843  00BE6A  C001  F001         	movff	___awmod@dividend,?___awmod
 11844  00BE6E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
 11845  00BE72  0012               	return	
 11846  00BE74  0012               	return		;funcret
 11847  00BE76                     __end_of___awmod:
 11848                           	opt stack 0
 11849                           tblptru	equ	0xFF8
 11850                           tblptrh	equ	0xFF7
 11851                           tblptrl	equ	0xFF6
 11852                           tablat	equ	0xFF5
 11853                           prodh	equ	0xFF4
 11854                           prodl	equ	0xFF3
 11855                           intcon	equ	0xFF2
 11856                           indf0	equ	0xFEF
 11857                           postinc0	equ	0xFEE
 11858                           fsr0h	equ	0xFEA
 11859                           fsr0l	equ	0xFE9
 11860                           wreg	equ	0xFE8
 11861                           postdec1	equ	0xFE5
 11862                           fsr1l	equ	0xFE1
 11863                           indf2	equ	0xFDF
 11864                           postinc2	equ	0xFDE
 11865                           postdec2	equ	0xFDD
 11866                           fsr2h	equ	0xFDA
 11867                           fsr2l	equ	0xFD9
 11868                           status	equ	0xFD8
 11869                           
 11870 ;; *************** function ___awdiv *****************
 11871 ;; Defined at:
 11872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;  dividend        2    6[COMRAM] int 
 11875 ;;  divisor         2    8[COMRAM] int 
 11876 ;; Auto vars:     Size  Location     Type
 11877 ;;  quotient        2   12[COMRAM] int 
 11878 ;;  sign            1   11[COMRAM] unsigned char 
 11879 ;;  counter         1   10[COMRAM] unsigned char 
 11880 ;; Return value:  Size  Location     Type
 11881 ;;                  2    6[COMRAM] int 
 11882 ;; Registers used:
 11883 ;;		wreg, status,2, status,0
 11884 ;; Tracked objects:
 11885 ;;		On entry : 0/0
 11886 ;;		On exit  : 0/0
 11887 ;;		Unchanged: 0/0
 11888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11890 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11892 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11893 ;;Total ram usage:        8 bytes
 11894 ;; Hardware stack levels used:    1
 11895 ;; This function calls:
 11896 ;;		Nothing
 11897 ;; This function is called by:
 11898 ;;		_Write_RTC
 11899 ;;		_fround
 11900 ;;		_scale
 11901 ;;		_sprintf
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text29
 11906  00C142                     __ptext29:
 11907                           	opt stack 0
 11908  00C142                     ___awdiv:
 11909                           	opt stack 28
 11910                           
 11911                           ;incstack = 0
 11912  00C142  0E00               	movlw	0
 11913  00C144  6E0C               	movwf	___awdiv@sign,c
 11914  00C146  AE0A               	btfss	___awdiv@divisor+1,7,c
 11915  00C148  D007               	goto	l3602
 11916  00C14A  6C09               	negf	___awdiv@divisor,c
 11917  00C14C  1E0A               	comf	___awdiv@divisor+1,f,c
 11918  00C14E  B0D8               	btfsc	status,0,c
 11919  00C150  2A0A               	incf	___awdiv@divisor+1,f,c
 11920  00C152  0E01               	movlw	1
 11921  00C154  6E0C               	movwf	___awdiv@sign,c
 11922  00C156  D000               	goto	l3602
 11923  00C158                     l3602:
 11924  00C158  AE08               	btfss	___awdiv@dividend+1,7,c
 11925  00C15A  D007               	goto	l3608
 11926  00C15C  6C07               	negf	___awdiv@dividend,c
 11927  00C15E  1E08               	comf	___awdiv@dividend+1,f,c
 11928  00C160  B0D8               	btfsc	status,0,c
 11929  00C162  2A08               	incf	___awdiv@dividend+1,f,c
 11930  00C164  0E01               	movlw	1
 11931  00C166  1A0C               	xorwf	___awdiv@sign,f,c
 11932  00C168  D000               	goto	l3608
 11933  00C16A                     l3608:
 11934  00C16A  0E00               	movlw	0
 11935  00C16C  6E0E               	movwf	___awdiv@quotient+1,c
 11936  00C16E  0E00               	movlw	0
 11937  00C170  6E0D               	movwf	___awdiv@quotient,c
 11938  00C172  5009               	movf	___awdiv@divisor,w,c
 11939  00C174  100A               	iorwf	___awdiv@divisor+1,w,c
 11940  00C176  B4D8               	btfsc	status,2,c
 11941  00C178  D021               	goto	l3630
 11942  00C17A  0E01               	movlw	1
 11943  00C17C  6E0B               	movwf	___awdiv@counter,c
 11944  00C17E  D005               	goto	l3616
 11945  00C180                     l3614:
 11946  00C180  90D8               	bcf	status,0,c
 11947  00C182  3609               	rlcf	___awdiv@divisor,f,c
 11948  00C184  360A               	rlcf	___awdiv@divisor+1,f,c
 11949  00C186  2A0B               	incf	___awdiv@counter,f,c
 11950  00C188  D000               	goto	l3616
 11951  00C18A                     l3616:
 11952  00C18A  BE0A               	btfsc	___awdiv@divisor+1,7,c
 11953  00C18C  D002               	goto	l3618
 11954  00C18E  D7F8               	goto	l3614
 11955  00C190  D000               	goto	l3618
 11956  00C192                     l3618:
 11957  00C192  90D8               	bcf	status,0,c
 11958  00C194  360D               	rlcf	___awdiv@quotient,f,c
 11959  00C196  360E               	rlcf	___awdiv@quotient+1,f,c
 11960  00C198  5009               	movf	___awdiv@divisor,w,c
 11961  00C19A  5C07               	subwf	___awdiv@dividend,w,c
 11962  00C19C  500A               	movf	___awdiv@divisor+1,w,c
 11963  00C19E  5808               	subwfb	___awdiv@dividend+1,w,c
 11964  00C1A0  A0D8               	btfss	status,0,c
 11965  00C1A2  D006               	goto	l3626
 11966  00C1A4  5009               	movf	___awdiv@divisor,w,c
 11967  00C1A6  5E07               	subwf	___awdiv@dividend,f,c
 11968  00C1A8  500A               	movf	___awdiv@divisor+1,w,c
 11969  00C1AA  5A08               	subwfb	___awdiv@dividend+1,f,c
 11970  00C1AC  800D               	bsf	___awdiv@quotient,0,c
 11971  00C1AE  D000               	goto	l3626
 11972  00C1B0                     l3626:
 11973  00C1B0  90D8               	bcf	status,0,c
 11974  00C1B2  320A               	rrcf	___awdiv@divisor+1,f,c
 11975  00C1B4  3209               	rrcf	___awdiv@divisor,f,c
 11976  00C1B6  2E0B               	decfsz	___awdiv@counter,f,c
 11977  00C1B8  D7EC               	goto	l3618
 11978  00C1BA  D000               	goto	l3630
 11979  00C1BC                     l3630:
 11980  00C1BC  500C               	movf	___awdiv@sign,w,c
 11981  00C1BE  B4D8               	btfsc	status,2,c
 11982  00C1C0  D005               	goto	l3634
 11983  00C1C2  6C0D               	negf	___awdiv@quotient,c
 11984  00C1C4  1E0E               	comf	___awdiv@quotient+1,f,c
 11985  00C1C6  B0D8               	btfsc	status,0,c
 11986  00C1C8  2A0E               	incf	___awdiv@quotient+1,f,c
 11987  00C1CA  D000               	goto	l3634
 11988  00C1CC                     l3634:
 11989  00C1CC  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 11990  00C1D0  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 11991  00C1D4  0012               	return	
 11992  00C1D6  0012               	return		;funcret
 11993  00C1D8                     __end_of___awdiv:
 11994                           	opt stack 0
 11995                           tblptru	equ	0xFF8
 11996                           tblptrh	equ	0xFF7
 11997                           tblptrl	equ	0xFF6
 11998                           tablat	equ	0xFF5
 11999                           prodh	equ	0xFF4
 12000                           prodl	equ	0xFF3
 12001                           intcon	equ	0xFF2
 12002                           indf0	equ	0xFEF
 12003                           postinc0	equ	0xFEE
 12004                           fsr0h	equ	0xFEA
 12005                           fsr0l	equ	0xFE9
 12006                           wreg	equ	0xFE8
 12007                           postdec1	equ	0xFE5
 12008                           fsr1l	equ	0xFE1
 12009                           indf2	equ	0xFDF
 12010                           postinc2	equ	0xFDE
 12011                           postdec2	equ	0xFDD
 12012                           fsr2h	equ	0xFDA
 12013                           fsr2l	equ	0xFD9
 12014                           status	equ	0xFD8
 12015                           
 12016 ;; *************** function __tdiv_to_l_ *****************
 12017 ;; Defined at:
 12018 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
 12019 ;; Parameters:    Size  Location     Type
 12020 ;;  f1              3    0[COMRAM] float 
 12021 ;;  f2              3    3[COMRAM] float 
 12022 ;; Auto vars:     Size  Location     Type
 12023 ;;  quot            4    9[COMRAM] unsigned long 
 12024 ;;  exp1            1   14[COMRAM] unsigned char 
 12025 ;;  cntr            1   13[COMRAM] unsigned char 
 12026 ;; Return value:  Size  Location     Type
 12027 ;;                  4    0[COMRAM] unsigned long 
 12028 ;; Registers used:
 12029 ;;		wreg, status,2, status,0
 12030 ;; Tracked objects:
 12031 ;;		On entry : 0/0
 12032 ;;		On exit  : 0/0
 12033 ;;		Unchanged: 0/0
 12034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12035 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12036 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12037 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12038 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12039 ;;Total ram usage:       15 bytes
 12040 ;; Hardware stack levels used:    1
 12041 ;; This function calls:
 12042 ;;		Nothing
 12043 ;; This function is called by:
 12044 ;;		_sprintf
 12045 ;; This function uses a non-reentrant model
 12046 ;;
 12047                           
 12048                           	psect	text30
 12049  00CCF6                     __ptext30:
 12050                           	opt stack 0
 12051  00CCF6                     __tdiv_to_l_:
 12052                           	opt stack 29
 12053                           
 12054                           ;incstack = 0
 12055  00CCF6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 12056  00CCFA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12057  00CCFC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12058  00CCFE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
 12059  00CD00  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12060  00CD02  E301               	bnc	u3971
 12061  00CD04  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12062  00CD06                     u3971:
 12063  00CD06  5007               	movf	??__tdiv_to_l_,w,c
 12064  00CD08  6E0F               	movwf	__tdiv_to_l_@exp1,c
 12065  00CD0A  500F               	movf	__tdiv_to_l_@exp1,w,c
 12066  00CD0C  A4D8               	btfss	status,2,c
 12067  00CD0E  D009               	goto	l3760
 12068  00CD10  0E00               	movlw	0
 12069  00CD12  6E01               	movwf	?__tdiv_to_l_,c
 12070  00CD14  0E00               	movlw	0
 12071  00CD16  6E02               	movwf	?__tdiv_to_l_+1,c
 12072  00CD18  0E00               	movlw	0
 12073  00CD1A  6E03               	movwf	?__tdiv_to_l_+2,c
 12074  00CD1C  0E00               	movlw	0
 12075  00CD1E  6E04               	movwf	?__tdiv_to_l_+3,c
 12076  00CD20  0012               	return	
 12077  00CD22                     l3760:
 12078  00CD22  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 12079  00CD26  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 12080  00CD28  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 12081  00CD2A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
 12082  00CD2C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
 12083  00CD2E  E301               	bnc	u3991
 12084  00CD30  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 12085  00CD32                     u3991:
 12086  00CD32  5007               	movf	??__tdiv_to_l_,w,c
 12087  00CD34  6E0E               	movwf	__tdiv_to_l_@cntr,c
 12088  00CD36  500E               	movf	__tdiv_to_l_@cntr,w,c
 12089  00CD38  A4D8               	btfss	status,2,c
 12090  00CD3A  D009               	goto	l3766
 12091  00CD3C  0E00               	movlw	0
 12092  00CD3E  6E01               	movwf	?__tdiv_to_l_,c
 12093  00CD40  0E00               	movlw	0
 12094  00CD42  6E02               	movwf	?__tdiv_to_l_+1,c
 12095  00CD44  0E00               	movlw	0
 12096  00CD46  6E03               	movwf	?__tdiv_to_l_+2,c
 12097  00CD48  0E00               	movlw	0
 12098  00CD4A  6E04               	movwf	?__tdiv_to_l_+3,c
 12099  00CD4C  0012               	return	
 12100  00CD4E                     l3766:
 12101  00CD4E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
 12102  00CD50  0EFF               	movlw	255
 12103  00CD52  1601               	andwf	__tdiv_to_l_@f1,f,c
 12104  00CD54  0EFF               	movlw	255
 12105  00CD56  1602               	andwf	__tdiv_to_l_@f1+1,f,c
 12106  00CD58  0E00               	movlw	0
 12107  00CD5A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
 12108  00CD5C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
 12109  00CD5E  0EFF               	movlw	255
 12110  00CD60  1604               	andwf	__tdiv_to_l_@f2,f,c
 12111  00CD62  0EFF               	movlw	255
 12112  00CD64  1605               	andwf	__tdiv_to_l_@f2+1,f,c
 12113  00CD66  0E00               	movlw	0
 12114  00CD68  1606               	andwf	__tdiv_to_l_@f2+2,f,c
 12115  00CD6A  0E00               	movlw	0
 12116  00CD6C  6E0A               	movwf	__tdiv_to_l_@quot,c
 12117  00CD6E  0E00               	movlw	0
 12118  00CD70  6E0B               	movwf	__tdiv_to_l_@quot+1,c
 12119  00CD72  0E00               	movlw	0
 12120  00CD74  6E0C               	movwf	__tdiv_to_l_@quot+2,c
 12121  00CD76  0E00               	movlw	0
 12122  00CD78  6E0D               	movwf	__tdiv_to_l_@quot+3,c
 12123  00CD7A  0E7F               	movlw	127
 12124  00CD7C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 12125  00CD7E  500E               	movf	__tdiv_to_l_@cntr,w,c
 12126  00CD80  0F98               	addlw	152
 12127  00CD82  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
 12128  00CD84  0E18               	movlw	24
 12129  00CD86  6E0E               	movwf	__tdiv_to_l_@cntr,c
 12130  00CD88                     l1033:
 12131  00CD88  90D8               	bcf	status,0,c
 12132  00CD8A  360A               	rlcf	__tdiv_to_l_@quot,f,c
 12133  00CD8C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 12134  00CD8E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 12135  00CD90  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 12136  00CD92  5004               	movf	__tdiv_to_l_@f2,w,c
 12137  00CD94  5C01               	subwf	__tdiv_to_l_@f1,w,c
 12138  00CD96  5005               	movf	__tdiv_to_l_@f2+1,w,c
 12139  00CD98  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
 12140  00CD9A  5006               	movf	__tdiv_to_l_@f2+2,w,c
 12141  00CD9C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
 12142  00CD9E  A0D8               	btfss	status,0,c
 12143  00CDA0  D007               	goto	l1034
 12144  00CDA2  5004               	movf	__tdiv_to_l_@f2,w,c
 12145  00CDA4  5E01               	subwf	__tdiv_to_l_@f1,f,c
 12146  00CDA6  5005               	movf	__tdiv_to_l_@f2+1,w,c
 12147  00CDA8  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
 12148  00CDAA  5006               	movf	__tdiv_to_l_@f2+2,w,c
 12149  00CDAC  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
 12150  00CDAE  800A               	bsf	__tdiv_to_l_@quot,0,c
 12151  00CDB0                     l1034:
 12152  00CDB0  90D8               	bcf	status,0,c
 12153  00CDB2  3601               	rlcf	__tdiv_to_l_@f1,f,c
 12154  00CDB4  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
 12155  00CDB6  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
 12156  00CDB8  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
 12157  00CDBA  D7E6               	goto	l1033
 12158  00CDBC  D000               	goto	l3788
 12159  00CDBE                     l3788:
 12160  00CDBE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
 12161  00CDC0  D017               	goto	l3800
 12162  00CDC2  500F               	movf	__tdiv_to_l_@exp1,w,c
 12163  00CDC4  0A80               	xorlw	128
 12164  00CDC6  0F97               	addlw	151
 12165  00CDC8  B0D8               	btfsc	status,0,c
 12166  00CDCA  D00A               	goto	l3796
 12167  00CDCC  0E00               	movlw	0
 12168  00CDCE  6E01               	movwf	?__tdiv_to_l_,c
 12169  00CDD0  0E00               	movlw	0
 12170  00CDD2  6E02               	movwf	?__tdiv_to_l_+1,c
 12171  00CDD4  0E00               	movlw	0
 12172  00CDD6  6E03               	movwf	?__tdiv_to_l_+2,c
 12173  00CDD8  0E00               	movlw	0
 12174  00CDDA  6E04               	movwf	?__tdiv_to_l_+3,c
 12175  00CDDC  0012               	return	
 12176  00CDDE  D000               	goto	l3796
 12177  00CDE0                     l3796:
 12178  00CDE0  90D8               	bcf	status,0,c
 12179  00CDE2  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
 12180  00CDE4  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
 12181  00CDE6  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
 12182  00CDE8  320A               	rrcf	__tdiv_to_l_@quot,f,c
 12183  00CDEA  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
 12184  00CDEC  D7F9               	goto	l3796
 12185  00CDEE  D017               	goto	l1040
 12186  00CDF0                     l3800:
 12187  00CDF0  0E17               	movlw	23
 12188  00CDF2  640F               	cpfsgt	__tdiv_to_l_@exp1,c
 12189  00CDF4  D011               	goto	l3808
 12190  00CDF6  0E00               	movlw	0
 12191  00CDF8  6E01               	movwf	?__tdiv_to_l_,c
 12192  00CDFA  0E00               	movlw	0
 12193  00CDFC  6E02               	movwf	?__tdiv_to_l_+1,c
 12194  00CDFE  0E00               	movlw	0
 12195  00CE00  6E03               	movwf	?__tdiv_to_l_+2,c
 12196  00CE02  0E00               	movlw	0
 12197  00CE04  6E04               	movwf	?__tdiv_to_l_+3,c
 12198  00CE06  0012               	return	
 12199  00CE08  D007               	goto	l3808
 12200  00CE0A                     l3806:
 12201  00CE0A  90D8               	bcf	status,0,c
 12202  00CE0C  360A               	rlcf	__tdiv_to_l_@quot,f,c
 12203  00CE0E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
 12204  00CE10  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
 12205  00CE12  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
 12206  00CE14  060F               	decf	__tdiv_to_l_@exp1,f,c
 12207  00CE16  D000               	goto	l3808
 12208  00CE18                     l3808:
 12209  00CE18  500F               	movf	__tdiv_to_l_@exp1,w,c
 12210  00CE1A  A4D8               	btfss	status,2,c
 12211  00CE1C  D7F6               	goto	l3806
 12212  00CE1E                     l1040:
 12213  00CE1E  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 12214  00CE22  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 12215  00CE26  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 12216  00CE2A  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 12217  00CE2E  0012               	return		;funcret
 12218  00CE30                     __end_of__tdiv_to_l_:
 12219                           	opt stack 0
 12220                           tblptru	equ	0xFF8
 12221                           tblptrh	equ	0xFF7
 12222                           tblptrl	equ	0xFF6
 12223                           tablat	equ	0xFF5
 12224                           prodh	equ	0xFF4
 12225                           prodl	equ	0xFF3
 12226                           intcon	equ	0xFF2
 12227                           indf0	equ	0xFEF
 12228                           postinc0	equ	0xFEE
 12229                           fsr0h	equ	0xFEA
 12230                           fsr0l	equ	0xFE9
 12231                           wreg	equ	0xFE8
 12232                           postdec1	equ	0xFE5
 12233                           fsr1l	equ	0xFE1
 12234                           indf2	equ	0xFDF
 12235                           postinc2	equ	0xFDE
 12236                           postdec2	equ	0xFDD
 12237                           fsr2h	equ	0xFDA
 12238                           fsr2l	equ	0xFD9
 12239                           status	equ	0xFD8
 12240                           
 12241 ;; *************** function __div_to_l_ *****************
 12242 ;; Defined at:
 12243 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;  f1              3    0[COMRAM] unsigned long 
 12246 ;;  f2              3    3[COMRAM] unsigned long 
 12247 ;; Auto vars:     Size  Location     Type
 12248 ;;  quot            4    6[COMRAM] unsigned long 
 12249 ;;  exp1            1   11[COMRAM] unsigned char 
 12250 ;;  cntr            1   10[COMRAM] unsigned char 
 12251 ;; Return value:  Size  Location     Type
 12252 ;;                  4    0[COMRAM] unsigned long 
 12253 ;; Registers used:
 12254 ;;		wreg, status,2, status,0
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12260 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12261 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12263 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12264 ;;Total ram usage:       12 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; This function calls:
 12267 ;;		Nothing
 12268 ;; This function is called by:
 12269 ;;		_sprintf
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           	psect	text31
 12274  00CBC2                     __ptext31:
 12275                           	opt stack 0
 12276  00CBC2                     __div_to_l_:
 12277                           	opt stack 29
 12278                           
 12279                           ;incstack = 0
 12280  00CBC2  3403               	rlcf	__div_to_l_@f1+2,w,c
 12281  00CBC4  3404               	rlcf	__div_to_l_@f1+3,w,c
 12282  00CBC6  6E0C               	movwf	__div_to_l_@exp1,c
 12283  00CBC8  500C               	movf	__div_to_l_@exp1,w,c
 12284  00CBCA  A4D8               	btfss	status,2,c
 12285  00CBCC  D009               	goto	l3816
 12286  00CBCE  0E00               	movlw	0
 12287  00CBD0  6E01               	movwf	?__div_to_l_,c
 12288  00CBD2  0E00               	movlw	0
 12289  00CBD4  6E02               	movwf	?__div_to_l_+1,c
 12290  00CBD6  0E00               	movlw	0
 12291  00CBD8  6E03               	movwf	?__div_to_l_+2,c
 12292  00CBDA  0E00               	movlw	0
 12293  00CBDC  6E04               	movwf	?__div_to_l_+3,c
 12294  00CBDE  0012               	return	
 12295  00CBE0                     l3816:
 12296  00CBE0  3406               	rlcf	__div_to_l_@f2+2,w,c
 12297  00CBE2  3407               	rlcf	__div_to_l_@f2+3,w,c
 12298  00CBE4  6E0B               	movwf	__div_to_l_@cntr,c
 12299  00CBE6  500B               	movf	__div_to_l_@cntr,w,c
 12300  00CBE8  A4D8               	btfss	status,2,c
 12301  00CBEA  D009               	goto	l3822
 12302  00CBEC  0E00               	movlw	0
 12303  00CBEE  6E01               	movwf	?__div_to_l_,c
 12304  00CBF0  0E00               	movlw	0
 12305  00CBF2  6E02               	movwf	?__div_to_l_+1,c
 12306  00CBF4  0E00               	movlw	0
 12307  00CBF6  6E03               	movwf	?__div_to_l_+2,c
 12308  00CBF8  0E00               	movlw	0
 12309  00CBFA  6E04               	movwf	?__div_to_l_+3,c
 12310  00CBFC  0012               	return	
 12311  00CBFE                     l3822:
 12312  00CBFE  8E03               	bsf	__div_to_l_@f1+2,7,c
 12313  00CC00  0EFF               	movlw	255
 12314  00CC02  1601               	andwf	__div_to_l_@f1,f,c
 12315  00CC04  0EFF               	movlw	255
 12316  00CC06  1602               	andwf	__div_to_l_@f1+1,f,c
 12317  00CC08  0EFF               	movlw	255
 12318  00CC0A  1603               	andwf	__div_to_l_@f1+2,f,c
 12319  00CC0C  0E00               	movlw	0
 12320  00CC0E  1604               	andwf	__div_to_l_@f1+3,f,c
 12321  00CC10  8E06               	bsf	__div_to_l_@f2+2,7,c
 12322  00CC12  0EFF               	movlw	255
 12323  00CC14  1604               	andwf	__div_to_l_@f2,f,c
 12324  00CC16  0EFF               	movlw	255
 12325  00CC18  1605               	andwf	__div_to_l_@f2+1,f,c
 12326  00CC1A  0EFF               	movlw	255
 12327  00CC1C  1606               	andwf	__div_to_l_@f2+2,f,c
 12328  00CC1E  0E00               	movlw	0
 12329  00CC20  1607               	andwf	__div_to_l_@f2+3,f,c
 12330  00CC22  0E00               	movlw	0
 12331  00CC24  6E07               	movwf	__div_to_l_@quot,c
 12332  00CC26  0E00               	movlw	0
 12333  00CC28  6E08               	movwf	__div_to_l_@quot+1,c
 12334  00CC2A  0E00               	movlw	0
 12335  00CC2C  6E09               	movwf	__div_to_l_@quot+2,c
 12336  00CC2E  0E00               	movlw	0
 12337  00CC30  6E0A               	movwf	__div_to_l_@quot+3,c
 12338  00CC32  0E7F               	movlw	127
 12339  00CC34  5E0C               	subwf	__div_to_l_@exp1,f,c
 12340  00CC36  500B               	movf	__div_to_l_@cntr,w,c
 12341  00CC38  0FA0               	addlw	160
 12342  00CC3A  5E0C               	subwf	__div_to_l_@exp1,f,c
 12343  00CC3C  0E20               	movlw	32
 12344  00CC3E  6E0B               	movwf	__div_to_l_@cntr,c
 12345  00CC40  D000               	goto	l3836
 12346  00CC42                     l3836:
 12347  00CC42  90D8               	bcf	status,0,c
 12348  00CC44  3607               	rlcf	__div_to_l_@quot,f,c
 12349  00CC46  3608               	rlcf	__div_to_l_@quot+1,f,c
 12350  00CC48  3609               	rlcf	__div_to_l_@quot+2,f,c
 12351  00CC4A  360A               	rlcf	__div_to_l_@quot+3,f,c
 12352  00CC4C  5004               	movf	__div_to_l_@f2,w,c
 12353  00CC4E  5C01               	subwf	__div_to_l_@f1,w,c
 12354  00CC50  5005               	movf	__div_to_l_@f2+1,w,c
 12355  00CC52  5802               	subwfb	__div_to_l_@f1+1,w,c
 12356  00CC54  5006               	movf	__div_to_l_@f2+2,w,c
 12357  00CC56  5803               	subwfb	__div_to_l_@f1+2,w,c
 12358  00CC58  5007               	movf	__div_to_l_@f2+3,w,c
 12359  00CC5A  5804               	subwfb	__div_to_l_@f1+3,w,c
 12360  00CC5C  A0D8               	btfss	status,0,c
 12361  00CC5E  D00A               	goto	l3844
 12362  00CC60  5004               	movf	__div_to_l_@f2,w,c
 12363  00CC62  5E01               	subwf	__div_to_l_@f1,f,c
 12364  00CC64  5005               	movf	__div_to_l_@f2+1,w,c
 12365  00CC66  5A02               	subwfb	__div_to_l_@f1+1,f,c
 12366  00CC68  5006               	movf	__div_to_l_@f2+2,w,c
 12367  00CC6A  5A03               	subwfb	__div_to_l_@f1+2,f,c
 12368  00CC6C  5007               	movf	__div_to_l_@f2+3,w,c
 12369  00CC6E  5A04               	subwfb	__div_to_l_@f1+3,f,c
 12370  00CC70  8007               	bsf	__div_to_l_@quot,0,c
 12371  00CC72  D000               	goto	l3844
 12372  00CC74                     l3844:
 12373  00CC74  90D8               	bcf	status,0,c
 12374  00CC76  3601               	rlcf	__div_to_l_@f1,f,c
 12375  00CC78  3602               	rlcf	__div_to_l_@f1+1,f,c
 12376  00CC7A  3603               	rlcf	__div_to_l_@f1+2,f,c
 12377  00CC7C  3604               	rlcf	__div_to_l_@f1+3,f,c
 12378  00CC7E  2E0B               	decfsz	__div_to_l_@cntr,f,c
 12379  00CC80  D7E0               	goto	l3836
 12380  00CC82  D000               	goto	l3848
 12381  00CC84                     l3848:
 12382  00CC84  AE0C               	btfss	__div_to_l_@exp1,7,c
 12383  00CC86  D017               	goto	l3860
 12384  00CC88  500C               	movf	__div_to_l_@exp1,w,c
 12385  00CC8A  0A80               	xorlw	128
 12386  00CC8C  0F9F               	addlw	159
 12387  00CC8E  B0D8               	btfsc	status,0,c
 12388  00CC90  D00A               	goto	l3856
 12389  00CC92  0E00               	movlw	0
 12390  00CC94  6E01               	movwf	?__div_to_l_,c
 12391  00CC96  0E00               	movlw	0
 12392  00CC98  6E02               	movwf	?__div_to_l_+1,c
 12393  00CC9A  0E00               	movlw	0
 12394  00CC9C  6E03               	movwf	?__div_to_l_+2,c
 12395  00CC9E  0E00               	movlw	0
 12396  00CCA0  6E04               	movwf	?__div_to_l_+3,c
 12397  00CCA2  0012               	return	
 12398  00CCA4  D000               	goto	l3856
 12399  00CCA6                     l3856:
 12400  00CCA6  90D8               	bcf	status,0,c
 12401  00CCA8  320A               	rrcf	__div_to_l_@quot+3,f,c
 12402  00CCAA  3209               	rrcf	__div_to_l_@quot+2,f,c
 12403  00CCAC  3208               	rrcf	__div_to_l_@quot+1,f,c
 12404  00CCAE  3207               	rrcf	__div_to_l_@quot,f,c
 12405  00CCB0  3E0C               	incfsz	__div_to_l_@exp1,f,c
 12406  00CCB2  D7F9               	goto	l3856
 12407  00CCB4  D017               	goto	l919
 12408  00CCB6                     l3860:
 12409  00CCB6  0E1F               	movlw	31
 12410  00CCB8  640C               	cpfsgt	__div_to_l_@exp1,c
 12411  00CCBA  D011               	goto	l3868
 12412  00CCBC  0E00               	movlw	0
 12413  00CCBE  6E01               	movwf	?__div_to_l_,c
 12414  00CCC0  0E00               	movlw	0
 12415  00CCC2  6E02               	movwf	?__div_to_l_+1,c
 12416  00CCC4  0E00               	movlw	0
 12417  00CCC6  6E03               	movwf	?__div_to_l_+2,c
 12418  00CCC8  0E00               	movlw	0
 12419  00CCCA  6E04               	movwf	?__div_to_l_+3,c
 12420  00CCCC  0012               	return	
 12421  00CCCE  D007               	goto	l3868
 12422  00CCD0                     l3866:
 12423  00CCD0  90D8               	bcf	status,0,c
 12424  00CCD2  3607               	rlcf	__div_to_l_@quot,f,c
 12425  00CCD4  3608               	rlcf	__div_to_l_@quot+1,f,c
 12426  00CCD6  3609               	rlcf	__div_to_l_@quot+2,f,c
 12427  00CCD8  360A               	rlcf	__div_to_l_@quot+3,f,c
 12428  00CCDA  060C               	decf	__div_to_l_@exp1,f,c
 12429  00CCDC  D000               	goto	l3868
 12430  00CCDE                     l3868:
 12431  00CCDE  500C               	movf	__div_to_l_@exp1,w,c
 12432  00CCE0  A4D8               	btfss	status,2,c
 12433  00CCE2  D7F6               	goto	l3866
 12434  00CCE4                     l919:
 12435  00CCE4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
 12436  00CCE8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 12437  00CCEC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 12438  00CCF0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 12439  00CCF4  0012               	return		;funcret
 12440  00CCF6                     __end_of__div_to_l_:
 12441                           	opt stack 0
 12442                           tblptru	equ	0xFF8
 12443                           tblptrh	equ	0xFF7
 12444                           tblptrl	equ	0xFF6
 12445                           tablat	equ	0xFF5
 12446                           prodh	equ	0xFF4
 12447                           prodl	equ	0xFF3
 12448                           intcon	equ	0xFF2
 12449                           indf0	equ	0xFEF
 12450                           postinc0	equ	0xFEE
 12451                           fsr0h	equ	0xFEA
 12452                           fsr0l	equ	0xFE9
 12453                           wreg	equ	0xFE8
 12454                           postdec1	equ	0xFE5
 12455                           fsr1l	equ	0xFE1
 12456                           indf2	equ	0xFDF
 12457                           postinc2	equ	0xFDE
 12458                           postdec2	equ	0xFDD
 12459                           fsr2h	equ	0xFDA
 12460                           fsr2l	equ	0xFD9
 12461                           status	equ	0xFD8
 12462                           
 12463 ;; *************** function ___lltoft *****************
 12464 ;; Defined at:
 12465 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;  c               4    8[COMRAM] unsigned long 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  exp             1   16[COMRAM] unsigned char 
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  3    8[COMRAM] float 
 12472 ;; Registers used:
 12473 ;;		wreg, status,2, status,0, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12480 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12481 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12482 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12483 ;;Total ram usage:        9 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    1
 12486 ;; This function calls:
 12487 ;;		___ftpack
 12488 ;; This function is called by:
 12489 ;;		_sprintf
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text32
 12494  00BBE2                     __ptext32:
 12495                           	opt stack 0
 12496  00BBE2                     ___lltoft:
 12497                           	opt stack 28
 12498                           
 12499                           ;incstack = 0
 12500  00BBE2  0E8E               	movlw	142
 12501  00BBE4  6E11               	movwf	___lltoft@exp,c
 12502  00BBE6  D007               	goto	l3988
 12503  00BBE8                     l3986:
 12504  00BBE8  90D8               	bcf	status,0,c
 12505  00BBEA  320C               	rrcf	___lltoft@c+3,f,c
 12506  00BBEC  320B               	rrcf	___lltoft@c+2,f,c
 12507  00BBEE  320A               	rrcf	___lltoft@c+1,f,c
 12508  00BBF0  3209               	rrcf	___lltoft@c,f,c
 12509  00BBF2  2A11               	incf	___lltoft@exp,f,c
 12510  00BBF4  D000               	goto	l3988
 12511  00BBF6                     l3988:
 12512  00BBF6  0E00               	movlw	0
 12513  00BBF8  1409               	andwf	___lltoft@c,w,c
 12514  00BBFA  6E0D               	movwf	??___lltoft& (0+255),c
 12515  00BBFC  0E00               	movlw	0
 12516  00BBFE  140A               	andwf	___lltoft@c+1,w,c
 12517  00BC00  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 12518  00BC02  0E00               	movlw	0
 12519  00BC04  140B               	andwf	___lltoft@c+2,w,c
 12520  00BC06  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 12521  00BC08  0EFF               	movlw	255
 12522  00BC0A  140C               	andwf	___lltoft@c+3,w,c
 12523  00BC0C  6E10               	movwf	(??___lltoft+3)& (0+255),c
 12524  00BC0E  500D               	movf	??___lltoft,w,c
 12525  00BC10  100E               	iorwf	??___lltoft+1,w,c
 12526  00BC12  100F               	iorwf	??___lltoft+2,w,c
 12527  00BC14  1010               	iorwf	??___lltoft+3,w,c
 12528  00BC16  A4D8               	btfss	status,2,c
 12529  00BC18  D7E7               	goto	l3986
 12530  00BC1A  C009  F001         	movff	___lltoft@c,___ftpack@arg
 12531  00BC1E  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 12532  00BC22  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 12533  00BC26  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 12534  00BC2A  0E00               	movlw	0
 12535  00BC2C  6E05               	movwf	___ftpack@sign,c
 12536  00BC2E  EC40  F061         	call	___ftpack	;wreg free
 12537  00BC32  C001  F009         	movff	?___ftpack,?___lltoft
 12538  00BC36  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 12539  00BC3A  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 12540  00BC3E  0012               	return	
 12541  00BC40  0012               	return		;funcret
 12542  00BC42                     __end_of___lltoft:
 12543                           	opt stack 0
 12544                           tblptru	equ	0xFF8
 12545                           tblptrh	equ	0xFF7
 12546                           tblptrl	equ	0xFF6
 12547                           tablat	equ	0xFF5
 12548                           prodh	equ	0xFF4
 12549                           prodl	equ	0xFF3
 12550                           intcon	equ	0xFF2
 12551                           indf0	equ	0xFEF
 12552                           postinc0	equ	0xFEE
 12553                           fsr0h	equ	0xFEA
 12554                           fsr0l	equ	0xFE9
 12555                           wreg	equ	0xFE8
 12556                           postdec1	equ	0xFE5
 12557                           fsr1l	equ	0xFE1
 12558                           indf2	equ	0xFDF
 12559                           postinc2	equ	0xFDE
 12560                           postdec2	equ	0xFDD
 12561                           fsr2h	equ	0xFDA
 12562                           fsr2l	equ	0xFD9
 12563                           status	equ	0xFD8
 12564                           
 12565 ;; *************** function ___llmod *****************
 12566 ;; Defined at:
 12567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
 12568 ;; Parameters:    Size  Location     Type
 12569 ;;  dividend        4   13[COMRAM] unsigned long 
 12570 ;;  divisor         4   17[COMRAM] unsigned long 
 12571 ;; Auto vars:     Size  Location     Type
 12572 ;;  counter         1   21[COMRAM] unsigned char 
 12573 ;; Return value:  Size  Location     Type
 12574 ;;                  4   13[COMRAM] unsigned long 
 12575 ;; Registers used:
 12576 ;;		wreg, status,2, status,0
 12577 ;; Tracked objects:
 12578 ;;		On entry : 0/0
 12579 ;;		On exit  : 0/0
 12580 ;;		Unchanged: 0/0
 12581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12582 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12585 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12586 ;;Total ram usage:        9 bytes
 12587 ;; Hardware stack levels used:    1
 12588 ;; This function calls:
 12589 ;;		Nothing
 12590 ;; This function is called by:
 12591 ;;		_sprintf
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595                           	psect	text33
 12596  00BD12                     __ptext33:
 12597                           	opt stack 0
 12598  00BD12                     ___llmod:
 12599                           	opt stack 29
 12600                           
 12601                           ;incstack = 0
 12602  00BD12  5012               	movf	___llmod@divisor,w,c
 12603  00BD14  1013               	iorwf	___llmod@divisor+1,w,c
 12604  00BD16  1014               	iorwf	___llmod@divisor+2,w,c
 12605  00BD18  1015               	iorwf	___llmod@divisor+3,w,c
 12606  00BD1A  B4D8               	btfsc	status,2,c
 12607  00BD1C  D029               	goto	l1130
 12608  00BD1E  0E01               	movlw	1
 12609  00BD20  6E16               	movwf	___llmod@counter,c
 12610  00BD22  D007               	goto	l3974
 12611  00BD24                     l3972:
 12612  00BD24  90D8               	bcf	status,0,c
 12613  00BD26  3612               	rlcf	___llmod@divisor,f,c
 12614  00BD28  3613               	rlcf	___llmod@divisor+1,f,c
 12615  00BD2A  3614               	rlcf	___llmod@divisor+2,f,c
 12616  00BD2C  3615               	rlcf	___llmod@divisor+3,f,c
 12617  00BD2E  2A16               	incf	___llmod@counter,f,c
 12618  00BD30  D000               	goto	l3974
 12619  00BD32                     l3974:
 12620  00BD32  BE15               	btfsc	___llmod@divisor+3,7,c
 12621  00BD34  D002               	goto	l3976
 12622  00BD36  D7F6               	goto	l3972
 12623  00BD38  D000               	goto	l3976
 12624  00BD3A                     l3976:
 12625  00BD3A  5012               	movf	___llmod@divisor,w,c
 12626  00BD3C  5C0E               	subwf	___llmod@dividend,w,c
 12627  00BD3E  5013               	movf	___llmod@divisor+1,w,c
 12628  00BD40  580F               	subwfb	___llmod@dividend+1,w,c
 12629  00BD42  5014               	movf	___llmod@divisor+2,w,c
 12630  00BD44  5810               	subwfb	___llmod@dividend+2,w,c
 12631  00BD46  5015               	movf	___llmod@divisor+3,w,c
 12632  00BD48  5811               	subwfb	___llmod@dividend+3,w,c
 12633  00BD4A  A0D8               	btfss	status,0,c
 12634  00BD4C  D009               	goto	l3980
 12635  00BD4E  5012               	movf	___llmod@divisor,w,c
 12636  00BD50  5E0E               	subwf	___llmod@dividend,f,c
 12637  00BD52  5013               	movf	___llmod@divisor+1,w,c
 12638  00BD54  5A0F               	subwfb	___llmod@dividend+1,f,c
 12639  00BD56  5014               	movf	___llmod@divisor+2,w,c
 12640  00BD58  5A10               	subwfb	___llmod@dividend+2,f,c
 12641  00BD5A  5015               	movf	___llmod@divisor+3,w,c
 12642  00BD5C  5A11               	subwfb	___llmod@dividend+3,f,c
 12643  00BD5E  D000               	goto	l3980
 12644  00BD60                     l3980:
 12645  00BD60  90D8               	bcf	status,0,c
 12646  00BD62  3215               	rrcf	___llmod@divisor+3,f,c
 12647  00BD64  3214               	rrcf	___llmod@divisor+2,f,c
 12648  00BD66  3213               	rrcf	___llmod@divisor+1,f,c
 12649  00BD68  3212               	rrcf	___llmod@divisor,f,c
 12650  00BD6A  2E16               	decfsz	___llmod@counter,f,c
 12651  00BD6C  D7E6               	goto	l3976
 12652  00BD6E  D000               	goto	l1130
 12653  00BD70                     l1130:
 12654  00BD70  C00E  F00E         	movff	___llmod@dividend,?___llmod
 12655  00BD74  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
 12656  00BD78  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
 12657  00BD7C  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
 12658  00BD80  0012               	return		;funcret
 12659  00BD82                     __end_of___llmod:
 12660                           	opt stack 0
 12661                           tblptru	equ	0xFF8
 12662                           tblptrh	equ	0xFF7
 12663                           tblptrl	equ	0xFF6
 12664                           tablat	equ	0xFF5
 12665                           prodh	equ	0xFF4
 12666                           prodl	equ	0xFF3
 12667                           intcon	equ	0xFF2
 12668                           indf0	equ	0xFEF
 12669                           postinc0	equ	0xFEE
 12670                           fsr0h	equ	0xFEA
 12671                           fsr0l	equ	0xFE9
 12672                           wreg	equ	0xFE8
 12673                           postdec1	equ	0xFE5
 12674                           fsr1l	equ	0xFE1
 12675                           indf2	equ	0xFDF
 12676                           postinc2	equ	0xFDE
 12677                           postdec2	equ	0xFDD
 12678                           fsr2h	equ	0xFDA
 12679                           fsr2l	equ	0xFD9
 12680                           status	equ	0xFD8
 12681                           
 12682 ;; *************** function ___lldiv *****************
 12683 ;; Defined at:
 12684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;  dividend        4    0[COMRAM] unsigned long 
 12687 ;;  divisor         4    4[COMRAM] unsigned long 
 12688 ;; Auto vars:     Size  Location     Type
 12689 ;;  quotient        4    8[COMRAM] unsigned long 
 12690 ;;  counter         1   12[COMRAM] unsigned char 
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  4    0[COMRAM] unsigned long 
 12693 ;; Registers used:
 12694 ;;		wreg, status,2, status,0
 12695 ;; Tracked objects:
 12696 ;;		On entry : 0/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12700 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12701 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12703 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12704 ;;Total ram usage:       13 bytes
 12705 ;; Hardware stack levels used:    1
 12706 ;; This function calls:
 12707 ;;		Nothing
 12708 ;; This function is called by:
 12709 ;;		_sprintf
 12710 ;; This function uses a non-reentrant model
 12711 ;;
 12712                           
 12713                           	psect	text34
 12714  00BEFE                     __ptext34:
 12715                           	opt stack 0
 12716  00BEFE                     ___lldiv:
 12717                           	opt stack 29
 12718                           
 12719                           ;incstack = 0
 12720  00BEFE  0E00               	movlw	0
 12721  00BF00  6E09               	movwf	___lldiv@quotient,c
 12722  00BF02  0E00               	movlw	0
 12723  00BF04  6E0A               	movwf	___lldiv@quotient+1,c
 12724  00BF06  0E00               	movlw	0
 12725  00BF08  6E0B               	movwf	___lldiv@quotient+2,c
 12726  00BF0A  0E00               	movlw	0
 12727  00BF0C  6E0C               	movwf	___lldiv@quotient+3,c
 12728  00BF0E  5005               	movf	___lldiv@divisor,w,c
 12729  00BF10  1006               	iorwf	___lldiv@divisor+1,w,c
 12730  00BF12  1007               	iorwf	___lldiv@divisor+2,w,c
 12731  00BF14  1008               	iorwf	___lldiv@divisor+3,w,c
 12732  00BF16  B4D8               	btfsc	status,2,c
 12733  00BF18  D02F               	goto	l1120
 12734  00BF1A  0E01               	movlw	1
 12735  00BF1C  6E0D               	movwf	___lldiv@counter,c
 12736  00BF1E  D007               	goto	l3954
 12737  00BF20                     l3952:
 12738  00BF20  90D8               	bcf	status,0,c
 12739  00BF22  3605               	rlcf	___lldiv@divisor,f,c
 12740  00BF24  3606               	rlcf	___lldiv@divisor+1,f,c
 12741  00BF26  3607               	rlcf	___lldiv@divisor+2,f,c
 12742  00BF28  3608               	rlcf	___lldiv@divisor+3,f,c
 12743  00BF2A  2A0D               	incf	___lldiv@counter,f,c
 12744  00BF2C  D000               	goto	l3954
 12745  00BF2E                     l3954:
 12746  00BF2E  BE08               	btfsc	___lldiv@divisor+3,7,c
 12747  00BF30  D002               	goto	l3956
 12748  00BF32  D7F6               	goto	l3952
 12749  00BF34  D000               	goto	l3956
 12750  00BF36                     l3956:
 12751  00BF36  90D8               	bcf	status,0,c
 12752  00BF38  3609               	rlcf	___lldiv@quotient,f,c
 12753  00BF3A  360A               	rlcf	___lldiv@quotient+1,f,c
 12754  00BF3C  360B               	rlcf	___lldiv@quotient+2,f,c
 12755  00BF3E  360C               	rlcf	___lldiv@quotient+3,f,c
 12756  00BF40  5005               	movf	___lldiv@divisor,w,c
 12757  00BF42  5C01               	subwf	___lldiv@dividend,w,c
 12758  00BF44  5006               	movf	___lldiv@divisor+1,w,c
 12759  00BF46  5802               	subwfb	___lldiv@dividend+1,w,c
 12760  00BF48  5007               	movf	___lldiv@divisor+2,w,c
 12761  00BF4A  5803               	subwfb	___lldiv@dividend+2,w,c
 12762  00BF4C  5008               	movf	___lldiv@divisor+3,w,c
 12763  00BF4E  5804               	subwfb	___lldiv@dividend+3,w,c
 12764  00BF50  A0D8               	btfss	status,0,c
 12765  00BF52  D00A               	goto	l3964
 12766  00BF54  5005               	movf	___lldiv@divisor,w,c
 12767  00BF56  5E01               	subwf	___lldiv@dividend,f,c
 12768  00BF58  5006               	movf	___lldiv@divisor+1,w,c
 12769  00BF5A  5A02               	subwfb	___lldiv@dividend+1,f,c
 12770  00BF5C  5007               	movf	___lldiv@divisor+2,w,c
 12771  00BF5E  5A03               	subwfb	___lldiv@dividend+2,f,c
 12772  00BF60  5008               	movf	___lldiv@divisor+3,w,c
 12773  00BF62  5A04               	subwfb	___lldiv@dividend+3,f,c
 12774  00BF64  8009               	bsf	___lldiv@quotient,0,c
 12775  00BF66  D000               	goto	l3964
 12776  00BF68                     l3964:
 12777  00BF68  90D8               	bcf	status,0,c
 12778  00BF6A  3208               	rrcf	___lldiv@divisor+3,f,c
 12779  00BF6C  3207               	rrcf	___lldiv@divisor+2,f,c
 12780  00BF6E  3206               	rrcf	___lldiv@divisor+1,f,c
 12781  00BF70  3205               	rrcf	___lldiv@divisor,f,c
 12782  00BF72  2E0D               	decfsz	___lldiv@counter,f,c
 12783  00BF74  D7E0               	goto	l3956
 12784  00BF76  D000               	goto	l1120
 12785  00BF78                     l1120:
 12786  00BF78  C009  F001         	movff	___lldiv@quotient,?___lldiv
 12787  00BF7C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 12788  00BF80  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 12789  00BF84  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 12790  00BF88  0012               	return		;funcret
 12791  00BF8A                     __end_of___lldiv:
 12792                           	opt stack 0
 12793                           tblptru	equ	0xFF8
 12794                           tblptrh	equ	0xFF7
 12795                           tblptrl	equ	0xFF6
 12796                           tablat	equ	0xFF5
 12797                           prodh	equ	0xFF4
 12798                           prodl	equ	0xFF3
 12799                           intcon	equ	0xFF2
 12800                           indf0	equ	0xFEF
 12801                           postinc0	equ	0xFEE
 12802                           fsr0h	equ	0xFEA
 12803                           fsr0l	equ	0xFE9
 12804                           wreg	equ	0xFE8
 12805                           postdec1	equ	0xFE5
 12806                           fsr1l	equ	0xFE1
 12807                           indf2	equ	0xFDF
 12808                           postinc2	equ	0xFDE
 12809                           postdec2	equ	0xFDD
 12810                           fsr2h	equ	0xFDA
 12811                           fsr2l	equ	0xFD9
 12812                           status	equ	0xFD8
 12813                           
 12814 ;; *************** function ___fttol *****************
 12815 ;; Defined at:
 12816 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
 12817 ;; Parameters:    Size  Location     Type
 12818 ;;  f1              3   42[COMRAM] float 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  lval            4   52[COMRAM] unsigned long 
 12821 ;;  exp1            1   56[COMRAM] unsigned char 
 12822 ;;  sign1           1   51[COMRAM] unsigned char 
 12823 ;; Return value:  Size  Location     Type
 12824 ;;                  4   42[COMRAM] long 
 12825 ;; Registers used:
 12826 ;;		wreg, status,2, status,0
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12832 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12833 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12834 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12835 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12836 ;;Total ram usage:       15 bytes
 12837 ;; Hardware stack levels used:    1
 12838 ;; This function calls:
 12839 ;;		Nothing
 12840 ;; This function is called by:
 12841 ;;		_control_temperatura_agua
 12842 ;;		_sprintf
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           	psect	text35
 12847  00C432                     __ptext35:
 12848                           	opt stack 0
 12849  00C432                     ___fttol:
 12850                           	opt stack 29
 12851                           
 12852                           ;incstack = 0
 12853  00C432  C02D  F02F         	movff	___fttol@f1+2,??___fttol
 12854  00C436  6A30               	clrf	(??___fttol+1)& (0+255),c
 12855  00C438  6A31               	clrf	(??___fttol+2)& (0+255),c
 12856  00C43A  342C               	rlcf	___fttol@f1+1,w,c
 12857  00C43C  362F               	rlcf	??___fttol& (0+255),f,c
 12858  00C43E  E301               	bnc	u4181
 12859  00C440  8030               	bsf	(??___fttol+1)& (0+255),0,c
 12860  00C442                     u4181:
 12861  00C442  502F               	movf	??___fttol,w,c
 12862  00C444  6E39               	movwf	___fttol@exp1,c
 12863  00C446  5039               	movf	___fttol@exp1,w,c
 12864  00C448  A4D8               	btfss	status,2,c
 12865  00C44A  D009               	goto	l3906
 12866  00C44C  0E00               	movlw	0
 12867  00C44E  6E2B               	movwf	?___fttol,c
 12868  00C450  0E00               	movlw	0
 12869  00C452  6E2C               	movwf	?___fttol+1,c
 12870  00C454  0E00               	movlw	0
 12871  00C456  6E2D               	movwf	?___fttol+2,c
 12872  00C458  0E00               	movlw	0
 12873  00C45A  6E2E               	movwf	?___fttol+3,c
 12874  00C45C  0012               	return	
 12875  00C45E                     l3906:
 12876  00C45E  0E17               	movlw	23
 12877  00C460  6E2F               	movwf	??___fttol& (0+255),c
 12878  00C462  C02B  F030         	movff	___fttol@f1,??___fttol+1
 12879  00C466  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
 12880  00C46A  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
 12881  00C46E  282F               	incf	??___fttol,w,c
 12882  00C470  6E33               	movwf	(??___fttol+4)& (0+255),c
 12883  00C472  D004               	goto	u4200
 12884  00C474                     u4205:
 12885  00C474  90D8               	bcf	status,0,c
 12886  00C476  3232               	rrcf	??___fttol+3,f,c
 12887  00C478  3231               	rrcf	??___fttol+2,f,c
 12888  00C47A  3230               	rrcf	??___fttol+1,f,c
 12889  00C47C                     u4200:
 12890  00C47C  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
 12891  00C47E  D7FA               	goto	u4205
 12892  00C480  5030               	movf	??___fttol+1,w,c
 12893  00C482  6E34               	movwf	___fttol@sign1,c
 12894  00C484  8E2C               	bsf	___fttol@f1+1,7,c
 12895  00C486  0EFF               	movlw	255
 12896  00C488  162B               	andwf	___fttol@f1,f,c
 12897  00C48A  0EFF               	movlw	255
 12898  00C48C  162C               	andwf	___fttol@f1+1,f,c
 12899  00C48E  0E00               	movlw	0
 12900  00C490  162D               	andwf	___fttol@f1+2,f,c
 12901  00C492  502B               	movf	___fttol@f1,w,c
 12902  00C494  6E35               	movwf	___fttol@lval,c
 12903  00C496  502C               	movf	___fttol@f1+1,w,c
 12904  00C498  6E36               	movwf	___fttol@lval+1,c
 12905  00C49A  502D               	movf	___fttol@f1+2,w,c
 12906  00C49C  6E37               	movwf	___fttol@lval+2,c
 12907  00C49E  6A38               	clrf	___fttol@lval+3,c
 12908  00C4A0  0E8E               	movlw	142
 12909  00C4A2  5E39               	subwf	___fttol@exp1,f,c
 12910  00C4A4  AE39               	btfss	___fttol@exp1,7,c
 12911  00C4A6  D017               	goto	l3928
 12912  00C4A8  5039               	movf	___fttol@exp1,w,c
 12913  00C4AA  0A80               	xorlw	128
 12914  00C4AC  0F8F               	addlw	143
 12915  00C4AE  B0D8               	btfsc	status,0,c
 12916  00C4B0  D00A               	goto	l3924
 12917  00C4B2  0E00               	movlw	0
 12918  00C4B4  6E2B               	movwf	?___fttol,c
 12919  00C4B6  0E00               	movlw	0
 12920  00C4B8  6E2C               	movwf	?___fttol+1,c
 12921  00C4BA  0E00               	movlw	0
 12922  00C4BC  6E2D               	movwf	?___fttol+2,c
 12923  00C4BE  0E00               	movlw	0
 12924  00C4C0  6E2E               	movwf	?___fttol+3,c
 12925  00C4C2  0012               	return	
 12926  00C4C4  D000               	goto	l3924
 12927  00C4C6                     l3924:
 12928  00C4C6  90D8               	bcf	status,0,c
 12929  00C4C8  3238               	rrcf	___fttol@lval+3,f,c
 12930  00C4CA  3237               	rrcf	___fttol@lval+2,f,c
 12931  00C4CC  3236               	rrcf	___fttol@lval+1,f,c
 12932  00C4CE  3235               	rrcf	___fttol@lval,f,c
 12933  00C4D0  3E39               	incfsz	___fttol@exp1,f,c
 12934  00C4D2  D7F9               	goto	l3924
 12935  00C4D4  D019               	goto	l3938
 12936  00C4D6                     l3928:
 12937  00C4D6  0E17               	movlw	23
 12938  00C4D8  6439               	cpfsgt	___fttol@exp1,c
 12939  00C4DA  D011               	goto	l3936
 12940  00C4DC  0E00               	movlw	0
 12941  00C4DE  6E2B               	movwf	?___fttol,c
 12942  00C4E0  0E00               	movlw	0
 12943  00C4E2  6E2C               	movwf	?___fttol+1,c
 12944  00C4E4  0E00               	movlw	0
 12945  00C4E6  6E2D               	movwf	?___fttol+2,c
 12946  00C4E8  0E00               	movlw	0
 12947  00C4EA  6E2E               	movwf	?___fttol+3,c
 12948  00C4EC  0012               	return	
 12949  00C4EE  D007               	goto	l3936
 12950  00C4F0                     l3934:
 12951  00C4F0  90D8               	bcf	status,0,c
 12952  00C4F2  3635               	rlcf	___fttol@lval,f,c
 12953  00C4F4  3636               	rlcf	___fttol@lval+1,f,c
 12954  00C4F6  3637               	rlcf	___fttol@lval+2,f,c
 12955  00C4F8  3638               	rlcf	___fttol@lval+3,f,c
 12956  00C4FA  0639               	decf	___fttol@exp1,f,c
 12957  00C4FC  D000               	goto	l3936
 12958  00C4FE                     l3936:
 12959  00C4FE  5039               	movf	___fttol@exp1,w,c
 12960  00C500  B4D8               	btfsc	status,2,c
 12961  00C502  D002               	goto	l3938
 12962  00C504  D7F5               	goto	l3934
 12963  00C506  D000               	goto	l3938
 12964  00C508                     l3938:
 12965  00C508  5034               	movf	___fttol@sign1,w,c
 12966  00C50A  B4D8               	btfsc	status,2,c
 12967  00C50C  D009               	goto	l3942
 12968  00C50E  1E38               	comf	___fttol@lval+3,f,c
 12969  00C510  1E37               	comf	___fttol@lval+2,f,c
 12970  00C512  1E36               	comf	___fttol@lval+1,f,c
 12971  00C514  6C35               	negf	___fttol@lval,c
 12972  00C516  0E00               	movlw	0
 12973  00C518  2236               	addwfc	___fttol@lval+1,f,c
 12974  00C51A  2237               	addwfc	___fttol@lval+2,f,c
 12975  00C51C  2238               	addwfc	___fttol@lval+3,f,c
 12976  00C51E  D000               	goto	l3942
 12977  00C520                     l3942:
 12978  00C520  C035  F02B         	movff	___fttol@lval,?___fttol
 12979  00C524  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
 12980  00C528  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
 12981  00C52C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
 12982  00C530  0012               	return	
 12983  00C532  0012               	return		;funcret
 12984  00C534                     __end_of___fttol:
 12985                           	opt stack 0
 12986                           tblptru	equ	0xFF8
 12987                           tblptrh	equ	0xFF7
 12988                           tblptrl	equ	0xFF6
 12989                           tablat	equ	0xFF5
 12990                           prodh	equ	0xFF4
 12991                           prodl	equ	0xFF3
 12992                           intcon	equ	0xFF2
 12993                           indf0	equ	0xFEF
 12994                           postinc0	equ	0xFEE
 12995                           fsr0h	equ	0xFEA
 12996                           fsr0l	equ	0xFE9
 12997                           wreg	equ	0xFE8
 12998                           postdec1	equ	0xFE5
 12999                           fsr1l	equ	0xFE1
 13000                           indf2	equ	0xFDF
 13001                           postinc2	equ	0xFDE
 13002                           postdec2	equ	0xFDD
 13003                           fsr2h	equ	0xFDA
 13004                           fsr2l	equ	0xFD9
 13005                           status	equ	0xFD8
 13006                           
 13007 ;; *************** function ___ftsub *****************
 13008 ;; Defined at:
 13009 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;  f1              3   57[COMRAM] float 
 13012 ;;  f2              3   60[COMRAM] float 
 13013 ;; Auto vars:     Size  Location     Type
 13014 ;;		None
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  3   57[COMRAM] float 
 13017 ;; Registers used:
 13018 ;;		wreg, status,2, status,0, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13024 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13027 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13028 ;;Total ram usage:        6 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    2
 13031 ;; This function calls:
 13032 ;;		___ftadd
 13033 ;; This function is called by:
 13034 ;;		_V_ProgTempAgua
 13035 ;;		_sprintf
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           	psect	text36
 13040  00BB9E                     __ptext36:
 13041                           	opt stack 0
 13042  00BB9E                     ___ftsub:
 13043                           	opt stack 27
 13044                           
 13045                           ;incstack = 0
 13046  00BB9E  503D               	movf	___ftsub@f2,w,c
 13047  00BBA0  103E               	iorwf	___ftsub@f2+1,w,c
 13048  00BBA2  103F               	iorwf	___ftsub@f2+2,w,c
 13049  00BBA4  B4D8               	btfsc	status,2,c
 13050  00BBA6  D007               	goto	l3874
 13051  00BBA8  0E00               	movlw	0
 13052  00BBAA  1A3D               	xorwf	___ftsub@f2,f,c
 13053  00BBAC  0E00               	movlw	0
 13054  00BBAE  1A3E               	xorwf	___ftsub@f2+1,f,c
 13055  00BBB0  0E80               	movlw	128
 13056  00BBB2  1A3F               	xorwf	___ftsub@f2+2,f,c
 13057  00BBB4  D000               	goto	l3874
 13058  00BBB6                     l3874:
 13059  00BBB6  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
 13060  00BBBA  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
 13061  00BBBE  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
 13062  00BBC2  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
 13063  00BBC6  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
 13064  00BBCA  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
 13065  00BBCE  EC2C  F069         	call	___ftadd	;wreg free
 13066  00BBD2  C02E  F03A         	movff	?___ftadd,?___ftsub
 13067  00BBD6  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
 13068  00BBDA  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
 13069  00BBDE  0012               	return	
 13070  00BBE0  0012               	return		;funcret
 13071  00BBE2                     __end_of___ftsub:
 13072                           	opt stack 0
 13073                           tblptru	equ	0xFF8
 13074                           tblptrh	equ	0xFF7
 13075                           tblptrl	equ	0xFF6
 13076                           tablat	equ	0xFF5
 13077                           prodh	equ	0xFF4
 13078                           prodl	equ	0xFF3
 13079                           intcon	equ	0xFF2
 13080                           indf0	equ	0xFEF
 13081                           postinc0	equ	0xFEE
 13082                           fsr0h	equ	0xFEA
 13083                           fsr0l	equ	0xFE9
 13084                           wreg	equ	0xFE8
 13085                           postdec1	equ	0xFE5
 13086                           fsr1l	equ	0xFE1
 13087                           indf2	equ	0xFDF
 13088                           postinc2	equ	0xFDE
 13089                           postdec2	equ	0xFDD
 13090                           fsr2h	equ	0xFDA
 13091                           fsr2l	equ	0xFD9
 13092                           status	equ	0xFD8
 13093                           
 13094 ;; *************** function ___ftadd *****************
 13095 ;; Defined at:
 13096 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
 13097 ;; Parameters:    Size  Location     Type
 13098 ;;  f1              3   45[COMRAM] float 
 13099 ;;  f2              3   48[COMRAM] float 
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;  exp1            1   56[COMRAM] unsigned char 
 13102 ;;  exp2            1   55[COMRAM] unsigned char 
 13103 ;;  sign            1   54[COMRAM] unsigned char 
 13104 ;; Return value:  Size  Location     Type
 13105 ;;                  3   45[COMRAM] float 
 13106 ;; Registers used:
 13107 ;;		wreg, status,2, status,0, cstack
 13108 ;; Tracked objects:
 13109 ;;		On entry : 0/0
 13110 ;;		On exit  : 0/0
 13111 ;;		Unchanged: 0/0
 13112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13113 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13114 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13115 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13116 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13117 ;;Total ram usage:       12 bytes
 13118 ;; Hardware stack levels used:    1
 13119 ;; Hardware stack levels required when called:    1
 13120 ;; This function calls:
 13121 ;;		___ftpack
 13122 ;; This function is called by:
 13123 ;;		_V_ProgTempAgua
 13124 ;;		_control_temperatura_agua
 13125 ;;		_sprintf
 13126 ;;		___ftsub
 13127 ;; This function uses a non-reentrant model
 13128 ;;
 13129                           
 13130                           	psect	text37
 13131  00D258                     __ptext37:
 13132                           	opt stack 0
 13133  00D258                     ___ftadd:
 13134                           	opt stack 27
 13135                           
 13136                           ;incstack = 0
 13137  00D258  C030  F034         	movff	___ftadd@f1+2,??___ftadd
 13138  00D25C  6A35               	clrf	(??___ftadd+1)& (0+255),c
 13139  00D25E  6A36               	clrf	(??___ftadd+2)& (0+255),c
 13140  00D260  342F               	rlcf	___ftadd@f1+1,w,c
 13141  00D262  3634               	rlcf	??___ftadd& (0+255),f,c
 13142  00D264  E301               	bnc	u3491
 13143  00D266  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 13144  00D268                     u3491:
 13145  00D268  5034               	movf	??___ftadd,w,c
 13146  00D26A  6E39               	movwf	___ftadd@exp1,c
 13147  00D26C  C033  F034         	movff	___ftadd@f2+2,??___ftadd
 13148  00D270  6A35               	clrf	(??___ftadd+1)& (0+255),c
 13149  00D272  6A36               	clrf	(??___ftadd+2)& (0+255),c
 13150  00D274  3432               	rlcf	___ftadd@f2+1,w,c
 13151  00D276  3634               	rlcf	??___ftadd& (0+255),f,c
 13152  00D278  E301               	bnc	u3501
 13153  00D27A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 13154  00D27C                     u3501:
 13155  00D27C  5034               	movf	??___ftadd,w,c
 13156  00D27E  6E38               	movwf	___ftadd@exp2,c
 13157  00D280  5039               	movf	___ftadd@exp1,w,c
 13158  00D282  B4D8               	btfsc	status,2,c
 13159  00D284  D00B               	goto	l991
 13160  00D286  5038               	movf	___ftadd@exp2,w,c
 13161  00D288  5C39               	subwf	___ftadd@exp1,w,c
 13162  00D28A  B0D8               	btfsc	status,0,c
 13163  00D28C  D00E               	goto	l3484
 13164  00D28E  5039               	movf	___ftadd@exp1,w,c
 13165  00D290  0800               	sublw	0
 13166  00D292  2438               	addwf	___ftadd@exp2,w,c
 13167  00D294  6E34               	movwf	??___ftadd& (0+255),c
 13168  00D296  0E18               	movlw	24
 13169  00D298  6434               	cpfsgt	??___ftadd,c
 13170  00D29A  D007               	goto	l3484
 13171  00D29C                     l991:
 13172  00D29C  C031  F02E         	movff	___ftadd@f2,?___ftadd
 13173  00D2A0  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
 13174  00D2A4  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
 13175  00D2A8  0012               	return	
 13176  00D2AA                     l3484:
 13177  00D2AA  5038               	movf	___ftadd@exp2,w,c
 13178  00D2AC  B4D8               	btfsc	status,2,c
 13179  00D2AE  D00B               	goto	l995
 13180  00D2B0  5039               	movf	___ftadd@exp1,w,c
 13181  00D2B2  5C38               	subwf	___ftadd@exp2,w,c
 13182  00D2B4  B0D8               	btfsc	status,0,c
 13183  00D2B6  D00E               	goto	l3490
 13184  00D2B8  5038               	movf	___ftadd@exp2,w,c
 13185  00D2BA  0800               	sublw	0
 13186  00D2BC  2439               	addwf	___ftadd@exp1,w,c
 13187  00D2BE  6E34               	movwf	??___ftadd& (0+255),c
 13188  00D2C0  0E18               	movlw	24
 13189  00D2C2  6434               	cpfsgt	??___ftadd,c
 13190  00D2C4  D007               	goto	l3490
 13191  00D2C6                     l995:
 13192  00D2C6  C02E  F02E         	movff	___ftadd@f1,?___ftadd
 13193  00D2CA  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
 13194  00D2CE  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
 13195  00D2D2  0012               	return	
 13196  00D2D4                     l3490:
 13197  00D2D4  0E06               	movlw	6
 13198  00D2D6  6E37               	movwf	___ftadd@sign,c
 13199  00D2D8  AE30               	btfss	___ftadd@f1+2,7,c
 13200  00D2DA  D002               	goto	l3496
 13201  00D2DC  8E37               	bsf	___ftadd@sign,7,c
 13202  00D2DE  D000               	goto	l3496
 13203  00D2E0                     l3496:
 13204  00D2E0  BE33               	btfsc	___ftadd@f2+2,7,c
 13205  00D2E2  8C37               	bsf	___ftadd@sign,6,c
 13206  00D2E4  8E2F               	bsf	___ftadd@f1+1,7,c
 13207  00D2E6  0EFF               	movlw	255
 13208  00D2E8  162E               	andwf	___ftadd@f1,f,c
 13209  00D2EA  0EFF               	movlw	255
 13210  00D2EC  162F               	andwf	___ftadd@f1+1,f,c
 13211  00D2EE  0E00               	movlw	0
 13212  00D2F0  1630               	andwf	___ftadd@f1+2,f,c
 13213  00D2F2  8E32               	bsf	___ftadd@f2+1,7,c
 13214  00D2F4  0EFF               	movlw	255
 13215  00D2F6  1631               	andwf	___ftadd@f2,f,c
 13216  00D2F8  0EFF               	movlw	255
 13217  00D2FA  1632               	andwf	___ftadd@f2+1,f,c
 13218  00D2FC  0E00               	movlw	0
 13219  00D2FE  1633               	andwf	___ftadd@f2+2,f,c
 13220  00D300  5038               	movf	___ftadd@exp2,w,c
 13221  00D302  5C39               	subwf	___ftadd@exp1,w,c
 13222  00D304  B0D8               	btfsc	status,0,c
 13223  00D306  D01E               	goto	l3516
 13224  00D308                     l3506:
 13225  00D308  90D8               	bcf	status,0,c
 13226  00D30A  3631               	rlcf	___ftadd@f2,f,c
 13227  00D30C  3632               	rlcf	___ftadd@f2+1,f,c
 13228  00D30E  3633               	rlcf	___ftadd@f2+2,f,c
 13229  00D310  0638               	decf	___ftadd@exp2,f,c
 13230  00D312  5039               	movf	___ftadd@exp1,w,c
 13231  00D314  1838               	xorwf	___ftadd@exp2,w,c
 13232  00D316  B4D8               	btfsc	status,2,c
 13233  00D318  D00F               	goto	l3514
 13234  00D31A  0637               	decf	___ftadd@sign,f,c
 13235  00D31C  C037  F034         	movff	___ftadd@sign,??___ftadd
 13236  00D320  0E07               	movlw	7
 13237  00D322  1634               	andwf	??___ftadd,f,c
 13238  00D324  B4D8               	btfsc	status,2,c
 13239  00D326  D008               	goto	l3514
 13240  00D328  D7EF               	goto	l3506
 13241  00D32A  D006               	goto	l3514
 13242  00D32C                     l3512:
 13243  00D32C  90D8               	bcf	status,0,c
 13244  00D32E  3230               	rrcf	___ftadd@f1+2,f,c
 13245  00D330  322F               	rrcf	___ftadd@f1+1,f,c
 13246  00D332  322E               	rrcf	___ftadd@f1,f,c
 13247  00D334  2A39               	incf	___ftadd@exp1,f,c
 13248  00D336  D000               	goto	l3514
 13249  00D338                     l3514:
 13250  00D338  5038               	movf	___ftadd@exp2,w,c
 13251  00D33A  1839               	xorwf	___ftadd@exp1,w,c
 13252  00D33C  B4D8               	btfsc	status,2,c
 13253  00D33E  D024               	goto	l1006
 13254  00D340  D7F5               	goto	l3512
 13255  00D342  D022               	goto	l1006
 13256  00D344                     l3516:
 13257  00D344  5039               	movf	___ftadd@exp1,w,c
 13258  00D346  5C38               	subwf	___ftadd@exp2,w,c
 13259  00D348  B0D8               	btfsc	status,0,c
 13260  00D34A  D01E               	goto	l1006
 13261  00D34C                     l3518:
 13262  00D34C  90D8               	bcf	status,0,c
 13263  00D34E  362E               	rlcf	___ftadd@f1,f,c
 13264  00D350  362F               	rlcf	___ftadd@f1+1,f,c
 13265  00D352  3630               	rlcf	___ftadd@f1+2,f,c
 13266  00D354  0639               	decf	___ftadd@exp1,f,c
 13267  00D356  5039               	movf	___ftadd@exp1,w,c
 13268  00D358  1838               	xorwf	___ftadd@exp2,w,c
 13269  00D35A  B4D8               	btfsc	status,2,c
 13270  00D35C  D00F               	goto	l3526
 13271  00D35E  0637               	decf	___ftadd@sign,f,c
 13272  00D360  C037  F034         	movff	___ftadd@sign,??___ftadd
 13273  00D364  0E07               	movlw	7
 13274  00D366  1634               	andwf	??___ftadd,f,c
 13275  00D368  B4D8               	btfsc	status,2,c
 13276  00D36A  D008               	goto	l3526
 13277  00D36C  D7EF               	goto	l3518
 13278  00D36E  D006               	goto	l3526
 13279  00D370                     l3524:
 13280  00D370  90D8               	bcf	status,0,c
 13281  00D372  3233               	rrcf	___ftadd@f2+2,f,c
 13282  00D374  3232               	rrcf	___ftadd@f2+1,f,c
 13283  00D376  3231               	rrcf	___ftadd@f2,f,c
 13284  00D378  2A38               	incf	___ftadd@exp2,f,c
 13285  00D37A  D000               	goto	l3526
 13286  00D37C                     l3526:
 13287  00D37C  5038               	movf	___ftadd@exp2,w,c
 13288  00D37E  1839               	xorwf	___ftadd@exp1,w,c
 13289  00D380  B4D8               	btfsc	status,2,c
 13290  00D382  D002               	goto	l1006
 13291  00D384  D7F5               	goto	l3524
 13292  00D386  D000               	goto	l1006
 13293  00D388                     l1006:
 13294  00D388  AE37               	btfss	___ftadd@sign,7,c
 13295  00D38A  D00C               	goto	l1015
 13296  00D38C  0EFF               	movlw	255
 13297  00D38E  1A2E               	xorwf	___ftadd@f1,f,c
 13298  00D390  0EFF               	movlw	255
 13299  00D392  1A2F               	xorwf	___ftadd@f1+1,f,c
 13300  00D394  0EFF               	movlw	255
 13301  00D396  1A30               	xorwf	___ftadd@f1+2,f,c
 13302  00D398  0E01               	movlw	1
 13303  00D39A  262E               	addwf	___ftadd@f1,f,c
 13304  00D39C  0E00               	movlw	0
 13305  00D39E  222F               	addwfc	___ftadd@f1+1,f,c
 13306  00D3A0  0E00               	movlw	0
 13307  00D3A2  2230               	addwfc	___ftadd@f1+2,f,c
 13308  00D3A4                     l1015:
 13309  00D3A4  AC37               	btfss	___ftadd@sign,6,c
 13310  00D3A6  D00D               	goto	l3532
 13311  00D3A8  0EFF               	movlw	255
 13312  00D3AA  1A31               	xorwf	___ftadd@f2,f,c
 13313  00D3AC  0EFF               	movlw	255
 13314  00D3AE  1A32               	xorwf	___ftadd@f2+1,f,c
 13315  00D3B0  0EFF               	movlw	255
 13316  00D3B2  1A33               	xorwf	___ftadd@f2+2,f,c
 13317  00D3B4  0E01               	movlw	1
 13318  00D3B6  2631               	addwf	___ftadd@f2,f,c
 13319  00D3B8  0E00               	movlw	0
 13320  00D3BA  2232               	addwfc	___ftadd@f2+1,f,c
 13321  00D3BC  0E00               	movlw	0
 13322  00D3BE  2233               	addwfc	___ftadd@f2+2,f,c
 13323  00D3C0  D000               	goto	l3532
 13324  00D3C2                     l3532:
 13325  00D3C2  0E00               	movlw	0
 13326  00D3C4  6E37               	movwf	___ftadd@sign,c
 13327  00D3C6  502E               	movf	___ftadd@f1,w,c
 13328  00D3C8  2631               	addwf	___ftadd@f2,f,c
 13329  00D3CA  502F               	movf	___ftadd@f1+1,w,c
 13330  00D3CC  2232               	addwfc	___ftadd@f2+1,f,c
 13331  00D3CE  5030               	movf	___ftadd@f1+2,w,c
 13332  00D3D0  2233               	addwfc	___ftadd@f2+2,f,c
 13333  00D3D2  AE33               	btfss	___ftadd@f2+2,7,c
 13334  00D3D4  D00F               	goto	l3542
 13335  00D3D6  0EFF               	movlw	255
 13336  00D3D8  1A31               	xorwf	___ftadd@f2,f,c
 13337  00D3DA  0EFF               	movlw	255
 13338  00D3DC  1A32               	xorwf	___ftadd@f2+1,f,c
 13339  00D3DE  0EFF               	movlw	255
 13340  00D3E0  1A33               	xorwf	___ftadd@f2+2,f,c
 13341  00D3E2  0E01               	movlw	1
 13342  00D3E4  2631               	addwf	___ftadd@f2,f,c
 13343  00D3E6  0E00               	movlw	0
 13344  00D3E8  2232               	addwfc	___ftadd@f2+1,f,c
 13345  00D3EA  0E00               	movlw	0
 13346  00D3EC  2233               	addwfc	___ftadd@f2+2,f,c
 13347  00D3EE  0E01               	movlw	1
 13348  00D3F0  6E37               	movwf	___ftadd@sign,c
 13349  00D3F2  D000               	goto	l3542
 13350  00D3F4                     l3542:
 13351  00D3F4  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 13352  00D3F8  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 13353  00D3FC  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 13354  00D400  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 13355  00D404  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 13356  00D408  EC40  F061         	call	___ftpack	;wreg free
 13357  00D40C  C001  F02E         	movff	?___ftpack,?___ftadd
 13358  00D410  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 13359  00D414  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 13360  00D418  0012               	return	
 13361  00D41A  0012               	return		;funcret
 13362  00D41C                     __end_of___ftadd:
 13363                           	opt stack 0
 13364                           tblptru	equ	0xFF8
 13365                           tblptrh	equ	0xFF7
 13366                           tblptrl	equ	0xFF6
 13367                           tablat	equ	0xFF5
 13368                           prodh	equ	0xFF4
 13369                           prodl	equ	0xFF3
 13370                           intcon	equ	0xFF2
 13371                           indf0	equ	0xFEF
 13372                           postinc0	equ	0xFEE
 13373                           fsr0h	equ	0xFEA
 13374                           fsr0l	equ	0xFE9
 13375                           wreg	equ	0xFE8
 13376                           postdec1	equ	0xFE5
 13377                           fsr1l	equ	0xFE1
 13378                           indf2	equ	0xFDF
 13379                           postinc2	equ	0xFDE
 13380                           postdec2	equ	0xFDD
 13381                           fsr2h	equ	0xFDA
 13382                           fsr2l	equ	0xFD9
 13383                           status	equ	0xFD8
 13384                           
 13385 ;; *************** function ___ftpack *****************
 13386 ;; Defined at:
 13387 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;  arg             3    0[COMRAM] unsigned um
 13390 ;;  exp             1    3[COMRAM] unsigned char 
 13391 ;;  sign            1    4[COMRAM] unsigned char 
 13392 ;; Auto vars:     Size  Location     Type
 13393 ;;		None
 13394 ;; Return value:  Size  Location     Type
 13395 ;;                  3    0[COMRAM] float 
 13396 ;; Registers used:
 13397 ;;		wreg, status,2, status,0
 13398 ;; Tracked objects:
 13399 ;;		On entry : 0/0
 13400 ;;		On exit  : 0/0
 13401 ;;		Unchanged: 0/0
 13402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13403 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13405 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13406 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13407 ;;Total ram usage:        8 bytes
 13408 ;; Hardware stack levels used:    1
 13409 ;; This function calls:
 13410 ;;		Nothing
 13411 ;; This function is called by:
 13412 ;;		___awtoft
 13413 ;;		___ftadd
 13414 ;;		___ftdiv
 13415 ;;		___ftmul
 13416 ;;		___lbtoft
 13417 ;;		___lltoft
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           	psect	text38
 13422  00C280                     __ptext38:
 13423                           	opt stack 0
 13424  00C280                     ___ftpack:
 13425                           	opt stack 27
 13426                           
 13427                           ;incstack = 0
 13428  00C280  5004               	movf	___ftpack@exp,w,c
 13429  00C282  B4D8               	btfsc	status,2,c
 13430  00C284  D005               	goto	l3438
 13431  00C286  5001               	movf	___ftpack@arg,w,c
 13432  00C288  1002               	iorwf	___ftpack@arg+1,w,c
 13433  00C28A  1003               	iorwf	___ftpack@arg+2,w,c
 13434  00C28C  A4D8               	btfss	status,2,c
 13435  00C28E  D00E               	goto	l3444
 13436  00C290                     l3438:
 13437  00C290  0E00               	movlw	0
 13438  00C292  6E01               	movwf	?___ftpack,c
 13439  00C294  0E00               	movlw	0
 13440  00C296  6E02               	movwf	?___ftpack+1,c
 13441  00C298  0E00               	movlw	0
 13442  00C29A  6E03               	movwf	?___ftpack+2,c
 13443  00C29C  0012               	return	
 13444  00C29E  D006               	goto	l3444
 13445  00C2A0                     l3442:
 13446  00C2A0  2A04               	incf	___ftpack@exp,f,c
 13447  00C2A2  90D8               	bcf	status,0,c
 13448  00C2A4  3203               	rrcf	___ftpack@arg+2,f,c
 13449  00C2A6  3202               	rrcf	___ftpack@arg+1,f,c
 13450  00C2A8  3201               	rrcf	___ftpack@arg,f,c
 13451  00C2AA  D000               	goto	l3444
 13452  00C2AC                     l3444:
 13453  00C2AC  0E00               	movlw	0
 13454  00C2AE  1401               	andwf	___ftpack@arg,w,c
 13455  00C2B0  6E06               	movwf	??___ftpack& (0+255),c
 13456  00C2B2  0E00               	movlw	0
 13457  00C2B4  1402               	andwf	___ftpack@arg+1,w,c
 13458  00C2B6  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13459  00C2B8  0EFE               	movlw	254
 13460  00C2BA  1403               	andwf	___ftpack@arg+2,w,c
 13461  00C2BC  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13462  00C2BE  5006               	movf	??___ftpack,w,c
 13463  00C2C0  1007               	iorwf	??___ftpack+1,w,c
 13464  00C2C2  1008               	iorwf	??___ftpack+2,w,c
 13465  00C2C4  B4D8               	btfsc	status,2,c
 13466  00C2C6  D00E               	goto	l3450
 13467  00C2C8  D7EB               	goto	l3442
 13468  00C2CA  D00C               	goto	l3450
 13469  00C2CC                     l3446:
 13470  00C2CC  2A04               	incf	___ftpack@exp,f,c
 13471  00C2CE  0E01               	movlw	1
 13472  00C2D0  2601               	addwf	___ftpack@arg,f,c
 13473  00C2D2  0E00               	movlw	0
 13474  00C2D4  2202               	addwfc	___ftpack@arg+1,f,c
 13475  00C2D6  0E00               	movlw	0
 13476  00C2D8  2203               	addwfc	___ftpack@arg+2,f,c
 13477  00C2DA  90D8               	bcf	status,0,c
 13478  00C2DC  3203               	rrcf	___ftpack@arg+2,f,c
 13479  00C2DE  3202               	rrcf	___ftpack@arg+1,f,c
 13480  00C2E0  3201               	rrcf	___ftpack@arg,f,c
 13481  00C2E2  D000               	goto	l3450
 13482  00C2E4                     l3450:
 13483  00C2E4  0E00               	movlw	0
 13484  00C2E6  1401               	andwf	___ftpack@arg,w,c
 13485  00C2E8  6E06               	movwf	??___ftpack& (0+255),c
 13486  00C2EA  0E00               	movlw	0
 13487  00C2EC  1402               	andwf	___ftpack@arg+1,w,c
 13488  00C2EE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 13489  00C2F0  0EFF               	movlw	255
 13490  00C2F2  1403               	andwf	___ftpack@arg+2,w,c
 13491  00C2F4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 13492  00C2F6  5006               	movf	??___ftpack,w,c
 13493  00C2F8  1007               	iorwf	??___ftpack+1,w,c
 13494  00C2FA  1008               	iorwf	??___ftpack+2,w,c
 13495  00C2FC  B4D8               	btfsc	status,2,c
 13496  00C2FE  D008               	goto	l3454
 13497  00C300  D7E5               	goto	l3446
 13498  00C302  D006               	goto	l3454
 13499  00C304                     l3452:
 13500  00C304  0604               	decf	___ftpack@exp,f,c
 13501  00C306  90D8               	bcf	status,0,c
 13502  00C308  3601               	rlcf	___ftpack@arg,f,c
 13503  00C30A  3602               	rlcf	___ftpack@arg+1,f,c
 13504  00C30C  3603               	rlcf	___ftpack@arg+2,f,c
 13505  00C30E  D000               	goto	l3454
 13506  00C310                     l3454:
 13507  00C310  BE02               	btfsc	___ftpack@arg+1,7,c
 13508  00C312  D004               	goto	l962
 13509  00C314  0E02               	movlw	2
 13510  00C316  6004               	cpfslt	___ftpack@exp,c
 13511  00C318  D7F5               	goto	l3452
 13512  00C31A  D000               	goto	l962
 13513  00C31C                     l962:
 13514  00C31C  B004               	btfsc	___ftpack@exp,0,c
 13515  00C31E  D002               	goto	l3460
 13516  00C320  9E02               	bcf	___ftpack@arg+1,7,c
 13517  00C322  D000               	goto	l3460
 13518  00C324                     l3460:
 13519  00C324  90D8               	bcf	status,0,c
 13520  00C326  3204               	rrcf	___ftpack@exp,f,c
 13521  00C328  5004               	movf	___ftpack@exp,w,c
 13522  00C32A  1203               	iorwf	___ftpack@arg+2,f,c
 13523  00C32C  5005               	movf	___ftpack@sign,w,c
 13524  00C32E  B4D8               	btfsc	status,2,c
 13525  00C330  D002               	goto	l3466
 13526  00C332  8E03               	bsf	___ftpack@arg+2,7,c
 13527  00C334  D000               	goto	l3466
 13528  00C336                     l3466:
 13529  00C336  C001  F001         	movff	___ftpack@arg,?___ftpack
 13530  00C33A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 13531  00C33E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 13532  00C342  0012               	return	
 13533  00C344  0012               	return		;funcret
 13534  00C346                     __end_of___ftpack:
 13535                           	opt stack 0
 13536                           tblptru	equ	0xFF8
 13537                           tblptrh	equ	0xFF7
 13538                           tblptrl	equ	0xFF6
 13539                           tablat	equ	0xFF5
 13540                           prodh	equ	0xFF4
 13541                           prodl	equ	0xFF3
 13542                           intcon	equ	0xFF2
 13543                           indf0	equ	0xFEF
 13544                           postinc0	equ	0xFEE
 13545                           fsr0h	equ	0xFEA
 13546                           fsr0l	equ	0xFE9
 13547                           wreg	equ	0xFE8
 13548                           postdec1	equ	0xFE5
 13549                           fsr1l	equ	0xFE1
 13550                           indf2	equ	0xFDF
 13551                           postinc2	equ	0xFDE
 13552                           postdec2	equ	0xFDD
 13553                           fsr2h	equ	0xFDA
 13554                           fsr2l	equ	0xFD9
 13555                           status	equ	0xFD8
 13556                           
 13557 ;; *************** function ___ftneg *****************
 13558 ;; Defined at:
 13559 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 13560 ;; Parameters:    Size  Location     Type
 13561 ;;  f1              3    0[COMRAM] float 
 13562 ;; Auto vars:     Size  Location     Type
 13563 ;;		None
 13564 ;; Return value:  Size  Location     Type
 13565 ;;                  3    0[COMRAM] float 
 13566 ;; Registers used:
 13567 ;;		wreg, status,2, status,0
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13573 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13576 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13577 ;;Total ram usage:        3 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; This function calls:
 13580 ;;		Nothing
 13581 ;; This function is called by:
 13582 ;;		_control_temperatura_agua
 13583 ;;		_sprintf
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           	psect	text39
 13588  00BAB8                     __ptext39:
 13589                           	opt stack 0
 13590  00BAB8                     ___ftneg:
 13591                           	opt stack 29
 13592                           
 13593                           ;incstack = 0
 13594  00BAB8  5001               	movf	___ftneg@f1,w,c
 13595  00BABA  1002               	iorwf	___ftneg@f1+1,w,c
 13596  00BABC  1003               	iorwf	___ftneg@f1+2,w,c
 13597  00BABE  B4D8               	btfsc	status,2,c
 13598  00BAC0  D006               	goto	l1065
 13599  00BAC2  0E00               	movlw	0
 13600  00BAC4  1A01               	xorwf	___ftneg@f1,f,c
 13601  00BAC6  0E00               	movlw	0
 13602  00BAC8  1A02               	xorwf	___ftneg@f1+1,f,c
 13603  00BACA  0E80               	movlw	128
 13604  00BACC  1A03               	xorwf	___ftneg@f1+2,f,c
 13605  00BACE                     l1065:
 13606  00BACE  C001  F001         	movff	___ftneg@f1,?___ftneg
 13607  00BAD2  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 13608  00BAD6  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 13609  00BADA  0012               	return		;funcret
 13610  00BADC                     __end_of___ftneg:
 13611                           	opt stack 0
 13612                           tblptru	equ	0xFF8
 13613                           tblptrh	equ	0xFF7
 13614                           tblptrl	equ	0xFF6
 13615                           tablat	equ	0xFF5
 13616                           prodh	equ	0xFF4
 13617                           prodl	equ	0xFF3
 13618                           intcon	equ	0xFF2
 13619                           indf0	equ	0xFEF
 13620                           postinc0	equ	0xFEE
 13621                           fsr0h	equ	0xFEA
 13622                           fsr0l	equ	0xFE9
 13623                           wreg	equ	0xFE8
 13624                           postdec1	equ	0xFE5
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           fsr2h	equ	0xFDA
 13630                           fsr2l	equ	0xFD9
 13631                           status	equ	0xFD8
 13632                           
 13633 ;; *************** function ___ftge *****************
 13634 ;; Defined at:
 13635 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 13636 ;; Parameters:    Size  Location     Type
 13637 ;;  ff1             3   57[COMRAM] float 
 13638 ;;  ff2             3   60[COMRAM] float 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;		None
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, status,2, status,0
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13650 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13652 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13653 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13654 ;;Total ram usage:        9 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; This function calls:
 13657 ;;		Nothing
 13658 ;; This function is called by:
 13659 ;;		_V_ProgTempAgua
 13660 ;;		_control_temperatura_agua
 13661 ;;		_sprintf
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665                           	psect	text40
 13666  00C0AC                     __ptext40:
 13667                           	opt stack 0
 13668  00C0AC                     ___ftge:
 13669                           	opt stack 29
 13670                           
 13671                           ;incstack = 0
 13672  00C0AC  AE3C               	btfss	___ftge@ff1+2,7,c
 13673  00C0AE  D017               	goto	l3882
 13674  00C0B0  C03A  F040         	movff	___ftge@ff1,??___ftge
 13675  00C0B4  C03B  F041         	movff	___ftge@ff1+1,??___ftge+1
 13676  00C0B8  C03C  F042         	movff	___ftge@ff1+2,??___ftge+2
 13677  00C0BC  1E40               	comf	??___ftge,f,c
 13678  00C0BE  1E41               	comf	??___ftge+1,f,c
 13679  00C0C0  1E42               	comf	??___ftge+2,f,c
 13680  00C0C2  2A40               	incf	??___ftge,f,c
 13681  00C0C4  0E00               	movlw	0
 13682  00C0C6  2241               	addwfc	??___ftge+1,f,c
 13683  00C0C8  2242               	addwfc	??___ftge+2,f,c
 13684  00C0CA  0E00               	movlw	0
 13685  00C0CC  2440               	addwf	??___ftge,w,c
 13686  00C0CE  6E3A               	movwf	___ftge@ff1,c
 13687  00C0D0  0E00               	movlw	0
 13688  00C0D2  2041               	addwfc	??___ftge+1,w,c
 13689  00C0D4  6E3B               	movwf	___ftge@ff1+1,c
 13690  00C0D6  0E80               	movlw	128
 13691  00C0D8  2042               	addwfc	??___ftge+2,w,c
 13692  00C0DA  6E3C               	movwf	___ftge@ff1+2,c
 13693  00C0DC  D000               	goto	l3882
 13694  00C0DE                     l3882:
 13695  00C0DE  AE3F               	btfss	___ftge@ff2+2,7,c
 13696  00C0E0  D017               	goto	l3886
 13697  00C0E2  C03D  F040         	movff	___ftge@ff2,??___ftge
 13698  00C0E6  C03E  F041         	movff	___ftge@ff2+1,??___ftge+1
 13699  00C0EA  C03F  F042         	movff	___ftge@ff2+2,??___ftge+2
 13700  00C0EE  1E40               	comf	??___ftge,f,c
 13701  00C0F0  1E41               	comf	??___ftge+1,f,c
 13702  00C0F2  1E42               	comf	??___ftge+2,f,c
 13703  00C0F4  2A40               	incf	??___ftge,f,c
 13704  00C0F6  0E00               	movlw	0
 13705  00C0F8  2241               	addwfc	??___ftge+1,f,c
 13706  00C0FA  2242               	addwfc	??___ftge+2,f,c
 13707  00C0FC  0E00               	movlw	0
 13708  00C0FE  2440               	addwf	??___ftge,w,c
 13709  00C100  6E3D               	movwf	___ftge@ff2,c
 13710  00C102  0E00               	movlw	0
 13711  00C104  2041               	addwfc	??___ftge+1,w,c
 13712  00C106  6E3E               	movwf	___ftge@ff2+1,c
 13713  00C108  0E80               	movlw	128
 13714  00C10A  2042               	addwfc	??___ftge+2,w,c
 13715  00C10C  6E3F               	movwf	___ftge@ff2+2,c
 13716  00C10E  D000               	goto	l3886
 13717  00C110                     l3886:
 13718  00C110  0E00               	movlw	0
 13719  00C112  1A3A               	xorwf	___ftge@ff1,f,c
 13720  00C114  0E00               	movlw	0
 13721  00C116  1A3B               	xorwf	___ftge@ff1+1,f,c
 13722  00C118  0E80               	movlw	128
 13723  00C11A  1A3C               	xorwf	___ftge@ff1+2,f,c
 13724  00C11C  0E00               	movlw	0
 13725  00C11E  1A3D               	xorwf	___ftge@ff2,f,c
 13726  00C120  0E00               	movlw	0
 13727  00C122  1A3E               	xorwf	___ftge@ff2+1,f,c
 13728  00C124  0E80               	movlw	128
 13729  00C126  1A3F               	xorwf	___ftge@ff2+2,f,c
 13730  00C128  503D               	movf	___ftge@ff2,w,c
 13731  00C12A  5C3A               	subwf	___ftge@ff1,w,c
 13732  00C12C  503E               	movf	___ftge@ff2+1,w,c
 13733  00C12E  583B               	subwfb	___ftge@ff1+1,w,c
 13734  00C130  503F               	movf	___ftge@ff2+2,w,c
 13735  00C132  583C               	subwfb	___ftge@ff1+2,w,c
 13736  00C134  B0D8               	btfsc	status,0,c
 13737  00C136  D002               	goto	l3892
 13738  00C138  90D8               	bcf	status,0,c
 13739  00C13A  0012               	return	
 13740  00C13C                     l3892:
 13741  00C13C  80D8               	bsf	status,0,c
 13742  00C13E  0012               	return	
 13743  00C140  0012               	return		;funcret
 13744  00C142                     __end_of___ftge:
 13745                           	opt stack 0
 13746                           tblptru	equ	0xFF8
 13747                           tblptrh	equ	0xFF7
 13748                           tblptrl	equ	0xFF6
 13749                           tablat	equ	0xFF5
 13750                           prodh	equ	0xFF4
 13751                           prodl	equ	0xFF3
 13752                           intcon	equ	0xFF2
 13753                           indf0	equ	0xFEF
 13754                           postinc0	equ	0xFEE
 13755                           fsr0h	equ	0xFEA
 13756                           fsr0l	equ	0xFE9
 13757                           wreg	equ	0xFE8
 13758                           postdec1	equ	0xFE5
 13759                           fsr1l	equ	0xFE1
 13760                           indf2	equ	0xFDF
 13761                           postinc2	equ	0xFDE
 13762                           postdec2	equ	0xFDD
 13763                           fsr2h	equ	0xFDA
 13764                           fsr2l	equ	0xFD9
 13765                           status	equ	0xFD8
 13766                           
 13767 ;; *************** function _Lcd_Init *****************
 13768 ;; Defined at:
 13769 ;;		line 42 in file "../lcd.h"
 13770 ;; Parameters:    Size  Location     Type
 13771 ;;		None
 13772 ;; Auto vars:     Size  Location     Type
 13773 ;;  data            1    4[COMRAM] unsigned char 
 13774 ;; Return value:  Size  Location     Type
 13775 ;;		None               void
 13776 ;; Registers used:
 13777 ;;		wreg, status,2, status,0, cstack
 13778 ;; Tracked objects:
 13779 ;;		On entry : 0/0
 13780 ;;		On exit  : 0/0
 13781 ;;		Unchanged: 0/0
 13782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13785 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13787 ;;Total ram usage:        2 bytes
 13788 ;; Hardware stack levels used:    1
 13789 ;; Hardware stack levels required when called:    1
 13790 ;; This function calls:
 13791 ;;		_Lcd_Cmd
 13792 ;; This function is called by:
 13793 ;;		_main
 13794 ;; This function uses a non-reentrant model
 13795 ;;
 13796                           
 13797                           	psect	text41
 13798  00C742                     __ptext41:
 13799                           	opt stack 0
 13800  00C742                     _Lcd_Init:
 13801                           	opt stack 29
 13802                           
 13803                           ;lcd.h: 43: unsigned char data;
 13804                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
 13805                           
 13806                           ;incstack = 0
 13807  00C742  9093               	bcf	3987,0,c	;volatile
 13808                           
 13809                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
 13810  00C744  9293               	bcf	3987,1,c	;volatile
 13811                           
 13812                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
 13813  00C746  9493               	bcf	3987,2,c	;volatile
 13814                           
 13815                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
 13816  00C748  9693               	bcf	3987,3,c	;volatile
 13817                           
 13818                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
 13819  00C74A  9893               	bcf	3987,4,c	;volatile
 13820                           
 13821                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
 13822  00C74C  9A93               	bcf	3987,5,c	;volatile
 13823                           
 13824                           ;lcd.h: 50: LATBbits.LATB0 = 0;
 13825  00C74E  908A               	bcf	3978,0,c	;volatile
 13826                           
 13827                           ;lcd.h: 51: LATBbits.LATB1 = 0;
 13828  00C750  928A               	bcf	3978,1,c	;volatile
 13829                           
 13830                           ;lcd.h: 52: LATBbits.LATB2 = 0;
 13831  00C752  948A               	bcf	3978,2,c	;volatile
 13832                           
 13833                           ;lcd.h: 53: LATBbits.LATB3 = 0;
 13834  00C754  968A               	bcf	3978,3,c	;volatile
 13835                           
 13836                           ;lcd.h: 54: LATBbits.LATB4 = 0;
 13837  00C756  988A               	bcf	3978,4,c	;volatile
 13838                           
 13839                           ;lcd.h: 55: LATBbits.LATB5 = 0;
 13840  00C758  9A8A               	bcf	3978,5,c	;volatile
 13841                           
 13842                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13843  00C75A  0E0F               	movlw	15
 13844  00C75C  6E04               	movwf	??_Lcd_Init& (0+255),c
 13845  00C75E  0E48               	movlw	72
 13846  00C760                     u6997:
 13847  00C760  2EE8               	decfsz	wreg,f,c
 13848  00C762  D7FE               	goto	u6997
 13849  00C764  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13850  00C766  D7FC               	goto	u6997
 13851                           
 13852                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13853  00C768  0E0F               	movlw	15
 13854  00C76A  6E04               	movwf	??_Lcd_Init& (0+255),c
 13855  00C76C  0E48               	movlw	72
 13856  00C76E                     u7007:
 13857  00C76E  2EE8               	decfsz	wreg,f,c
 13858  00C770  D7FE               	goto	u7007
 13859  00C772  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13860  00C774  D7FC               	goto	u7007
 13861                           
 13862                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13863  00C776  0E0F               	movlw	15
 13864  00C778  6E04               	movwf	??_Lcd_Init& (0+255),c
 13865  00C77A  0E48               	movlw	72
 13866  00C77C                     u7017:
 13867  00C77C  2EE8               	decfsz	wreg,f,c
 13868  00C77E  D7FE               	goto	u7017
 13869  00C780  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13870  00C782  D7FC               	goto	u7017
 13871                           
 13872                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13873  00C784  0E0F               	movlw	15
 13874  00C786  6E04               	movwf	??_Lcd_Init& (0+255),c
 13875  00C788  0E48               	movlw	72
 13876  00C78A                     u7027:
 13877  00C78A  2EE8               	decfsz	wreg,f,c
 13878  00C78C  D7FE               	goto	u7027
 13879  00C78E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13880  00C790  D7FC               	goto	u7027
 13881                           
 13882                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13883  00C792  0E0F               	movlw	15
 13884  00C794  6E04               	movwf	??_Lcd_Init& (0+255),c
 13885  00C796  0E48               	movlw	72
 13886  00C798                     u7037:
 13887  00C798  2EE8               	decfsz	wreg,f,c
 13888  00C79A  D7FE               	goto	u7037
 13889  00C79C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13890  00C79E  D7FC               	goto	u7037
 13891                           
 13892                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13893  00C7A0  0E0F               	movlw	15
 13894  00C7A2  6E04               	movwf	??_Lcd_Init& (0+255),c
 13895  00C7A4  0E48               	movlw	72
 13896  00C7A6                     u7047:
 13897  00C7A6  2EE8               	decfsz	wreg,f,c
 13898  00C7A8  D7FE               	goto	u7047
 13899  00C7AA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13900  00C7AC  D7FC               	goto	u7047
 13901                           
 13902                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
 13903  00C7AE  0E01               	movlw	1
 13904  00C7B0  6E05               	movwf	Lcd_Init@data,c
 13905  00C7B2  D01F               	goto	L12
 13906  00C7B4  D021               	goto	l80
 13907  00C7B6                     l79:
 13908                           
 13909                           ;lcd.h: 63: {
 13910                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
 13911  00C7B6  908A               	bcf	3978,0,c	;volatile
 13912  00C7B8  928A               	bcf	3978,1,c	;volatile
 13913  00C7BA  848A               	bsf	3978,2,c	;volatile
 13914  00C7BC  868A               	bsf	3978,3,c	;volatile
 13915  00C7BE  988A               	bcf	3978,4,c	;volatile
 13916                           
 13917                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
 13918  00C7C0  9A8A               	bcf	3978,5,c	;volatile
 13919  00C7C2  908A               	bcf	3978,0,c	;volatile
 13920  00C7C4  928A               	bcf	3978,1,c	;volatile
 13921  00C7C6  848A               	bsf	3978,2,c	;volatile
 13922  00C7C8  868A               	bsf	3978,3,c	;volatile
 13923                           
 13924                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
 13925  00C7CA  888A               	bsf	3978,4,c	;volatile
 13926  00C7CC  9A8A               	bcf	3978,5,c	;volatile
 13927                           
 13928                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
 13929  00C7CE  0E03               	movlw	3
 13930  00C7D0                     u7057:
 13931  00C7D0  2EE8               	decfsz	wreg,f,c
 13932  00C7D2  D7FE               	goto	u7057
 13933  00C7D4  F000               	nop	
 13934                           
 13935                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
 13936  00C7D6  908A               	bcf	3978,0,c	;volatile
 13937  00C7D8  928A               	bcf	3978,1,c	;volatile
 13938  00C7DA  848A               	bsf	3978,2,c	;volatile
 13939  00C7DC  868A               	bsf	3978,3,c	;volatile
 13940  00C7DE  988A               	bcf	3978,4,c	;volatile
 13941                           
 13942                           ;lcd.h: 69: LATBbits.LATB5 = 0;
 13943  00C7E0  9A8A               	bcf	3978,5,c	;volatile
 13944                           
 13945                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13946  00C7E2  0E0F               	movlw	15
 13947  00C7E4  6E04               	movwf	??_Lcd_Init& (0+255),c
 13948  00C7E6  0E48               	movlw	72
 13949  00C7E8                     u7067:
 13950  00C7E8  2EE8               	decfsz	wreg,f,c
 13951  00C7EA  D7FE               	goto	u7067
 13952  00C7EC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 13953  00C7EE  D7FC               	goto	u7067
 13954  00C7F0  2A05               	incf	Lcd_Init@data,f,c
 13955  00C7F2                     L12:
 13956  00C7F2  0E03               	movlw	3
 13957  00C7F4  6405               	cpfsgt	Lcd_Init@data,c
 13958  00C7F6  D7DF               	goto	l79
 13959  00C7F8                     l80:
 13960                           
 13961                           ;lcd.h: 71: }
 13962                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
 13963  00C7F8  908A               	bcf	3978,0,c	;volatile
 13964  00C7FA  928A               	bcf	3978,1,c	;volatile
 13965  00C7FC  848A               	bsf	3978,2,c	;volatile
 13966  00C7FE  968A               	bcf	3978,3,c	;volatile
 13967  00C800  988A               	bcf	3978,4,c	;volatile
 13968  00C802  9A8A               	bcf	3978,5,c	;volatile
 13969                           
 13970                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
 13971  00C804  908A               	bcf	3978,0,c	;volatile
 13972  00C806  928A               	bcf	3978,1,c	;volatile
 13973  00C808  848A               	bsf	3978,2,c	;volatile
 13974  00C80A  968A               	bcf	3978,3,c	;volatile
 13975  00C80C  888A               	bsf	3978,4,c	;volatile
 13976  00C80E  9A8A               	bcf	3978,5,c	;volatile
 13977                           
 13978                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
 13979  00C810  0E03               	movlw	3
 13980  00C812                     u7077:
 13981  00C812  2EE8               	decfsz	wreg,f,c
 13982  00C814  D7FE               	goto	u7077
 13983  00C816  F000               	nop	
 13984                           
 13985                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
 13986  00C818  908A               	bcf	3978,0,c	;volatile
 13987  00C81A  928A               	bcf	3978,1,c	;volatile
 13988  00C81C  848A               	bsf	3978,2,c	;volatile
 13989  00C81E  968A               	bcf	3978,3,c	;volatile
 13990  00C820  988A               	bcf	3978,4,c	;volatile
 13991  00C822  9A8A               	bcf	3978,5,c	;volatile
 13992                           
 13993                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 13994  00C824  0E0F               	movlw	15
 13995  00C826  6E04               	movwf	??_Lcd_Init& (0+255),c
 13996  00C828  0E48               	movlw	72
 13997  00C82A                     u7087:
 13998  00C82A  2EE8               	decfsz	wreg,f,c
 13999  00C82C  D7FE               	goto	u7087
 14000  00C82E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
 14001  00C830  D7FC               	goto	u7087
 14002                           
 14003                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
 14004  00C832  0E28               	movlw	40
 14005  00C834  6E05               	movwf	Lcd_Init@data,c
 14006  00C836  5005               	movf	Lcd_Init@data,w,c
 14007  00C838  ECBD  F064         	call	_Lcd_Cmd
 14008                           
 14009                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
 14010  00C83C  0E10               	movlw	16
 14011  00C83E  6E05               	movwf	Lcd_Init@data,c
 14012  00C840  5005               	movf	Lcd_Init@data,w,c
 14013  00C842  ECBD  F064         	call	_Lcd_Cmd
 14014                           
 14015                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
 14016  00C846  0E01               	movlw	1
 14017  00C848  6E05               	movwf	Lcd_Init@data,c
 14018  00C84A  5005               	movf	Lcd_Init@data,w,c
 14019  00C84C  ECBD  F064         	call	_Lcd_Cmd
 14020                           
 14021                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
 14022  00C850  0E0F               	movlw	15
 14023  00C852  6E05               	movwf	Lcd_Init@data,c
 14024  00C854  5005               	movf	Lcd_Init@data,w,c
 14025  00C856  ECBD  F064         	call	_Lcd_Cmd
 14026  00C85A  0012               	return		;funcret
 14027  00C85C                     __end_of_Lcd_Init:
 14028                           	opt stack 0
 14029                           tblptru	equ	0xFF8
 14030                           tblptrh	equ	0xFF7
 14031                           tblptrl	equ	0xFF6
 14032                           tablat	equ	0xFF5
 14033                           prodh	equ	0xFF4
 14034                           prodl	equ	0xFF3
 14035                           intcon	equ	0xFF2
 14036                           indf0	equ	0xFEF
 14037                           postinc0	equ	0xFEE
 14038                           fsr0h	equ	0xFEA
 14039                           fsr0l	equ	0xFE9
 14040                           wreg	equ	0xFE8
 14041                           postdec1	equ	0xFE5
 14042                           fsr1l	equ	0xFE1
 14043                           indf2	equ	0xFDF
 14044                           postinc2	equ	0xFDE
 14045                           postdec2	equ	0xFDD
 14046                           fsr2h	equ	0xFDA
 14047                           fsr2l	equ	0xFD9
 14048                           status	equ	0xFD8
 14049                           
 14050 ;; *************** function _Lcd_Cmd *****************
 14051 ;; Defined at:
 14052 ;;		line 140 in file "../lcd.h"
 14053 ;; Parameters:    Size  Location     Type
 14054 ;;  data            1    wreg     unsigned char 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  data            1    2[COMRAM] unsigned char 
 14057 ;; Return value:  Size  Location     Type
 14058 ;;		None               void
 14059 ;; Registers used:
 14060 ;;		wreg, status,2, status,0
 14061 ;; Tracked objects:
 14062 ;;		On entry : 0/0
 14063 ;;		On exit  : 0/0
 14064 ;;		Unchanged: 0/0
 14065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14067 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14069 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14070 ;;Total ram usage:        3 bytes
 14071 ;; Hardware stack levels used:    1
 14072 ;; This function calls:
 14073 ;;		Nothing
 14074 ;; This function is called by:
 14075 ;;		_Lcd_Init
 14076 ;;		_Lcd_Out
 14077 ;;		_main
 14078 ;;		_V_ProgReloj
 14079 ;;		_V_ProgRiegoIlum
 14080 ;;		_V_ProgTempAgua
 14081 ;;		_Lcd_Out2
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text42
 14086  00C97A                     __ptext42:
 14087                           	opt stack 0
 14088  00C97A                     _Lcd_Cmd:
 14089                           	opt stack 28
 14090                           
 14091                           ;incstack = 0
 14092                           ;Lcd_Cmd@data stored from wreg
 14093  00C97A  6E03               	movwf	Lcd_Cmd@data,c
 14094                           
 14095                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
 14096  00C97C  988A               	bcf	3978,4,c	;volatile
 14097  00C97E  9A8A               	bcf	3978,5,c	;volatile
 14098                           
 14099                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
 14100  00C980  6A01               	clrf	??_Lcd_Cmd& (0+255),c
 14101  00C982  AE03               	btfss	Lcd_Cmd@data,7,c
 14102  00C984  D001               	bra	u4335
 14103  00C986  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
 14104  00C988                     u4335:
 14105  00C988  0E01               	movlw	1
 14106  00C98A  1601               	andwf	??_Lcd_Cmd,f,c
 14107  00C98C  508A               	movf	3978,w,c	;volatile
 14108  00C98E  1801               	xorwf	??_Lcd_Cmd,w,c
 14109  00C990  0BFE               	andlw	-2
 14110  00C992  1801               	xorwf	??_Lcd_Cmd,w,c
 14111  00C994  6E8A               	movwf	3978,c	;volatile
 14112  00C996  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14113  00C99A  0E06               	movlw	6
 14114  00C99C  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
 14115  00C99E                     u4345:
 14116  00C99E  90D8               	bcf	status,0,c
 14117  00C9A0  3201               	rrcf	??_Lcd_Cmd,f,c
 14118  00C9A2  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
 14119  00C9A4  D7FC               	goto	u4345
 14120  00C9A6  0E01               	movlw	1
 14121  00C9A8  1601               	andwf	??_Lcd_Cmd,f,c
 14122  00C9AA  4601               	rlncf	??_Lcd_Cmd,f,c
 14123  00C9AC  508A               	movf	3978,w,c	;volatile
 14124  00C9AE  1801               	xorwf	??_Lcd_Cmd,w,c
 14125  00C9B0  0BFD               	andlw	-3
 14126  00C9B2  1801               	xorwf	??_Lcd_Cmd,w,c
 14127  00C9B4  6E8A               	movwf	3978,c	;volatile
 14128                           
 14129                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
 14130  00C9B6  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14131  00C9BA  0E05               	movlw	5
 14132  00C9BC  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
 14133  00C9BE                     u4355:
 14134  00C9BE  90D8               	bcf	status,0,c
 14135  00C9C0  3201               	rrcf	??_Lcd_Cmd,f,c
 14136  00C9C2  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
 14137  00C9C4  D7FC               	goto	u4355
 14138  00C9C6  0E01               	movlw	1
 14139  00C9C8  1601               	andwf	??_Lcd_Cmd,f,c
 14140  00C9CA  4601               	rlncf	??_Lcd_Cmd,f,c
 14141  00C9CC  4601               	rlncf	??_Lcd_Cmd,f,c
 14142  00C9CE  508A               	movf	3978,w,c	;volatile
 14143  00C9D0  1801               	xorwf	??_Lcd_Cmd,w,c
 14144  00C9D2  0BFB               	andlw	-5
 14145  00C9D4  1801               	xorwf	??_Lcd_Cmd,w,c
 14146  00C9D6  6E8A               	movwf	3978,c	;volatile
 14147  00C9D8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14148  00C9DC  3A01               	swapf	??_Lcd_Cmd,f,c
 14149  00C9DE  0E0F               	movlw	15
 14150  00C9E0  1601               	andwf	??_Lcd_Cmd,f,c
 14151  00C9E2  0E01               	movlw	1
 14152  00C9E4  1601               	andwf	??_Lcd_Cmd,f,c
 14153  00C9E6  4601               	rlncf	??_Lcd_Cmd,f,c
 14154  00C9E8  4601               	rlncf	??_Lcd_Cmd,f,c
 14155  00C9EA  4601               	rlncf	??_Lcd_Cmd,f,c
 14156  00C9EC  508A               	movf	3978,w,c	;volatile
 14157  00C9EE  1801               	xorwf	??_Lcd_Cmd,w,c
 14158  00C9F0  0BF7               	andlw	-9
 14159  00C9F2  1801               	xorwf	??_Lcd_Cmd,w,c
 14160  00C9F4  6E8A               	movwf	3978,c	;volatile
 14161                           
 14162                           ;lcd.h: 144: _delay(10);
 14163  00C9F6  0E03               	movlw	3
 14164  00C9F8                     u7097:
 14165  00C9F8  2EE8               	decfsz	wreg,f,c
 14166  00C9FA  D7FE               	goto	u7097
 14167  00C9FC  F000               	nop	
 14168                           
 14169                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 14170  00C9FE  888A               	bsf	3978,4,c	;volatile
 14171  00CA00  0E03               	movlw	3
 14172  00CA02                     u7107:
 14173  00CA02  2EE8               	decfsz	wreg,f,c
 14174  00CA04  D7FE               	goto	u7107
 14175  00CA06  F000               	nop	
 14176  00CA08  988A               	bcf	3978,4,c	;volatile
 14177                           
 14178                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
 14179  00CA0A  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14180  00CA0E  90D8               	bcf	status,0,c
 14181  00CA10  3201               	rrcf	??_Lcd_Cmd,f,c
 14182  00CA12  90D8               	bcf	status,0,c
 14183  00CA14  3201               	rrcf	??_Lcd_Cmd,f,c
 14184  00CA16  90D8               	bcf	status,0,c
 14185  00CA18  3201               	rrcf	??_Lcd_Cmd,f,c
 14186  00CA1A  0E01               	movlw	1
 14187  00CA1C  1601               	andwf	??_Lcd_Cmd,f,c
 14188  00CA1E  508A               	movf	3978,w,c	;volatile
 14189  00CA20  1801               	xorwf	??_Lcd_Cmd,w,c
 14190  00CA22  0BFE               	andlw	-2
 14191  00CA24  1801               	xorwf	??_Lcd_Cmd,w,c
 14192  00CA26  6E8A               	movwf	3978,c	;volatile
 14193  00CA28  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14194  00CA2C  90D8               	bcf	status,0,c
 14195  00CA2E  3201               	rrcf	??_Lcd_Cmd,f,c
 14196  00CA30  90D8               	bcf	status,0,c
 14197  00CA32  3201               	rrcf	??_Lcd_Cmd,f,c
 14198  00CA34  0E01               	movlw	1
 14199  00CA36  1601               	andwf	??_Lcd_Cmd,f,c
 14200  00CA38  4601               	rlncf	??_Lcd_Cmd,f,c
 14201  00CA3A  508A               	movf	3978,w,c	;volatile
 14202  00CA3C  1801               	xorwf	??_Lcd_Cmd,w,c
 14203  00CA3E  0BFD               	andlw	-3
 14204  00CA40  1801               	xorwf	??_Lcd_Cmd,w,c
 14205  00CA42  6E8A               	movwf	3978,c	;volatile
 14206                           
 14207                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
 14208  00CA44  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14209  00CA48  90D8               	bcf	status,0,c
 14210  00CA4A  3201               	rrcf	??_Lcd_Cmd,f,c
 14211  00CA4C  0E01               	movlw	1
 14212  00CA4E  1601               	andwf	??_Lcd_Cmd,f,c
 14213  00CA50  4601               	rlncf	??_Lcd_Cmd,f,c
 14214  00CA52  4601               	rlncf	??_Lcd_Cmd,f,c
 14215  00CA54  508A               	movf	3978,w,c	;volatile
 14216  00CA56  1801               	xorwf	??_Lcd_Cmd,w,c
 14217  00CA58  0BFB               	andlw	-5
 14218  00CA5A  1801               	xorwf	??_Lcd_Cmd,w,c
 14219  00CA5C  6E8A               	movwf	3978,c	;volatile
 14220  00CA5E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
 14221  00CA62  0E01               	movlw	1
 14222  00CA64  1601               	andwf	??_Lcd_Cmd,f,c
 14223  00CA66  4601               	rlncf	??_Lcd_Cmd,f,c
 14224  00CA68  4601               	rlncf	??_Lcd_Cmd,f,c
 14225  00CA6A  4601               	rlncf	??_Lcd_Cmd,f,c
 14226  00CA6C  508A               	movf	3978,w,c	;volatile
 14227  00CA6E  1801               	xorwf	??_Lcd_Cmd,w,c
 14228  00CA70  0BF7               	andlw	-9
 14229  00CA72  1801               	xorwf	??_Lcd_Cmd,w,c
 14230  00CA74  6E8A               	movwf	3978,c	;volatile
 14231                           
 14232                           ;lcd.h: 148: _delay(10);
 14233  00CA76  0E03               	movlw	3
 14234  00CA78                     u7117:
 14235  00CA78  2EE8               	decfsz	wreg,f,c
 14236  00CA7A  D7FE               	goto	u7117
 14237  00CA7C  F000               	nop	
 14238                           
 14239                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
 14240  00CA7E  888A               	bsf	3978,4,c	;volatile
 14241  00CA80  0E03               	movlw	3
 14242  00CA82                     u7127:
 14243  00CA82  2EE8               	decfsz	wreg,f,c
 14244  00CA84  D7FE               	goto	u7127
 14245  00CA86  F000               	nop	
 14246  00CA88  988A               	bcf	3978,4,c	;volatile
 14247                           
 14248                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
 14249  00CA8A  0E0F               	movlw	15
 14250  00CA8C  6E01               	movwf	??_Lcd_Cmd& (0+255),c
 14251  00CA8E  0E48               	movlw	72
 14252  00CA90                     u7137:
 14253  00CA90  2EE8               	decfsz	wreg,f,c
 14254  00CA92  D7FE               	goto	u7137
 14255  00CA94  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
 14256  00CA96  D7FC               	goto	u7137
 14257  00CA98  0012               	return		;funcret
 14258  00CA9A                     __end_of_Lcd_Cmd:
 14259                           	opt stack 0
 14260                           tblptru	equ	0xFF8
 14261                           tblptrh	equ	0xFF7
 14262                           tblptrl	equ	0xFF6
 14263                           tablat	equ	0xFF5
 14264                           prodh	equ	0xFF4
 14265                           prodl	equ	0xFF3
 14266                           intcon	equ	0xFF2
 14267                           indf0	equ	0xFEF
 14268                           postinc0	equ	0xFEE
 14269                           fsr0h	equ	0xFEA
 14270                           fsr0l	equ	0xFE9
 14271                           wreg	equ	0xFE8
 14272                           postdec1	equ	0xFE5
 14273                           fsr1l	equ	0xFE1
 14274                           indf2	equ	0xFDF
 14275                           postinc2	equ	0xFDE
 14276                           postdec2	equ	0xFDD
 14277                           fsr2h	equ	0xFDA
 14278                           fsr2l	equ	0xFD9
 14279                           status	equ	0xFD8
 14280                           tblptru	equ	0xFF8
 14281                           tblptrh	equ	0xFF7
 14282                           tblptrl	equ	0xFF6
 14283                           tablat	equ	0xFF5
 14284                           prodh	equ	0xFF4
 14285                           prodl	equ	0xFF3
 14286                           intcon	equ	0xFF2
 14287                           indf0	equ	0xFEF
 14288                           postinc0	equ	0xFEE
 14289                           fsr0h	equ	0xFEA
 14290                           fsr0l	equ	0xFE9
 14291                           wreg	equ	0xFE8
 14292                           postdec1	equ	0xFE5
 14293                           fsr1l	equ	0xFE1
 14294                           indf2	equ	0xFDF
 14295                           postinc2	equ	0xFDE
 14296                           postdec2	equ	0xFDD
 14297                           fsr2h	equ	0xFDA
 14298                           fsr2l	equ	0xFD9
 14299                           status	equ	0xFD8
 14300                           
 14301                           	psect	rparam
 14302  0000                     tblptru	equ	0xFF8
 14303                           tblptrh	equ	0xFF7
 14304                           tblptrl	equ	0xFF6
 14305                           tablat	equ	0xFF5
 14306                           prodh	equ	0xFF4
 14307                           prodl	equ	0xFF3
 14308                           intcon	equ	0xFF2
 14309                           indf0	equ	0xFEF
 14310                           postinc0	equ	0xFEE
 14311                           fsr0h	equ	0xFEA
 14312                           fsr0l	equ	0xFE9
 14313                           wreg	equ	0xFE8
 14314                           postdec1	equ	0xFE5
 14315                           fsr1l	equ	0xFE1
 14316                           indf2	equ	0xFDF
 14317                           postinc2	equ	0xFDE
 14318                           postdec2	equ	0xFDD
 14319                           fsr2h	equ	0xFDA
 14320                           fsr2l	equ	0xFD9
 14321                           status	equ	0xFD8


Data Sizes:
    Strings     398
    Constant    118
    Data        76
    BSS         75
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160     60     160
    BANK1           256      0      64
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(BANK0[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(BANK0[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_96(CODE[7]), sprintf@c(BANK0[1]), STR_95(CODE[21]), STR_93(CODE[21]), 
		 -> STR_91(CODE[21]), STR_89(CODE[21]), STR_87(CODE[21]), STR_85(CODE[21]), 
		 -> STR_83(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_94(CODE[3]), STR_92(CODE[3]), STR_90(CODE[3]), STR_88(CODE[3]), 
		 -> STR_86(CODE[3]), STR_84(CODE[3]), STR_82(CODE[3]), STR_80(CODE[5]), 
		 -> STR_78(CODE[6]), STR_76(CODE[21]), STR_71(CODE[5]), STR_69(CODE[5]), 
		 -> STR_67(CODE[5]), STR_65(CODE[5]), STR_63(CODE[5]), STR_61(CODE[5]), 
		 -> STR_59(CODE[5]), STR_57(CODE[5]), STR_53(CODE[5]), STR_51(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_41(CODE[5]), STR_39(CODE[5]), STR_37(CODE[14]), STR_36(CODE[15]), 
		 -> STR_34(CODE[14]), STR_33(CODE[15]), STR_30(CODE[5]), STR_28(CODE[5]), 
		 -> STR_26(CODE[5]), STR_24(CODE[5]), STR_22(CODE[5]), STR_17(CODE[5]), 
		 -> STR_15(CODE[5]), STR_13(CODE[5]), STR_11(CODE[5]), STR_9(CODE[5]), 
		 -> STR_5(CODE[28]), STR_4(CODE[28]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(BANK0[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(BANK0[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(BANK0[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> Convert_diasem@buffer_dia(BANK0[20]), STR_81(CODE[1]), STR_79(CODE[1]), STR_77(CODE[1]), 
		 -> STR_75(CODE[21]), STR_74(CODE[21]), STR_73(CODE[21]), STR_72(CODE[1]), 
		 -> STR_70(CODE[1]), STR_68(CODE[1]), STR_66(CODE[1]), STR_64(CODE[1]), 
		 -> STR_62(CODE[1]), STR_60(CODE[1]), STR_58(CODE[1]), STR_56(CODE[1]), 
		 -> STR_55(CODE[1]), STR_54(CODE[1]), STR_52(CODE[1]), STR_50(CODE[1]), 
		 -> STR_48(CODE[1]), STR_46(CODE[1]), STR_44(CODE[1]), STR_42(CODE[1]), 
		 -> STR_40(CODE[1]), STR_38(CODE[1]), STR_35(CODE[12]), STR_32(CODE[6]), 
		 -> STR_31(CODE[1]), STR_29(CODE[1]), STR_27(CODE[1]), STR_25(CODE[1]), 
		 -> STR_23(CODE[1]), STR_21(CODE[1]), STR_20(CODE[1]), STR_19(CODE[1]), 
		 -> STR_18(CODE[1]), STR_16(CODE[1]), STR_14(CODE[1]), STR_12(CODE[1]), 
		 -> STR_10(CODE[1]), STR_8(CODE[1]), STR_7(CODE[1]), STR_6(CODE[18]), 
		 -> STR_3(CODE[20]), buffer1(BANK0[20]), 


Critical Paths under _main in COMRAM

    _main->_V_ProgTempAgua
    _control_temperatura_agua->___ftdiv
    ___lbtoft->___ftpack
    ___ftdiv->___awtoft
    ___awtoft->___fttol
    _V_ProgTempAgua->_Lcd_Out
    _V_ProgRiegoIlum->_Lcd_Out
    _V_ProgReloj->_Lcd_Out
    _Write_RTC->___awdiv
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___ftge
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___ftadd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_V_ProgRiegoIlum
    _V_ProgReloj->_Convert_diasem
    _V_Principal->_Convert_diasem
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  492732
                                             59 BANK0      1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                        _V_Principal
                        _V_ProgReloj
                    _V_ProgRiegoIlum
                     _V_ProgTempAgua
                          _Write_RTC
           _control_leds_iluminacion
                 _control_leds_riego
           _control_temperatura_agua
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _control_temperatura_agua                             3     3      0   18013
                                             76 COMRAM     3     3      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft
                    _lee_temperatura
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lbtoft                                             4     1      3    2170
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2658
                                             61 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2303
                                             57 COMRAM     4     1      3
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _control_leds_riego                                   2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _control_leds_iluminacion                             2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _V_ProgTempAgua                                       4     4      0   77367
                                             91 COMRAM     4     4      0
                            _Lcd_Cmd
                            _Lcd_Out
                            ___ftadd
                             ___ftge
                            ___ftsub
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_ProgRiegoIlum                                     12    12      0   72473
                                             91 COMRAM     2     2      0
                                             49 BANK0     10    10      0
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_ProgReloj                                         10    10      0  128651
                                             91 COMRAM     2     2      0
                                             49 BANK0      8     8      0
                     _Convert_diasem
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    3557
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0  124832
                                             91 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3   11285
                                             86 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2   56492
                                             82 COMRAM     4     2      2
                                             29 BANK0     20    20      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             46    36     10   56064
                                             66 COMRAM    16     6     10
                                              0 BANK0     29    29      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   11372
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11174
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4624
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2348
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     508
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4411
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3986
                                             45 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     365
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1288
                                             57 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _V_Principal
     _Convert_diasem
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _V_ProgReloj
     _Convert_diasem
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftneg (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
         ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _V_ProgRiegoIlum
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
         ___awmod (ARG)
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _V_ProgTempAgua
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftneg (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftneg (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
       ___awmod (ARG)
   _control_leds_iluminacion
   _control_leds_riego
   _control_temperatura_agua
     ___awtoft
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft
       ___ftpack
     _lee_temperatura
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftneg (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      40       8       25.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3C      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13F       6        0.0%
DATA                 0      0     13F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Nov 28 00:05:32 2020

                   V_Principal@cte 005C                                  _i 0076  
                               l80 C7F8                                 l79 C7B6  
             V_ProgReloj@minuto_tr 00D9                       ___awdiv@sign 000C  
              ___wmul@multiplicand 0011                V_ProgReloj@posicion 00DA  
                     __CFG_CP0$OFF 000000            __size_of_V_ProgTempAgua 026A  
                     ___ftadd@exp1 0039                       ___ftadd@exp2 0038  
                     ___ftadd@sign 0037                                l348 BA7C  
                              l374 BEFC                                l368 BDF2  
                              l377 D5FE                                l379 D5FA  
                              l498 F912                                l919 CCE4  
                              l962 C31C                                l991 D29C  
                              l995 D2C6                                _dia 00E7  
                              _mes 00EB                       ___awmod@sign 0006  
                              wreg 000FE8                    RtccReadDate@pDt 0001  
         __size_of_V_ProgRiegoIlum 08E4                       ___ftdiv@cntr 0047  
                     ___ftdiv@sign 004C                               l1006 D388  
                             l1015 D3A4                               l1120 BF78  
                             l1040 CE1E                               l1033 CD88  
                             l1130 BD70                               l1034 CDB0  
                             l1026 C3FC                               l1065 BACE  
                             l4100 F202                               l4110 F252  
                             l4200 F5B2                               l4112 F25E  
                             l5000 E244                               l4202 F5BE  
                             l4210 F644                               l4130 F2F8  
                             l4106 F22C                               l4050 F042  
                             l4042 F00E                               l4300 F99A  
                             l4220 F6C0                               l4124 F2C0  
                             l4116 F270                               l4140 F350  
                             l4060 F084                               l5100 E5B4  
                             l5012 E2A0                               l4310 FA80  
                             l4214 F6AC                               l4206 F602  
                             l4134 F310                               l4126 F2DE  
                             l4118 F28A                               l4054 F04E  
                             l5030 E318                               l5006 E260  
                             l3512 D32C                               l4312 FA90  
                             l4232 F744                               l4224 F6FA  
                             l4216 F6B2                               l4208 F630  
                             l4320 FABA                               l4080 F162  
                             l4056 F064                               l4048 F02C  
                             l5112 E612                               l5040 E384  
                             l5024 E2FC                               l3450 C2E4  
                             l3442 C2A0                               l3514 D338  
                             l3506 D308                               l3602 C158  
                             l4402 FD1E                               l4330 FB0A  
                             l4250 F7B0                               l4146 F36C  
                             l4138 F318                               l4074 F10E  
                             l4410 FDC2                               l5106 E5F4  
                             l5130 E6B0                               l5042 E390  
                             l5018 E2BC                               l3460 C324  
                             l3452 C304                               l3444 C2AC  
                             l3532 D3C2                               l3524 D370  
                             l3516 D344                               l3700 D9F8  
                             l4340 FB58                               l4332 FB10  
                             l4260 F7F8                               l4252 F7CA  
                             l4244 F796                               l4236 F766  
                             l4228 F700                               l4180 F4C0  
                             l4172 F458                               l4156 F3B4  
                             l4084 F176                               l4412 FDE2  
                             l4068 F0E8                               l5124 E670  
                             l5052 E41E                               l5036 E358  
                             l5140 E712                               l3454 C310  
                             l3446 C2CC                               l3438 C290  
                             l3542 D3F4                               l3526 D37C  
                             l3518 D34C                               l3614 C180  
                             l3630 C1BC                               l4406 FDA2  
                             l4318 FAAA                               l4190 F546  
                             l4094 F1B0                               l4086 F17C  
                             l4078 F14A                               l4502 D026  
                             l4430 C69E                               l5118 E652  
                             l5070 E4E0                               l5046 E3E6  
                             l5302 EA26                               l3800 CDF0  
                             l3616 C18A                               l3608 C16A  
                             l3552 C55C                               l3720 DE82  
                             l4408 FDA8                               l4352 FBB0  
                             l4344 FB5E                               l4336 FB1E  
                             l4264 F81C                               l4184 F4E8  
                             l4096 F1BC                               l4440 C6CE  
                             l4424 C674                               l5136 E6FC  
                             l5056 E474                               l5320 EAC2  
                             l5160 DAF2                               l3466 C336  
                             l3490 D2D4                               l3634 C1CC  
                             l3626 C1B0                               l3618 C192  
                             l3650 BE18                               l3714 DDDA  
                             l4370 FC52                               l4282 F8E0  
                             l4266 F822                               l4274 F8B6  
                             l4258 F7E4                               l4186 F4FE  
                             l4098 F1C4                               l4434 C6B2  
                             l5082 E53C                               l5066 E4B0  
                             l5410 EDEC                               l5314 EA82  
                             l5242 E86C                               l5170 DB6C  
                             l3484 D2AA                               l3580 C5E0  
                             l3572 C5B8                               l3732 DFD4  
                             l3724 DEA6                               l4380 FC8E  
                             l4372 FC5E                               l4364 FC12  
                             l4348 FB82                               l4284 F8F4  
                             l4276 F8C6                               l4196 F58C  
                             l4188 F530                               l4612 C01C  
                             l4540 D098                               l4508 D042  
                             l5076 E4FC                               l5404 EDCE  
                             l5332 EB1E                               l5308 EA66  
                             l5260 E8F6                               l3822 CBFE  
                             l3806 CE0A                               l3670 BE6A  
                             l3662 BE4E                               l3654 BE26  
                             l3646 BE0A                               l3590 C60E  
                             l3582 C5E6                               l3558 C584  
                             l3750 BAAE                               l4390 FCCE  
                             l4382 FC9A                               l4366 FC1E  
                             l4358 FBDE                               l4630 C084  
                             l4614 C022                               l4622 C036  
                             l5094 E598                               l5422 EE4A  
                             l5350 EBB2                               l5326 EADE  
                             l5254 E8B6                               l5190 DC62  
                             l3496 D2E0                               l3816 CBE0  
                             l3808 CE18                               l3760 CD22  
                             l3656 BE30                               l3576 C5CA  
                             l4296 F948                               l4288 F918  
                             l4616 C028                               l4624 C052  
                             l4552 BCA4                               l4544 D0A4  
                             l4472 C72A                               l5088 E558  
                             l5440 EEE8                               l5416 EE2C  
                             l5360 EC40                               l5272 E952  
                             l5344 EB7A                               l5184 DC1C  
                             l5176 DBB2                               l3906 C45E  
                             l3658 BE38                               l3666 BE5A  
                             l3586 C5F8                               l3738 E07C  
                             l4730 C89A                               l4626 C05A  
                             l4618 C02E                               l5434 EEA8  
                             l5354 EC08                               l5338 EB3A  
                             l5290 E9CA                               l5266 E912  
                             l5194 DC86                               l4802 C40A  
                             l3924 C4C6                               l3860 CCB6  
                             l3844 CC74                               l3836 CC42  
                             l3692 D934                               l4396 FCF6  
                             l4388 FCC2                               l4732 C8B8  
                             l4548 D0B0                               l4492 CFD8  
                             l4476 C736                               l4468 C71E  
                             l5452 EF46                               l5428 EE8A  
                             l5380 ED12                               l5364 EC96  
                             l5348 EBA6                               l5284 E9AE  
                             l5532 D6E4                               l3942 C520  
                             l3934 C4F0                               l3766 CD4E  
                             l4734 C8D6                               l4726 C85E  
                             l4742 C930                               l5470 EFE0  
                             l5446 EF06                               l5374 ECD2  
                             l5278 E96E                               l5198 DC9C  
                             l4814 BB78                               l3936 C4FE  
                             l3928 C4D6                               l3952 BF20  
                             l3856 CCA6                               l3848 CC84  
                             l4736 C8F4                               l4728 C87C  
                             l4744 C96E                               l5392 ED70  
                             l5464 EFA4                               l5296 EA0A  
                             l4912 BEC4                               l3882 C0DE  
                             l3874 BBB6                               l3938 C508  
                             l3954 BF2E                               l3866 CCD0  
                             l4738 C912                               l4578 BF8A  
                             l4498 D012                               l5458 EF64  
                             l5386 ED30                               l5474 EFF6  
                             l4930 D562                               l5562 D7B8  
                             l5554 D780                               l3892 C13C  
                             l3964 BF68                               l3956 BF36  
                             l3980 BD60                               l3972 BD24  
                             l3868 CCDE                               l3796 CDE0  
                             l3788 CDBE                               l4772 C396  
                             l5548 D73C                               l3886 C110  
                             l3974 BD32                               l5398 ED8E  
                             l4766 C36E                               l5558 D79C  
                             l3976 BD3A                               l4960 E112  
                             l4792 C3D6                               l3986 BBE8  
                             l3988 BBF6                               l4972 E15C  
                             l4982 E1A8                               l4976 E18C  
                             l4994 E204                               l4898 BDBA  
                             l4988 E1E8                               STR_1 FFEF  
                             STR_2 FFEF                               STR_3 FF88  
                             STR_4 FE69                               STR_5 FE85  
                             STR_6 FF9C                               STR_7 FEB5  
                             STR_8 FEB5                               STR_9 FFB8  
                             u4200 C47C                               u3501 D27C  
                             u4205 C474                               u6010 DAF0  
                             u5300 C07A                               u6100 DC6A  
                             u6020 DB0A                               u4181 C442  
                             u3701 C544                               u4510 F2B2  
                             u5310 C0A4                               u6110 DC6C  
                             u6030 DB0C                               u4335 C988  
                             u4345 C99E                               u3721 C56C  
                             u4450 F1F8                               u4355 C9BE  
                             u3491 D268                               u5307 C070  
                             u6140 E86A                               u6060 DBBA  
                             u4517 F2A8                               u4365 CAA8  
                             u5317 C09A                               u5341 C356  
                             u6150 E884                               u6070 DBBC  
                             u7007 C76E                               u4375 CABE  
                             u5600 E12C                               u6160 E886  
                             u7017 C77C                               u4457 F1EE  
                             u4385 CADE                               u5361 C37E  
                             u4570 F3F4                               u6410 EC34  
                             u5530 D4CA                               u7107 CA02  
                             u7027 C78A                               u6420 EC9E  
                             u6340 EB82                               u7117 CA78  
                             u7037 C798                               u6430 ECA0  
                             u6350 EB84                               u7127 CA82  
                             u7047 C7A6                               u4575 F3EA  
                             u5480 BEB2                               u7137 CA90  
                             u7057 C7D0                               u5810 E412  
                             u6610 EFAC                               u5490 BEB4  
                             u7067 C7E8                               u3971 CD06  
                             u5820 E47C                               u5740 E360  
                             u5580 E110                               u6620 EFAE  
                             u6380 EC10                               u6700 D746  
                             u7077 C812                               u4790 F90A  
                             u5830 E47E                               u5750 E362  
                             u5590 E12A                               u6390 EC12  
                             u7087 C82A                               u3991 CD32  
                             u6720 D788                               u7097 C9F8  
                             u6730 D78A                               u5780 E3EE  
                             u6660 D728                               u5790 E3F0  
                             u6750 D7A4                               u6670 D72A  
                             u6760 D7A6                               u6817 D654  
                             u5970 E6B8                               u6690 D744  
                             u6907 DAF8                               u6827 D666  
                             u5980 E6BA                               u6780 D7C0  
                             u6917 E872                               u6837 D678  
                             u6790 D7C2                               u6927 E118  
                             u6847 D68A                               u6937 CB18  
                             u6857 D69C                               u6947 CB22  
                             u6867 D6AE                               u6957 CB98  
                             u6877 D6C0                               u6967 CBA2  
                             u6887 D6D2                               u6977 CBAC  
                             u6897 BA86                               u6987 CBB8  
                             u6997 C760     V_ProgRiegoIlum@i_hora_riego_tr 00D8  
                             _anio 00E5                               _main D604  
                             _hora 00E9                       ___ftpack@arg 0001  
                     ___ftpack@exp 0004                               fsr0h 000FEA  
                             indf0 000FEF                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                    __CFG_T1DIG$ON 000000                               prodh 000FF4  
                             prodl 000FF3                               start 0000  
                    __CFG_IESO$OFF 000000                   RtccReadDate@rTD0 000B  
                 RtccReadDate@rTD1 0003                       _sprintf$2458 00A3  
                  __end_of_Lcd_Cmd CA9A                    __end_of_Lcd_Out C0AC  
                     ___ftmul@cntr 0022                       ___param_bank 000010  
                     ___ftmul@sign 0023                    RtccReadTime@pTm 0001  
                       _Lcd_Chr_CP CA9A                      ??_V_ProgReloj 005C  
                     ___fttol@exp1 0039                      ??_V_Principal 005C  
                     ___fttol@lval 0035                      __CFG_PLLDIV$1 000000  
                            ?_main 0001                    __end_of___awdiv C1D8  
                  __end_of___ftadd D41C                              STR_10 FEB5  
                            STR_11 FFB8                              STR_20 FEB5  
                            STR_12 FEB5                              STR_21 FEB5  
                            STR_13 FFB8                              STR_14 FEB5  
                            STR_30 FFB8                              STR_22 FFB8  
                            STR_31 FEB5                              STR_23 FEB5  
                            STR_15 FFB8                              STR_40 FEB5  
                            STR_16 FEB5                              STR_24 FFB8  
                            STR_32 FFE4                              STR_25 FEB5  
                            STR_41 FFB8                              STR_17 FFB8  
                            STR_33 FFAE                              STR_50 FEB5  
                            STR_42 FEB5                              STR_18 FEB5  
                            STR_26 FFB8                              STR_34 FFBD  
                            STR_27 FEB5                              STR_19 FEB5  
                            STR_51 FFB8                              STR_43 FFB8  
                            STR_35 FFCB                              STR_60 FEB5  
                            STR_52 FEB5                              STR_44 FEB5  
                            STR_28 FFB8                              STR_36 FFAE  
                  __end_of___awmod BE76                              STR_29 FEB5  
                            STR_61 FFB8                              STR_53 FFB8  
                            STR_45 FFB8                              STR_37 FFBD  
                            STR_70 FEB5                              STR_62 FEB5  
                            STR_54 FEB5                              STR_46 FEB5  
                            STR_38 FEB5                              STR_55 FEB5  
                            STR_71 FFB8                              STR_63 FFB8  
                            STR_47 FFB8                              STR_39 FFB8  
                            STR_72 FEB5                              STR_64 FEB5  
                            STR_56 FEB5                              STR_48 FEB5  
                            STR_80 FFEA                              STR_81 FEB5  
                            STR_65 FFB8                              STR_57 FFB8  
                            STR_49 FFB8                              STR_73 FF49  
                            STR_66 FEB5                              STR_58 FEB5  
                            STR_90 FFF4                              STR_82 FFF4  
                            STR_74 FF73                              STR_67 FFB8  
                            STR_59 FFB8                              STR_83 FF0A  
                            STR_91 FEF5                              STR_75 FEA1  
                            STR_68 FEB5                              STR_92 FFF4  
                            STR_84 FFF4                              STR_76 FF5E  
                            STR_77 FEB5                              STR_69 FFB8  
                            STR_93 FF1F                              STR_85 FEB6  
                            STR_94 FFF4                              STR_86 FFF4  
                            STR_78 FFDE                              STR_79 FEB5  
                            STR_87 FEE0                              STR_95 FECB  
                            STR_88 FFF4                              STR_96 FFD7  
                            STR_89 FF34                    __end_of___ftdiv C432  
                  __end_of___ftneg BADC                    __end_of___lldiv BF8A  
                  __end_of___ftmul C636                    ___awdiv@divisor 0009  
                  __end_of___llmod BD82                    __end_of___ftsub BBE2  
                  __end_of___fttol C534                    ___awdiv@counter 000B  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                       ___lltoft@exp 0011  
                   __CFG_FCMEN$OFF 000000                              _Sw_Up 0081  
                    ___awtoft@sign 003D                    __end_of_dpowers FE1B  
                            _mes_d 00FA                              _mes_u 00FB  
                            _scale DCA4                    __end_of_isdigit BAB8  
                    ___ftpack@sign 0005                              tablat 000FF5  
                       _CuentamSeg 007A         ??_control_temperatura_agua 004D  
                            status 000FD8                    __end_of_sprintf FDF2  
                 __end_of_Lcd_Init C85C            __CFG_DSWDTOSC$INTOSCREF 000000  
                  __initialization BC42                       __end_of_main D7EC  
                 RtccReadTime@rTD0 000B                   RtccReadTime@rTD1 0003  
                 __end_of_Read_RTC CF76         __end_of_control_leds_riego BEFE  
                           ??_main 00DE                      ___fttol@sign1 0034  
                    __activetblptr 000002                __end_of_V_ProgReloj E71A  
             __size_of__tdiv_to_l_ 013A                __end_of_V_Principal C280  
                 __end_of_RtccWrOn BA62                             _ADCON0 000FC2  
                           _ADCON1 000FC1                   ___llmod@dividend 000E  
                           ?_scale 0024                             _ADRESH 000FC4  
                           _EECON2 000FA7                             _ANCON0 000F48  
                           _ANCON1 000F49                   ___awdiv@dividend 0007  
                 __end_of___awtoft BB9E                   __end_of___ftpack C346  
                 __end_of___lbtoft BB02                   __end_of___lltoft BC42  
                   __CFG_WDTEN$OFF 000000                    _lee_temperatura BA76  
                        ??_Lcd_Cmd 0001                  ??_V_ProgRiegoIlum 005C  
                 RtccWriteDate@pDt 0001                             _RTCCFG 000F3F  
                        ??_Lcd_Out 005A                     __CFG_WPCFG$OFF 000000  
                           _Flag_1 007B                     __CFG_WPDIS$OFF 000000  
                   __CFG_XINST$OFF 000000                   __end_of__powers_ FE69  
                           ___ftge C0AC                        ?_Lcd_Chr_CP 0001  
                           ___wmul BB02                          ??___awdiv 000B  
                        ??___ftadd 0034                     __CFG_STVREN$ON 000000  
                        ??___awmod 0005                          ??___ftdiv 0044  
                        ??___ftneg 0004                          ??___lldiv 0009  
                           _diasem 0074                          ??___ftmul 001B  
                           _anio_d 00F3                          ??___llmod 0016  
                        ??___ftsub 0040                          ??___fttol 002F  
                           _anio_u 00F4                   ??_Convert_diasem 0055  
                           _grados 00DF                             _hora_d 00F8  
                           _hora_u 00F9                             _fround D7EC  
                           clear_0 BC48                             clear_1 BC54  
                 ___awdiv@quotient 000D                             _minuto 00ED  
                  ___awmod@divisor 0003                     _V_ProgTempAgua DA3A  
                  ___awmod@counter 0005              __end_of_RtccWriteDate D0BC  
            __end_of_RtccWriteTime C742              ___ftmul@f3_as_product 001F  
                 RtccWriteTime@pTm 0001      V_ProgRiegoIlum@i_hora_ilum_tr 00D4  
                        ??_isdigit 0001                       __mediumconst FDF2  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          ??_sprintf 004D  
         _control_leds_iluminacion BD82                         __accesstop 0060  
          __end_of__initialization BC9A                         ___ftadd@f1 002E  
                       ___ftadd@f2 0031                 __size_of_Write_RTC 019C  
                       ___ftge@ff1 003A                         ___ftge@ff2 003D  
                    ___rparam_used 000001                         ___ftdiv@f1 003E  
                       ___ftdiv@f2 0041                         ___ftdiv@f3 0048  
                       ___ftneg@f1 0001                         ___awtoft@c 003A  
                       ___lbtoft@c 000C                         ___ftmul@f1 0015  
                       ___ftmul@f2 0018                         ___ftsub@f1 003A  
                       ___ftsub@f2 003D                         ___fttol@f1 002B  
                   __pcstackCOMRAM 0001                       __pidataBANK0 BA62  
                     __pidataBANK1 BB2A                         ___lltoft@c 0009  
           __end_of_V_ProgTempAgua DCA4                        _V_ProgReloj E0A2  
                    __end_of_scale E0A2                        _V_Principal C1D8  
                  __CFG_DSWDTPS$G2 000000      V_ProgRiegoIlum@i_min_riego_tr 00D9  
                       __div_to_l_ CBC2                    __CFG_OSC$INTOSC 000000  
          __end_of_lee_temperatura BA96       V_ProgRiegoIlum@d_min_ilum_tr 00D7  
                _inicio_hora_riego 00F0                          ?_Lcd_Init 0001  
                  __div_to_l_@exp1 000C                    __div_to_l_@cntr 000B  
                          ??_scale 0027                    __div_to_l_@quot 0007  
                     sprintf@width 00BB                __size_of_Lcd_Chr_CP 0128  
                       __pbssBANK0 0060                         __pbssBANK1 0138  
 __end_of_control_temperatura_agua D604                          ?_Read_RTC 0001  
                       _dia_semana 00F5          RtccWriteTime@tempHourWDay 000A  
                    __div_to_l_@f1 0001                      __div_to_l_@f2 0004  
                        ?_RtccWrOn 0001                            ?___ftge 003A  
                          ?___wmul 000F                      ?_RtccReadDate 0001  
                  ?_V_ProgTempAgua 0001                      ?_RtccReadTime 0001  
                          ?_fround 0024                          ?___awtoft 003A  
                        ?___ftpack 0001                          ?___lbtoft 0009  
                        ?___lltoft 0009  control_temperatura_agua@grados_tr 004D  
                __end_of_Write_RTC D258                         ??_Lcd_Init 0004  
                          _RTCVALH 000F99                            _RTCVALL 000F98  
                       ??_Read_RTC 0013                            _Lcd_Cmd C97A  
                          _Lcd_Out C018                            _Humedad 007C  
                __end_of__npowers_ FE42                            __Hparam 0000  
                       _scale$2457 0027                            __Lparam 0000  
                          _Sw_Left 007F                            _Sw_Down 007E  
                       ??_RtccWrOn 0001                     ??_RtccReadDate 0003  
                  __size_of___ftge 0096                     ??_RtccReadTime 0003  
                          ___awdiv C142                            ___ftadd D258  
                          ___awmod BDF4                            ___ftdiv C346  
                          ___ftneg BAB8                            ___lldiv BEFE  
                  __size_of___wmul 0028                            ___ftmul C534  
                          ___llmod BD12                            ___ftsub BB9E  
                          ___fttol C432                        _RtccTimeVal 0070  
                          __pcinit BC42                            _fecha_d 00F6  
                          _fecha_u 00F7                         ??___awtoft 003D  
                       ??___ftpack 0006                         ??___lbtoft 000C  
                  __size_of_fround 024E                            __ramtop 0F00  
                       ??___lltoft 000D                            __ptext0 D604  
                          __ptext1 D41C                            __ptext2 BA76  
                          __ptext3 BADC                            __ptext4 C346  
                          __ptext5 BB62                            __ptext6 BE76  
                          __ptext7 BD82                            __ptext8 DA3A  
                          __ptext9 E71A                            _buffer1 0087  
                        _T1CONbits 000FCD                        ?__div_to_l_ 0001  
                          _lectura 0086                            _dpowers FDF3  
                          _isdigit BA96                    _V_ProgRiegoIlum E71A  
                 ___awmod@dividend 0001                            _segundo 0078  
                 ?_lee_temperatura 0001                            _sprintf EFFE  
               _control_leds_riego BE76               end_of_initialization BC9A  
                     _fin_min_ilum 0084                      __Lmediumconst FDF2  
              ?_control_leds_riego 0001                    ___lldiv@divisor 0005  
                  ___lldiv@counter 000D                       ??_Lcd_Chr_CP 0001  
                          postdec1 000FE5                            postdec2 000FDD  
                          postinc0 000FEE                            postinc2 000FDE  
                   __tdiv_to_l_@f1 0001                     __tdiv_to_l_@f2 0004  
__size_of_control_temperatura_agua 01E8                      ??__tdiv_to_l_ 0007  
        ?_control_temperatura_agua 0001                          _PORTAbits 000F80  
                        _PORTCbits 000F82                   __CFG_DSBOREN$OFF 000000  
               V_ProgReloj@anio_tr 00D7               ??_control_leds_riego 0001  
       ??_control_leds_iluminacion 0001                   __CFG_CPUDIV$OSC1 000000  
               V_ProgReloj@hora_tr 00D8                          _TRISBbits 000F93  
               __end_of_Lcd_Chr_CP CBC2                        ___ftdiv@exp 004B  
                 __CFG_IOL1WAY$OFF 000000          RtccWriteDate@tempDayMonth 000A  
              __size_of__div_to_l_ 0134                __CFG_MSSP7B_EN$MSK7 000000  
                      ___ftmul@exp 001E                       ?_V_ProgReloj 0001  
                   __end_of___ftge C142                       ?_V_Principal 0001  
          __end_of_V_ProgRiegoIlum EFFE                     __end_of___wmul BB2A  
       V_ProgTempAgua@temp_prog_tr 005D      V_ProgRiegoIlum@d_hora_ilum_tr 00D6  
        RtccWriteDate@tempHourWDay 000C                     __end_of_fround DA3A  
                 __CFG_DSWDTEN$OFF 000000                start_initialization BC42  
              __end_of__tdiv_to_l_ CE30               __end_of_RtccReadDate C018  
                    Lcd_Out@buffer 0058               __end_of_RtccReadTime BD12  
                __size_of_Lcd_Init 011A               RtccWriteTime@wasAlrm 0006  
             RtccWriteTime@wasWrEn 0007                    ___llmod@divisor 0012  
                  ___llmod@counter 0016             __size_of_RtccWriteDate 0146  
                  RtccWriteDate@di 0003             __size_of_RtccWriteTime 010C  
                __size_of_Read_RTC 0146                   ??_V_ProgTempAgua 005C  
                        _Sw_Center 007D                           ??___ftge 0040  
                         ??___wmul 0013      V_ProgRiegoIlum@d_min_riego_tr 00DB  
                      __pdataBANK0 00DF                        __pdataBANK1 0100  
                __size_of_RtccWrOn 0012                    RtccWriteTime@di 0003  
                 __CFG_LPT1OSC$OFF 000000                           ??_fround 0027  
                    sprintf@tmpval 00B0                  Convert_diasem@dia 0053  
                      _ALRMCFGbits 000F91                         fround@prec 002D  
                __size_of___awtoft 003C                  __size_of___ftpack 00C6  
                __size_of___lbtoft 0026                  __size_of___lltoft 0060  
                    __pcstackBANK0 00A3            __size_of_Convert_diasem 011E  
                        _Write_RTC D0BC       V_ProgRiegoIlum@i_min_ilum_tr 00D5  
                     _isdigit$2222 0002                   _inicio_hora_ilum 00EF  
                         ?_Lcd_Cmd 0001                        sprintf@flag 00B6  
                         ?_Lcd_Out 0057                        sprintf@fval 00B8  
                      sprintf@prec 00BD                   _inicio_min_riego 00F2  
                        __pnvBANK0 00F3                      __pmediumconst FDF2  
                         ?___awdiv 0007                           ?___ftadd 002E  
                         ?___awmod 0001                           ?___ftdiv 003E  
                         ?___ftneg 0001                           ?___lldiv 0001  
                         ?___ftmul 0015                           ?___llmod 000E  
                         ?___ftsub 003A                          __npowers_ FE1B  
                         ?___fttol 002B                   ?_V_ProgRiegoIlum 0001  
          RtccWriteTime@tempMinSec 0008                        __tdiv_to_l_ CCF6  
 __end_of_control_leds_iluminacion BDF4                      _RtccWriteDate CF76  
                     ??__div_to_l_ 0007                      _RtccWriteTime C636  
   V_ProgRiegoIlum@d_hora_riego_tr 00DA                           ?_isdigit 0001  
          V_ProgRiegoIlum@posicion 00DC               __CFG_RTCOSC$T1OSCREF 000000  
         Convert_diasem@buffer_dia 00C0                         ?_Write_RTC 0001  
                         ?_sprintf 0043                     __size_of_scale 03FE  
                 _RtccAlrmTimeDate 0060                     ___wmul@product 0013  
                         _LATAbits 000F89                           _LATBbits 000F8A  
                         _PIE3bits 000FA3                          _segundo_d 00FE  
                        _segundo_u 00FF                 __end_of__div_to_l_ CCF6  
                         Lcd_Out@x 0057                   __CFG_WDTPS$32768 000000  
                         Lcd_Out@y 005A                          _temp_prog 00E2  
               RtccWriteDate@wasOn 0005                  V_ProgReloj@dia_tr 00D5  
                V_ProgReloj@mes_tr 00D6                 _Rtcc_read_TimeDate 0138  
                     Lcd_Init@data 0005                     ?_RtccWriteDate 0001  
             __size_of_V_ProgReloj 0678                         _ADCON0bits 000FC2  
                ___wmul@multiplier 000F               __size_of_V_Principal 00A8  
                   ?_RtccWriteTime 0001              __size_of_RtccReadDate 008E  
            __size_of_RtccReadTime 006E                           _Lcd_Init C742  
                        copy_data0 BC6E                          copy_data1 BC8E  
                         _Read_RTC CE30                     _fin_hora_riego 0083  
         __size_of_lee_temperatura 0020                   __size_of_Lcd_Cmd 0120  
                 __size_of_Lcd_Out 0094                           __Hrparam 0000  
                         _RtccDate 009B                           __Lrparam 0000  
                         _RtccTime 009F                           _RtccWrOn BA50  
                         _Sw_Right 0080                       _RtccReadDate BF8A  
                 __size_of___awdiv 0096                   __size_of___ftadd 01C4  
                 __size_of___awmod 0082                       _RtccReadTime BCA4  
                 __size_of___ftdiv 00EC                   __size_of___ftneg 0024  
                 __size_of___lldiv 008C                   __size_of___ftmul 0102  
                 __size_of___llmod 0070                   __size_of___ftsub 0044  
                 __size_of___fttol 0102                           ___awtoft BB62  
                         ___ftpack C280                           ___lbtoft BADC  
                      _fround$2455 002A                        _fround$2456 0027  
                         ___lltoft BBE2                     _posicionesLeft 0120  
                     _RtccTimeDate 0068        __size_of_control_leds_riego 0088  
                       sprintf@len 00AA                         sprintf@exp 00B4  
                       sprintf@val 00AC                    _inicio_min_ilum 00F1  
                   _Convert_diasem C85C                   __size_of_isdigit 0022  
                   Lcd_Chr_CP@data 0003                        ??_Write_RTC 000F  
                         __ptext10 E0A2                           __ptext11 D0BC  
                         __ptext20 CA9A                           __ptext12 C636  
                         __ptext21 C85C                           __ptext13 CF76  
                         __ptext30 CCF6                           __ptext22 EFFE  
                         __ptext14 BA50                           __ptext31 CBC2  
                         __ptext23 DCA4                           __ptext15 C1D8  
                         __ptext40 C0AC                           __ptext32 BBE2  
                         __ptext24 BA96                           __ptext16 CE30  
                         __ptext41 C742                           __ptext33 BD12  
                         __ptext25 D7EC                           __ptext17 BCA4  
                         __ptext42 C97A                           __ptext34 BEFE  
                         __ptext26 BB02                           __ptext18 BF8A  
                         __ptext35 C432                           __ptext27 C534  
                         __ptext19 C018                           __ptext36 BB9E  
                         __ptext28 BDF4                           __ptext37 D258  
                         __ptext29 C142                           __ptext38 C280  
                         __ptext39 BAB8                           __powers_ FE42  
                 __size_of_sprintf 0DF4                        Lcd_Cmd@data 0003  
                    __size_of_main 01E8  __size_of_control_leds_iluminacion 0072  
        ?_control_leds_iluminacion 0001                           _minuto_d 00FC  
                         _minuto_u 00FD           _control_temperatura_agua D41C  
                  ??_RtccWriteDate 0004                    ??_RtccWriteTime 0004  
           __end_of_Convert_diasem C97A                      _fin_hora_ilum 0082  
                      Lcd_Out@data 005B                        _OSCTUNEbits 000F9B  
                       _INTCONbits 000FF2                 RtccWriteTime@wasOn 0005  
                    _fin_min_riego 0085                           isdigit@c 0003  
                         scale@scl 002A                          sprintf@ap 00A8  
                        sprintf@cp 00A6                   __tdiv_to_l_@exp1 000F  
                        sprintf@sp 0043                   __tdiv_to_l_@cntr 000E  
                 __tdiv_to_l_@quot 000A                   ___lldiv@dividend 0001  
                       _OSCCONbits 000FD3              RtccWriteDate@tempYear 0007  
                ??_lee_temperatura 0001                       ?__tdiv_to_l_ 0001  
                       _RTCCFGbits 000F3F               V_ProgReloj@diasem_tr 00D4  
                         sprintf@c 00BF                           sprintf@f 0045  
                     _posicionesUp 0100                    ?_Convert_diasem 0053  
                 ___lldiv@quotient 0009               RtccWriteDate@wasAlrm 0006  
             RtccWriteDate@wasWrEn 0009  
