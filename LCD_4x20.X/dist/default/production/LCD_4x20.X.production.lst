

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 25 23:45:54 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  00E872                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _anio
    45  00E872  0014               	dw	20
    46                           
    47                           ;initializer for _dia
    48  00E874  0006               	dw	6
    49                           
    50                           ;initializer for _diasem
    51  00E876  0002               	dw	2
    52                           
    53                           ;initializer for _mes
    54  00E878  000B               	dw	11
    55                           
    56                           	psect	idataBANK0
    57  00E8CE                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _posicionesLeft
    61  00E8CE  0002               	dw	2
    62  00E8D0  0000               	dw	0
    63  00E8D2  0003               	dw	3
    64  00E8D4  0000               	dw	0
    65  00E8D6  0003               	dw	3
    66  00E8D8  0003               	dw	3
    67  00E8DA  0003               	dw	3
    68  00E8DC  0006               	dw	6
    69  00E8DE  0004               	dw	4
    70  00E8E0  0000               	dw	0
    71  00E8E2  0004               	dw	4
    72  00E8E4  0003               	dw	3
    73                           
    74                           ;initializer for _Grados
    75  00E8E6  00                 	db	0
    76  00E8E7  A0                 	db	160
    77  00E8E8  41                 	db	65
    78                           
    79                           ;initializer for _Temp_prog
    80  00E8E9  00                 	db	0
    81  00E8EA  B4                 	db	180
    82  00E8EB  41                 	db	65
    83                           
    84                           ;initializer for _hora
    85  00E8EC  0012               	dw	18
    86                           
    87                           ;initializer for _minuto
    88  00E8EE  0037               	dw	55
    89                           
    90                           	psect	mediumconst
    91  00FECC                     __pmediumconst:
    92                           	opt stack 0
    93  00FECC  00                 	db	0
    94  00FECD                     _dpowers:
    95                           	opt stack 0
    96  00FECD  0001               	dw	1
    97  00FECF  000A               	dw	10
    98  00FED1  0064               	dw	100
    99  00FED3  03E8               	dw	1000
   100  00FED5  2710               	dw	10000
   101  00FED7                     __end_of_dpowers:
   102                           	opt stack 0
   103  00FED7                     STR_6:
   104  00FED7  20                 	db	32
   105  00FED8  20                 	db	32
   106  00FED9  20                 	db	32
   107  00FEDA  20                 	db	32
   108  00FEDB  20                 	db	32
   109  00FEDC  20                 	db	32
   110  00FEDD  20                 	db	32
   111  00FEDE  20                 	db	32
   112  00FEDF  20                 	db	32
   113  00FEE0  20                 	db	32
   114  00FEE1  20                 	db	32
   115  00FEE2  20                 	db	32
   116  00FEE3  20                 	db	32
   117  00FEE4  20                 	db	32
   118  00FEE5  20                 	db	32
   119  00FEE6  20                 	db	32
   120  00FEE7  20                 	db	32
   121  00FEE8  20                 	db	32
   122  00FEE9  20                 	db	32
   123  00FEEA  20                 	db	32
   124  00FEEB  00                 	db	0
   125  00FEEC                     STR_12:
   126  00FEEC  4C                 	db	76	;'L'
   127  00FEED  75                 	db	117	;'u'
   128  00FEEE  6E                 	db	110	;'n'
   129  00FEEF  65                 	db	101	;'e'
   130  00FEF0  73                 	db	115	;'s'
   131  00FEF1  20                 	db	32
   132  00FEF2  20                 	db	32
   133  00FEF3  20                 	db	32
   134  00FEF4  20                 	db	32
   135  00FEF5  20                 	db	32
   136  00FEF6  20                 	db	32
   137  00FEF7  20                 	db	32
   138  00FEF8  20                 	db	32
   139  00FEF9  20                 	db	32
   140  00FEFA  20                 	db	32
   141  00FEFB  20                 	db	32
   142  00FEFC  20                 	db	32
   143  00FEFD  20                 	db	32
   144  00FEFE  20                 	db	32
   145  00FEFF  20                 	db	32
   146  00FF00  00                 	db	0
   147  00FF01                     STR_22:
   148  00FF01  53                 	db	83	;'S'
   149  00FF02  61                 	db	97	;'a'
   150  00FF03  62                 	db	98	;'b'
   151  00FF04  61                 	db	97	;'a'
   152  00FF05  64                 	db	100	;'d'
   153  00FF06  6F                 	db	111	;'o'
   154  00FF07  20                 	db	32
   155  00FF08  20                 	db	32
   156  00FF09  20                 	db	32
   157  00FF0A  20                 	db	32
   158  00FF0B  20                 	db	32
   159  00FF0C  20                 	db	32
   160  00FF0D  20                 	db	32
   161  00FF0E  20                 	db	32
   162  00FF0F  20                 	db	32
   163  00FF10  20                 	db	32
   164  00FF11  20                 	db	32
   165  00FF12  20                 	db	32
   166  00FF13  20                 	db	32
   167  00FF14  20                 	db	32
   168  00FF15  00                 	db	0
   169  00FF16                     STR_14:
   170  00FF16  4D                 	db	77	;'M'
   171  00FF17  61                 	db	97	;'a'
   172  00FF18  72                 	db	114	;'r'
   173  00FF19  74                 	db	116	;'t'
   174  00FF1A  65                 	db	101	;'e'
   175  00FF1B  73                 	db	115	;'s'
   176  00FF1C  20                 	db	32
   177  00FF1D  20                 	db	32
   178  00FF1E  20                 	db	32
   179  00FF1F  20                 	db	32
   180  00FF20  20                 	db	32
   181  00FF21  20                 	db	32
   182  00FF22  20                 	db	32
   183  00FF23  20                 	db	32
   184  00FF24  20                 	db	32
   185  00FF25  20                 	db	32
   186  00FF26  20                 	db	32
   187  00FF27  20                 	db	32
   188  00FF28  20                 	db	32
   189  00FF29  20                 	db	32
   190  00FF2A  00                 	db	0
   191  00FF2B                     STR_18:
   192  00FF2B  4A                 	db	74	;'J'
   193  00FF2C  75                 	db	117	;'u'
   194  00FF2D  65                 	db	101	;'e'
   195  00FF2E  76                 	db	118	;'v'
   196  00FF2F  65                 	db	101	;'e'
   197  00FF30  73                 	db	115	;'s'
   198  00FF31  20                 	db	32
   199  00FF32  20                 	db	32
   200  00FF33  20                 	db	32
   201  00FF34  20                 	db	32
   202  00FF35  20                 	db	32
   203  00FF36  20                 	db	32
   204  00FF37  20                 	db	32
   205  00FF38  20                 	db	32
   206  00FF39  20                 	db	32
   207  00FF3A  20                 	db	32
   208  00FF3B  20                 	db	32
   209  00FF3C  20                 	db	32
   210  00FF3D  20                 	db	32
   211  00FF3E  20                 	db	32
   212  00FF3F  00                 	db	0
   213  00FF40                     STR_10:
   214  00FF40  44                 	db	68	;'D'
   215  00FF41  6F                 	db	111	;'o'
   216  00FF42  6D                 	db	109	;'m'
   217  00FF43  69                 	db	105	;'i'
   218  00FF44  6E                 	db	110	;'n'
   219  00FF45  67                 	db	103	;'g'
   220  00FF46  6F                 	db	111	;'o'
   221  00FF47  20                 	db	32
   222  00FF48  20                 	db	32
   223  00FF49  20                 	db	32
   224  00FF4A  20                 	db	32
   225  00FF4B  20                 	db	32
   226  00FF4C  20                 	db	32
   227  00FF4D  20                 	db	32
   228  00FF4E  20                 	db	32
   229  00FF4F  20                 	db	32
   230  00FF50  20                 	db	32
   231  00FF51  20                 	db	32
   232  00FF52  20                 	db	32
   233  00FF53  20                 	db	32
   234  00FF54  00                 	db	0
   235  00FF55                     STR_20:
   236  00FF55  56                 	db	86	;'V'
   237  00FF56  69                 	db	105	;'i'
   238  00FF57  65                 	db	101	;'e'
   239  00FF58  72                 	db	114	;'r'
   240  00FF59  6E                 	db	110	;'n'
   241  00FF5A  65                 	db	101	;'e'
   242  00FF5B  73                 	db	115	;'s'
   243  00FF5C  20                 	db	32
   244  00FF5D  20                 	db	32
   245  00FF5E  20                 	db	32
   246  00FF5F  20                 	db	32
   247  00FF60  20                 	db	32
   248  00FF61  20                 	db	32
   249  00FF62  20                 	db	32
   250  00FF63  20                 	db	32
   251  00FF64  20                 	db	32
   252  00FF65  20                 	db	32
   253  00FF66  20                 	db	32
   254  00FF67  20                 	db	32
   255  00FF68  20                 	db	32
   256  00FF69  00                 	db	0
   257  00FF6A                     STR_16:
   258  00FF6A  4D                 	db	77	;'M'
   259  00FF6B  69                 	db	105	;'i'
   260  00FF6C  65                 	db	101	;'e'
   261  00FF6D  72                 	db	114	;'r'
   262  00FF6E  63                 	db	99	;'c'
   263  00FF6F  6F                 	db	111	;'o'
   264  00FF70  6C                 	db	108	;'l'
   265  00FF71  65                 	db	101	;'e'
   266  00FF72  73                 	db	115	;'s'
   267  00FF73  20                 	db	32
   268  00FF74  20                 	db	32
   269  00FF75  20                 	db	32
   270  00FF76  20                 	db	32
   271  00FF77  20                 	db	32
   272  00FF78  20                 	db	32
   273  00FF79  20                 	db	32
   274  00FF7A  20                 	db	32
   275  00FF7B  20                 	db	32
   276  00FF7C  20                 	db	32
   277  00FF7D  20                 	db	32
   278  00FF7E  00                 	db	0
   279  00FF7F                     STR_5:
   280  00FF7F  43                 	db	67	;'C'
   281  00FF80  45                 	db	69	;'E'
   282  00FF81  4E                 	db	78	;'N'
   283  00FF82  54                 	db	84	;'T'
   284  00FF83  45                 	db	69	;'E'
   285  00FF84  52                 	db	82	;'R'
   286  00FF85  20                 	db	32
   287  00FF86  20                 	db	32
   288  00FF87  20                 	db	32
   289  00FF88  20                 	db	32
   290  00FF89  20                 	db	32
   291  00FF8A  20                 	db	32
   292  00FF8B  20                 	db	32
   293  00FF8C  20                 	db	32
   294  00FF8D  20                 	db	32
   295  00FF8E  20                 	db	32
   296  00FF8F  20                 	db	32
   297  00FF90  20                 	db	32
   298  00FF91  20                 	db	32
   299  00FF92  00                 	db	0
   300  00FF93                     STR_3:
   301  00FF93  52                 	db	82	;'R'
   302  00FF94  49                 	db	73	;'I'
   303  00FF95  47                 	db	71	;'G'
   304  00FF96  48                 	db	72	;'H'
   305  00FF97  54                 	db	84	;'T'
   306  00FF98  20                 	db	32
   307  00FF99  20                 	db	32
   308  00FF9A  20                 	db	32
   309  00FF9B  20                 	db	32
   310  00FF9C  20                 	db	32
   311  00FF9D  20                 	db	32
   312  00FF9E  20                 	db	32
   313  00FF9F  20                 	db	32
   314  00FFA0  20                 	db	32
   315  00FFA1  20                 	db	32
   316  00FFA2  20                 	db	32
   317  00FFA3  20                 	db	32
   318  00FFA4  20                 	db	32
   319  00FFA5  00                 	db	0
   320  00FFA6                     STR_4:
   321  00FFA6  55                 	db	85	;'U'
   322  00FFA7  50                 	db	80	;'P'
   323  00FFA8  20                 	db	32
   324  00FFA9  20                 	db	32
   325  00FFAA  20                 	db	32
   326  00FFAB  20                 	db	32
   327  00FFAC  20                 	db	32
   328  00FFAD  20                 	db	32
   329  00FFAE  20                 	db	32
   330  00FFAF  20                 	db	32
   331  00FFB0  20                 	db	32
   332  00FFB1  20                 	db	32
   333  00FFB2  20                 	db	32
   334  00FFB3  20                 	db	32
   335  00FFB4  20                 	db	32
   336  00FFB5  20                 	db	32
   337  00FFB6  20                 	db	32
   338  00FFB7  00                 	db	0
   339  00FFB8                     STR_1:
   340  00FFB8  50                 	db	80	;'P'
   341  00FFB9  72                 	db	114	;'r'
   342  00FFBA  6F                 	db	111	;'o'
   343  00FFBB  67                 	db	103	;'g'
   344  00FFBC  72                 	db	114	;'r'
   345  00FFBD  61                 	db	97	;'a'
   346  00FFBE  6D                 	db	109	;'m'
   347  00FFBF  20                 	db	32
   348  00FFC0  64                 	db	100	;'d'
   349  00FFC1  65                 	db	101	;'e'
   350  00FFC2  6C                 	db	108	;'l'
   351  00FFC3  20                 	db	32
   352  00FFC4  72                 	db	114	;'r'
   353  00FFC5  65                 	db	101	;'e'
   354  00FFC6  6C                 	db	108	;'l'
   355  00FFC7  6F                 	db	111	;'o'
   356  00FFC8  6A                 	db	106	;'j'
   357  00FFC9  00                 	db	0
   358  00FFCA                     STR_7:
   359  00FFCA  25                 	db	37
   360  00FFCB  30                 	db	48	;'0'
   361  00FFCC  32                 	db	50	;'2'
   362  00FFCD  75                 	db	117	;'u'
   363  00FFCE  2F                 	db	47
   364  00FFCF  25                 	db	37
   365  00FFD0  30                 	db	48	;'0'
   366  00FFD1  32                 	db	50	;'2'
   367  00FFD2  75                 	db	117	;'u'
   368  00FFD3  2F                 	db	47
   369  00FFD4  25                 	db	37
   370  00FFD5  30                 	db	48	;'0'
   371  00FFD6  32                 	db	50	;'2'
   372  00FFD7  75                 	db	117	;'u'
   373  00FFD8  00                 	db	0
   374  00FFD9                     STR_8:
   375  00FFD9  25                 	db	37
   376  00FFDA  30                 	db	48	;'0'
   377  00FFDB  32                 	db	50	;'2'
   378  00FFDC  75                 	db	117	;'u'
   379  00FFDD  3A                 	db	58	;':'
   380  00FFDE  25                 	db	37
   381  00FFDF  30                 	db	48	;'0'
   382  00FFE0  32                 	db	50	;'2'
   383  00FFE1  75                 	db	117	;'u'
   384  00FFE2  3A                 	db	58	;':'
   385  00FFE3  25                 	db	37
   386  00FFE4  30                 	db	48	;'0'
   387  00FFE5  32                 	db	50	;'2'
   388  00FFE6  75                 	db	117	;'u'
   389  00FFE7  00                 	db	0
   390  00FFE8                     STR_36:
   391  00FFE8  28                 	db	40
   392  00FFE9  6E                 	db	110	;'n'
   393  00FFEA  75                 	db	117	;'u'
   394  00FFEB  6C                 	db	108	;'l'
   395  00FFEC  6C                 	db	108	;'l'
   396  00FFED  29                 	db	41
   397  00FFEE  00                 	db	0
   398  00FFEF                     STR_2:
   399  00FFEF  25                 	db	37
   400  00FFF0  30                 	db	48	;'0'
   401  00FFF1  33                 	db	51	;'3'
   402  00FFF2  75                 	db	117	;'u'
   403  00FFF3  00                 	db	0
   404  00FFF4                     STR_9:
   405  00FFF4  25                 	db	37
   406  00FFF5  73                 	db	115	;'s'
   407  00FFF6  00                 	db	0
   408  0000                     
   409                           ; #config settings
   410  00FFF7  00                 	db	0	; dummy byte at the end
   411  0000                     
   412                           	psect	nvBANK0
   413  0000BE                     __pnvBANK0:
   414                           	opt stack 0
   415  0000BE                     _anio_d:
   416                           	opt stack 0
   417  0000BE                     	ds	1
   418  0000BF                     _anio_u:
   419                           	opt stack 0
   420  0000BF                     	ds	1
   421  0000C0                     _dia_semana:
   422                           	opt stack 0
   423  0000C0                     	ds	1
   424  0000C1                     _fecha_d:
   425                           	opt stack 0
   426  0000C1                     	ds	1
   427  0000C2                     _fecha_u:
   428                           	opt stack 0
   429  0000C2                     	ds	1
   430  0000C3                     _hora_d:
   431                           	opt stack 0
   432  0000C3                     	ds	1
   433  0000C4                     _hora_u:
   434                           	opt stack 0
   435  0000C4                     	ds	1
   436  0000C5                     _mes_d:
   437                           	opt stack 0
   438  0000C5                     	ds	1
   439  0000C6                     _mes_u:
   440                           	opt stack 0
   441  0000C6                     	ds	1
   442  0000C7                     _minuto_d:
   443                           	opt stack 0
   444  0000C7                     	ds	1
   445  0000C8                     _minuto_u:
   446                           	opt stack 0
   447  0000C8                     	ds	1
   448  0000C9                     _segundo_d:
   449                           	opt stack 0
   450  0000C9                     	ds	1
   451  0000CA                     _segundo_u:
   452                           	opt stack 0
   453  0000CA                     	ds	1
   454  0000                     _ANCON0	set	3912
   455  0000                     _ANCON1	set	3913
   456  0000                     _RTCCFG	set	3903
   457  0000                     _RTCCFGbits	set	3903
   458  0000                     _ADCON0	set	4034
   459  0000                     _ADCON0bits	set	4034
   460  0000                     _ADCON1	set	4033
   461  0000                     _ADRESH	set	4036
   462  0000                     _ALRMCFGbits	set	3985
   463  0000                     _EECON2	set	4007
   464  0000                     _INTCONbits	set	4082
   465  0000                     _LATAbits	set	3977
   466  0000                     _LATBbits	set	3978
   467  0000                     _OSCCONbits	set	4051
   468  0000                     _OSCTUNEbits	set	3995
   469  0000                     _PIE3bits	set	4003
   470  0000                     _PORTAbits	set	3968
   471  0000                     _PORTCbits	set	3970
   472  0000                     _RTCVALH	set	3993
   473  0000                     _RTCVALL	set	3992
   474  0000                     _T1CONbits	set	4045
   475  0000                     _TRISA	set	3986
   476  0000                     _TRISB	set	3987
   477  0000                     _TRISBbits	set	3987
   478  0000                     _TRISC	set	3988
   479                           
   480                           	psect	cinit
   481  00E9C0                     __pcinit:
   482                           	opt stack 0
   483  00E9C0                     start_initialization:
   484                           	opt stack 0
   485  00E9C0                     __initialization:
   486                           	opt stack 0
   487                           
   488                           ; Clear objects allocated to BANK0 (60 bytes)
   489  00E9C0  EE00  F060         	lfsr	0,__pbssBANK0
   490  00E9C4  0E3C               	movlw	60
   491  00E9C6                     clear_0:
   492  00E9C6  6AEE               	clrf	postinc0,c
   493  00E9C8  06E8               	decf	wreg,f,c
   494  00E9CA  E1FD               	bnz	clear_0
   495                           
   496                           ; Clear objects allocated to COMRAM (8 bytes)
   497  00E9CC  EE00  F050         	lfsr	0,__pbssCOMRAM
   498  00E9D0  0E08               	movlw	8
   499  00E9D2                     clear_1:
   500  00E9D2  6AEE               	clrf	postinc0,c
   501  00E9D4  06E8               	decf	wreg,f,c
   502  00E9D6  E1FD               	bnz	clear_1
   503                           
   504                           ; Initialize objects allocated to BANK0 (34 bytes)
   505                           ; load TBLPTR registers with __pidataBANK0
   506  00E9D8  0ECE               	movlw	low __pidataBANK0
   507  00E9DA  6EF6               	movwf	tblptrl,c
   508  00E9DC  0EE8               	movlw	high __pidataBANK0
   509  00E9DE  6EF7               	movwf	tblptrh,c
   510  00E9E0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   511  00E9E2  6EF8               	movwf	tblptru,c
   512  00E9E4  EE00  F09C         	lfsr	0,__pdataBANK0
   513  00E9E8  EE10 F022          	lfsr	1,34
   514  00E9EC                     copy_data0:
   515  00E9EC  0009               	tblrd		*+
   516  00E9EE  CFF5 FFEE          	movff	tablat,postinc0
   517  00E9F2  50E5               	movf	postdec1,w,c
   518  00E9F4  50E1               	movf	fsr1l,w,c
   519  00E9F6  E1FA               	bnz	copy_data0
   520                           
   521                           ; Initialize objects allocated to COMRAM (8 bytes)
   522                           ; load TBLPTR registers with __pidataCOMRAM
   523  00E9F8  0E72               	movlw	low __pidataCOMRAM
   524  00E9FA  6EF6               	movwf	tblptrl,c
   525  00E9FC  0EE8               	movlw	high __pidataCOMRAM
   526  00E9FE  6EF7               	movwf	tblptrh,c
   527  00EA00  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   528  00EA02  6EF8               	movwf	tblptru,c
   529  00EA04  EE00  F058         	lfsr	0,__pdataCOMRAM
   530  00EA08  EE10 F008          	lfsr	1,8
   531  00EA0C                     copy_data1:
   532  00EA0C  0009               	tblrd		*+
   533  00EA0E  CFF5 FFEE          	movff	tablat,postinc0
   534  00EA12  50E5               	movf	postdec1,w,c
   535  00EA14  50E1               	movf	fsr1l,w,c
   536  00EA16  E1FA               	bnz	copy_data1
   537  00EA18                     end_of_initialization:
   538                           	opt stack 0
   539  00EA18                     __end_of__initialization:
   540                           	opt stack 0
   541  00EA18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   542  00EA1A  6EF8               	movwf	tblptru,c
   543  00EA1C  0100               	movlb	0
   544  00EA1E  EF41  F07B         	goto	_main	;jump to C main() function
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	bssCOMRAM
   555  000050                     __pbssCOMRAM:
   556                           	opt stack 0
   557  000050                     _RtccDate:
   558                           	opt stack 0
   559  000050                     	ds	4
   560  000054                     _RtccTime:
   561                           	opt stack 0
   562  000054                     	ds	4
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataCOMRAM
   573  000058                     __pdataCOMRAM:
   574                           	opt stack 0
   575  000058                     _anio:
   576                           	opt stack 0
   577  000058                     	ds	2
   578  00005A                     _dia:
   579                           	opt stack 0
   580  00005A                     	ds	2
   581  00005C                     _diasem:
   582                           	opt stack 0
   583  00005C                     	ds	2
   584  00005E                     _mes:
   585                           	opt stack 0
   586  00005E                     	ds	2
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK0
   597  000060                     __pbssBANK0:
   598                           	opt stack 0
   599  000060                     _RtccAlrmTimeDate:
   600                           	opt stack 0
   601  000060                     	ds	8
   602  000068                     _RtccTimeDate:
   603                           	opt stack 0
   604  000068                     	ds	8
   605  000070                     _Rtcc_read_TimeDate:
   606                           	opt stack 0
   607  000070                     	ds	8
   608  000078                     _RtccTimeVal:
   609                           	opt stack 0
   610  000078                     	ds	4
   611  00007C                     _i:
   612                           	opt stack 0
   613  00007C                     	ds	2
   614  00007E                     _segundo:
   615                           	opt stack 0
   616  00007E                     	ds	2
   617  000080                     _CuentamSeg:
   618                           	opt stack 0
   619  000080                     	ds	1
   620  000081                     _Flag_1:
   621                           	opt stack 0
   622  000081                     	ds	1
   623  000082                     _Sw_Center:
   624                           	opt stack 0
   625  000082                     	ds	1
   626  000083                     _Sw_Down:
   627                           	opt stack 0
   628  000083                     	ds	1
   629  000084                     _Sw_Left:
   630                           	opt stack 0
   631  000084                     	ds	1
   632  000085                     _Sw_Right:
   633                           	opt stack 0
   634  000085                     	ds	1
   635  000086                     _Sw_Up:
   636                           	opt stack 0
   637  000086                     	ds	1
   638  000087                     _lectura:
   639                           	opt stack 0
   640  000087                     	ds	1
   641  000088                     _buffer1:
   642                           	opt stack 0
   643  000088                     	ds	20
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	dataBANK0
   654  00009C                     __pdataBANK0:
   655                           	opt stack 0
   656  00009C                     _posicionesLeft:
   657                           	opt stack 0
   658  00009C                     	ds	24
   659  0000B4                     _Grados:
   660                           	opt stack 0
   661  0000B4                     	ds	3
   662  0000B7                     _Temp_prog:
   663                           	opt stack 0
   664  0000B7                     	ds	3
   665  0000BA                     _hora:
   666                           	opt stack 0
   667  0000BA                     	ds	2
   668  0000BC                     _minuto:
   669                           	opt stack 0
   670  0000BC                     	ds	2
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	cstackCOMRAM
   681  000001                     __pcstackCOMRAM:
   682                           	opt stack 0
   683  000001                     ??_Lcd_Cmd:
   684  000001                     ??_Lcd_Chr_CP:
   685  000001                     ??_lee_temperatura:
   686  000001                     ??_isdigit:
   687  000001                     ?___wmul:
   688                           	opt stack 0
   689  000001                     ?___awdiv:
   690                           	opt stack 0
   691  000001                     ?___lwdiv:
   692                           	opt stack 0
   693  000001                     RtccReadDate@pDt:
   694                           	opt stack 0
   695  000001                     RtccReadTime@pTm:
   696                           	opt stack 0
   697  000001                     RtccWriteDate@pDt:
   698                           	opt stack 0
   699  000001                     RtccWriteTime@pTm:
   700                           	opt stack 0
   701  000001                     ___wmul@multiplier:
   702                           	opt stack 0
   703  000001                     ___awdiv@dividend:
   704                           	opt stack 0
   705  000001                     ___lwdiv@dividend:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x0
   709  000001                     	ds	1
   710  000002                     _isdigit$2086:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x1
   714  000002                     	ds	1
   715  000003                     Lcd_Chr_CP@data:
   716                           	opt stack 0
   717  000003                     Lcd_Cmd@data:
   718                           	opt stack 0
   719  000003                     RtccWriteDate@di:
   720                           	opt stack 0
   721  000003                     RtccWriteTime@di:
   722                           	opt stack 0
   723  000003                     isdigit@c:
   724                           	opt stack 0
   725  000003                     ___wmul@multiplicand:
   726                           	opt stack 0
   727  000003                     ___awdiv@divisor:
   728                           	opt stack 0
   729  000003                     ___lwdiv@divisor:
   730                           	opt stack 0
   731  000003                     RtccReadDate@rTD1:
   732                           	opt stack 0
   733  000003                     RtccReadTime@rTD1:
   734                           	opt stack 0
   735                           
   736                           ; 8 bytes @ 0x2
   737  000003                     	ds	1
   738  000004                     ??_Lcd_Init:
   739                           
   740                           ; 0 bytes @ 0x3
   741  000004                     	ds	1
   742  000005                     Lcd_Init@data:
   743                           	opt stack 0
   744  000005                     RtccWriteDate@wasOn:
   745                           	opt stack 0
   746  000005                     RtccWriteTime@wasOn:
   747                           	opt stack 0
   748  000005                     ___awdiv@counter:
   749                           	opt stack 0
   750  000005                     ___wmul@product:
   751                           	opt stack 0
   752  000005                     ___lwdiv@quotient:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x4
   756  000005                     	ds	1
   757  000006                     RtccWriteDate@wasAlrm:
   758                           	opt stack 0
   759  000006                     RtccWriteTime@wasAlrm:
   760                           	opt stack 0
   761  000006                     ___awdiv@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x5
   765  000006                     	ds	1
   766  000007                     RtccWriteTime@wasWrEn:
   767                           	opt stack 0
   768  000007                     ___lwdiv@counter:
   769                           	opt stack 0
   770  000007                     RtccWriteDate@tempYear:
   771                           	opt stack 0
   772  000007                     ___awdiv@quotient:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x6
   776  000007                     	ds	1
   777  000008                     ?___lwmod:
   778                           	opt stack 0
   779  000008                     RtccWriteTime@tempMinSec:
   780                           	opt stack 0
   781  000008                     ___lwmod@dividend:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x7
   785  000008                     	ds	1
   786  000009                     RtccWriteDate@wasWrEn:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x8
   790  000009                     	ds	1
   791  00000A                     RtccWriteDate@tempDayMonth:
   792                           	opt stack 0
   793  00000A                     RtccWriteTime@tempHourWDay:
   794                           	opt stack 0
   795  00000A                     ___lwmod@divisor:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x9
   799  00000A                     	ds	1
   800  00000B                     RtccReadDate@rTD0:
   801                           	opt stack 0
   802  00000B                     RtccReadTime@rTD0:
   803                           	opt stack 0
   804                           
   805                           ; 8 bytes @ 0xA
   806  00000B                     	ds	1
   807  00000C                     ___lwmod@counter:
   808                           	opt stack 0
   809  00000C                     RtccWriteDate@tempHourWDay:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0xB
   813  00000C                     	ds	1
   814  00000D                     ?_sprintf:
   815                           	opt stack 0
   816  00000D                     sprintf@sp:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0xC
   820  00000D                     	ds	1
   821  00000E                     
   822                           ; 0 bytes @ 0xD
   823  00000E                     	ds	1
   824  00000F                     sprintf@f:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0xE
   828  00000F                     	ds	4
   829  000013                     
   830                           ; 0 bytes @ 0x12
   831  000013                     	ds	4
   832  000017                     ??_sprintf:
   833                           
   834                           ; 0 bytes @ 0x16
   835  000017                     	ds	4
   836  00001B                     sprintf@flag:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x1A
   840  00001B                     	ds	1
   841  00001C                     sprintf@val:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x1B
   845  00001C                     	ds	2
   846  00001E                     sprintf@prec:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x1D
   850  00001E                     	ds	1
   851  00001F                     sprintf@ap:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x1E
   855  00001F                     	ds	2
   856  000021                     sprintf@cp:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x20
   860  000021                     	ds	2
   861  000023                     sprintf@len:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x22
   865  000023                     	ds	2
   866  000025                     sprintf@width:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x24
   870  000025                     	ds	2
   871  000027                     sprintf@c:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x26
   875  000027                     	ds	1
   876  000028                     ?_Convert_diasem:
   877                           	opt stack 0
   878  000028                     Convert_diasem@dia:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x27
   882  000028                     	ds	2
   883  00002A                     ??_Convert_diasem:
   884                           
   885                           ; 0 bytes @ 0x29
   886  00002A                     	ds	2
   887  00002C                     Convert_diasem@buffer_dia:
   888                           	opt stack 0
   889                           
   890                           ; 20 bytes @ 0x2B
   891  00002C                     	ds	20
   892  000040                     Lcd_Out@x:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x3F
   896  000040                     	ds	1
   897  000041                     Lcd_Out@buffer:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x40
   901  000041                     	ds	2
   902  000043                     Lcd_Out@y:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x42
   906  000043                     	ds	1
   907  000044                     Lcd_Out@data:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x43
   911  000044                     	ds	1
   912  000045                     ??_ManejaMovimientos:
   913  000045                     V_Principal@cte:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x44
   917  000045                     	ds	2
   918  000047                     ManejaMovimientos@diasem_tr:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x46
   922  000047                     	ds	1
   923  000048                     ManejaMovimientos@dia_tr:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x47
   927  000048                     	ds	1
   928  000049                     ManejaMovimientos@mes_tr:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x48
   932  000049                     	ds	1
   933  00004A                     ManejaMovimientos@anio_tr:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x49
   937  00004A                     	ds	1
   938  00004B                     ManejaMovimientos@hora_tr:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x4A
   942  00004B                     	ds	1
   943  00004C                     ManejaMovimientos@minuto_tr:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x4B
   947  00004C                     	ds	1
   948  00004D                     ManejaMovimientos@posicion:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x4C
   952  00004D                     	ds	2
   953  00004F                     ??_main:
   954                           
   955                           ; 0 bytes @ 0x4E
   956  00004F                     	ds	1
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           postdec1	equ	0xFE5
   964                           fsr1l	equ	0xFE1
   965                           
   966 ;;
   967 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   968 ;;
   969 ;; *************** function _main *****************
   970 ;; Defined at:
   971 ;;		line 130 in file "../main.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;		None               void
   978 ;; Registers used:
   979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   989 ;;Total ram usage:        1 bytes
   990 ;; Hardware stack levels required when called:    4
   991 ;; This function calls:
   992 ;;		_Lcd_Cmd
   993 ;;		_Lcd_Init
   994 ;;		_Lcd_Out
   995 ;;		_ManejaMovimientos
   996 ;;		_V_Principal
   997 ;;		_Write_RTC
   998 ;;		_sprintf
   999 ;; This function is called by:
  1000 ;;		Startup code after reset
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text0
  1005  00F682                     __ptext0:
  1006                           	opt stack 0
  1007  00F682                     _main:
  1008                           	opt stack 27
  1009                           
  1010                           ;main.c: 132: OSCTUNEbits.INTSRC=1;
  1011                           
  1012                           ;incstack = 0
  1013  00F682  8E9B               	bsf	3995,7,c	;volatile
  1014                           
  1015                           ;main.c: 133: OSCTUNEbits.PLLEN=0;
  1016  00F684  9C9B               	bcf	3995,6,c	;volatile
  1017                           
  1018                           ;main.c: 134: OSCCONbits.IRCF0=1;
  1019  00F686  88D3               	bsf	4051,4,c	;volatile
  1020                           
  1021                           ;main.c: 135: OSCCONbits.IRCF1=1;
  1022  00F688  8AD3               	bsf	4051,5,c	;volatile
  1023                           
  1024                           ;main.c: 136: OSCCONbits.IRCF2=1;
  1025  00F68A  8CD3               	bsf	4051,6,c	;volatile
  1026                           
  1027                           ;main.c: 137: OSCCONbits.SCS0=0;
  1028  00F68C  90D3               	bcf	4051,0,c	;volatile
  1029                           
  1030                           ;main.c: 138: OSCCONbits.SCS1=0;
  1031  00F68E  92D3               	bcf	4051,1,c	;volatile
  1032                           
  1033                           ;main.c: 140: RTCCFGbits.RTCEN=1;
  1034  00F690  010F               	movlb	15	; () banked
  1035  00F692  8F3F               	bsf	63,7,b	;volatile
  1036                           
  1037                           ;main.c: 141: RTCCFGbits.RTCWREN=1;
  1038  00F694  010F               	movlb	15	; () banked
  1039  00F696  8B3F               	bsf	63,5,b	;volatile
  1040                           
  1041                           ;main.c: 142: T1CONbits.T1OSCEN=1;
  1042  00F698  86CD               	bsf	4045,3,c	;volatile
  1043                           
  1044                           ; BSR set to: 15
  1045                           ;main.c: 144: TRISA = 0b11111101;
  1046  00F69A  0EFD               	movlw	253
  1047  00F69C  6E92               	movwf	3986,c	;volatile
  1048                           
  1049                           ;main.c: 145: TRISB = 0;
  1050  00F69E  0E00               	movlw	0
  1051  00F6A0  6E93               	movwf	3987,c	;volatile
  1052                           
  1053                           ; BSR set to: 15
  1054                           ;main.c: 146: TRISC = 0b11111111;
  1055  00F6A2  6894               	setf	3988,c	;volatile
  1056                           
  1057                           ; BSR set to: 15
  1058                           ;main.c: 147: ANCON0 = 0b11111111;
  1059  00F6A4  010F               	movlb	15	; () banked
  1060  00F6A6  6948               	setf	72,b	;volatile
  1061                           
  1062                           ;main.c: 148: ANCON1 = 0b11110111;
  1063  00F6A8  0EF7               	movlw	247
  1064  00F6AA  010F               	movlb	15	; () banked
  1065  00F6AC  6F49               	movwf	73,b	;volatile
  1066                           
  1067                           ;main.c: 149: ADCON0 = 0b00101111;
  1068  00F6AE  0E2F               	movlw	47
  1069  00F6B0  6EC2               	movwf	4034,c	;volatile
  1070                           
  1071                           ;main.c: 150: ADCON1 = 0b00111001;
  1072  00F6B2  0E39               	movlw	57
  1073  00F6B4  6EC1               	movwf	4033,c	;volatile
  1074                           
  1075                           ; BSR set to: 15
  1076                           ;main.c: 152: Write_RTC();
  1077  00F6B6  EC7C  F07A         	call	_Write_RTC	;wreg free
  1078                           
  1079                           ;main.c: 153: Lcd_Init();
  1080  00F6BA  EC09  F077         	call	_Lcd_Init	;wreg free
  1081                           
  1082                           ;main.c: 154: Lcd_Cmd(1);
  1083  00F6BE  0E01               	movlw	1
  1084  00F6C0  EC25  F078         	call	_Lcd_Cmd
  1085                           
  1086                           ;main.c: 155: Lcd_Cmd(12);
  1087  00F6C4  0E0C               	movlw	12
  1088  00F6C6  EC25  F078         	call	_Lcd_Cmd
  1089                           
  1090                           ;main.c: 164: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1091  00F6CA  0EFF               	movlw	255
  1092  00F6CC  6E4F               	movwf	??_main& (0+255),c
  1093  00F6CE  0E8A               	movlw	138
  1094  00F6D0                     u2137:
  1095  00F6D0  2EE8               	decfsz	wreg,f,c
  1096  00F6D2  D7FE               	goto	u2137
  1097  00F6D4  2E4F               	decfsz	??_main& (0+255),f,c
  1098  00F6D6  D7FC               	goto	u2137
  1099  00F6D8  D000               	nop2	
  1100  00F6DA  0EFF               	movlw	255
  1101  00F6DC  6E4F               	movwf	??_main& (0+255),c
  1102  00F6DE  0E8A               	movlw	138
  1103  00F6E0                     u2147:
  1104  00F6E0  2EE8               	decfsz	wreg,f,c
  1105  00F6E2  D7FE               	goto	u2147
  1106  00F6E4  2E4F               	decfsz	??_main& (0+255),f,c
  1107  00F6E6  D7FC               	goto	u2147
  1108  00F6E8  D000               	nop2	
  1109  00F6EA  0EFF               	movlw	255
  1110  00F6EC  6E4F               	movwf	??_main& (0+255),c
  1111  00F6EE  0E8A               	movlw	138
  1112  00F6F0                     u2157:
  1113  00F6F0  2EE8               	decfsz	wreg,f,c
  1114  00F6F2  D7FE               	goto	u2157
  1115  00F6F4  2E4F               	decfsz	??_main& (0+255),f,c
  1116  00F6F6  D7FC               	goto	u2157
  1117  00F6F8  D000               	nop2	
  1118  00F6FA  0EFF               	movlw	255
  1119  00F6FC  6E4F               	movwf	??_main& (0+255),c
  1120  00F6FE  0E8A               	movlw	138
  1121  00F700                     u2167:
  1122  00F700  2EE8               	decfsz	wreg,f,c
  1123  00F702  D7FE               	goto	u2167
  1124  00F704  2E4F               	decfsz	??_main& (0+255),f,c
  1125  00F706  D7FC               	goto	u2167
  1126  00F708  D000               	nop2	
  1127  00F70A  0EFF               	movlw	255
  1128  00F70C  6E4F               	movwf	??_main& (0+255),c
  1129  00F70E  0E8A               	movlw	138
  1130  00F710                     u2177:
  1131  00F710  2EE8               	decfsz	wreg,f,c
  1132  00F712  D7FE               	goto	u2177
  1133  00F714  2E4F               	decfsz	??_main& (0+255),f,c
  1134  00F716  D7FC               	goto	u2177
  1135  00F718  D000               	nop2	
  1136  00F71A  0EFF               	movlw	255
  1137  00F71C  6E4F               	movwf	??_main& (0+255),c
  1138  00F71E  0E8A               	movlw	138
  1139  00F720                     u2187:
  1140  00F720  2EE8               	decfsz	wreg,f,c
  1141  00F722  D7FE               	goto	u2187
  1142  00F724  2E4F               	decfsz	??_main& (0+255),f,c
  1143  00F726  D7FC               	goto	u2187
  1144  00F728  D000               	nop2	
  1145  00F72A  0EFF               	movlw	255
  1146  00F72C  6E4F               	movwf	??_main& (0+255),c
  1147  00F72E  0E8A               	movlw	138
  1148  00F730                     u2197:
  1149  00F730  2EE8               	decfsz	wreg,f,c
  1150  00F732  D7FE               	goto	u2197
  1151  00F734  2E4F               	decfsz	??_main& (0+255),f,c
  1152  00F736  D7FC               	goto	u2197
  1153  00F738  D000               	nop2	
  1154  00F73A  0EFF               	movlw	255
  1155  00F73C  6E4F               	movwf	??_main& (0+255),c
  1156  00F73E  0E8A               	movlw	138
  1157  00F740                     u2207:
  1158  00F740  2EE8               	decfsz	wreg,f,c
  1159  00F742  D7FE               	goto	u2207
  1160  00F744  2E4F               	decfsz	??_main& (0+255),f,c
  1161  00F746  D7FC               	goto	u2207
  1162  00F748  D000               	nop2	
  1163                           
  1164                           ;main.c: 165: Lcd_Cmd(1);
  1165  00F74A  0E01               	movlw	1
  1166  00F74C  EC25  F078         	call	_Lcd_Cmd
  1167  00F750  D000               	goto	l2773
  1168  00F752                     l2773:
  1169                           
  1170                           ;main.c: 171: V_Principal();
  1171  00F752  EC24  F076         	call	_V_Principal	;wreg free
  1172                           
  1173                           ;main.c: 172: if(Sw_Left = PORTAbits.RA0 == 0){
  1174  00F756  B080               	btfsc	3968,0,c	;volatile
  1175  00F758  D002               	goto	u1960
  1176  00F75A  0E01               	movlw	1
  1177  00F75C  D001               	goto	u1970
  1178  00F75E                     u1960:
  1179  00F75E  0E00               	movlw	0
  1180  00F760                     u1970:
  1181  00F760  0100               	movlb	0	; () banked
  1182  00F762  6F84               	movwf	_Sw_Left& (0+255),b
  1183  00F764  0100               	movlb	0	; () banked
  1184  00F766  5184               	movf	_Sw_Left& (0+255),w,b
  1185  00F768  B4D8               	btfsc	status,2,c
  1186  00F76A  D00C               	goto	l2781
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;main.c: 176: Lcd_Out(1, 0, "Program del reloj");
  1190  00F76C  0E00               	movlw	0
  1191  00F76E  6E40               	movwf	Lcd_Out@x,c
  1192  00F770  0EB8               	movlw	low STR_1
  1193  00F772  6E41               	movwf	Lcd_Out@buffer,c
  1194  00F774  0EFF               	movlw	high STR_1
  1195  00F776  6E42               	movwf	Lcd_Out@buffer+1,c
  1196  00F778  0E01               	movlw	1
  1197  00F77A  EC8F  F075         	call	_Lcd_Out
  1198                           
  1199                           ;main.c: 180: ManejaMovimientos();
  1200  00F77E  EC3F  F07C         	call	_ManejaMovimientos	;wreg free
  1201  00F782  D000               	goto	l2781
  1202  00F784                     l2781:
  1203                           
  1204                           ;main.c: 184: }
  1205                           ;main.c: 186: if(Sw_Down = PORTCbits.RC4 == 0){
  1206  00F784  B882               	btfsc	3970,4,c	;volatile
  1207  00F786  D002               	goto	u1990
  1208  00F788  0E01               	movlw	1
  1209  00F78A  D001               	goto	u2000
  1210  00F78C                     u1990:
  1211  00F78C  0E00               	movlw	0
  1212  00F78E                     u2000:
  1213  00F78E  0100               	movlb	0	; () banked
  1214  00F790  6F83               	movwf	_Sw_Down& (0+255),b
  1215  00F792  0100               	movlb	0	; () banked
  1216  00F794  5183               	movf	_Sw_Down& (0+255),w,b
  1217  00F796  B4D8               	btfsc	status,2,c
  1218  00F798  D017               	goto	l2787
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;main.c: 188: sprintf(buffer1,"%03u",lectura);
  1222  00F79A  0E88               	movlw	low _buffer1
  1223  00F79C  6E0D               	movwf	sprintf@sp,c
  1224  00F79E  0E00               	movlw	high _buffer1
  1225  00F7A0  6E0E               	movwf	sprintf@sp+1,c
  1226  00F7A2  0EEF               	movlw	low STR_2
  1227  00F7A4  6E0F               	movwf	sprintf@f,c
  1228  00F7A6  0EFF               	movlw	high STR_2
  1229  00F7A8  6E10               	movwf	sprintf@f+1,c
  1230  00F7AA  C087  F011         	movff	_lectura,?_sprintf+4
  1231  00F7AE  6A12               	clrf	?_sprintf+5,c
  1232  00F7B0  ECC9  F07D         	call	_sprintf	;wreg free
  1233                           
  1234                           ;main.c: 190: Lcd_Out(4,0,buffer1);
  1235  00F7B4  0E00               	movlw	0
  1236  00F7B6  6E40               	movwf	Lcd_Out@x,c
  1237  00F7B8  0E88               	movlw	low _buffer1
  1238  00F7BA  6E41               	movwf	Lcd_Out@buffer,c
  1239  00F7BC  0E00               	movlw	high _buffer1
  1240  00F7BE  6E42               	movwf	Lcd_Out@buffer+1,c
  1241  00F7C0  0E04               	movlw	4
  1242  00F7C2  EC8F  F075         	call	_Lcd_Out
  1243  00F7C6  D000               	goto	l2787
  1244  00F7C8                     l2787:
  1245                           
  1246                           ;main.c: 191: }
  1247                           ;main.c: 193: if(Sw_Right = PORTAbits.RA2 == 0){
  1248  00F7C8  B480               	btfsc	3968,2,c	;volatile
  1249  00F7CA  D002               	goto	u2020
  1250  00F7CC  0E01               	movlw	1
  1251  00F7CE  D001               	goto	u2030
  1252  00F7D0                     u2020:
  1253  00F7D0  0E00               	movlw	0
  1254  00F7D2                     u2030:
  1255  00F7D2  0100               	movlb	0	; () banked
  1256  00F7D4  6F85               	movwf	_Sw_Right& (0+255),b
  1257  00F7D6  0100               	movlb	0	; () banked
  1258  00F7D8  5185               	movf	_Sw_Right& (0+255),w,b
  1259  00F7DA  B4D8               	btfsc	status,2,c
  1260  00F7DC  D00A               	goto	l2791
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 194: Lcd_Out(3, 0, "RIGHT             ");
  1264  00F7DE  0E00               	movlw	0
  1265  00F7E0  6E40               	movwf	Lcd_Out@x,c
  1266  00F7E2  0E93               	movlw	low STR_3
  1267  00F7E4  6E41               	movwf	Lcd_Out@buffer,c
  1268  00F7E6  0EFF               	movlw	high STR_3
  1269  00F7E8  6E42               	movwf	Lcd_Out@buffer+1,c
  1270  00F7EA  0E03               	movlw	3
  1271  00F7EC  EC8F  F075         	call	_Lcd_Out
  1272  00F7F0  D000               	goto	l2791
  1273  00F7F2                     l2791:
  1274                           
  1275                           ;main.c: 195: }
  1276                           ;main.c: 197: if(Sw_Up = PORTAbits.RA3 == 0){
  1277  00F7F2  B680               	btfsc	3968,3,c	;volatile
  1278  00F7F4  D002               	goto	u2050
  1279  00F7F6  0E01               	movlw	1
  1280  00F7F8  D001               	goto	u2060
  1281  00F7FA                     u2050:
  1282  00F7FA  0E00               	movlw	0
  1283  00F7FC                     u2060:
  1284  00F7FC  0100               	movlb	0	; () banked
  1285  00F7FE  6F86               	movwf	_Sw_Up& (0+255),b
  1286  00F800  0100               	movlb	0	; () banked
  1287  00F802  5186               	movf	_Sw_Up& (0+255),w,b
  1288  00F804  B4D8               	btfsc	status,2,c
  1289  00F806  D00A               	goto	l2795
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 198: Lcd_Out(4, 0, "UP               ");
  1293  00F808  0E00               	movlw	0
  1294  00F80A  6E40               	movwf	Lcd_Out@x,c
  1295  00F80C  0EA6               	movlw	low STR_4
  1296  00F80E  6E41               	movwf	Lcd_Out@buffer,c
  1297  00F810  0EFF               	movlw	high STR_4
  1298  00F812  6E42               	movwf	Lcd_Out@buffer+1,c
  1299  00F814  0E04               	movlw	4
  1300  00F816  EC8F  F075         	call	_Lcd_Out
  1301  00F81A  D000               	goto	l2795
  1302  00F81C                     l2795:
  1303                           
  1304                           ;main.c: 199: }
  1305                           ;main.c: 201: if(Sw_Center = PORTAbits.RA5 == 0){
  1306  00F81C  BA80               	btfsc	3968,5,c	;volatile
  1307  00F81E  D002               	goto	u2080
  1308  00F820  0E01               	movlw	1
  1309  00F822  D001               	goto	u2090
  1310  00F824                     u2080:
  1311  00F824  0E00               	movlw	0
  1312  00F826                     u2090:
  1313  00F826  0100               	movlb	0	; () banked
  1314  00F828  6F82               	movwf	_Sw_Center& (0+255),b
  1315  00F82A  0100               	movlb	0	; () banked
  1316  00F82C  5182               	movf	_Sw_Center& (0+255),w,b
  1317  00F82E  B4D8               	btfsc	status,2,c
  1318  00F830  D00D               	goto	l2801
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 202: Lcd_Cmd(1);
  1322  00F832  0E01               	movlw	1
  1323  00F834  EC25  F078         	call	_Lcd_Cmd
  1324                           
  1325                           ;main.c: 203: Lcd_Out(2, 0, "CENTER             ");
  1326  00F838  0E00               	movlw	0
  1327  00F83A  6E40               	movwf	Lcd_Out@x,c
  1328  00F83C  0E7F               	movlw	low STR_5
  1329  00F83E  6E41               	movwf	Lcd_Out@buffer,c
  1330  00F840  0EFF               	movlw	high STR_5
  1331  00F842  6E42               	movwf	Lcd_Out@buffer+1,c
  1332  00F844  0E02               	movlw	2
  1333  00F846  EC8F  F075         	call	_Lcd_Out
  1334  00F84A  D000               	goto	l2801
  1335  00F84C                     l2801:
  1336                           
  1337                           ;main.c: 204: }
  1338                           ;main.c: 206: LATBbits.LATB7 = 1;
  1339  00F84C  8E8A               	bsf	3978,7,c	;volatile
  1340                           
  1341                           ;main.c: 207: LATBbits.LATB6 = 1;
  1342  00F84E  8C8A               	bsf	3978,6,c	;volatile
  1343                           
  1344                           ;main.c: 208: LATAbits.LA1 = 1;
  1345  00F850  8289               	bsf	3977,1,c	;volatile
  1346                           
  1347                           ;main.c: 209: _delay((unsigned long)((10)*(8000000/4000.0)));
  1348  00F852  0E1A               	movlw	26
  1349  00F854  6E4F               	movwf	??_main& (0+255),c
  1350  00F856  0EF8               	movlw	248
  1351  00F858                     u2217:
  1352  00F858  2EE8               	decfsz	wreg,f,c
  1353  00F85A  D7FE               	goto	u2217
  1354  00F85C  2E4F               	decfsz	??_main& (0+255),f,c
  1355  00F85E  D7FC               	goto	u2217
  1356  00F860  D000               	nop2	
  1357                           
  1358                           ;main.c: 210: LATBbits.LATB7 = 0;
  1359  00F862  9E8A               	bcf	3978,7,c	;volatile
  1360                           
  1361                           ;main.c: 211: LATBbits.LATB6 = 0;
  1362  00F864  9C8A               	bcf	3978,6,c	;volatile
  1363                           
  1364                           ;main.c: 212: LATAbits.LA1 = 0;
  1365  00F866  9289               	bcf	3977,1,c	;volatile
  1366                           
  1367                           ;main.c: 213: _delay((unsigned long)((10)*(8000000/4000.0)));
  1368  00F868  0E1A               	movlw	26
  1369  00F86A  6E4F               	movwf	??_main& (0+255),c
  1370  00F86C  0EF8               	movlw	248
  1371  00F86E                     u2227:
  1372  00F86E  2EE8               	decfsz	wreg,f,c
  1373  00F870  D7FE               	goto	u2227
  1374  00F872  2E4F               	decfsz	??_main& (0+255),f,c
  1375  00F874  D7FC               	goto	u2227
  1376  00F876  D000               	nop2	
  1377  00F878  D76C               	goto	l2773
  1378  00F87A  EF00  F000         	goto	start
  1379  00F87E                     __end_of_main:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           status	equ	0xFD8
  1390                           
  1391 ;; *************** function _V_Principal *****************
  1392 ;; Defined at:
  1393 ;;		line 221 in file "../main.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  cte             2   68[COMRAM] PTR unsigned char 
  1398 ;;		 -> Convert_diasem@buffer_dia(20), 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;		None               void
  1401 ;; Registers used:
  1402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1411 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1412 ;;Total ram usage:        2 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    3
  1415 ;; This function calls:
  1416 ;;		_Convert_diasem
  1417 ;;		_Lcd_Out
  1418 ;;		_Read_RTC
  1419 ;;		_lee_temperatura
  1420 ;;		_sprintf
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text1
  1427  00EC48                     __ptext1:
  1428                           	opt stack 0
  1429  00EC48                     _V_Principal:
  1430                           	opt stack 27
  1431                           
  1432                           ;main.c: 223: Read_RTC();
  1433                           
  1434                           ;incstack = 0
  1435  00EC48  ECB5  F078         	call	_Read_RTC	;wreg free
  1436                           
  1437                           ;main.c: 224: lee_temperatura();
  1438  00EC4C  EC46  F074         	call	_lee_temperatura	;wreg free
  1439                           
  1440                           ;main.c: 225: Lcd_Out(1, 0, "                    ");
  1441  00EC50  0E00               	movlw	0
  1442  00EC52  6E40               	movwf	Lcd_Out@x,c
  1443  00EC54  0ED7               	movlw	low STR_6
  1444  00EC56  6E41               	movwf	Lcd_Out@buffer,c
  1445  00EC58  0EFE               	movlw	high STR_6
  1446  00EC5A  6E42               	movwf	Lcd_Out@buffer+1,c
  1447  00EC5C  0E01               	movlw	1
  1448  00EC5E  EC8F  F075         	call	_Lcd_Out
  1449                           
  1450                           ;main.c: 226: char* cte = Convert_diasem(diasem);
  1451  00EC62  C05C  F028         	movff	_diasem,Convert_diasem@dia
  1452  00EC66  C05D  F029         	movff	_diasem+1,Convert_diasem@dia+1
  1453  00EC6A  EC96  F077         	call	_Convert_diasem	;wreg free
  1454  00EC6E  C028  F045         	movff	?_Convert_diasem,V_Principal@cte
  1455  00EC72  C029  F046         	movff	?_Convert_diasem+1,V_Principal@cte+1
  1456                           
  1457                           ;main.c: 228: Lcd_Out(2, 0, cte);
  1458  00EC76  0E00               	movlw	0
  1459  00EC78  6E40               	movwf	Lcd_Out@x,c
  1460  00EC7A  C045  F041         	movff	V_Principal@cte,Lcd_Out@buffer
  1461  00EC7E  C046  F042         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  1462  00EC82  0E02               	movlw	2
  1463  00EC84  EC8F  F075         	call	_Lcd_Out
  1464                           
  1465                           ;main.c: 231: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  1466  00EC88  0E88               	movlw	low _buffer1
  1467  00EC8A  6E0D               	movwf	sprintf@sp,c
  1468  00EC8C  0E00               	movlw	high _buffer1
  1469  00EC8E  6E0E               	movwf	sprintf@sp+1,c
  1470  00EC90  0ECA               	movlw	low STR_7
  1471  00EC92  6E0F               	movwf	sprintf@f,c
  1472  00EC94  0EFF               	movlw	high STR_7
  1473  00EC96  6E10               	movwf	sprintf@f+1,c
  1474  00EC98  C05A  F011         	movff	_dia,?_sprintf+4
  1475  00EC9C  C05B  F012         	movff	_dia+1,?_sprintf+5
  1476  00ECA0  C05E  F013         	movff	_mes,?_sprintf+6
  1477  00ECA4  C05F  F014         	movff	_mes+1,?_sprintf+7
  1478  00ECA8  C058  F015         	movff	_anio,?_sprintf+8
  1479  00ECAC  C059  F016         	movff	_anio+1,?_sprintf+9
  1480  00ECB0  ECC9  F07D         	call	_sprintf	;wreg free
  1481                           
  1482                           ;main.c: 232: Lcd_Out(3,0,buffer1);
  1483  00ECB4  0E00               	movlw	0
  1484  00ECB6  6E40               	movwf	Lcd_Out@x,c
  1485  00ECB8  0E88               	movlw	low _buffer1
  1486  00ECBA  6E41               	movwf	Lcd_Out@buffer,c
  1487  00ECBC  0E00               	movlw	high _buffer1
  1488  00ECBE  6E42               	movwf	Lcd_Out@buffer+1,c
  1489  00ECC0  0E03               	movlw	3
  1490  00ECC2  EC8F  F075         	call	_Lcd_Out
  1491                           
  1492                           ;main.c: 233: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  1493  00ECC6  0E88               	movlw	low _buffer1
  1494  00ECC8  6E0D               	movwf	sprintf@sp,c
  1495  00ECCA  0E00               	movlw	high _buffer1
  1496  00ECCC  6E0E               	movwf	sprintf@sp+1,c
  1497  00ECCE  0ED9               	movlw	low STR_8
  1498  00ECD0  6E0F               	movwf	sprintf@f,c
  1499  00ECD2  0EFF               	movlw	high STR_8
  1500  00ECD4  6E10               	movwf	sprintf@f+1,c
  1501  00ECD6  C0BA  F011         	movff	_hora,?_sprintf+4
  1502  00ECDA  C0BB  F012         	movff	_hora+1,?_sprintf+5
  1503  00ECDE  C0BC  F013         	movff	_minuto,?_sprintf+6
  1504  00ECE2  C0BD  F014         	movff	_minuto+1,?_sprintf+7
  1505  00ECE6  C07E  F015         	movff	_segundo,?_sprintf+8
  1506  00ECEA  C07F  F016         	movff	_segundo+1,?_sprintf+9
  1507  00ECEE  ECC9  F07D         	call	_sprintf	;wreg free
  1508                           
  1509                           ;main.c: 234: Lcd_Out(4,0,buffer1);
  1510  00ECF2  0E00               	movlw	0
  1511  00ECF4  6E40               	movwf	Lcd_Out@x,c
  1512  00ECF6  0E88               	movlw	low _buffer1
  1513  00ECF8  6E41               	movwf	Lcd_Out@buffer,c
  1514  00ECFA  0E00               	movlw	high _buffer1
  1515  00ECFC  6E42               	movwf	Lcd_Out@buffer+1,c
  1516  00ECFE  0E04               	movlw	4
  1517  00ED00  EC8F  F075         	call	_Lcd_Out
  1518  00ED04  0012               	return		;funcret
  1519  00ED06                     __end_of_V_Principal:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1l	equ	0xFE1
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _lee_temperatura *****************
  1532 ;; Defined at:
  1533 ;;		line 325 in file "../main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1551 ;;Total ram usage:        1 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_V_Principal
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text2
  1561  00E88C                     __ptext2:
  1562                           	opt stack 0
  1563  00E88C                     _lee_temperatura:
  1564                           	opt stack 29
  1565                           
  1566                           ;main.c: 327: ADCON0bits.ADON = 1;
  1567                           
  1568                           ;incstack = 0
  1569  00E88C  80C2               	bsf	4034,0,c	;volatile
  1570                           
  1571                           ;main.c: 328: ADCON0bits.GO = 1;
  1572  00E88E  82C2               	bsf	4034,1,c	;volatile
  1573                           
  1574                           ;main.c: 329: while(ADCON0bits.GO);
  1575  00E890  D000               	goto	l209
  1576  00E892                     l209:
  1577  00E892  B2C2               	btfsc	4034,1,c	;volatile
  1578  00E894  D7FE               	goto	l209
  1579                           
  1580                           ;main.c: 330: _delay((unsigned long)((1)*(8000000/4000.0)));
  1581  00E896  0E03               	movlw	3
  1582  00E898  6E01               	movwf	??_lee_temperatura& (0+255),c
  1583  00E89A  0E98               	movlw	152
  1584  00E89C                     u2237:
  1585  00E89C  2EE8               	decfsz	wreg,f,c
  1586  00E89E  D7FE               	goto	u2237
  1587  00E8A0  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  1588  00E8A2  D7FC               	goto	u2237
  1589                           
  1590                           ;main.c: 331: lectura = ADRESH;
  1591  00E8A4  CFC4 F087          	movff	4036,_lectura	;volatile
  1592                           
  1593                           ;main.c: 332: ADCON0bits.ADON = 0;
  1594  00E8A8  90C2               	bcf	4034,0,c	;volatile
  1595  00E8AA  0012               	return		;funcret
  1596  00E8AC                     __end_of_lee_temperatura:
  1597                           	opt stack 0
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1l	equ	0xFE1
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _Read_RTC *****************
  1609 ;; Defined at:
  1610 ;;		line 292 in file "../main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;		None               void
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    1
  1631 ;; This function calls:
  1632 ;;		_RtccReadDate
  1633 ;;		_RtccReadTime
  1634 ;; This function is called by:
  1635 ;;		_V_Principal
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text3
  1640  00F16A                     __ptext3:
  1641                           	opt stack 0
  1642  00F16A                     _Read_RTC:
  1643                           	opt stack 28
  1644                           
  1645                           ;main.c: 295: RtccReadTime(&RtccTime);
  1646                           
  1647                           ;incstack = 0
  1648  00F16A  0E54               	movlw	low _RtccTime
  1649  00F16C  6E01               	movwf	RtccReadTime@pTm,c
  1650  00F16E  0E00               	movlw	high _RtccTime
  1651  00F170  6E02               	movwf	RtccReadTime@pTm+1,c
  1652  00F172  EC11  F075         	call	_RtccReadTime	;wreg free
  1653                           
  1654                           ;main.c: 296: segundo_u=(RtccTime.f.sec & 0x0F);
  1655  00F176  5055               	movf	_RtccTime+1,w,c
  1656  00F178  0B0F               	andlw	15
  1657  00F17A  0100               	movlb	0	; () banked
  1658  00F17C  6FCA               	movwf	_segundo_u& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 297: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  1662  00F17E  3855               	swapf	_RtccTime+1,w,c
  1663  00F180  0B0F               	andlw	15
  1664  00F182  0B0F               	andlw	15
  1665  00F184  0100               	movlb	0	; () banked
  1666  00F186  6FC9               	movwf	_segundo_d& (0+255),b
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 298: minuto_u=(RtccTime.f.min & 0x0F);
  1670  00F188  5056               	movf	_RtccTime+2,w,c
  1671  00F18A  0B0F               	andlw	15
  1672  00F18C  0100               	movlb	0	; () banked
  1673  00F18E  6FC8               	movwf	_minuto_u& (0+255),b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 299: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  1677  00F190  3856               	swapf	_RtccTime+2,w,c
  1678  00F192  0B0F               	andlw	15
  1679  00F194  0B0F               	andlw	15
  1680  00F196  0100               	movlb	0	; () banked
  1681  00F198  6FC7               	movwf	_minuto_d& (0+255),b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 300: hora_u=(RtccTime.f.hour & 0x0F);
  1685  00F19A  5057               	movf	_RtccTime+3,w,c
  1686  00F19C  0B0F               	andlw	15
  1687  00F19E  0100               	movlb	0	; () banked
  1688  00F1A0  6FC4               	movwf	_hora_u& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 301: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  1692  00F1A2  3857               	swapf	_RtccTime+3,w,c
  1693  00F1A4  0B0F               	andlw	15
  1694  00F1A6  0B0F               	andlw	15
  1695  00F1A8  0100               	movlb	0	; () banked
  1696  00F1AA  6FC3               	movwf	_hora_d& (0+255),b
  1697                           
  1698                           ;main.c: 302: RtccReadDate(&RtccDate);
  1699  00F1AC  0E50               	movlw	low _RtccDate
  1700  00F1AE  6E01               	movwf	RtccReadDate@pDt,c
  1701  00F1B0  0E00               	movlw	high _RtccDate
  1702  00F1B2  6E02               	movwf	RtccReadDate@pDt+1,c
  1703  00F1B4  EC48  F075         	call	_RtccReadDate	;wreg free
  1704                           
  1705                           ;main.c: 303: fecha_u=(RtccDate.f.mday & 0x0F);
  1706  00F1B8  5051               	movf	_RtccDate+1,w,c
  1707  00F1BA  0B0F               	andlw	15
  1708  00F1BC  0100               	movlb	0	; () banked
  1709  00F1BE  6FC2               	movwf	_fecha_u& (0+255),b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 304: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  1713  00F1C0  3851               	swapf	_RtccDate+1,w,c
  1714  00F1C2  0B0F               	andlw	15
  1715  00F1C4  0B0F               	andlw	15
  1716  00F1C6  0100               	movlb	0	; () banked
  1717  00F1C8  6FC1               	movwf	_fecha_d& (0+255),b
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 305: mes_u=(RtccDate.f.mon & 0x0F);
  1721  00F1CA  5052               	movf	_RtccDate+2,w,c
  1722  00F1CC  0B0F               	andlw	15
  1723  00F1CE  0100               	movlb	0	; () banked
  1724  00F1D0  6FC6               	movwf	_mes_u& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;main.c: 306: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  1728  00F1D2  3852               	swapf	_RtccDate+2,w,c
  1729  00F1D4  0B0F               	andlw	15
  1730  00F1D6  0B0F               	andlw	15
  1731  00F1D8  0100               	movlb	0	; () banked
  1732  00F1DA  6FC5               	movwf	_mes_d& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 307: dia_semana=RtccDate.f.wday;
  1736  00F1DC  C050  F0C0         	movff	_RtccDate,_dia_semana
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 308: anio_u=(RtccDate.f.year & 0x0F);
  1740  00F1E0  5053               	movf	_RtccDate+3,w,c
  1741  00F1E2  0B0F               	andlw	15
  1742  00F1E4  0100               	movlb	0	; () banked
  1743  00F1E6  6FBF               	movwf	_anio_u& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 309: anio_d=((RtccDate.f.year & 0xF0)>>4);
  1747  00F1E8  3853               	swapf	_RtccDate+3,w,c
  1748  00F1EA  0B0F               	andlw	15
  1749  00F1EC  0B0F               	andlw	15
  1750  00F1EE  0100               	movlb	0	; () banked
  1751  00F1F0  6FBE               	movwf	_anio_d& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 310: segundo=segundo_d*10+segundo_u;
  1755  00F1F2  0100               	movlb	0	; () banked
  1756  00F1F4  51C9               	movf	_segundo_d& (0+255),w,b
  1757  00F1F6  0D0A               	mullw	10
  1758  00F1F8  0100               	movlb	0	; () banked
  1759  00F1FA  51CA               	movf	_segundo_u& (0+255),w,b
  1760  00F1FC  24F3               	addwf	prodl,w,c
  1761  00F1FE  0100               	movlb	0	; () banked
  1762  00F200  6F7E               	movwf	_segundo& (0+255),b
  1763  00F202  0100               	movlb	0	; () banked
  1764  00F204  0E00               	movlw	0
  1765  00F206  20F4               	addwfc	prodh,w,c
  1766  00F208  0100               	movlb	0	; () banked
  1767  00F20A  6F7F               	movwf	(_segundo+1)& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 311: minuto=minuto_d*10+minuto_u;
  1771  00F20C  0100               	movlb	0	; () banked
  1772  00F20E  51C7               	movf	_minuto_d& (0+255),w,b
  1773  00F210  0D0A               	mullw	10
  1774  00F212  0100               	movlb	0	; () banked
  1775  00F214  51C8               	movf	_minuto_u& (0+255),w,b
  1776  00F216  24F3               	addwf	prodl,w,c
  1777  00F218  0100               	movlb	0	; () banked
  1778  00F21A  6FBC               	movwf	_minuto& (0+255),b
  1779  00F21C  0100               	movlb	0	; () banked
  1780  00F21E  0E00               	movlw	0
  1781  00F220  20F4               	addwfc	prodh,w,c
  1782  00F222  0100               	movlb	0	; () banked
  1783  00F224  6FBD               	movwf	(_minuto+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 312: hora=hora_d*10+hora_u;
  1787  00F226  0100               	movlb	0	; () banked
  1788  00F228  51C3               	movf	_hora_d& (0+255),w,b
  1789  00F22A  0D0A               	mullw	10
  1790  00F22C  0100               	movlb	0	; () banked
  1791  00F22E  51C4               	movf	_hora_u& (0+255),w,b
  1792  00F230  24F3               	addwf	prodl,w,c
  1793  00F232  0100               	movlb	0	; () banked
  1794  00F234  6FBA               	movwf	_hora& (0+255),b
  1795  00F236  0100               	movlb	0	; () banked
  1796  00F238  0E00               	movlw	0
  1797  00F23A  20F4               	addwfc	prodh,w,c
  1798  00F23C  0100               	movlb	0	; () banked
  1799  00F23E  6FBB               	movwf	(_hora+1)& (0+255),b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 313: dia=fecha_d*10+fecha_u;
  1803  00F240  0100               	movlb	0	; () banked
  1804  00F242  51C1               	movf	_fecha_d& (0+255),w,b
  1805  00F244  0D0A               	mullw	10
  1806  00F246  0100               	movlb	0	; () banked
  1807  00F248  51C2               	movf	_fecha_u& (0+255),w,b
  1808  00F24A  24F3               	addwf	prodl,w,c
  1809  00F24C  6E5A               	movwf	_dia,c
  1810  00F24E  0100               	movlb	0	; () banked
  1811  00F250  0E00               	movlw	0
  1812  00F252  20F4               	addwfc	prodh,w,c
  1813  00F254  6E5B               	movwf	_dia+1,c
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 314: diasem=dia_semana;
  1817  00F256  C0C0  F05C         	movff	_dia_semana,_diasem
  1818  00F25A  6A5D               	clrf	_diasem+1,c
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 315: mes=mes_d*10+mes_u;
  1822  00F25C  0100               	movlb	0	; () banked
  1823  00F25E  51C5               	movf	_mes_d& (0+255),w,b
  1824  00F260  0D0A               	mullw	10
  1825  00F262  0100               	movlb	0	; () banked
  1826  00F264  51C6               	movf	_mes_u& (0+255),w,b
  1827  00F266  24F3               	addwf	prodl,w,c
  1828  00F268  6E5E               	movwf	_mes,c
  1829  00F26A  0100               	movlb	0	; () banked
  1830  00F26C  0E00               	movlw	0
  1831  00F26E  20F4               	addwfc	prodh,w,c
  1832  00F270  6E5F               	movwf	_mes+1,c
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 316: anio=anio_d*10+anio_u;
  1836  00F272  0100               	movlb	0	; () banked
  1837  00F274  51BE               	movf	_anio_d& (0+255),w,b
  1838  00F276  0D0A               	mullw	10
  1839  00F278  0100               	movlb	0	; () banked
  1840  00F27A  51BF               	movf	_anio_u& (0+255),w,b
  1841  00F27C  24F3               	addwf	prodl,w,c
  1842  00F27E  6E58               	movwf	_anio,c
  1843  00F280  0100               	movlb	0	; () banked
  1844  00F282  0E00               	movlw	0
  1845  00F284  20F4               	addwfc	prodh,w,c
  1846  00F286  6E59               	movwf	_anio+1,c
  1847                           
  1848                           ; BSR set to: 0
  1849  00F288  0012               	return		;funcret
  1850  00F28A                     __end_of_Read_RTC:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _RtccReadTime *****************
  1865 ;; Defined at:
  1866 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  pTm             2    0[COMRAM] PTR struct .
  1869 ;;		 -> RtccTime(4), 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  rTD0            8   10[COMRAM] struct .
  1872 ;;  rTD1            8    2[COMRAM] struct .
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1885 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1886 ;;Total ram usage:       18 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_Read_RTC
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text4
  1896  00EA22                     __ptext4:
  1897                           	opt stack 0
  1898  00EA22                     _RtccReadTime:
  1899                           	opt stack 28
  1900  00EA22  0EFC               	movlw	252
  1901  00EA24  010F               	movlb	15	; () banked
  1902  00EA26  173F               	andwf	63,f,b	;volatile
  1903                           
  1904                           ; BSR set to: 15
  1905  00EA28  010F               	movlb	15	; () banked
  1906  00EA2A  813F               	bsf	63,0,b	;volatile
  1907                           
  1908                           ; BSR set to: 15
  1909  00EA2C  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  1910                           
  1911                           ; BSR set to: 15
  1912  00EA30  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  1913                           
  1914                           ; BSR set to: 15
  1915  00EA34  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  1916                           
  1917                           ; BSR set to: 15
  1918  00EA38  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  1919                           
  1920                           ; BSR set to: 15
  1921  00EA3C  0EFC               	movlw	252
  1922  00EA3E  010F               	movlb	15	; () banked
  1923  00EA40  173F               	andwf	63,f,b	;volatile
  1924  00EA42  010F               	movlb	15	; () banked
  1925  00EA44  813F               	bsf	63,0,b	;volatile
  1926                           
  1927                           ; BSR set to: 15
  1928  00EA46  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  1929                           
  1930                           ; BSR set to: 15
  1931  00EA4A  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  1932                           
  1933                           ; BSR set to: 15
  1934  00EA4E  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  1935                           
  1936                           ; BSR set to: 15
  1937  00EA52  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  1938                           
  1939                           ; BSR set to: 15
  1940  00EA56  5009               	movf	RtccReadTime@rTD1+6,w,c
  1941  00EA58  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  1942  00EA5A  A4D8               	btfss	status,2,c
  1943  00EA5C  D7E2               	goto	l2293
  1944                           
  1945                           ; BSR set to: 15
  1946                           
  1947                           ; BSR set to: 15
  1948  00EA5E  EE20 F003          	lfsr	2,3
  1949  00EA62  5001               	movf	RtccReadTime@pTm,w,c
  1950  00EA64  26D9               	addwf	fsr2l,f,c
  1951  00EA66  5002               	movf	RtccReadTime@pTm+1,w,c
  1952  00EA68  22DA               	addwfc	fsr2h,f,c
  1953  00EA6A  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  1954  00EA6E  EE20 F002          	lfsr	2,2
  1955  00EA72  5001               	movf	RtccReadTime@pTm,w,c
  1956  00EA74  26D9               	addwf	fsr2l,f,c
  1957  00EA76  5002               	movf	RtccReadTime@pTm+1,w,c
  1958  00EA78  22DA               	addwfc	fsr2h,f,c
  1959  00EA7A  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  1960  00EA7E  EE20 F001          	lfsr	2,1
  1961  00EA82  5001               	movf	RtccReadTime@pTm,w,c
  1962  00EA84  26D9               	addwf	fsr2l,f,c
  1963  00EA86  5002               	movf	RtccReadTime@pTm+1,w,c
  1964  00EA88  22DA               	addwfc	fsr2h,f,c
  1965  00EA8A  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  1966                           
  1967                           ; BSR set to: 15
  1968  00EA8E  0012               	return		;funcret
  1969  00EA90                     __end_of_RtccReadTime:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodh	equ	0xFF4
  1976                           prodl	equ	0xFF3
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           indf2	equ	0xFDF
  1982                           fsr2h	equ	0xFDA
  1983                           fsr2l	equ	0xFD9
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _RtccReadDate *****************
  1987 ;; Defined at:
  1988 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  pDt             2    0[COMRAM] PTR struct .
  1991 ;;		 -> RtccDate(4), 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  rTD0            8   10[COMRAM] struct .
  1994 ;;  rTD1            8    2[COMRAM] struct .
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2007 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2008 ;;Total ram usage:       18 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_Read_RTC
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text5
  2018  00EA90                     __ptext5:
  2019                           	opt stack 0
  2020  00EA90                     _RtccReadDate:
  2021                           	opt stack 28
  2022  00EA90  0EFC               	movlw	252
  2023  00EA92  010F               	movlb	15	; () banked
  2024  00EA94  173F               	andwf	63,f,b	;volatile
  2025  00EA96  0E03               	movlw	3
  2026  00EA98  010F               	movlb	15	; () banked
  2027  00EA9A  133F               	iorwf	63,f,b	;volatile
  2028                           
  2029                           ; BSR set to: 15
  2030  00EA9C  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  2031                           
  2032                           ; BSR set to: 15
  2033  00EAA0  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  2034                           
  2035                           ; BSR set to: 15
  2036  00EAA4  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  2037                           
  2038                           ; BSR set to: 15
  2039  00EAA8  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  2040                           
  2041                           ; BSR set to: 15
  2042  00EAAC  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  2043                           
  2044                           ; BSR set to: 15
  2045  00EAB0  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  2046  00EAB4  0EFC               	movlw	252
  2047  00EAB6  010F               	movlb	15	; () banked
  2048  00EAB8  173F               	andwf	63,f,b	;volatile
  2049  00EABA  0E03               	movlw	3
  2050  00EABC  010F               	movlb	15	; () banked
  2051  00EABE  133F               	iorwf	63,f,b	;volatile
  2052                           
  2053                           ; BSR set to: 15
  2054  00EAC0  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  2055                           
  2056                           ; BSR set to: 15
  2057  00EAC4  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  2058                           
  2059                           ; BSR set to: 15
  2060  00EAC8  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  2061                           
  2062                           ; BSR set to: 15
  2063  00EACC  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  2064                           
  2065                           ; BSR set to: 15
  2066  00EAD0  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  2067                           
  2068                           ; BSR set to: 15
  2069  00EAD4  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  2070  00EAD8  5005               	movf	RtccReadDate@rTD1+2,w,c
  2071  00EADA  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  2072  00EADC  A4D8               	btfss	status,2,c
  2073  00EADE  D7D8               	goto	l2319
  2074                           
  2075                           ; BSR set to: 15
  2076                           
  2077                           ; BSR set to: 15
  2078  00EAE0  EE20 F001          	lfsr	2,1
  2079  00EAE4  5001               	movf	RtccReadDate@pDt,w,c
  2080  00EAE6  26D9               	addwf	fsr2l,f,c
  2081  00EAE8  5002               	movf	RtccReadDate@pDt+1,w,c
  2082  00EAEA  22DA               	addwfc	fsr2h,f,c
  2083  00EAEC  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  2084  00EAF0  EE20 F002          	lfsr	2,2
  2085  00EAF4  5001               	movf	RtccReadDate@pDt,w,c
  2086  00EAF6  26D9               	addwf	fsr2l,f,c
  2087  00EAF8  5002               	movf	RtccReadDate@pDt+1,w,c
  2088  00EAFA  22DA               	addwfc	fsr2h,f,c
  2089  00EAFC  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  2090                           
  2091                           ; BSR set to: 15
  2092  00EB00  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  2093  00EB04  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  2094  00EB08  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  2095                           
  2096                           ; BSR set to: 15
  2097  00EB0C  EE20 F003          	lfsr	2,3
  2098  00EB10  5001               	movf	RtccReadDate@pDt,w,c
  2099  00EB12  26D9               	addwf	fsr2l,f,c
  2100  00EB14  5002               	movf	RtccReadDate@pDt+1,w,c
  2101  00EB16  22DA               	addwfc	fsr2h,f,c
  2102  00EB18  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  2103                           
  2104                           ; BSR set to: 15
  2105  00EB1C  0012               	return		;funcret
  2106  00EB1E                     __end_of_RtccReadDate:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _ManejaMovimientos *****************
  2124 ;; Defined at:
  2125 ;;		line 379 in file "../main.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  posicion        2   76[COMRAM] int 
  2130 ;;  minuto_tr       1   75[COMRAM] unsigned char 
  2131 ;;  hora_tr         1   74[COMRAM] unsigned char 
  2132 ;;  anio_tr         1   73[COMRAM] unsigned char 
  2133 ;;  mes_tr          1   72[COMRAM] unsigned char 
  2134 ;;  dia_tr          1   71[COMRAM] unsigned char 
  2135 ;;  diasem_tr       1   70[COMRAM] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;		None               void
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2146 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2148 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2149 ;;Total ram usage:       10 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    3
  2152 ;; This function calls:
  2153 ;;		_Convert_diasem
  2154 ;;		_Lcd_Cmd
  2155 ;;		_Lcd_Out
  2156 ;;		_Write_RTC
  2157 ;;		_sprintf
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text6
  2164  00F87E                     __ptext6:
  2165                           	opt stack 0
  2166  00F87E                     _ManejaMovimientos:
  2167                           	opt stack 27
  2168                           
  2169                           ;main.c: 381: char diasem_tr = diasem;
  2170                           
  2171                           ; BSR set to: 15
  2172                           ;incstack = 0
  2173  00F87E  C05C  F047         	movff	_diasem,ManejaMovimientos@diasem_tr
  2174                           
  2175                           ;main.c: 382: char dia_tr = dia;
  2176  00F882  C05A  F048         	movff	_dia,ManejaMovimientos@dia_tr
  2177                           
  2178                           ;main.c: 383: char mes_tr = mes;
  2179  00F886  C05E  F049         	movff	_mes,ManejaMovimientos@mes_tr
  2180                           
  2181                           ;main.c: 384: char anio_tr = anio;
  2182  00F88A  C058  F04A         	movff	_anio,ManejaMovimientos@anio_tr
  2183                           
  2184                           ;main.c: 385: char hora_tr = hora;
  2185  00F88E  C0BA  F04B         	movff	_hora,ManejaMovimientos@hora_tr
  2186                           
  2187                           ;main.c: 386: char minuto_tr = minuto;
  2188  00F892  C0BC  F04C         	movff	_minuto,ManejaMovimientos@minuto_tr
  2189                           
  2190                           ;main.c: 387: int posicion = 0;
  2191  00F896  0E00               	movlw	0
  2192  00F898  6E4E               	movwf	ManejaMovimientos@posicion+1,c
  2193  00F89A  0E00               	movlw	0
  2194  00F89C  6E4D               	movwf	ManejaMovimientos@posicion,c
  2195                           
  2196                           ;main.c: 388: Lcd_Cmd(14);
  2197  00F89E  0E0E               	movlw	14
  2198  00F8A0  EC25  F078         	call	_Lcd_Cmd
  2199                           
  2200                           ;main.c: 389: Lcd_Out(2, 0, "" );
  2201  00F8A4  0E00               	movlw	0
  2202  00F8A6  6E40               	movwf	Lcd_Out@x,c
  2203  00F8A8  0EEB               	movlw	low (STR_6+20)
  2204  00F8AA  6E41               	movwf	Lcd_Out@buffer,c
  2205  00F8AC  0EFE               	movlw	high (STR_6+20)
  2206  00F8AE  6E42               	movwf	Lcd_Out@buffer+1,c
  2207  00F8B0  0E02               	movlw	2
  2208  00F8B2  EC8F  F075         	call	_Lcd_Out
  2209                           
  2210                           ;main.c: 392: for(i=0 ;i<30;i++){
  2211  00F8B6  0E00               	movlw	0
  2212  00F8B8  0100               	movlb	0	; () banked
  2213  00F8BA  6F7D               	movwf	(_i+1)& (0+255),b
  2214  00F8BC  0E00               	movlw	0
  2215  00F8BE  6F7C               	movwf	_i& (0+255),b
  2216                           
  2217                           ; BSR set to: 0
  2218  00F8C0  0100               	movlb	0	; () banked
  2219  00F8C2  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2220  00F8C4  D00A               	goto	l2633
  2221  00F8C6  0100               	movlb	0	; () banked
  2222  00F8C8  517D               	movf	(_i+1)& (0+255),w,b
  2223  00F8CA  E106               	bnz	u1780
  2224  00F8CC  0E1E               	movlw	30
  2225  00F8CE  0100               	movlb	0	; () banked
  2226  00F8D0  5D7C               	subwf	_i& (0+255),w,b
  2227  00F8D2  B0D8               	btfsc	status,0,c
  2228  00F8D4  D15A               	goto	l2715
  2229  00F8D6  D001               	goto	l2633
  2230  00F8D8                     u1780:
  2231                           
  2232                           ; BSR set to: 0
  2233  00F8D8  D158               	goto	l2715
  2234  00F8DA                     l2633:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;main.c: 394: _delay((unsigned long)((90)*(8000000/4000.0)));
  2238  00F8DA  0EEA               	movlw	234
  2239  00F8DC  6E45               	movwf	??_ManejaMovimientos& (0+255),c
  2240  00F8DE  0EC3               	movlw	195
  2241  00F8E0                     u2247:
  2242  00F8E0  2EE8               	decfsz	wreg,f,c
  2243  00F8E2  D7FE               	goto	u2247
  2244  00F8E4  2E45               	decfsz	??_ManejaMovimientos& (0+255),f,c
  2245  00F8E6  D7FC               	goto	u2247
  2246  00F8E8  F000               	nop	
  2247                           
  2248                           ;main.c: 396: if(Sw_Up = PORTAbits.RA3 == 0){
  2249  00F8EA  B680               	btfsc	3968,3,c	;volatile
  2250  00F8EC  D002               	goto	u1790
  2251  00F8EE  0E01               	movlw	1
  2252  00F8F0  D001               	goto	u1800
  2253  00F8F2                     u1790:
  2254  00F8F2  0E00               	movlw	0
  2255  00F8F4                     u1800:
  2256  00F8F4  0100               	movlb	0	; () banked
  2257  00F8F6  6F86               	movwf	_Sw_Up& (0+255),b
  2258  00F8F8  0100               	movlb	0	; () banked
  2259  00F8FA  5186               	movf	_Sw_Up& (0+255),w,b
  2260  00F8FC  B4D8               	btfsc	status,2,c
  2261  00F8FE  D0E0               	goto	l2697
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 398: i=0;
  2265  00F900  0E00               	movlw	0
  2266  00F902  0100               	movlb	0	; () banked
  2267  00F904  6F7D               	movwf	(_i+1)& (0+255),b
  2268  00F906  0E00               	movlw	0
  2269  00F908  6F7C               	movwf	_i& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 399: if(posicion == 0){
  2273  00F90A  504D               	movf	ManejaMovimientos@posicion,w,c
  2274  00F90C  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2275  00F90E  A4D8               	btfss	status,2,c
  2276  00F910  D019               	goto	l2647
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 400: diasem_tr++;
  2280  00F912  2A47               	incf	ManejaMovimientos@diasem_tr,f,c
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;main.c: 401: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2284  00F914  0E00               	movlw	0
  2285  00F916  6E40               	movwf	Lcd_Out@x,c
  2286  00F918  C047  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2287  00F91C  6A29               	clrf	Convert_diasem@dia+1,c
  2288  00F91E  EC96  F077         	call	_Convert_diasem	;wreg free
  2289  00F922  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2290  00F926  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2291  00F92A  0E02               	movlw	2
  2292  00F92C  EC8F  F075         	call	_Lcd_Out
  2293                           
  2294                           ;main.c: 402: Lcd_Out(2, 0, "" );
  2295  00F930  0E00               	movlw	0
  2296  00F932  6E40               	movwf	Lcd_Out@x,c
  2297  00F934  0EEB               	movlw	low (STR_6+20)
  2298  00F936  6E41               	movwf	Lcd_Out@buffer,c
  2299  00F938  0EFE               	movlw	high (STR_6+20)
  2300  00F93A  6E42               	movwf	Lcd_Out@buffer+1,c
  2301  00F93C  0E02               	movlw	2
  2302  00F93E  EC8F  F075         	call	_Lcd_Out
  2303                           
  2304                           ;main.c: 403: }else if(posicion == 2){
  2305  00F942  D0BE               	goto	l2697
  2306  00F944                     l2647:
  2307  00F944  0E02               	movlw	2
  2308  00F946  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2309  00F948  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2310  00F94A  A4D8               	btfss	status,2,c
  2311  00F94C  D021               	goto	l2657
  2312                           
  2313                           ;main.c: 404: dia_tr++;
  2314  00F94E  2A48               	incf	ManejaMovimientos@dia_tr,f,c
  2315                           
  2316                           ;main.c: 405: sprintf(buffer1,"%02u",dia_tr);
  2317  00F950  0E88               	movlw	low _buffer1
  2318  00F952  6E0D               	movwf	sprintf@sp,c
  2319  00F954  0E00               	movlw	high _buffer1
  2320  00F956  6E0E               	movwf	sprintf@sp+1,c
  2321  00F958  0ED4               	movlw	low (STR_7+10)
  2322  00F95A  6E0F               	movwf	sprintf@f,c
  2323  00F95C  0EFF               	movlw	high (STR_7+10)
  2324  00F95E  6E10               	movwf	sprintf@f+1,c
  2325  00F960  C048  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2326  00F964  6A12               	clrf	?_sprintf+5,c
  2327  00F966  ECC9  F07D         	call	_sprintf	;wreg free
  2328                           
  2329                           ;main.c: 406: Lcd_Out(3, 0, buffer1);
  2330  00F96A  0E00               	movlw	0
  2331  00F96C  6E40               	movwf	Lcd_Out@x,c
  2332  00F96E  0E88               	movlw	low _buffer1
  2333  00F970  6E41               	movwf	Lcd_Out@buffer,c
  2334  00F972  0E00               	movlw	high _buffer1
  2335  00F974  6E42               	movwf	Lcd_Out@buffer+1,c
  2336  00F976  0E03               	movlw	3
  2337  00F978  EC8F  F075         	call	_Lcd_Out
  2338                           
  2339                           ;main.c: 407: Lcd_Out(3, 0, "" );
  2340  00F97C  0E00               	movlw	0
  2341  00F97E  6E40               	movwf	Lcd_Out@x,c
  2342  00F980  0EEB               	movlw	low (STR_6+20)
  2343  00F982  6E41               	movwf	Lcd_Out@buffer,c
  2344  00F984  0EFE               	movlw	high (STR_6+20)
  2345  00F986  6E42               	movwf	Lcd_Out@buffer+1,c
  2346  00F988  0E03               	movlw	3
  2347  00F98A  EC8F  F075         	call	_Lcd_Out
  2348                           
  2349                           ;main.c: 408: }else if(posicion == 4){
  2350  00F98E  D098               	goto	l2697
  2351  00F990                     l2657:
  2352  00F990  0E04               	movlw	4
  2353  00F992  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2354  00F994  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2355  00F996  A4D8               	btfss	status,2,c
  2356  00F998  D021               	goto	l2667
  2357                           
  2358                           ;main.c: 409: mes_tr++;
  2359  00F99A  2A49               	incf	ManejaMovimientos@mes_tr,f,c
  2360                           
  2361                           ;main.c: 410: sprintf(buffer1,"%02u",mes_tr);
  2362  00F99C  0E88               	movlw	low _buffer1
  2363  00F99E  6E0D               	movwf	sprintf@sp,c
  2364  00F9A0  0E00               	movlw	high _buffer1
  2365  00F9A2  6E0E               	movwf	sprintf@sp+1,c
  2366  00F9A4  0ED4               	movlw	low (STR_7+10)
  2367  00F9A6  6E0F               	movwf	sprintf@f,c
  2368  00F9A8  0EFF               	movlw	high (STR_7+10)
  2369  00F9AA  6E10               	movwf	sprintf@f+1,c
  2370  00F9AC  C049  F011         	movff	ManejaMovimientos@mes_tr,?_sprintf+4
  2371  00F9B0  6A12               	clrf	?_sprintf+5,c
  2372  00F9B2  ECC9  F07D         	call	_sprintf	;wreg free
  2373                           
  2374                           ;main.c: 411: Lcd_Out(3, 3, buffer1);
  2375  00F9B6  0E03               	movlw	3
  2376  00F9B8  6E40               	movwf	Lcd_Out@x,c
  2377  00F9BA  0E88               	movlw	low _buffer1
  2378  00F9BC  6E41               	movwf	Lcd_Out@buffer,c
  2379  00F9BE  0E00               	movlw	high _buffer1
  2380  00F9C0  6E42               	movwf	Lcd_Out@buffer+1,c
  2381  00F9C2  0E03               	movlw	3
  2382  00F9C4  EC8F  F075         	call	_Lcd_Out
  2383                           
  2384                           ;main.c: 412: Lcd_Out(3, 3, "" );
  2385  00F9C8  0E03               	movlw	3
  2386  00F9CA  6E40               	movwf	Lcd_Out@x,c
  2387  00F9CC  0EEB               	movlw	low (STR_6+20)
  2388  00F9CE  6E41               	movwf	Lcd_Out@buffer,c
  2389  00F9D0  0EFE               	movlw	high (STR_6+20)
  2390  00F9D2  6E42               	movwf	Lcd_Out@buffer+1,c
  2391  00F9D4  0E03               	movlw	3
  2392  00F9D6  EC8F  F075         	call	_Lcd_Out
  2393                           
  2394                           ;main.c: 413: }else if(posicion == 6){
  2395  00F9DA  D072               	goto	l2697
  2396  00F9DC                     l2667:
  2397  00F9DC  0E06               	movlw	6
  2398  00F9DE  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2399  00F9E0  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2400  00F9E2  A4D8               	btfss	status,2,c
  2401  00F9E4  D021               	goto	l2677
  2402                           
  2403                           ;main.c: 414: anio_tr++;
  2404  00F9E6  2A4A               	incf	ManejaMovimientos@anio_tr,f,c
  2405                           
  2406                           ;main.c: 415: sprintf(buffer1,"%02u",anio_tr);
  2407  00F9E8  0E88               	movlw	low _buffer1
  2408  00F9EA  6E0D               	movwf	sprintf@sp,c
  2409  00F9EC  0E00               	movlw	high _buffer1
  2410  00F9EE  6E0E               	movwf	sprintf@sp+1,c
  2411  00F9F0  0ED4               	movlw	low (STR_7+10)
  2412  00F9F2  6E0F               	movwf	sprintf@f,c
  2413  00F9F4  0EFF               	movlw	high (STR_7+10)
  2414  00F9F6  6E10               	movwf	sprintf@f+1,c
  2415  00F9F8  C04A  F011         	movff	ManejaMovimientos@anio_tr,?_sprintf+4
  2416  00F9FC  6A12               	clrf	?_sprintf+5,c
  2417  00F9FE  ECC9  F07D         	call	_sprintf	;wreg free
  2418                           
  2419                           ;main.c: 416: Lcd_Out(3, 6, buffer1);
  2420  00FA02  0E06               	movlw	6
  2421  00FA04  6E40               	movwf	Lcd_Out@x,c
  2422  00FA06  0E88               	movlw	low _buffer1
  2423  00FA08  6E41               	movwf	Lcd_Out@buffer,c
  2424  00FA0A  0E00               	movlw	high _buffer1
  2425  00FA0C  6E42               	movwf	Lcd_Out@buffer+1,c
  2426  00FA0E  0E03               	movlw	3
  2427  00FA10  EC8F  F075         	call	_Lcd_Out
  2428                           
  2429                           ;main.c: 417: Lcd_Out(3, 6, "" );
  2430  00FA14  0E06               	movlw	6
  2431  00FA16  6E40               	movwf	Lcd_Out@x,c
  2432  00FA18  0EEB               	movlw	low (STR_6+20)
  2433  00FA1A  6E41               	movwf	Lcd_Out@buffer,c
  2434  00FA1C  0EFE               	movlw	high (STR_6+20)
  2435  00FA1E  6E42               	movwf	Lcd_Out@buffer+1,c
  2436  00FA20  0E03               	movlw	3
  2437  00FA22  EC8F  F075         	call	_Lcd_Out
  2438                           
  2439                           ;main.c: 418: }else if(posicion == 8){
  2440  00FA26  D04C               	goto	l2697
  2441  00FA28                     l2677:
  2442  00FA28  0E08               	movlw	8
  2443  00FA2A  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2444  00FA2C  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2445  00FA2E  A4D8               	btfss	status,2,c
  2446  00FA30  D021               	goto	l2687
  2447                           
  2448                           ;main.c: 419: hora_tr++;
  2449  00FA32  2A4B               	incf	ManejaMovimientos@hora_tr,f,c
  2450                           
  2451                           ;main.c: 420: sprintf(buffer1,"%02u",hora_tr);
  2452  00FA34  0E88               	movlw	low _buffer1
  2453  00FA36  6E0D               	movwf	sprintf@sp,c
  2454  00FA38  0E00               	movlw	high _buffer1
  2455  00FA3A  6E0E               	movwf	sprintf@sp+1,c
  2456  00FA3C  0ED4               	movlw	low (STR_7+10)
  2457  00FA3E  6E0F               	movwf	sprintf@f,c
  2458  00FA40  0EFF               	movlw	high (STR_7+10)
  2459  00FA42  6E10               	movwf	sprintf@f+1,c
  2460  00FA44  C04B  F011         	movff	ManejaMovimientos@hora_tr,?_sprintf+4
  2461  00FA48  6A12               	clrf	?_sprintf+5,c
  2462  00FA4A  ECC9  F07D         	call	_sprintf	;wreg free
  2463                           
  2464                           ;main.c: 421: Lcd_Out(4, 0, buffer1);
  2465  00FA4E  0E00               	movlw	0
  2466  00FA50  6E40               	movwf	Lcd_Out@x,c
  2467  00FA52  0E88               	movlw	low _buffer1
  2468  00FA54  6E41               	movwf	Lcd_Out@buffer,c
  2469  00FA56  0E00               	movlw	high _buffer1
  2470  00FA58  6E42               	movwf	Lcd_Out@buffer+1,c
  2471  00FA5A  0E04               	movlw	4
  2472  00FA5C  EC8F  F075         	call	_Lcd_Out
  2473                           
  2474                           ;main.c: 422: Lcd_Out(4, 0, "" );
  2475  00FA60  0E00               	movlw	0
  2476  00FA62  6E40               	movwf	Lcd_Out@x,c
  2477  00FA64  0EEB               	movlw	low (STR_6+20)
  2478  00FA66  6E41               	movwf	Lcd_Out@buffer,c
  2479  00FA68  0EFE               	movlw	high (STR_6+20)
  2480  00FA6A  6E42               	movwf	Lcd_Out@buffer+1,c
  2481  00FA6C  0E04               	movlw	4
  2482  00FA6E  EC8F  F075         	call	_Lcd_Out
  2483                           
  2484                           ;main.c: 423: }else if(posicion == 10){
  2485  00FA72  D026               	goto	l2697
  2486  00FA74                     l2687:
  2487  00FA74  0E0A               	movlw	10
  2488  00FA76  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2489  00FA78  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2490  00FA7A  A4D8               	btfss	status,2,c
  2491  00FA7C  D021               	goto	l2697
  2492                           
  2493                           ;main.c: 424: minuto_tr++;
  2494  00FA7E  2A4C               	incf	ManejaMovimientos@minuto_tr,f,c
  2495                           
  2496                           ;main.c: 425: sprintf(buffer1,"%02u",minuto_tr);
  2497  00FA80  0E88               	movlw	low _buffer1
  2498  00FA82  6E0D               	movwf	sprintf@sp,c
  2499  00FA84  0E00               	movlw	high _buffer1
  2500  00FA86  6E0E               	movwf	sprintf@sp+1,c
  2501  00FA88  0ED4               	movlw	low (STR_7+10)
  2502  00FA8A  6E0F               	movwf	sprintf@f,c
  2503  00FA8C  0EFF               	movlw	high (STR_7+10)
  2504  00FA8E  6E10               	movwf	sprintf@f+1,c
  2505  00FA90  C04C  F011         	movff	ManejaMovimientos@minuto_tr,?_sprintf+4
  2506  00FA94  6A12               	clrf	?_sprintf+5,c
  2507  00FA96  ECC9  F07D         	call	_sprintf	;wreg free
  2508                           
  2509                           ;main.c: 426: Lcd_Out(4, 3, buffer1);
  2510  00FA9A  0E03               	movlw	3
  2511  00FA9C  6E40               	movwf	Lcd_Out@x,c
  2512  00FA9E  0E88               	movlw	low _buffer1
  2513  00FAA0  6E41               	movwf	Lcd_Out@buffer,c
  2514  00FAA2  0E00               	movlw	high _buffer1
  2515  00FAA4  6E42               	movwf	Lcd_Out@buffer+1,c
  2516  00FAA6  0E04               	movlw	4
  2517  00FAA8  EC8F  F075         	call	_Lcd_Out
  2518                           
  2519                           ;main.c: 427: Lcd_Out(4, 3, "" );
  2520  00FAAC  0E03               	movlw	3
  2521  00FAAE  6E40               	movwf	Lcd_Out@x,c
  2522  00FAB0  0EEB               	movlw	low (STR_6+20)
  2523  00FAB2  6E41               	movwf	Lcd_Out@buffer,c
  2524  00FAB4  0EFE               	movlw	high (STR_6+20)
  2525  00FAB6  6E42               	movwf	Lcd_Out@buffer+1,c
  2526  00FAB8  0E04               	movlw	4
  2527  00FABA  EC8F  F075         	call	_Lcd_Out
  2528  00FABE  D000               	goto	l2697
  2529  00FAC0                     l2697:
  2530                           
  2531                           ;main.c: 428: }
  2532                           ;main.c: 430: }
  2533                           ;main.c: 431: if(Sw_Right = PORTAbits.RA2 == 0){
  2534  00FAC0  B480               	btfsc	3968,2,c	;volatile
  2535  00FAC2  D002               	goto	u1880
  2536  00FAC4  0E01               	movlw	1
  2537  00FAC6  D001               	goto	u1890
  2538  00FAC8                     u1880:
  2539  00FAC8  0E00               	movlw	0
  2540  00FACA                     u1890:
  2541  00FACA  0100               	movlb	0	; () banked
  2542  00FACC  6F85               	movwf	_Sw_Right& (0+255),b
  2543  00FACE  0100               	movlb	0	; () banked
  2544  00FAD0  5185               	movf	_Sw_Right& (0+255),w,b
  2545  00FAD2  B4D8               	btfsc	status,2,c
  2546  00FAD4  D02D               	goto	l2705
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 433: posicion+=2;
  2550  00FAD6  0E02               	movlw	2
  2551  00FAD8  264D               	addwf	ManejaMovimientos@posicion,f,c
  2552  00FADA  0E00               	movlw	0
  2553  00FADC  224E               	addwfc	ManejaMovimientos@posicion+1,f,c
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 434: i=0;
  2557  00FADE  0E00               	movlw	0
  2558  00FAE0  0100               	movlb	0	; () banked
  2559  00FAE2  6F7D               	movwf	(_i+1)& (0+255),b
  2560  00FAE4  0E00               	movlw	0
  2561  00FAE6  6F7C               	movwf	_i& (0+255),b
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 435: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion+1], "" );
  2565  00FAE8  C04D  F045         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2566  00FAEC  C04E  F046         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2567  00FAF0  90D8               	bcf	status,0,c
  2568  00FAF2  3645               	rlcf	??_ManejaMovimientos,f,c
  2569  00FAF4  3646               	rlcf	??_ManejaMovimientos+1,f,c
  2570  00FAF6  0E02               	movlw	2
  2571  00FAF8  2645               	addwf	??_ManejaMovimientos,f,c
  2572  00FAFA  0E00               	movlw	0
  2573  00FAFC  2246               	addwfc	??_ManejaMovimientos+1,f,c
  2574  00FAFE  0E9C               	movlw	low _posicionesLeft
  2575  00FB00  2445               	addwf	??_ManejaMovimientos,w,c
  2576  00FB02  6ED9               	movwf	fsr2l,c
  2577  00FB04  0E00               	movlw	high _posicionesLeft
  2578  00FB06  2046               	addwfc	??_ManejaMovimientos+1,w,c
  2579  00FB08  6EDA               	movwf	fsr2h,c
  2580  00FB0A  50DF               	movf	indf2,w,c
  2581  00FB0C  6E40               	movwf	Lcd_Out@x,c
  2582  00FB0E  0EEB               	movlw	low (STR_6+20)
  2583  00FB10  6E41               	movwf	Lcd_Out@buffer,c
  2584  00FB12  0EFE               	movlw	high (STR_6+20)
  2585  00FB14  6E42               	movwf	Lcd_Out@buffer+1,c
  2586  00FB16  90D8               	bcf	status,0,c
  2587  00FB18  344D               	rlcf	ManejaMovimientos@posicion,w,c
  2588  00FB1A  6ED9               	movwf	fsr2l,c
  2589  00FB1C  344E               	rlcf	ManejaMovimientos@posicion+1,w,c
  2590  00FB1E  6EDA               	movwf	fsr2h,c
  2591  00FB20  0E9C               	movlw	low _posicionesLeft
  2592  00FB22  26D9               	addwf	fsr2l,f,c
  2593  00FB24  0E00               	movlw	high _posicionesLeft
  2594  00FB26  22DA               	addwfc	fsr2h,f,c
  2595  00FB28  50DF               	movf	indf2,w,c
  2596  00FB2A  EC8F  F075         	call	_Lcd_Out
  2597  00FB2E  D000               	goto	l2705
  2598  00FB30                     l2705:
  2599                           
  2600                           ;main.c: 438: }
  2601                           ;main.c: 439: if(Sw_Center = PORTAbits.RA5 == 0){
  2602  00FB30  BA80               	btfsc	3968,5,c	;volatile
  2603  00FB32  D002               	goto	u1910
  2604  00FB34  0E01               	movlw	1
  2605  00FB36  D001               	goto	u1920
  2606  00FB38                     u1910:
  2607  00FB38  0E00               	movlw	0
  2608  00FB3A                     u1920:
  2609  00FB3A  0100               	movlb	0	; () banked
  2610  00FB3C  6F82               	movwf	_Sw_Center& (0+255),b
  2611  00FB3E  0100               	movlb	0	; () banked
  2612  00FB40  5182               	movf	_Sw_Center& (0+255),w,b
  2613  00FB42  B4D8               	btfsc	status,2,c
  2614  00FB44  D017               	goto	l2711
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 440: diasem = diasem_tr;
  2618  00FB46  C047  F05C         	movff	ManejaMovimientos@diasem_tr,_diasem
  2619  00FB4A  6A5D               	clrf	_diasem+1,c
  2620                           
  2621                           ;main.c: 441: dia = dia_tr;
  2622  00FB4C  C048  F05A         	movff	ManejaMovimientos@dia_tr,_dia
  2623  00FB50  6A5B               	clrf	_dia+1,c
  2624                           
  2625                           ;main.c: 442: mes = mes_tr;
  2626  00FB52  C049  F05E         	movff	ManejaMovimientos@mes_tr,_mes
  2627  00FB56  6A5F               	clrf	_mes+1,c
  2628                           
  2629                           ;main.c: 443: anio = anio_tr;
  2630  00FB58  C04A  F058         	movff	ManejaMovimientos@anio_tr,_anio
  2631  00FB5C  6A59               	clrf	_anio+1,c
  2632                           
  2633                           ;main.c: 444: hora = hora_tr;
  2634  00FB5E  C04B  F0BA         	movff	ManejaMovimientos@hora_tr,_hora
  2635  00FB62  0100               	movlb	0	; () banked
  2636  00FB64  6BBB               	clrf	(_hora+1)& (0+255),b
  2637                           
  2638                           ;main.c: 445: minuto = minuto_tr;
  2639  00FB66  C04C  F0BC         	movff	ManejaMovimientos@minuto_tr,_minuto
  2640  00FB6A  0100               	movlb	0	; () banked
  2641  00FB6C  6BBD               	clrf	(_minuto+1)& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 446: Write_RTC();
  2645  00FB6E  EC7C  F07A         	call	_Write_RTC	;wreg free
  2646                           
  2647                           ;main.c: 448: break;
  2648  00FB72  D00B               	goto	l2715
  2649  00FB74                     l2711:
  2650  00FB74  0100               	movlb	0	; () banked
  2651  00FB76  4B7C               	infsnz	_i& (0+255),f,b
  2652  00FB78  2B7D               	incf	(_i+1)& (0+255),f,b
  2653                           
  2654                           ; BSR set to: 0
  2655  00FB7A  0100               	movlb	0	; () banked
  2656  00FB7C  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2657  00FB7E  D6AD               	goto	l2633
  2658  00FB80  0100               	movlb	0	; () banked
  2659  00FB82  517D               	movf	(_i+1)& (0+255),w,b
  2660  00FB84  E102               	bnz	l2715
  2661  00FB86  D6A2               	goto	L1
  2662  00FB88  D000               	goto	l2715
  2663  00FB8A                     l2715:
  2664                           
  2665                           ;main.c: 449: }
  2666                           ;main.c: 450: }
  2667                           ;main.c: 452: Lcd_Cmd(12);
  2668  00FB8A  0E0C               	movlw	12
  2669  00FB8C  EC25  F078         	call	_Lcd_Cmd
  2670  00FB90  0012               	return		;funcret
  2671  00FB92                     __end_of_ManejaMovimientos:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           postdec1	equ	0xFE5
  2682                           fsr1l	equ	0xFE1
  2683                           indf2	equ	0xFDF
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _Write_RTC *****************
  2689 ;; Defined at:
  2690 ;;		line 254 in file "../main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;		None               void
  2697 ;; Registers used:
  2698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    2
  2711 ;; This function calls:
  2712 ;;		_RtccWrOn
  2713 ;;		_RtccWriteDate
  2714 ;;		_RtccWriteTime
  2715 ;;		___awdiv
  2716 ;; This function is called by:
  2717 ;;		_main
  2718 ;;		_ManejaMovimientos
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text7
  2723  00F4F8                     __ptext7:
  2724                           	opt stack 0
  2725  00F4F8                     _Write_RTC:
  2726                           	opt stack 28
  2727                           
  2728                           ;main.c: 256: RtccWrOn();
  2729                           
  2730                           ;incstack = 0
  2731  00F4F8  EC3D  F074         	call	_RtccWrOn	;wreg free
  2732                           
  2733                           ;main.c: 258: PIE3bits.RTCCIE=1;
  2734  00F4FC  80A3               	bsf	4003,0,c	;volatile
  2735                           
  2736                           ;main.c: 259: segundo_d=segundo/10;
  2737  00F4FE  C07E  F001         	movff	_segundo,___awdiv@dividend
  2738  00F502  C07F  F002         	movff	_segundo+1,___awdiv@dividend+1
  2739  00F506  0E00               	movlw	0
  2740  00F508  6E04               	movwf	___awdiv@divisor+1,c
  2741  00F50A  0E0A               	movlw	10
  2742  00F50C  6E03               	movwf	___awdiv@divisor,c
  2743  00F50E  ECD9  F075         	call	___awdiv	;wreg free
  2744  00F512  5001               	movf	?___awdiv,w,c
  2745  00F514  0100               	movlb	0	; () banked
  2746  00F516  6FC9               	movwf	_segundo_d& (0+255),b
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 260: segundo_u=segundo-segundo_d*10;
  2750  00F518  0100               	movlb	0	; () banked
  2751  00F51A  51C9               	movf	_segundo_d& (0+255),w,b
  2752  00F51C  0D0A               	mullw	10
  2753  00F51E  50F3               	movf	prodl,w,c
  2754  00F520  0800               	sublw	0
  2755  00F522  0100               	movlb	0	; () banked
  2756  00F524  257E               	addwf	_segundo& (0+255),w,b
  2757  00F526  0100               	movlb	0	; () banked
  2758  00F528  6FCA               	movwf	_segundo_u& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 261: RtccTime.f.sec =segundo_d*16+segundo_u;
  2762  00F52A  0100               	movlb	0	; () banked
  2763  00F52C  51C9               	movf	_segundo_d& (0+255),w,b
  2764  00F52E  0D10               	mullw	16
  2765  00F530  50F3               	movf	prodl,w,c
  2766  00F532  0100               	movlb	0	; () banked
  2767  00F534  25CA               	addwf	_segundo_u& (0+255),w,b
  2768  00F536  6E55               	movwf	_RtccTime+1,c
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 262: minuto_d=minuto/10;
  2772  00F538  C0BC  F001         	movff	_minuto,___awdiv@dividend
  2773  00F53C  C0BD  F002         	movff	_minuto+1,___awdiv@dividend+1
  2774  00F540  0E00               	movlw	0
  2775  00F542  6E04               	movwf	___awdiv@divisor+1,c
  2776  00F544  0E0A               	movlw	10
  2777  00F546  6E03               	movwf	___awdiv@divisor,c
  2778  00F548  ECD9  F075         	call	___awdiv	;wreg free
  2779  00F54C  5001               	movf	?___awdiv,w,c
  2780  00F54E  0100               	movlb	0	; () banked
  2781  00F550  6FC7               	movwf	_minuto_d& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 263: minuto_u=minuto-minuto_d*10;
  2785  00F552  0100               	movlb	0	; () banked
  2786  00F554  51C7               	movf	_minuto_d& (0+255),w,b
  2787  00F556  0D0A               	mullw	10
  2788  00F558  50F3               	movf	prodl,w,c
  2789  00F55A  0800               	sublw	0
  2790  00F55C  0100               	movlb	0	; () banked
  2791  00F55E  25BC               	addwf	_minuto& (0+255),w,b
  2792  00F560  0100               	movlb	0	; () banked
  2793  00F562  6FC8               	movwf	_minuto_u& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;main.c: 264: RtccTime.f.min =minuto_d*16+minuto_u;
  2797  00F564  0100               	movlb	0	; () banked
  2798  00F566  51C7               	movf	_minuto_d& (0+255),w,b
  2799  00F568  0D10               	mullw	16
  2800  00F56A  50F3               	movf	prodl,w,c
  2801  00F56C  0100               	movlb	0	; () banked
  2802  00F56E  25C8               	addwf	_minuto_u& (0+255),w,b
  2803  00F570  6E56               	movwf	_RtccTime+2,c
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;main.c: 265: hora_d=hora/10;
  2807  00F572  C0BA  F001         	movff	_hora,___awdiv@dividend
  2808  00F576  C0BB  F002         	movff	_hora+1,___awdiv@dividend+1
  2809  00F57A  0E00               	movlw	0
  2810  00F57C  6E04               	movwf	___awdiv@divisor+1,c
  2811  00F57E  0E0A               	movlw	10
  2812  00F580  6E03               	movwf	___awdiv@divisor,c
  2813  00F582  ECD9  F075         	call	___awdiv	;wreg free
  2814  00F586  5001               	movf	?___awdiv,w,c
  2815  00F588  0100               	movlb	0	; () banked
  2816  00F58A  6FC3               	movwf	_hora_d& (0+255),b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 266: hora_u=hora-hora_d*10;
  2820  00F58C  0100               	movlb	0	; () banked
  2821  00F58E  51C3               	movf	_hora_d& (0+255),w,b
  2822  00F590  0D0A               	mullw	10
  2823  00F592  50F3               	movf	prodl,w,c
  2824  00F594  0800               	sublw	0
  2825  00F596  0100               	movlb	0	; () banked
  2826  00F598  25BA               	addwf	_hora& (0+255),w,b
  2827  00F59A  0100               	movlb	0	; () banked
  2828  00F59C  6FC4               	movwf	_hora_u& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;main.c: 267: RtccTime.f.hour=hora_d*16+hora_u;
  2832  00F59E  0100               	movlb	0	; () banked
  2833  00F5A0  51C3               	movf	_hora_d& (0+255),w,b
  2834  00F5A2  0D10               	mullw	16
  2835  00F5A4  50F3               	movf	prodl,w,c
  2836  00F5A6  0100               	movlb	0	; () banked
  2837  00F5A8  25C4               	addwf	_hora_u& (0+255),w,b
  2838  00F5AA  6E57               	movwf	_RtccTime+3,c
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 268: anio_d=anio/10;
  2842  00F5AC  C058  F001         	movff	_anio,___awdiv@dividend
  2843  00F5B0  C059  F002         	movff	_anio+1,___awdiv@dividend+1
  2844  00F5B4  0E00               	movlw	0
  2845  00F5B6  6E04               	movwf	___awdiv@divisor+1,c
  2846  00F5B8  0E0A               	movlw	10
  2847  00F5BA  6E03               	movwf	___awdiv@divisor,c
  2848  00F5BC  ECD9  F075         	call	___awdiv	;wreg free
  2849  00F5C0  5001               	movf	?___awdiv,w,c
  2850  00F5C2  0100               	movlb	0	; () banked
  2851  00F5C4  6FBE               	movwf	_anio_d& (0+255),b
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 269: anio_u=anio-anio_d*10;
  2855  00F5C6  0100               	movlb	0	; () banked
  2856  00F5C8  51BE               	movf	_anio_d& (0+255),w,b
  2857  00F5CA  0D0A               	mullw	10
  2858  00F5CC  50F3               	movf	prodl,w,c
  2859  00F5CE  0800               	sublw	0
  2860  00F5D0  2458               	addwf	_anio,w,c
  2861  00F5D2  0100               	movlb	0	; () banked
  2862  00F5D4  6FBF               	movwf	_anio_u& (0+255),b
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 270: RtccDate.f.year=anio_d*16+anio_u;
  2866  00F5D6  0100               	movlb	0	; () banked
  2867  00F5D8  51BE               	movf	_anio_d& (0+255),w,b
  2868  00F5DA  0D10               	mullw	16
  2869  00F5DC  50F3               	movf	prodl,w,c
  2870  00F5DE  0100               	movlb	0	; () banked
  2871  00F5E0  25BF               	addwf	_anio_u& (0+255),w,b
  2872  00F5E2  6E53               	movwf	_RtccDate+3,c
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 271: mes_d=mes/10;
  2876  00F5E4  C05E  F001         	movff	_mes,___awdiv@dividend
  2877  00F5E8  C05F  F002         	movff	_mes+1,___awdiv@dividend+1
  2878  00F5EC  0E00               	movlw	0
  2879  00F5EE  6E04               	movwf	___awdiv@divisor+1,c
  2880  00F5F0  0E0A               	movlw	10
  2881  00F5F2  6E03               	movwf	___awdiv@divisor,c
  2882  00F5F4  ECD9  F075         	call	___awdiv	;wreg free
  2883  00F5F8  5001               	movf	?___awdiv,w,c
  2884  00F5FA  0100               	movlb	0	; () banked
  2885  00F5FC  6FC5               	movwf	_mes_d& (0+255),b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;main.c: 272: mes_u=mes-mes_d*10;
  2889  00F5FE  0100               	movlb	0	; () banked
  2890  00F600  51C5               	movf	_mes_d& (0+255),w,b
  2891  00F602  0D0A               	mullw	10
  2892  00F604  50F3               	movf	prodl,w,c
  2893  00F606  0800               	sublw	0
  2894  00F608  245E               	addwf	_mes,w,c
  2895  00F60A  0100               	movlb	0	; () banked
  2896  00F60C  6FC6               	movwf	_mes_u& (0+255),b
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;main.c: 273: RtccDate.f.mon=mes_d*16+mes_u;
  2900  00F60E  0100               	movlb	0	; () banked
  2901  00F610  51C5               	movf	_mes_d& (0+255),w,b
  2902  00F612  0D10               	mullw	16
  2903  00F614  50F3               	movf	prodl,w,c
  2904  00F616  0100               	movlb	0	; () banked
  2905  00F618  25C6               	addwf	_mes_u& (0+255),w,b
  2906  00F61A  6E52               	movwf	_RtccDate+2,c
  2907                           
  2908                           ; BSR set to: 0
  2909                           ;main.c: 274: fecha_d=dia/10;
  2910  00F61C  C05A  F001         	movff	_dia,___awdiv@dividend
  2911  00F620  C05B  F002         	movff	_dia+1,___awdiv@dividend+1
  2912  00F624  0E00               	movlw	0
  2913  00F626  6E04               	movwf	___awdiv@divisor+1,c
  2914  00F628  0E0A               	movlw	10
  2915  00F62A  6E03               	movwf	___awdiv@divisor,c
  2916  00F62C  ECD9  F075         	call	___awdiv	;wreg free
  2917  00F630  5001               	movf	?___awdiv,w,c
  2918  00F632  0100               	movlb	0	; () banked
  2919  00F634  6FC1               	movwf	_fecha_d& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;main.c: 275: fecha_u=dia-fecha_d*10;
  2923  00F636  0100               	movlb	0	; () banked
  2924  00F638  51C1               	movf	_fecha_d& (0+255),w,b
  2925  00F63A  0D0A               	mullw	10
  2926  00F63C  50F3               	movf	prodl,w,c
  2927  00F63E  0800               	sublw	0
  2928  00F640  245A               	addwf	_dia,w,c
  2929  00F642  0100               	movlb	0	; () banked
  2930  00F644  6FC2               	movwf	_fecha_u& (0+255),b
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 276: RtccDate.f.mday=fecha_d*16+fecha_u;
  2934  00F646  0100               	movlb	0	; () banked
  2935  00F648  51C1               	movf	_fecha_d& (0+255),w,b
  2936  00F64A  0D10               	mullw	16
  2937  00F64C  50F3               	movf	prodl,w,c
  2938  00F64E  0100               	movlb	0	; () banked
  2939  00F650  25C2               	addwf	_fecha_u& (0+255),w,b
  2940  00F652  6E51               	movwf	_RtccDate+1,c
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;main.c: 277: dia_semana=diasem;
  2944  00F654  C05C  F0C0         	movff	_diasem,_dia_semana
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;main.c: 278: RtccDate.f.wday =diasem;
  2948  00F658  C05C  F050         	movff	_diasem,_RtccDate
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;main.c: 280: RtccWriteTime(&RtccTime,1);
  2952  00F65C  0E54               	movlw	low _RtccTime
  2953  00F65E  6E01               	movwf	RtccWriteTime@pTm,c
  2954  00F660  0E00               	movlw	high _RtccTime
  2955  00F662  6E02               	movwf	RtccWriteTime@pTm+1,c
  2956  00F664  0E01               	movlw	1
  2957  00F666  6E03               	movwf	RtccWriteTime@di,c
  2958  00F668  EC83  F076         	call	_RtccWriteTime	;wreg free
  2959                           
  2960                           ;main.c: 281: RtccWriteDate(&RtccDate,1);
  2961  00F66C  0E50               	movlw	low _RtccDate
  2962  00F66E  6E01               	movwf	RtccWriteDate@pDt,c
  2963  00F670  0E00               	movlw	high _RtccDate
  2964  00F672  6E02               	movwf	RtccWriteDate@pDt+1,c
  2965  00F674  0E01               	movlw	1
  2966  00F676  6E03               	movwf	RtccWriteDate@di,c
  2967  00F678  ECD9  F079         	call	_RtccWriteDate	;wreg free
  2968                           
  2969                           ;main.c: 282: (RTCCFGbits.RTCEN=1);
  2970  00F67C  010F               	movlb	15	; () banked
  2971  00F67E  8F3F               	bsf	63,7,b	;volatile
  2972                           
  2973                           ; BSR set to: 15
  2974  00F680  0012               	return		;funcret
  2975  00F682                     __end_of_Write_RTC:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec1	equ	0xFE5
  2986                           fsr1l	equ	0xFE1
  2987                           indf2	equ	0xFDF
  2988                           fsr2h	equ	0xFDA
  2989                           fsr2l	equ	0xFD9
  2990                           status	equ	0xFD8
  2991                           
  2992 ;; *************** function ___awdiv *****************
  2993 ;; Defined at:
  2994 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  dividend        2    0[COMRAM] int 
  2997 ;;  divisor         2    2[COMRAM] int 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  quotient        2    6[COMRAM] int 
  3000 ;;  sign            1    5[COMRAM] unsigned char 
  3001 ;;  counter         1    4[COMRAM] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2    0[COMRAM] int 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3011 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3012 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3014 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3015 ;;Total ram usage:        8 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; This function calls:
  3018 ;;		Nothing
  3019 ;; This function is called by:
  3020 ;;		_Write_RTC
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           	psect	text8
  3025  00EBB2                     __ptext8:
  3026                           	opt stack 0
  3027  00EBB2                     ___awdiv:
  3028                           	opt stack 29
  3029                           
  3030                           ; BSR set to: 15
  3031                           ;incstack = 0
  3032  00EBB2  0E00               	movlw	0
  3033  00EBB4  6E06               	movwf	___awdiv@sign,c
  3034  00EBB6  AE04               	btfss	___awdiv@divisor+1,7,c
  3035  00EBB8  D007               	goto	l2359
  3036  00EBBA  6C03               	negf	___awdiv@divisor,c
  3037  00EBBC  1E04               	comf	___awdiv@divisor+1,f,c
  3038  00EBBE  B0D8               	btfsc	status,0,c
  3039  00EBC0  2A04               	incf	___awdiv@divisor+1,f,c
  3040  00EBC2  0E01               	movlw	1
  3041  00EBC4  6E06               	movwf	___awdiv@sign,c
  3042  00EBC6  D000               	goto	l2359
  3043  00EBC8                     l2359:
  3044  00EBC8  AE02               	btfss	___awdiv@dividend+1,7,c
  3045  00EBCA  D007               	goto	l2365
  3046  00EBCC  6C01               	negf	___awdiv@dividend,c
  3047  00EBCE  1E02               	comf	___awdiv@dividend+1,f,c
  3048  00EBD0  B0D8               	btfsc	status,0,c
  3049  00EBD2  2A02               	incf	___awdiv@dividend+1,f,c
  3050  00EBD4  0E01               	movlw	1
  3051  00EBD6  1A06               	xorwf	___awdiv@sign,f,c
  3052  00EBD8  D000               	goto	l2365
  3053  00EBDA                     l2365:
  3054  00EBDA  0E00               	movlw	0
  3055  00EBDC  6E08               	movwf	___awdiv@quotient+1,c
  3056  00EBDE  0E00               	movlw	0
  3057  00EBE0  6E07               	movwf	___awdiv@quotient,c
  3058  00EBE2  5003               	movf	___awdiv@divisor,w,c
  3059  00EBE4  1004               	iorwf	___awdiv@divisor+1,w,c
  3060  00EBE6  B4D8               	btfsc	status,2,c
  3061  00EBE8  D021               	goto	l2387
  3062  00EBEA  0E01               	movlw	1
  3063  00EBEC  6E05               	movwf	___awdiv@counter,c
  3064  00EBEE  D005               	goto	l2373
  3065  00EBF0                     l2371:
  3066  00EBF0  90D8               	bcf	status,0,c
  3067  00EBF2  3603               	rlcf	___awdiv@divisor,f,c
  3068  00EBF4  3604               	rlcf	___awdiv@divisor+1,f,c
  3069  00EBF6  2A05               	incf	___awdiv@counter,f,c
  3070  00EBF8  D000               	goto	l2373
  3071  00EBFA                     l2373:
  3072  00EBFA  BE04               	btfsc	___awdiv@divisor+1,7,c
  3073  00EBFC  D002               	goto	l2375
  3074  00EBFE  D7F8               	goto	l2371
  3075  00EC00  D000               	goto	l2375
  3076  00EC02                     l2375:
  3077  00EC02  90D8               	bcf	status,0,c
  3078  00EC04  3607               	rlcf	___awdiv@quotient,f,c
  3079  00EC06  3608               	rlcf	___awdiv@quotient+1,f,c
  3080  00EC08  5003               	movf	___awdiv@divisor,w,c
  3081  00EC0A  5C01               	subwf	___awdiv@dividend,w,c
  3082  00EC0C  5004               	movf	___awdiv@divisor+1,w,c
  3083  00EC0E  5802               	subwfb	___awdiv@dividend+1,w,c
  3084  00EC10  A0D8               	btfss	status,0,c
  3085  00EC12  D006               	goto	l2383
  3086  00EC14  5003               	movf	___awdiv@divisor,w,c
  3087  00EC16  5E01               	subwf	___awdiv@dividend,f,c
  3088  00EC18  5004               	movf	___awdiv@divisor+1,w,c
  3089  00EC1A  5A02               	subwfb	___awdiv@dividend+1,f,c
  3090  00EC1C  8007               	bsf	___awdiv@quotient,0,c
  3091  00EC1E  D000               	goto	l2383
  3092  00EC20                     l2383:
  3093  00EC20  90D8               	bcf	status,0,c
  3094  00EC22  3204               	rrcf	___awdiv@divisor+1,f,c
  3095  00EC24  3203               	rrcf	___awdiv@divisor,f,c
  3096  00EC26  2E05               	decfsz	___awdiv@counter,f,c
  3097  00EC28  D7EC               	goto	l2375
  3098  00EC2A  D000               	goto	l2387
  3099  00EC2C                     l2387:
  3100  00EC2C  5006               	movf	___awdiv@sign,w,c
  3101  00EC2E  B4D8               	btfsc	status,2,c
  3102  00EC30  D005               	goto	l2391
  3103  00EC32  6C07               	negf	___awdiv@quotient,c
  3104  00EC34  1E08               	comf	___awdiv@quotient+1,f,c
  3105  00EC36  B0D8               	btfsc	status,0,c
  3106  00EC38  2A08               	incf	___awdiv@quotient+1,f,c
  3107  00EC3A  D000               	goto	l2391
  3108  00EC3C                     l2391:
  3109  00EC3C  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3110  00EC40  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3111  00EC44  0012               	return	
  3112  00EC46  0012               	return		;funcret
  3113  00EC48                     __end_of___awdiv:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           prodh	equ	0xFF4
  3120                           prodl	equ	0xFF3
  3121                           postinc0	equ	0xFEE
  3122                           wreg	equ	0xFE8
  3123                           postdec1	equ	0xFE5
  3124                           fsr1l	equ	0xFE1
  3125                           indf2	equ	0xFDF
  3126                           fsr2h	equ	0xFDA
  3127                           fsr2l	equ	0xFD9
  3128                           status	equ	0xFD8
  3129                           
  3130 ;; *************** function _RtccWriteTime *****************
  3131 ;; Defined at:
  3132 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3133 ;; Parameters:    Size  Location     Type
  3134 ;;  pTm             2    0[COMRAM] PTR const struct .
  3135 ;;		 -> RtccTime(4), 
  3136 ;;  di              1    2[COMRAM] enum E7121
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;  tempHourWDay    2    9[COMRAM] struct .
  3139 ;;  tempMinSec      2    7[COMRAM] struct .
  3140 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3141 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3142 ;;  wasOn           1    4[COMRAM] enum E7121
  3143 ;; Return value:  Size  Location     Type
  3144 ;;                  1    wreg      enum E7337
  3145 ;; Registers used:
  3146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3147 ;; Tracked objects:
  3148 ;;		On entry : 0/0
  3149 ;;		On exit  : 0/0
  3150 ;;		Unchanged: 0/0
  3151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3152 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3153 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3154 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3155 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3156 ;;Total ram usage:       11 bytes
  3157 ;; Hardware stack levels used:    1
  3158 ;; Hardware stack levels required when called:    1
  3159 ;; This function calls:
  3160 ;;		_RtccWrOn
  3161 ;; This function is called by:
  3162 ;;		_Write_RTC
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text9
  3167  00ED06                     __ptext9:
  3168                           	opt stack 0
  3169  00ED06                     _RtccWriteTime:
  3170                           	opt stack 28
  3171                           
  3172                           ;incstack = 0
  3173  00ED06  0E00               	movlw	0
  3174  00ED08  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3175  00ED0A  EE20 F002          	lfsr	2,2
  3176  00ED0E  5001               	movf	RtccWriteTime@pTm,w,c
  3177  00ED10  26D9               	addwf	fsr2l,f,c
  3178  00ED12  5002               	movf	RtccWriteTime@pTm+1,w,c
  3179  00ED14  22DA               	addwfc	fsr2h,f,c
  3180  00ED16  0E5A               	movlw	90
  3181  00ED18  60DF               	cpfslt	indf2,c
  3182  00ED1A  0012               	return	
  3183  00ED1C  EE20 F001          	lfsr	2,1
  3184  00ED20  5001               	movf	RtccWriteTime@pTm,w,c
  3185  00ED22  26D9               	addwf	fsr2l,f,c
  3186  00ED24  5002               	movf	RtccWriteTime@pTm+1,w,c
  3187  00ED26  22DA               	addwfc	fsr2h,f,c
  3188  00ED28  0E5A               	movlw	90
  3189  00ED2A  60DF               	cpfslt	indf2,c
  3190  00ED2C  0012               	return	
  3191  00ED2E  EE20 F003          	lfsr	2,3
  3192  00ED32  5001               	movf	RtccWriteTime@pTm,w,c
  3193  00ED34  26D9               	addwf	fsr2l,f,c
  3194  00ED36  5002               	movf	RtccWriteTime@pTm+1,w,c
  3195  00ED38  22DA               	addwfc	fsr2h,f,c
  3196  00ED3A  0E24               	movlw	36
  3197  00ED3C  64DF               	cpfsgt	indf2,c
  3198  00ED3E  D002               	goto	l2165
  3199  00ED40  0012               	return	
  3200                           
  3201                           ;	Return value of _RtccWriteTime is never used
  3202  00ED42  0012               	return	
  3203  00ED44                     l2165:
  3204  00ED44  EE20 F002          	lfsr	2,2
  3205  00ED48  5001               	movf	RtccWriteTime@pTm,w,c
  3206  00ED4A  26D9               	addwf	fsr2l,f,c
  3207  00ED4C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3208  00ED4E  22DA               	addwfc	fsr2h,f,c
  3209  00ED50  50DF               	movf	indf2,w,c
  3210  00ED52  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3211  00ED54  EE20 F001          	lfsr	2,1
  3212  00ED58  5001               	movf	RtccWriteTime@pTm,w,c
  3213  00ED5A  26D9               	addwf	fsr2l,f,c
  3214  00ED5C  5002               	movf	RtccWriteTime@pTm+1,w,c
  3215  00ED5E  22DA               	addwfc	fsr2h,f,c
  3216  00ED60  50DF               	movf	indf2,w,c
  3217  00ED62  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3218  00ED64  5003               	movf	RtccWriteTime@di,w,c
  3219  00ED66  B4D8               	btfsc	status,2,c
  3220  00ED68  D002               	goto	l2171
  3221  00ED6A  9CF2               	bcf	intcon,6,c	;volatile
  3222  00ED6C  D000               	goto	l2171
  3223  00ED6E                     l2171:
  3224  00ED6E  0E00               	movlw	0
  3225  00ED70  BB3F               	btfsc	63,5,b	;volatile
  3226  00ED72  0E01               	movlw	1
  3227  00ED74  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3228  00ED76  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3229  00ED78  A4D8               	btfss	status,2,c
  3230  00ED7A  D003               	goto	l2175
  3231  00ED7C  EC3D  F074         	call	_RtccWrOn	;wreg free
  3232  00ED80  D000               	goto	l2175
  3233  00ED82                     l2175:
  3234  00ED82  0E00               	movlw	0
  3235  00ED84  BF3F               	btfsc	63,7,b	;volatile
  3236  00ED86  0E01               	movlw	1
  3237  00ED88  6E05               	movwf	RtccWriteTime@wasOn,c
  3238  00ED8A  5005               	movf	RtccWriteTime@wasOn,w,c
  3239  00ED8C  B4D8               	btfsc	status,2,c
  3240  00ED8E  D007               	goto	l2181
  3241  00ED90  0E00               	movlw	0
  3242  00ED92  BE91               	btfsc	3985,7,c	;volatile
  3243  00ED94  0E01               	movlw	1
  3244  00ED96  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3245  00ED98  010F               	movlb	15	; () banked
  3246  00ED9A  9F3F               	bcf	63,7,b	;volatile
  3247  00ED9C  D000               	goto	l2181
  3248  00ED9E                     l2181:
  3249  00ED9E  0EFC               	movlw	252
  3250  00EDA0  010F               	movlb	15	; () banked
  3251  00EDA2  173F               	andwf	63,f,b	;volatile
  3252  00EDA4  010F               	movlb	15	; () banked
  3253  00EDA6  813F               	bsf	63,0,b	;volatile
  3254                           
  3255                           ; BSR set to: 15
  3256  00EDA8  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3257                           
  3258                           ; BSR set to: 15
  3259  00EDAC  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3260                           
  3261                           ; BSR set to: 15
  3262  00EDB0  EE20 F003          	lfsr	2,3
  3263  00EDB4  5001               	movf	RtccWriteTime@pTm,w,c
  3264  00EDB6  26D9               	addwf	fsr2l,f,c
  3265  00EDB8  5002               	movf	RtccWriteTime@pTm+1,w,c
  3266  00EDBA  22DA               	addwfc	fsr2h,f,c
  3267  00EDBC  50DF               	movf	indf2,w,c
  3268  00EDBE  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3269                           
  3270                           ; BSR set to: 15
  3271  00EDC0  0EFC               	movlw	252
  3272  00EDC2  010F               	movlb	15	; () banked
  3273  00EDC4  173F               	andwf	63,f,b	;volatile
  3274                           
  3275                           ; BSR set to: 15
  3276  00EDC6  010F               	movlb	15	; () banked
  3277  00EDC8  813F               	bsf	63,0,b	;volatile
  3278                           
  3279                           ; BSR set to: 15
  3280  00EDCA  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3281                           
  3282                           ; BSR set to: 15
  3283  00EDCE  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3284                           
  3285                           ; BSR set to: 15
  3286  00EDD2  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3287                           
  3288                           ; BSR set to: 15
  3289  00EDD6  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3290                           
  3291                           ; BSR set to: 15
  3292  00EDDA  5005               	movf	RtccWriteTime@wasOn,w,c
  3293  00EDDC  B4D8               	btfsc	status,2,c
  3294  00EDDE  D00D               	goto	l2213
  3295                           
  3296                           ; BSR set to: 15
  3297  00EDE0  010F               	movlb	15	; () banked
  3298  00EDE2  8F3F               	bsf	63,7,b	;volatile
  3299                           
  3300                           ; BSR set to: 15
  3301  00EDE4  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3302  00EDE6  B4D8               	btfsc	status,2,c
  3303  00EDE8  D002               	goto	l2209
  3304                           
  3305                           ; BSR set to: 15
  3306  00EDEA  8E91               	bsf	3985,7,c	;volatile
  3307  00EDEC  D000               	goto	l2209
  3308  00EDEE                     l2209:
  3309                           
  3310                           ; BSR set to: 15
  3311  00EDEE  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3312  00EDF0  B4D8               	btfsc	status,2,c
  3313  00EDF2  D009               	goto	l2217
  3314                           
  3315                           ; BSR set to: 15
  3316  00EDF4  EC3D  F074         	call	_RtccWrOn	;wreg free
  3317  00EDF8  D006               	goto	l2217
  3318  00EDFA                     l2213:
  3319  00EDFA  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3320  00EDFC  A4D8               	btfss	status,2,c
  3321  00EDFE  D003               	goto	l2217
  3322  00EE00  010F               	movlb	15	; () banked
  3323  00EE02  9B3F               	bcf	63,5,b	;volatile
  3324                           
  3325                           ; BSR set to: 15
  3326  00EE04  D000               	goto	l2217
  3327  00EE06                     l2217:
  3328  00EE06  5003               	movf	RtccWriteTime@di,w,c
  3329  00EE08  B4D8               	btfsc	status,2,c
  3330  00EE0A  0012               	return	
  3331  00EE0C  8CF2               	bsf	intcon,6,c	;volatile
  3332  00EE0E  0012               	return	
  3333                           
  3334                           ;	Return value of _RtccWriteTime is never used
  3335  00EE10  0012               	return		;funcret
  3336  00EE12                     __end_of_RtccWriteTime:
  3337                           	opt stack 0
  3338                           tblptru	equ	0xFF8
  3339                           tblptrh	equ	0xFF7
  3340                           tblptrl	equ	0xFF6
  3341                           tablat	equ	0xFF5
  3342                           prodh	equ	0xFF4
  3343                           prodl	equ	0xFF3
  3344                           intcon	equ	0xFF2
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           fsr2h	equ	0xFDA
  3351                           fsr2l	equ	0xFD9
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _RtccWriteDate *****************
  3355 ;; Defined at:
  3356 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;  pDt             2    0[COMRAM] PTR const struct .
  3359 ;;		 -> RtccDate(4), 
  3360 ;;  di              1    2[COMRAM] enum E7121
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  tempHourWDay    2   11[COMRAM] struct .
  3363 ;;  tempDayMonth    2    9[COMRAM] struct .
  3364 ;;  tempYear        2    6[COMRAM] struct .
  3365 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3366 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3367 ;;  wasOn           1    4[COMRAM] enum E7121
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      enum E7337
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3377 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3378 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3379 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3380 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3381 ;;Total ram usage:       13 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    1
  3384 ;; This function calls:
  3385 ;;		_RtccWrOn
  3386 ;; This function is called by:
  3387 ;;		_Write_RTC
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text10
  3392  00F3B2                     __ptext10:
  3393                           	opt stack 0
  3394  00F3B2                     _RtccWriteDate:
  3395                           	opt stack 28
  3396                           
  3397                           ;incstack = 0
  3398  00F3B2  0E00               	movlw	0
  3399  00F3B4  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3400  00F3B6  EE20 F002          	lfsr	2,2
  3401  00F3BA  5001               	movf	RtccWriteDate@pDt,w,c
  3402  00F3BC  26D9               	addwf	fsr2l,f,c
  3403  00F3BE  5002               	movf	RtccWriteDate@pDt+1,w,c
  3404  00F3C0  22DA               	addwfc	fsr2h,f,c
  3405  00F3C2  0E13               	movlw	19
  3406  00F3C4  60DF               	cpfslt	indf2,c
  3407  00F3C6  0012               	return	
  3408  00F3C8  EE20 F002          	lfsr	2,2
  3409  00F3CC  5001               	movf	RtccWriteDate@pDt,w,c
  3410  00F3CE  26D9               	addwf	fsr2l,f,c
  3411  00F3D0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3412  00F3D2  22DA               	addwfc	fsr2h,f,c
  3413  00F3D4  50DF               	movf	indf2,w,c
  3414  00F3D6  B4D8               	btfsc	status,2,c
  3415  00F3D8  0012               	return	
  3416  00F3DA  EE20 F001          	lfsr	2,1
  3417  00F3DE  5001               	movf	RtccWriteDate@pDt,w,c
  3418  00F3E0  26D9               	addwf	fsr2l,f,c
  3419  00F3E2  5002               	movf	RtccWriteDate@pDt+1,w,c
  3420  00F3E4  22DA               	addwfc	fsr2h,f,c
  3421  00F3E6  0E32               	movlw	50
  3422  00F3E8  60DF               	cpfslt	indf2,c
  3423  00F3EA  0012               	return	
  3424  00F3EC  EE20 F001          	lfsr	2,1
  3425  00F3F0  5001               	movf	RtccWriteDate@pDt,w,c
  3426  00F3F2  26D9               	addwf	fsr2l,f,c
  3427  00F3F4  5002               	movf	RtccWriteDate@pDt+1,w,c
  3428  00F3F6  22DA               	addwfc	fsr2h,f,c
  3429  00F3F8  50DF               	movf	indf2,w,c
  3430  00F3FA  B4D8               	btfsc	status,2,c
  3431  00F3FC  0012               	return	
  3432  00F3FE  EE20 F003          	lfsr	2,3
  3433  00F402  5001               	movf	RtccWriteDate@pDt,w,c
  3434  00F404  26D9               	addwf	fsr2l,f,c
  3435  00F406  5002               	movf	RtccWriteDate@pDt+1,w,c
  3436  00F408  22DA               	addwfc	fsr2h,f,c
  3437  00F40A  0E99               	movlw	153
  3438  00F40C  64DF               	cpfsgt	indf2,c
  3439  00F40E  D002               	goto	l2233
  3440  00F410  0012               	return	
  3441                           
  3442                           ;	Return value of _RtccWriteDate is never used
  3443  00F412  0012               	return	
  3444  00F414                     l2233:
  3445  00F414  EE20 F003          	lfsr	2,3
  3446  00F418  5001               	movf	RtccWriteDate@pDt,w,c
  3447  00F41A  26D9               	addwf	fsr2l,f,c
  3448  00F41C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3449  00F41E  22DA               	addwfc	fsr2h,f,c
  3450  00F420  50DF               	movf	indf2,w,c
  3451  00F422  6E07               	movwf	RtccWriteDate@tempYear,c
  3452  00F424  EE20 F001          	lfsr	2,1
  3453  00F428  5001               	movf	RtccWriteDate@pDt,w,c
  3454  00F42A  26D9               	addwf	fsr2l,f,c
  3455  00F42C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3456  00F42E  22DA               	addwfc	fsr2h,f,c
  3457  00F430  50DF               	movf	indf2,w,c
  3458  00F432  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  3459  00F434  EE20 F002          	lfsr	2,2
  3460  00F438  5001               	movf	RtccWriteDate@pDt,w,c
  3461  00F43A  26D9               	addwf	fsr2l,f,c
  3462  00F43C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3463  00F43E  22DA               	addwfc	fsr2h,f,c
  3464  00F440  50DF               	movf	indf2,w,c
  3465  00F442  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  3466  00F444  5003               	movf	RtccWriteDate@di,w,c
  3467  00F446  B4D8               	btfsc	status,2,c
  3468  00F448  D002               	goto	l2239
  3469  00F44A  9CF2               	bcf	intcon,6,c	;volatile
  3470  00F44C  D000               	goto	l2239
  3471  00F44E                     l2239:
  3472  00F44E  0E00               	movlw	0
  3473  00F450  BB3F               	btfsc	63,5,b	;volatile
  3474  00F452  0E01               	movlw	1
  3475  00F454  6E09               	movwf	RtccWriteDate@wasWrEn,c
  3476  00F456  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3477  00F458  A4D8               	btfss	status,2,c
  3478  00F45A  D003               	goto	l2243
  3479  00F45C  EC3D  F074         	call	_RtccWrOn	;wreg free
  3480  00F460  D000               	goto	l2243
  3481  00F462                     l2243:
  3482  00F462  0E00               	movlw	0
  3483  00F464  BF3F               	btfsc	63,7,b	;volatile
  3484  00F466  0E01               	movlw	1
  3485  00F468  6E05               	movwf	RtccWriteDate@wasOn,c
  3486  00F46A  5005               	movf	RtccWriteDate@wasOn,w,c
  3487  00F46C  B4D8               	btfsc	status,2,c
  3488  00F46E  D007               	goto	l2249
  3489  00F470  0E00               	movlw	0
  3490  00F472  BE91               	btfsc	3985,7,c	;volatile
  3491  00F474  0E01               	movlw	1
  3492  00F476  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3493  00F478  010F               	movlb	15	; () banked
  3494  00F47A  9F3F               	bcf	63,7,b	;volatile
  3495  00F47C  D000               	goto	l2249
  3496  00F47E                     l2249:
  3497  00F47E  0EFC               	movlw	252
  3498  00F480  010F               	movlb	15	; () banked
  3499  00F482  173F               	andwf	63,f,b	;volatile
  3500  00F484  010F               	movlb	15	; () banked
  3501  00F486  813F               	bsf	63,0,b	;volatile
  3502                           
  3503                           ; BSR set to: 15
  3504  00F488  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  3505                           
  3506                           ; BSR set to: 15
  3507  00F48C  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  3508                           
  3509                           ; BSR set to: 15
  3510  00F490  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  3511  00F494  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  3512  00F498  50DF               	movf	indf2,w,c
  3513  00F49A  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  3514                           
  3515                           ; BSR set to: 15
  3516  00F49C  0EFC               	movlw	252
  3517  00F49E  010F               	movlb	15	; () banked
  3518  00F4A0  173F               	andwf	63,f,b	;volatile
  3519                           
  3520                           ; BSR set to: 15
  3521  00F4A2  0E03               	movlw	3
  3522  00F4A4  010F               	movlb	15	; () banked
  3523  00F4A6  133F               	iorwf	63,f,b	;volatile
  3524                           
  3525                           ; BSR set to: 15
  3526  00F4A8  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  3527                           
  3528                           ; BSR set to: 15
  3529  00F4AC  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  3530                           
  3531                           ; BSR set to: 15
  3532  00F4B0  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  3533                           
  3534                           ; BSR set to: 15
  3535  00F4B4  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  3536                           
  3537                           ; BSR set to: 15
  3538  00F4B8  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  3539                           
  3540                           ; BSR set to: 15
  3541  00F4BC  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  3542                           
  3543                           ; BSR set to: 15
  3544  00F4C0  5005               	movf	RtccWriteDate@wasOn,w,c
  3545  00F4C2  B4D8               	btfsc	status,2,c
  3546  00F4C4  D00D               	goto	l2285
  3547                           
  3548                           ; BSR set to: 15
  3549  00F4C6  010F               	movlb	15	; () banked
  3550  00F4C8  8F3F               	bsf	63,7,b	;volatile
  3551                           
  3552                           ; BSR set to: 15
  3553  00F4CA  5006               	movf	RtccWriteDate@wasAlrm,w,c
  3554  00F4CC  B4D8               	btfsc	status,2,c
  3555  00F4CE  D002               	goto	l2281
  3556                           
  3557                           ; BSR set to: 15
  3558  00F4D0  8E91               	bsf	3985,7,c	;volatile
  3559  00F4D2  D000               	goto	l2281
  3560  00F4D4                     l2281:
  3561                           
  3562                           ; BSR set to: 15
  3563  00F4D4  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3564  00F4D6  B4D8               	btfsc	status,2,c
  3565  00F4D8  D009               	goto	l2289
  3566                           
  3567                           ; BSR set to: 15
  3568  00F4DA  EC3D  F074         	call	_RtccWrOn	;wreg free
  3569  00F4DE  D006               	goto	l2289
  3570  00F4E0                     l2285:
  3571  00F4E0  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3572  00F4E2  A4D8               	btfss	status,2,c
  3573  00F4E4  D003               	goto	l2289
  3574  00F4E6  010F               	movlb	15	; () banked
  3575  00F4E8  9B3F               	bcf	63,5,b	;volatile
  3576                           
  3577                           ; BSR set to: 15
  3578  00F4EA  D000               	goto	l2289
  3579  00F4EC                     l2289:
  3580  00F4EC  5003               	movf	RtccWriteDate@di,w,c
  3581  00F4EE  B4D8               	btfsc	status,2,c
  3582  00F4F0  0012               	return	
  3583  00F4F2  9CF2               	bcf	intcon,6,c	;volatile
  3584  00F4F4  0012               	return	
  3585                           
  3586                           ;	Return value of _RtccWriteDate is never used
  3587  00F4F6  0012               	return		;funcret
  3588  00F4F8                     __end_of_RtccWriteDate:
  3589                           	opt stack 0
  3590                           tblptru	equ	0xFF8
  3591                           tblptrh	equ	0xFF7
  3592                           tblptrl	equ	0xFF6
  3593                           tablat	equ	0xFF5
  3594                           prodh	equ	0xFF4
  3595                           prodl	equ	0xFF3
  3596                           intcon	equ	0xFF2
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _RtccWrOn *****************
  3607 ;; Defined at:
  3608 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  data            2    0        unsigned int 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;		None               void
  3615 ;; Registers used:
  3616 ;;		wreg, status,2
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3626 ;;Total ram usage:        0 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_Write_RTC
  3632 ;;		_RtccWriteDate
  3633 ;;		_RtccWriteTime
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text11
  3638  00E87A                     __ptext11:
  3639                           	opt stack 0
  3640  00E87A                     _RtccWrOn:
  3641                           	opt stack 28
  3642                           
  3643                           ;incstack = 0
  3644  00E87A  9CF2               	bcf	intcon,6,c	;volatile
  3645  00E87C  0E55               	movlw	85
  3646  00E87E  6EA7               	movwf	4007,c	;volatile
  3647  00E880  0EAA               	movlw	170
  3648  00E882  6EA7               	movwf	4007,c	;volatile
  3649  00E884  010F               	movlb	15	; () banked
  3650  00E886  8B3F               	bsf	63,5,b	;volatile
  3651                           
  3652                           ; BSR set to: 15
  3653  00E888  8CF2               	bsf	intcon,6,c	;volatile
  3654                           
  3655                           ; BSR set to: 15
  3656  00E88A  0012               	return		;funcret
  3657  00E88C                     __end_of_RtccWrOn:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           postinc0	equ	0xFEE
  3667                           wreg	equ	0xFE8
  3668                           postdec1	equ	0xFE5
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _Lcd_Out *****************
  3676 ;; Defined at:
  3677 ;;		line 84 in file "../lcd.h"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  y               1    wreg     unsigned char 
  3680 ;;  x               1   63[COMRAM] unsigned char 
  3681 ;;  buffer          2   64[COMRAM] PTR const unsigned char 
  3682 ;;		 -> STR_35(1), STR_34(1), STR_32(1), STR_30(1), 
  3683 ;;		 -> STR_28(1), STR_26(1), STR_24(1), STR_23(1), 
  3684 ;;		 -> Convert_diasem@buffer_dia(20), STR_6(21), STR_5(20), STR_4(18), 
  3685 ;;		 -> STR_3(19), buffer1(20), STR_1(18), 
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;  y               1   66[COMRAM] unsigned char 
  3688 ;;  data            1   67[COMRAM] unsigned char 
  3689 ;; Return value:  Size  Location     Type
  3690 ;;		None               void
  3691 ;; Registers used:
  3692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3698 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3699 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3701 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;Total ram usage:        5 bytes
  3703 ;; Hardware stack levels used:    1
  3704 ;; Hardware stack levels required when called:    1
  3705 ;; This function calls:
  3706 ;;		_Lcd_Chr_CP
  3707 ;;		_Lcd_Cmd
  3708 ;; This function is called by:
  3709 ;;		_main
  3710 ;;		_V_Principal
  3711 ;;		_ManejaMovimientos
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text12
  3716  00EB1E                     __ptext12:
  3717                           	opt stack 0
  3718  00EB1E                     _Lcd_Out:
  3719                           	opt stack 28
  3720                           
  3721                           ; BSR set to: 15
  3722                           ;incstack = 0
  3723                           ;Lcd_Out@y stored from wreg
  3724  00EB1E  6E43               	movwf	Lcd_Out@y,c
  3725                           
  3726                           ;lcd.h: 86: unsigned char data;
  3727                           ;lcd.h: 87: switch (y)
  3728  00EB20  D00D               	goto	l2407
  3729  00EB22                     l2397:
  3730  00EB22  5040               	movf	Lcd_Out@x,w,c
  3731  00EB24  0F80               	addlw	128
  3732  00EB26  D008               	goto	L4
  3733  00EB28                     l2399:
  3734  00EB28  5040               	movf	Lcd_Out@x,w,c
  3735  00EB2A  0FC0               	addlw	192
  3736  00EB2C  D005               	goto	L4
  3737  00EB2E                     l2401:
  3738  00EB2E  5040               	movf	Lcd_Out@x,w,c
  3739  00EB30  0F94               	addlw	148
  3740  00EB32  D002               	goto	L4
  3741  00EB34                     l2403:
  3742  00EB34  5040               	movf	Lcd_Out@x,w,c
  3743  00EB36  0FD4               	addlw	212
  3744  00EB38                     L4:
  3745  00EB38  6E44               	movwf	Lcd_Out@data,c
  3746                           
  3747                           ;lcd.h: 94: }
  3748                           
  3749                           ;lcd.h: 93: default: break;
  3750  00EB3A  D00E               	goto	l2409
  3751  00EB3C                     l2407:
  3752  00EB3C  5043               	movf	Lcd_Out@y,w,c
  3753                           
  3754                           ; Switch size 1, requested type "space"
  3755                           ; Number of cases is 4, Range of values is 1 to 4
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte           13     7 (average)
  3759                           ;	Chosen strategy is simple_byte
  3760  00EB3E  0A01               	xorlw	1	; case 1
  3761  00EB40  B4D8               	btfsc	status,2,c
  3762  00EB42  D7EF               	goto	l2397
  3763  00EB44  0A03               	xorlw	3	; case 2
  3764  00EB46  B4D8               	btfsc	status,2,c
  3765  00EB48  D7EF               	goto	l2399
  3766  00EB4A  0A01               	xorlw	1	; case 3
  3767  00EB4C  B4D8               	btfsc	status,2,c
  3768  00EB4E  D7EF               	goto	l2401
  3769  00EB50  0A07               	xorlw	7	; case 4
  3770  00EB52  B4D8               	btfsc	status,2,c
  3771  00EB54  D7EF               	goto	l2403
  3772  00EB56  D000               	goto	l2409
  3773  00EB58                     l2409:
  3774                           
  3775                           ;lcd.h: 95: Lcd_Cmd(data);
  3776  00EB58  5044               	movf	Lcd_Out@data,w,c
  3777  00EB5A  EC25  F078         	call	_Lcd_Cmd
  3778                           
  3779                           ;lcd.h: 96: while(*buffer)
  3780  00EB5E  D015               	goto	l2415
  3781  00EB60                     l2411:
  3782                           
  3783                           ;lcd.h: 97: {
  3784                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  3785  00EB60  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3786  00EB64  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3787  00EB68  6AF8               	clrf	tblptru,c
  3788  00EB6A  0E0E               	movlw	(high __ramtop+-1)
  3789  00EB6C  64F7               	cpfsgt	tblptrh,c
  3790  00EB6E  D003               	bra	u1727
  3791  00EB70  0008               	tblrd		*
  3792  00EB72  50F5               	movf	tablat,w,c
  3793  00EB74  D005               	bra	u1720
  3794  00EB76                     u1727:
  3795  00EB76  CFF6 FFD9          	movff	tblptrl,fsr2l
  3796  00EB7A  CFF7 FFDA          	movff	tblptrh,fsr2h
  3797  00EB7E  50DF               	movf	indf2,w,c
  3798  00EB80                     u1720:
  3799  00EB80  EC45  F079         	call	_Lcd_Chr_CP
  3800                           
  3801                           ;lcd.h: 99: buffer++;
  3802  00EB84  4A41               	infsnz	Lcd_Out@buffer,f,c
  3803  00EB86  2A42               	incf	Lcd_Out@buffer+1,f,c
  3804  00EB88  D000               	goto	l2415
  3805  00EB8A                     l2415:
  3806  00EB8A  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3807  00EB8E  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3808  00EB92  6AF8               	clrf	tblptru,c
  3809  00EB94  0E0E               	movlw	(high __ramtop+-1)
  3810  00EB96  64F7               	cpfsgt	tblptrh,c
  3811  00EB98  D003               	bra	u1737
  3812  00EB9A  0008               	tblrd		*
  3813  00EB9C  50F5               	movf	tablat,w,c
  3814  00EB9E  D005               	bra	u1730
  3815  00EBA0                     u1737:
  3816  00EBA0  CFF6 FFD9          	movff	tblptrl,fsr2l
  3817  00EBA4  CFF7 FFDA          	movff	tblptrh,fsr2h
  3818  00EBA8  50DF               	movf	indf2,w,c
  3819  00EBAA                     u1730:
  3820  00EBAA  0900               	iorlw	0
  3821  00EBAC  A4D8               	btfss	status,2,c
  3822  00EBAE  D7D8               	goto	l2411
  3823                           
  3824                           ;lcd.h: 100: }
  3825                           ;lcd.h: 101: return;
  3826  00EBB0  0012               	return		;funcret
  3827  00EBB2                     __end_of_Lcd_Out:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           postdec1	equ	0xFE5
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _Lcd_Chr_CP *****************
  3846 ;; Defined at:
  3847 ;;		line 126 in file "../lcd.h"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  data            1    wreg     unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  data            1    2[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;		None               void
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3862 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3863 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3864 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3865 ;;Total ram usage:        3 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_Lcd_Out
  3871 ;;		_Lcd_Out2
  3872 ;; This function uses a non-reentrant model
  3873 ;;
  3874                           
  3875                           	psect	text13
  3876  00F28A                     __ptext13:
  3877                           	opt stack 0
  3878  00F28A                     _Lcd_Chr_CP:
  3879                           	opt stack 28
  3880                           
  3881                           ;incstack = 0
  3882                           ;Lcd_Chr_CP@data stored from wreg
  3883  00F28A  6E03               	movwf	Lcd_Chr_CP@data,c
  3884                           
  3885                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  3886  00F28C  988A               	bcf	3978,4,c	;volatile
  3887  00F28E  8A8A               	bsf	3978,5,c	;volatile
  3888                           
  3889                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  3890  00F290  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  3891  00F292  AE03               	btfss	Lcd_Chr_CP@data,7,c
  3892  00F294  D001               	bra	u1185
  3893  00F296  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  3894  00F298                     u1185:
  3895  00F298  0E01               	movlw	1
  3896  00F29A  1601               	andwf	??_Lcd_Chr_CP,f,c
  3897  00F29C  508A               	movf	3978,w,c	;volatile
  3898  00F29E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3899  00F2A0  0BFE               	andlw	-2
  3900  00F2A2  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3901  00F2A4  6E8A               	movwf	3978,c	;volatile
  3902  00F2A6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3903  00F2AA  0E06               	movlw	6
  3904  00F2AC  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3905  00F2AE                     u1195:
  3906  00F2AE  90D8               	bcf	status,0,c
  3907  00F2B0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3908  00F2B2  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3909  00F2B4  D7FC               	goto	u1195
  3910  00F2B6  0E01               	movlw	1
  3911  00F2B8  1601               	andwf	??_Lcd_Chr_CP,f,c
  3912  00F2BA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3913  00F2BC  508A               	movf	3978,w,c	;volatile
  3914  00F2BE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3915  00F2C0  0BFD               	andlw	-3
  3916  00F2C2  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3917  00F2C4  6E8A               	movwf	3978,c	;volatile
  3918                           
  3919                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  3920  00F2C6  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3921  00F2CA  0E05               	movlw	5
  3922  00F2CC  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3923  00F2CE                     u1205:
  3924  00F2CE  90D8               	bcf	status,0,c
  3925  00F2D0  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3926  00F2D2  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3927  00F2D4  D7FC               	goto	u1205
  3928  00F2D6  0E01               	movlw	1
  3929  00F2D8  1601               	andwf	??_Lcd_Chr_CP,f,c
  3930  00F2DA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3931  00F2DC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3932  00F2DE  508A               	movf	3978,w,c	;volatile
  3933  00F2E0  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3934  00F2E2  0BFB               	andlw	-5
  3935  00F2E4  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3936  00F2E6  6E8A               	movwf	3978,c	;volatile
  3937  00F2E8  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3938  00F2EC  3A01               	swapf	??_Lcd_Chr_CP,f,c
  3939  00F2EE  0E0F               	movlw	15
  3940  00F2F0  1601               	andwf	??_Lcd_Chr_CP,f,c
  3941  00F2F2  0E01               	movlw	1
  3942  00F2F4  1601               	andwf	??_Lcd_Chr_CP,f,c
  3943  00F2F6  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3944  00F2F8  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3945  00F2FA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3946  00F2FC  508A               	movf	3978,w,c	;volatile
  3947  00F2FE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3948  00F300  0BF7               	andlw	-9
  3949  00F302  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3950  00F304  6E8A               	movwf	3978,c	;volatile
  3951                           
  3952                           ;lcd.h: 130: _delay(10);
  3953  00F306  0E03               	movlw	3
  3954  00F308                     u2257:
  3955  00F308  2EE8               	decfsz	wreg,f,c
  3956  00F30A  D7FE               	goto	u2257
  3957  00F30C  F000               	nop	
  3958                           
  3959                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3960  00F30E  888A               	bsf	3978,4,c	;volatile
  3961  00F310  0E03               	movlw	3
  3962  00F312                     u2267:
  3963  00F312  2EE8               	decfsz	wreg,f,c
  3964  00F314  D7FE               	goto	u2267
  3965  00F316  F000               	nop	
  3966  00F318  988A               	bcf	3978,4,c	;volatile
  3967                           
  3968                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  3969  00F31A  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3970  00F31E  90D8               	bcf	status,0,c
  3971  00F320  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3972  00F322  90D8               	bcf	status,0,c
  3973  00F324  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3974  00F326  90D8               	bcf	status,0,c
  3975  00F328  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3976  00F32A  0E01               	movlw	1
  3977  00F32C  1601               	andwf	??_Lcd_Chr_CP,f,c
  3978  00F32E  508A               	movf	3978,w,c	;volatile
  3979  00F330  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3980  00F332  0BFE               	andlw	-2
  3981  00F334  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3982  00F336  6E8A               	movwf	3978,c	;volatile
  3983  00F338  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3984  00F33C  90D8               	bcf	status,0,c
  3985  00F33E  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3986  00F340  90D8               	bcf	status,0,c
  3987  00F342  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3988  00F344  0E01               	movlw	1
  3989  00F346  1601               	andwf	??_Lcd_Chr_CP,f,c
  3990  00F348  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3991  00F34A  508A               	movf	3978,w,c	;volatile
  3992  00F34C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3993  00F34E  0BFD               	andlw	-3
  3994  00F350  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3995  00F352  6E8A               	movwf	3978,c	;volatile
  3996                           
  3997                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  3998  00F354  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3999  00F358  90D8               	bcf	status,0,c
  4000  00F35A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4001  00F35C  0E01               	movlw	1
  4002  00F35E  1601               	andwf	??_Lcd_Chr_CP,f,c
  4003  00F360  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4004  00F362  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4005  00F364  508A               	movf	3978,w,c	;volatile
  4006  00F366  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4007  00F368  0BFB               	andlw	-5
  4008  00F36A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4009  00F36C  6E8A               	movwf	3978,c	;volatile
  4010  00F36E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4011  00F372  0E01               	movlw	1
  4012  00F374  1601               	andwf	??_Lcd_Chr_CP,f,c
  4013  00F376  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4014  00F378  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4015  00F37A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4016  00F37C  508A               	movf	3978,w,c	;volatile
  4017  00F37E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4018  00F380  0BF7               	andlw	-9
  4019  00F382  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4020  00F384  6E8A               	movwf	3978,c	;volatile
  4021                           
  4022                           ;lcd.h: 134: _delay(10);
  4023  00F386  0E03               	movlw	3
  4024  00F388                     u2277:
  4025  00F388  2EE8               	decfsz	wreg,f,c
  4026  00F38A  D7FE               	goto	u2277
  4027  00F38C  F000               	nop	
  4028                           
  4029                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  4030  00F38E  888A               	bsf	3978,4,c	;volatile
  4031  00F390  0E03               	movlw	3
  4032  00F392                     u2287:
  4033  00F392  2EE8               	decfsz	wreg,f,c
  4034  00F394  D7FE               	goto	u2287
  4035  00F396  F000               	nop	
  4036  00F398  988A               	bcf	3978,4,c	;volatile
  4037                           
  4038                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  4039  00F39A  0E03               	movlw	3
  4040  00F39C                     u2297:
  4041  00F39C  2EE8               	decfsz	wreg,f,c
  4042  00F39E  D7FE               	goto	u2297
  4043  00F3A0  F000               	nop	
  4044  00F3A2  0E0F               	movlw	15
  4045  00F3A4  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  4046  00F3A6  0E48               	movlw	72
  4047  00F3A8                     u2307:
  4048  00F3A8  2EE8               	decfsz	wreg,f,c
  4049  00F3AA  D7FE               	goto	u2307
  4050  00F3AC  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  4051  00F3AE  D7FC               	goto	u2307
  4052  00F3B0  0012               	return		;funcret
  4053  00F3B2                     __end_of_Lcd_Chr_CP:
  4054                           	opt stack 0
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           prodh	equ	0xFF4
  4060                           prodl	equ	0xFF3
  4061                           intcon	equ	0xFF2
  4062                           postinc0	equ	0xFEE
  4063                           wreg	equ	0xFE8
  4064                           postdec1	equ	0xFE5
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _Convert_diasem *****************
  4072 ;; Defined at:
  4073 ;;		line 342 in file "../main.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  dia             2   39[COMRAM] int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  buffer_dia     20   43[COMRAM] unsigned char [20]
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  2   39[COMRAM] PTR unsigned char 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4087 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4088 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4090 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4091 ;;Total ram usage:       24 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    2
  4094 ;; This function calls:
  4095 ;;		_sprintf
  4096 ;; This function is called by:
  4097 ;;		_V_Principal
  4098 ;;		_ManejaMovimientos
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text14
  4103  00EF2C                     __ptext14:
  4104                           	opt stack 0
  4105  00EF2C                     _Convert_diasem:
  4106                           	opt stack 27
  4107                           
  4108                           ;main.c: 344: unsigned char buffer_dia[20];
  4109                           ;main.c: 346: switch(dia){
  4110                           
  4111                           ;incstack = 0
  4112  00EF2C  D069               	goto	l2535
  4113  00EF2E                     l2519:
  4114                           
  4115                           ;main.c: 348: sprintf(buffer_dia,"%s", "Domingo             ");
  4116  00EF2E  0E2C               	movlw	low Convert_diasem@buffer_dia
  4117  00EF30  6E0D               	movwf	sprintf@sp,c
  4118  00EF32  0E00               	movlw	high Convert_diasem@buffer_dia
  4119  00EF34  6E0E               	movwf	sprintf@sp+1,c
  4120  00EF36  0EF4               	movlw	low STR_9
  4121  00EF38  6E0F               	movwf	sprintf@f,c
  4122  00EF3A  0EFF               	movlw	high STR_9
  4123  00EF3C  6E10               	movwf	sprintf@f+1,c
  4124  00EF3E  0E40               	movlw	low STR_10
  4125  00EF40  6E11               	movwf	?_sprintf+4,c
  4126  00EF42  0EFF               	movlw	high STR_10
  4127  00EF44  6E12               	movwf	?_sprintf+5,c
  4128  00EF46  ECC9  F07D         	call	_sprintf	;wreg free
  4129                           
  4130                           ;main.c: 349: break;
  4131  00EF4A  D079               	goto	l2537
  4132  00EF4C                     l2521:
  4133                           
  4134                           ;main.c: 352: sprintf(buffer_dia,"%s", "Lunes               ");
  4135  00EF4C  0E2C               	movlw	low Convert_diasem@buffer_dia
  4136  00EF4E  6E0D               	movwf	sprintf@sp,c
  4137  00EF50  0E00               	movlw	high Convert_diasem@buffer_dia
  4138  00EF52  6E0E               	movwf	sprintf@sp+1,c
  4139  00EF54  0EF4               	movlw	low STR_9
  4140  00EF56  6E0F               	movwf	sprintf@f,c
  4141  00EF58  0EFF               	movlw	high STR_9
  4142  00EF5A  6E10               	movwf	sprintf@f+1,c
  4143  00EF5C  0EEC               	movlw	low STR_12
  4144  00EF5E  6E11               	movwf	?_sprintf+4,c
  4145  00EF60  0EFE               	movlw	high STR_12
  4146  00EF62  6E12               	movwf	?_sprintf+5,c
  4147  00EF64  ECC9  F07D         	call	_sprintf	;wreg free
  4148                           
  4149                           ;main.c: 353: break;
  4150  00EF68  D06A               	goto	l2537
  4151  00EF6A                     l2523:
  4152                           
  4153                           ;main.c: 356: sprintf(buffer_dia,"%s", "Martes              ");
  4154  00EF6A  0E2C               	movlw	low Convert_diasem@buffer_dia
  4155  00EF6C  6E0D               	movwf	sprintf@sp,c
  4156  00EF6E  0E00               	movlw	high Convert_diasem@buffer_dia
  4157  00EF70  6E0E               	movwf	sprintf@sp+1,c
  4158  00EF72  0EF4               	movlw	low STR_9
  4159  00EF74  6E0F               	movwf	sprintf@f,c
  4160  00EF76  0EFF               	movlw	high STR_9
  4161  00EF78  6E10               	movwf	sprintf@f+1,c
  4162  00EF7A  0E16               	movlw	low STR_14
  4163  00EF7C  6E11               	movwf	?_sprintf+4,c
  4164  00EF7E  0EFF               	movlw	high STR_14
  4165  00EF80  6E12               	movwf	?_sprintf+5,c
  4166  00EF82  ECC9  F07D         	call	_sprintf	;wreg free
  4167                           
  4168                           ;main.c: 357: break;
  4169  00EF86  D05B               	goto	l2537
  4170  00EF88                     l2525:
  4171                           
  4172                           ;main.c: 360: sprintf(buffer_dia,"%s", "Miercoles           ");
  4173  00EF88  0E2C               	movlw	low Convert_diasem@buffer_dia
  4174  00EF8A  6E0D               	movwf	sprintf@sp,c
  4175  00EF8C  0E00               	movlw	high Convert_diasem@buffer_dia
  4176  00EF8E  6E0E               	movwf	sprintf@sp+1,c
  4177  00EF90  0EF4               	movlw	low STR_9
  4178  00EF92  6E0F               	movwf	sprintf@f,c
  4179  00EF94  0EFF               	movlw	high STR_9
  4180  00EF96  6E10               	movwf	sprintf@f+1,c
  4181  00EF98  0E6A               	movlw	low STR_16
  4182  00EF9A  6E11               	movwf	?_sprintf+4,c
  4183  00EF9C  0EFF               	movlw	high STR_16
  4184  00EF9E  6E12               	movwf	?_sprintf+5,c
  4185  00EFA0  ECC9  F07D         	call	_sprintf	;wreg free
  4186                           
  4187                           ;main.c: 361: break;
  4188  00EFA4  D04C               	goto	l2537
  4189  00EFA6                     l2527:
  4190                           
  4191                           ;main.c: 364: sprintf(buffer_dia,"%s", "Jueves              ");
  4192  00EFA6  0E2C               	movlw	low Convert_diasem@buffer_dia
  4193  00EFA8  6E0D               	movwf	sprintf@sp,c
  4194  00EFAA  0E00               	movlw	high Convert_diasem@buffer_dia
  4195  00EFAC  6E0E               	movwf	sprintf@sp+1,c
  4196  00EFAE  0EF4               	movlw	low STR_9
  4197  00EFB0  6E0F               	movwf	sprintf@f,c
  4198  00EFB2  0EFF               	movlw	high STR_9
  4199  00EFB4  6E10               	movwf	sprintf@f+1,c
  4200  00EFB6  0E2B               	movlw	low STR_18
  4201  00EFB8  6E11               	movwf	?_sprintf+4,c
  4202  00EFBA  0EFF               	movlw	high STR_18
  4203  00EFBC  6E12               	movwf	?_sprintf+5,c
  4204  00EFBE  ECC9  F07D         	call	_sprintf	;wreg free
  4205                           
  4206                           ;main.c: 365: break;
  4207  00EFC2  D03D               	goto	l2537
  4208  00EFC4                     l2529:
  4209                           
  4210                           ;main.c: 368: sprintf(buffer_dia,"%s", "Viernes             ");
  4211  00EFC4  0E2C               	movlw	low Convert_diasem@buffer_dia
  4212  00EFC6  6E0D               	movwf	sprintf@sp,c
  4213  00EFC8  0E00               	movlw	high Convert_diasem@buffer_dia
  4214  00EFCA  6E0E               	movwf	sprintf@sp+1,c
  4215  00EFCC  0EF4               	movlw	low STR_9
  4216  00EFCE  6E0F               	movwf	sprintf@f,c
  4217  00EFD0  0EFF               	movlw	high STR_9
  4218  00EFD2  6E10               	movwf	sprintf@f+1,c
  4219  00EFD4  0E55               	movlw	low STR_20
  4220  00EFD6  6E11               	movwf	?_sprintf+4,c
  4221  00EFD8  0EFF               	movlw	high STR_20
  4222  00EFDA  6E12               	movwf	?_sprintf+5,c
  4223  00EFDC  ECC9  F07D         	call	_sprintf	;wreg free
  4224                           
  4225                           ;main.c: 369: break;
  4226  00EFE0  D02E               	goto	l2537
  4227  00EFE2                     l2531:
  4228                           
  4229                           ;main.c: 372: sprintf(buffer_dia,"%s", "Sabado              ");
  4230  00EFE2  0E2C               	movlw	low Convert_diasem@buffer_dia
  4231  00EFE4  6E0D               	movwf	sprintf@sp,c
  4232  00EFE6  0E00               	movlw	high Convert_diasem@buffer_dia
  4233  00EFE8  6E0E               	movwf	sprintf@sp+1,c
  4234  00EFEA  0EF4               	movlw	low STR_9
  4235  00EFEC  6E0F               	movwf	sprintf@f,c
  4236  00EFEE  0EFF               	movlw	high STR_9
  4237  00EFF0  6E10               	movwf	sprintf@f+1,c
  4238  00EFF2  0E01               	movlw	low STR_22
  4239  00EFF4  6E11               	movwf	?_sprintf+4,c
  4240  00EFF6  0EFF               	movlw	high STR_22
  4241  00EFF8  6E12               	movwf	?_sprintf+5,c
  4242  00EFFA  ECC9  F07D         	call	_sprintf	;wreg free
  4243                           
  4244                           ;main.c: 374: }
  4245                           ;main.c: 375: }
  4246                           
  4247                           ;main.c: 373: break;
  4248  00EFFE  D01F               	goto	l2537
  4249  00F000                     l2535:
  4250  00F000  C028  F02A         	movff	Convert_diasem@dia,??_Convert_diasem
  4251  00F004  C029  F02B         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  4252                           
  4253                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4254                           ; Switch size 1, requested type "space"
  4255                           ; Number of cases is 1, Range of values is 0 to 0
  4256                           ; switch strategies available:
  4257                           ; Name         Instructions Cycles
  4258                           ; simple_byte            4     3 (average)
  4259                           ;	Chosen strategy is simple_byte
  4260  00F008  502B               	movf	??_Convert_diasem+1,w,c
  4261  00F00A  0A00               	xorlw	0	; case 0
  4262  00F00C  A4D8               	btfss	status,2,c
  4263  00F00E  D017               	goto	l2537
  4264                           
  4265                           ; Switch size 1, requested type "space"
  4266                           ; Number of cases is 7, Range of values is 0 to 6
  4267                           ; switch strategies available:
  4268                           ; Name         Instructions Cycles
  4269                           ; simple_byte           22    12 (average)
  4270                           ;	Chosen strategy is simple_byte
  4271  00F010  502A               	movf	??_Convert_diasem,w,c
  4272  00F012  0A00               	xorlw	0	; case 0
  4273  00F014  B4D8               	btfsc	status,2,c
  4274  00F016  D78B               	goto	l2519
  4275  00F018  0A01               	xorlw	1	; case 1
  4276  00F01A  B4D8               	btfsc	status,2,c
  4277  00F01C  D797               	goto	l2521
  4278  00F01E  0A03               	xorlw	3	; case 2
  4279  00F020  B4D8               	btfsc	status,2,c
  4280  00F022  D7A3               	goto	l2523
  4281  00F024  0A01               	xorlw	1	; case 3
  4282  00F026  B4D8               	btfsc	status,2,c
  4283  00F028  D7AF               	goto	l2525
  4284  00F02A  0A07               	xorlw	7	; case 4
  4285  00F02C  B4D8               	btfsc	status,2,c
  4286  00F02E  D7BB               	goto	l2527
  4287  00F030  0A01               	xorlw	1	; case 5
  4288  00F032  B4D8               	btfsc	status,2,c
  4289  00F034  D7C7               	goto	l2529
  4290  00F036  0A03               	xorlw	3	; case 6
  4291  00F038  B4D8               	btfsc	status,2,c
  4292  00F03A  D7D3               	goto	l2531
  4293  00F03C  D000               	goto	l2537
  4294  00F03E                     l2537:
  4295                           
  4296                           ;main.c: 376: return buffer_dia;
  4297  00F03E  0E2C               	movlw	low Convert_diasem@buffer_dia
  4298  00F040  6E28               	movwf	?_Convert_diasem,c
  4299  00F042  0E00               	movlw	high Convert_diasem@buffer_dia
  4300  00F044  6E29               	movwf	?_Convert_diasem+1,c
  4301  00F046  0012               	return	
  4302  00F048  0012               	return		;funcret
  4303  00F04A                     __end_of_Convert_diasem:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           intcon	equ	0xFF2
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1l	equ	0xFE1
  4316                           indf2	equ	0xFDF
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _sprintf *****************
  4322 ;; Defined at:
  4323 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4326 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4327 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4328 ;;		 -> STR_33(5), STR_31(5), STR_29(5), STR_27(5), 
  4329 ;;		 -> STR_25(5), STR_21(3), STR_19(3), STR_17(3), 
  4330 ;;		 -> STR_15(3), STR_13(3), STR_11(3), STR_9(3), 
  4331 ;;		 -> STR_8(15), STR_7(15), STR_2(5), 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  tmpval          4    0        struct .
  4334 ;;  width           2   36[COMRAM] int 
  4335 ;;  len             2   34[COMRAM] unsigned int 
  4336 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  4337 ;;		 -> STR_36(7), STR_22(21), STR_20(21), STR_18(21), 
  4338 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  4339 ;;  ap              2   30[COMRAM] PTR void [1]
  4340 ;;		 -> ?_sprintf(2), 
  4341 ;;  val             2   27[COMRAM] unsigned int 
  4342 ;;  c               1   38[COMRAM] char 
  4343 ;;  prec            1   29[COMRAM] char 
  4344 ;;  flag            1   26[COMRAM] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  2   12[COMRAM] int 
  4347 ;; Registers used:
  4348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4354 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4355 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4356 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4357 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4358 ;;Total ram usage:       27 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    1
  4361 ;; This function calls:
  4362 ;;		___lwdiv
  4363 ;;		___lwmod
  4364 ;;		___wmul
  4365 ;;		_isdigit
  4366 ;; This function is called by:
  4367 ;;		_main
  4368 ;;		_V_Principal
  4369 ;;		_Convert_diasem
  4370 ;;		_ManejaMovimientos
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text15
  4375  00FB92                     __ptext15:
  4376                           	opt stack 0
  4377  00FB92                     _sprintf:
  4378                           	opt stack 29
  4379                           
  4380                           ;doprnt.c: 494: va_list ap;
  4381                           ;doprnt.c: 499: signed char c;
  4382                           ;doprnt.c: 501: int width;
  4383                           ;doprnt.c: 506: signed char prec;
  4384                           ;doprnt.c: 508: unsigned char flag;
  4385                           ;doprnt.c: 523: union {
  4386                           ;doprnt.c: 524: unsigned long vd;
  4387                           ;doprnt.c: 525: double integ;
  4388                           ;doprnt.c: 526: } tmpval;
  4389                           ;doprnt.c: 528: unsigned int val;
  4390                           ;doprnt.c: 529: unsigned len;
  4391                           ;doprnt.c: 530: const char * cp;
  4392                           ;doprnt.c: 533: *ap = __va_start();
  4393                           
  4394                           ;incstack = 0
  4395  00FB92  0E11               	movlw	low (?_sprintf+4)
  4396  00FB94  6E1F               	movwf	sprintf@ap,c
  4397  00FB96  0E00               	movlw	high (?_sprintf+4)
  4398  00FB98  6E20               	movwf	sprintf@ap+1,c
  4399                           
  4400                           ;doprnt.c: 536: while(c = *f++) {
  4401  00FB9A  D182               	goto	l2151
  4402  00FB9C                     l2035:
  4403                           
  4404                           ;doprnt.c: 538: if(c != '%')
  4405  00FB9C  0E25               	movlw	37
  4406  00FB9E  1827               	xorwf	sprintf@c,w,c
  4407  00FBA0  B4D8               	btfsc	status,2,c
  4408  00FBA2  D009               	goto	l2041
  4409                           
  4410                           ;doprnt.c: 540: {
  4411                           ;doprnt.c: 541: ((*sp++ = (c)));
  4412  00FBA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4413  00FBA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4414  00FBAC  C027  FFDF         	movff	sprintf@c,indf2
  4415  00FBB0  4A0D               	infsnz	sprintf@sp,f,c
  4416  00FBB2  2A0E               	incf	sprintf@sp+1,f,c
  4417                           
  4418                           ;doprnt.c: 542: continue;
  4419  00FBB4  D175               	goto	l2151
  4420  00FBB6                     l2041:
  4421                           
  4422                           ;doprnt.c: 543: }
  4423                           ;doprnt.c: 546: width = 0;
  4424  00FBB6  0E00               	movlw	0
  4425  00FBB8  6E26               	movwf	sprintf@width+1,c
  4426  00FBBA  0E00               	movlw	0
  4427  00FBBC  6E25               	movwf	sprintf@width,c
  4428                           
  4429                           ;doprnt.c: 548: flag = 0;
  4430  00FBBE  0E00               	movlw	0
  4431  00FBC0  6E1B               	movwf	sprintf@flag,c
  4432                           
  4433                           ;doprnt.c: 551: switch(*f) {
  4434                           
  4435                           ;doprnt.c: 550: for(;;) {
  4436  00FBC2  D005               	goto	l2047
  4437  00FBC4                     l2043:
  4438                           
  4439                           ;doprnt.c: 580: flag |= 0x04;
  4440  00FBC4  841B               	bsf	sprintf@flag,2,c
  4441                           
  4442                           ;doprnt.c: 581: f++;
  4443  00FBC6  4A0F               	infsnz	sprintf@f,f,c
  4444  00FBC8  2A10               	incf	sprintf@f+1,f,c
  4445                           
  4446                           ;doprnt.c: 582: continue;
  4447  00FBCA  D001               	goto	l2047
  4448                           
  4449                           ;doprnt.c: 584: }
  4450  00FBCC  D00B               	goto	l2049
  4451  00FBCE                     l2047:
  4452  00FBCE  C00F  FFF6         	movff	sprintf@f,tblptrl
  4453  00FBD2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4454  00FBD6                     	if	0	;tblptru may be non-zero
  4455  00FBD6                     	endif
  4456  00FBD6                     	if	0	;tblptru may be non-zero
  4457  00FBD6                     	endif
  4458  00FBD6  0008               	tblrd		*
  4459  00FBD8  50F5               	movf	tablat,w,c
  4460                           
  4461                           ; Switch size 1, requested type "space"
  4462                           ; Number of cases is 1, Range of values is 48 to 48
  4463                           ; switch strategies available:
  4464                           ; Name         Instructions Cycles
  4465                           ; simple_byte            4     3 (average)
  4466                           ;	Chosen strategy is simple_byte
  4467  00FBDA  0A30               	xorlw	48	; case 48
  4468  00FBDC  B4D8               	btfsc	status,2,c
  4469  00FBDE  D7F2               	goto	l2043
  4470                           
  4471                           ;doprnt.c: 585: break;
  4472  00FBE0  D001               	goto	l2049
  4473                           
  4474                           ;doprnt.c: 586: }
  4475  00FBE2  D7F5               	goto	l2047
  4476  00FBE4                     l2049:
  4477                           
  4478                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4479  00FBE4  C00F  FFF6         	movff	sprintf@f,tblptrl
  4480  00FBE8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4481  00FBEC                     	if	0	;tblptru may be non-zero
  4482  00FBEC                     	endif
  4483  00FBEC                     	if	0	;tblptru may be non-zero
  4484  00FBEC                     	endif
  4485  00FBEC  0008               	tblrd		*
  4486  00FBEE  50F5               	movf	tablat,w,c
  4487  00FBF0  EC56  F074         	call	_isdigit
  4488  00FBF4  A0D8               	btfss	status,0,c
  4489  00FBF6  D0A2               	goto	l2099
  4490                           
  4491                           ;doprnt.c: 598: width = 0;
  4492  00FBF8  0E00               	movlw	0
  4493  00FBFA  6E26               	movwf	sprintf@width+1,c
  4494  00FBFC  0E00               	movlw	0
  4495  00FBFE  6E25               	movwf	sprintf@width,c
  4496  00FC00  D000               	goto	l2053
  4497  00FC02                     l2053:
  4498                           
  4499                           ;doprnt.c: 600: width *= 10;
  4500  00FC02  C025  F001         	movff	sprintf@width,___wmul@multiplier
  4501  00FC06  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4502  00FC0A  0E00               	movlw	0
  4503  00FC0C  6E04               	movwf	___wmul@multiplicand+1,c
  4504  00FC0E  0E0A               	movlw	10
  4505  00FC10  6E03               	movwf	___wmul@multiplicand,c
  4506  00FC12  EC78  F074         	call	___wmul	;wreg free
  4507  00FC16  C001  F025         	movff	?___wmul,sprintf@width
  4508  00FC1A  C002  F026         	movff	?___wmul+1,sprintf@width+1
  4509                           
  4510                           ;doprnt.c: 601: width += *f++ - '0';
  4511  00FC1E  0ED0               	movlw	208
  4512  00FC20  6E17               	movwf	??_sprintf& (0+255),c
  4513  00FC22  0EFF               	movlw	255
  4514  00FC24  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4515  00FC26  C00F  FFF6         	movff	sprintf@f,tblptrl
  4516  00FC2A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4517  00FC2E                     	if	0	;tblptru may be non-zero
  4518  00FC2E                     	endif
  4519  00FC2E                     	if	0	;tblptru may be non-zero
  4520  00FC2E                     	endif
  4521  00FC2E  0008               	tblrd		*
  4522  00FC30  50F5               	movf	tablat,w,c
  4523  00FC32  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4524  00FC34  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4525  00FC36  5017               	movf	??_sprintf,w,c
  4526  00FC38  2619               	addwf	??_sprintf+2,f,c
  4527  00FC3A  5018               	movf	??_sprintf+1,w,c
  4528  00FC3C  221A               	addwfc	??_sprintf+3,f,c
  4529  00FC3E  5019               	movf	??_sprintf+2,w,c
  4530  00FC40  2625               	addwf	sprintf@width,f,c
  4531  00FC42  501A               	movf	??_sprintf+3,w,c
  4532  00FC44  2226               	addwfc	sprintf@width+1,f,c
  4533  00FC46  4A0F               	infsnz	sprintf@f,f,c
  4534  00FC48  2A10               	incf	sprintf@f+1,f,c
  4535                           
  4536                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4537  00FC4A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4538  00FC4E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4539  00FC52                     	if	0	;tblptru may be non-zero
  4540  00FC52                     	endif
  4541  00FC52                     	if	0	;tblptru may be non-zero
  4542  00FC52                     	endif
  4543  00FC52  0008               	tblrd		*
  4544  00FC54  50F5               	movf	tablat,w,c
  4545  00FC56  EC56  F074         	call	_isdigit
  4546  00FC5A  A0D8               	btfss	status,0,c
  4547  00FC5C  D06F               	goto	l2099
  4548  00FC5E  D7D1               	goto	l2053
  4549                           
  4550                           ;doprnt.c: 608: }
  4551                           ;doprnt.c: 635: switch(c = *f++) {
  4552  00FC60  D06D               	goto	l2099
  4553                           
  4554                           ;doprnt.c: 638: goto alldone;
  4555                           
  4556                           ;doprnt.c: 637: case 0:
  4557  00FC62  D12C               	goto	l2153
  4558  00FC64                     l2061:
  4559                           
  4560                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4561  00FC64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4562  00FC68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4563  00FC6C  CFDE F021          	movff	postinc2,sprintf@cp
  4564  00FC70  CFDD F022          	movff	postdec2,sprintf@cp+1
  4565  00FC74  0E02               	movlw	2
  4566  00FC76  261F               	addwf	sprintf@ap,f,c
  4567  00FC78  0E00               	movlw	0
  4568  00FC7A  2220               	addwfc	sprintf@ap+1,f,c
  4569                           
  4570                           ;doprnt.c: 740: if(!cp)
  4571  00FC7C  5021               	movf	sprintf@cp,w,c
  4572  00FC7E  1022               	iorwf	sprintf@cp+1,w,c
  4573  00FC80  A4D8               	btfss	status,2,c
  4574  00FC82  D005               	goto	l2069
  4575                           
  4576                           ;doprnt.c: 741: cp = "(null)";
  4577  00FC84  0EE8               	movlw	low STR_36
  4578  00FC86  6E21               	movwf	sprintf@cp,c
  4579  00FC88  0EFF               	movlw	high STR_36
  4580  00FC8A  6E22               	movwf	sprintf@cp+1,c
  4581  00FC8C  D000               	goto	l2069
  4582  00FC8E                     l2069:
  4583                           
  4584                           ;doprnt.c: 745: len = 0;
  4585  00FC8E  0E00               	movlw	0
  4586  00FC90  6E24               	movwf	sprintf@len+1,c
  4587  00FC92  0E00               	movlw	0
  4588  00FC94  6E23               	movwf	sprintf@len,c
  4589                           
  4590                           ;doprnt.c: 746: while(cp[len])
  4591  00FC96  D003               	goto	l2073
  4592  00FC98                     l2071:
  4593                           
  4594                           ;doprnt.c: 747: len++;
  4595  00FC98  4A23               	infsnz	sprintf@len,f,c
  4596  00FC9A  2A24               	incf	sprintf@len+1,f,c
  4597  00FC9C  D000               	goto	l2073
  4598  00FC9E                     l2073:
  4599  00FC9E  5023               	movf	sprintf@len,w,c
  4600  00FCA0  2421               	addwf	sprintf@cp,w,c
  4601  00FCA2  6E17               	movwf	??_sprintf& (0+255),c
  4602  00FCA4  5024               	movf	sprintf@len+1,w,c
  4603  00FCA6  2022               	addwfc	sprintf@cp+1,w,c
  4604  00FCA8  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4605  00FCAA  C017  FFF6         	movff	??_sprintf,tblptrl
  4606  00FCAE  C018  FFF7         	movff	??_sprintf+1,tblptrh
  4607  00FCB2                     	if	0	;tblptru may be non-zero
  4608  00FCB2                     	endif
  4609  00FCB2                     	if	0	;tblptru may be non-zero
  4610  00FCB2                     	endif
  4611  00FCB2  0008               	tblrd		*
  4612  00FCB4  50F5               	movf	tablat,w,c
  4613  00FCB6  0900               	iorlw	0
  4614  00FCB8  A4D8               	btfss	status,2,c
  4615  00FCBA  D7EE               	goto	l2071
  4616                           
  4617                           ;doprnt.c: 757: if(width > len)
  4618  00FCBC  5025               	movf	sprintf@width,w,c
  4619  00FCBE  5C23               	subwf	sprintf@len,w,c
  4620  00FCC0  5026               	movf	sprintf@width+1,w,c
  4621  00FCC2  5824               	subwfb	sprintf@len+1,w,c
  4622  00FCC4  B0D8               	btfsc	status,0,c
  4623  00FCC6  D005               	goto	l2079
  4624                           
  4625                           ;doprnt.c: 758: width -= len;
  4626  00FCC8  5023               	movf	sprintf@len,w,c
  4627  00FCCA  5E25               	subwf	sprintf@width,f,c
  4628  00FCCC  5024               	movf	sprintf@len+1,w,c
  4629  00FCCE  5A26               	subwfb	sprintf@width+1,f,c
  4630  00FCD0  D00E               	goto	l2085
  4631  00FCD2                     l2079:
  4632                           
  4633                           ;doprnt.c: 759: else
  4634                           ;doprnt.c: 760: width = 0;
  4635  00FCD2  0E00               	movlw	0
  4636  00FCD4  6E26               	movwf	sprintf@width+1,c
  4637  00FCD6  0E00               	movlw	0
  4638  00FCD8  6E25               	movwf	sprintf@width,c
  4639                           
  4640                           ;doprnt.c: 764: while(width--)
  4641  00FCDA  D009               	goto	l2085
  4642  00FCDC                     l2081:
  4643                           
  4644                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4645  00FCDC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4646  00FCE0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4647  00FCE4  0E20               	movlw	32
  4648  00FCE6  6EDF               	movwf	indf2,c
  4649  00FCE8  4A0D               	infsnz	sprintf@sp,f,c
  4650  00FCEA  2A0E               	incf	sprintf@sp+1,f,c
  4651  00FCEC  D000               	goto	l2085
  4652  00FCEE                     l2085:
  4653  00FCEE  0625               	decf	sprintf@width,f,c
  4654  00FCF0  A0D8               	btfss	status,0,c
  4655  00FCF2  0626               	decf	sprintf@width+1,f,c
  4656  00FCF4  2825               	incf	sprintf@width,w,c
  4657  00FCF6  E1F2               	bnz	l2081
  4658  00FCF8  2826               	incf	sprintf@width+1,w,c
  4659  00FCFA  B4D8               	btfsc	status,2,c
  4660  00FCFC  D012               	goto	l2093
  4661  00FCFE  D7EE               	goto	l2081
  4662                           
  4663                           ;doprnt.c: 767: while(len--)
  4664  00FD00  D010               	goto	l2093
  4665  00FD02                     l2087:
  4666                           
  4667                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4668  00FD02  C021  FFF6         	movff	sprintf@cp,tblptrl
  4669  00FD06  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  4670  00FD0A                     	if	0	;tblptru may be non-zero
  4671  00FD0A                     	endif
  4672  00FD0A                     	if	0	;tblptru may be non-zero
  4673  00FD0A                     	endif
  4674  00FD0A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4675  00FD0E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4676  00FD12  0008               	tblrd		*
  4677  00FD14  CFF5 FFDF          	movff	tablat,indf2
  4678  00FD18  4A21               	infsnz	sprintf@cp,f,c
  4679  00FD1A  2A22               	incf	sprintf@cp+1,f,c
  4680  00FD1C  4A0D               	infsnz	sprintf@sp,f,c
  4681  00FD1E  2A0E               	incf	sprintf@sp+1,f,c
  4682  00FD20  D000               	goto	l2093
  4683  00FD22                     l2093:
  4684  00FD22  0623               	decf	sprintf@len,f,c
  4685  00FD24  A0D8               	btfss	status,0,c
  4686  00FD26  0624               	decf	sprintf@len+1,f,c
  4687  00FD28  2823               	incf	sprintf@len,w,c
  4688  00FD2A  E1EB               	bnz	l2087
  4689  00FD2C  2824               	incf	sprintf@len+1,w,c
  4690  00FD2E  B4D8               	btfsc	status,2,c
  4691  00FD30  D0B7               	goto	l2151
  4692  00FD32  D7E7               	goto	l2087
  4693                           
  4694                           ;doprnt.c: 813: continue;
  4695                           
  4696                           ;doprnt.c: 802: default:
  4697                           
  4698                           ;doprnt.c: 774: continue;
  4699  00FD34  D0B5               	goto	l2151
  4700  00FD36                     l2095:
  4701                           
  4702                           ;doprnt.c: 818: flag |= 0xC0;
  4703  00FD36  0EC0               	movlw	192
  4704  00FD38  121B               	iorwf	sprintf@flag,f,c
  4705                           
  4706                           ;doprnt.c: 822: }
  4707                           
  4708                           ;doprnt.c: 819: break;
  4709  00FD3A  D014               	goto	l2101
  4710  00FD3C                     l2099:
  4711  00FD3C  C00F  FFF6         	movff	sprintf@f,tblptrl
  4712  00FD40  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4713  00FD44  4A0F               	infsnz	sprintf@f,f,c
  4714  00FD46  2A10               	incf	sprintf@f+1,f,c
  4715  00FD48                     	if	0	;tblptru may be non-zero
  4716  00FD48                     	endif
  4717  00FD48                     	if	0	;tblptru may be non-zero
  4718  00FD48                     	endif
  4719  00FD48  0008               	tblrd		*
  4720  00FD4A  CFF5 F027          	movff	tablat,sprintf@c
  4721  00FD4E  5027               	movf	sprintf@c,w,c
  4722                           
  4723                           ; Switch size 1, requested type "space"
  4724                           ; Number of cases is 3, Range of values is 0 to 117
  4725                           ; switch strategies available:
  4726                           ; Name         Instructions Cycles
  4727                           ; simple_byte           10     6 (average)
  4728                           ;	Chosen strategy is simple_byte
  4729  00FD50  0A00               	xorlw	0	; case 0
  4730  00FD52  B4D8               	btfsc	status,2,c
  4731  00FD54  D0B3               	goto	l2153
  4732  00FD56  0A73               	xorlw	115	; case 115
  4733  00FD58  B4D8               	btfsc	status,2,c
  4734  00FD5A  D784               	goto	l2061
  4735  00FD5C  0A06               	xorlw	6	; case 117
  4736  00FD5E  B4D8               	btfsc	status,2,c
  4737  00FD60  D7EA               	goto	l2095
  4738  00FD62  D09E               	goto	l2151
  4739  00FD64                     l2101:
  4740                           
  4741                           ;doprnt.c: 1273: {
  4742                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4743  00FD64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4744  00FD68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4745  00FD6C  CFDE F01C          	movff	postinc2,sprintf@val
  4746  00FD70  CFDD F01D          	movff	postdec2,sprintf@val+1
  4747  00FD74  0E02               	movlw	2
  4748  00FD76  261F               	addwf	sprintf@ap,f,c
  4749  00FD78  0E00               	movlw	0
  4750  00FD7A  2220               	addwfc	sprintf@ap+1,f,c
  4751                           
  4752                           ;doprnt.c: 1287: }
  4753                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4754  00FD7C  0E01               	movlw	1
  4755  00FD7E  6E27               	movwf	sprintf@c,c
  4756  00FD80                     l2107:
  4757  00FD80  0E05               	movlw	5
  4758  00FD82  1827               	xorwf	sprintf@c,w,c
  4759  00FD84  B4D8               	btfsc	status,2,c
  4760  00FD86  D016               	goto	l2119
  4761  00FD88  D001               	goto	l2111
  4762  00FD8A  D014               	goto	l2119
  4763  00FD8C                     l2111:
  4764                           
  4765                           ;doprnt.c: 1306: if(val < dpowers[c])
  4766  00FD8C  5027               	movf	sprintf@c,w,c
  4767  00FD8E  0D02               	mullw	2
  4768  00FD90  0ECD               	movlw	low _dpowers
  4769  00FD92  24F3               	addwf	prodl,w,c
  4770  00FD94  6EF6               	movwf	tblptrl,c
  4771  00FD96  0EFE               	movlw	high _dpowers
  4772  00FD98  20F4               	addwfc	prodh,w,c
  4773  00FD9A  6EF7               	movwf	tblptrh,c
  4774  00FD9C                     	if	0	;There are less than 3 active tblptr bytes
  4775  00FD9C                     	endif
  4776  00FD9C  0009               	tblrd		*+
  4777  00FD9E  50F5               	movf	tablat,w,c
  4778  00FDA0  5C1C               	subwf	sprintf@val,w,c
  4779  00FDA2  0009               	tblrd		*+
  4780  00FDA4  50F5               	movf	tablat,w,c
  4781  00FDA6  581D               	subwfb	sprintf@val+1,w,c
  4782  00FDA8  A0D8               	btfss	status,0,c
  4783  00FDAA  D004               	goto	l2119
  4784  00FDAC  D001               	goto	l2115
  4785                           
  4786                           ;doprnt.c: 1307: break;
  4787  00FDAE  D002               	goto	l2119
  4788  00FDB0                     l2115:
  4789  00FDB0  2A27               	incf	sprintf@c,f,c
  4790  00FDB2  D7E6               	goto	l2107
  4791  00FDB4                     l2119:
  4792                           
  4793                           ;doprnt.c: 1381: if(width > c)
  4794  00FDB4  0E80               	movlw	128
  4795  00FDB6  BE27               	btfsc	sprintf@c,7,c
  4796  00FDB8  0E7F               	movlw	127
  4797  00FDBA  6E17               	movwf	??_sprintf& (0+255),c
  4798  00FDBC  5025               	movf	sprintf@width,w,c
  4799  00FDBE  5C27               	subwf	sprintf@c,w,c
  4800  00FDC0  5026               	movf	sprintf@width+1,w,c
  4801  00FDC2  0A80               	xorlw	128
  4802  00FDC4  5817               	subwfb	??_sprintf& (0+255),w,c
  4803  00FDC6  B0D8               	btfsc	status,0,c
  4804  00FDC8  D007               	goto	l2123
  4805                           
  4806                           ;doprnt.c: 1382: width -= c;
  4807  00FDCA  5027               	movf	sprintf@c,w,c
  4808  00FDCC  5E25               	subwf	sprintf@width,f,c
  4809  00FDCE  0E00               	movlw	0
  4810  00FDD0  BE27               	btfsc	sprintf@c,7,c
  4811  00FDD2  0EFF               	movlw	255
  4812  00FDD4  5A26               	subwfb	sprintf@width+1,f,c
  4813  00FDD6  D005               	goto	l2125
  4814  00FDD8                     l2123:
  4815                           
  4816                           ;doprnt.c: 1383: else
  4817                           ;doprnt.c: 1384: width = 0;
  4818  00FDD8  0E00               	movlw	0
  4819  00FDDA  6E26               	movwf	sprintf@width+1,c
  4820  00FDDC  0E00               	movlw	0
  4821  00FDDE  6E25               	movwf	sprintf@width,c
  4822  00FDE0  D000               	goto	l2125
  4823  00FDE2                     l2125:
  4824                           
  4825                           ;doprnt.c: 1387: if(flag & 0x04) {
  4826  00FDE2  A41B               	btfss	sprintf@flag,2,c
  4827  00FDE4  D015               	goto	l2135
  4828                           
  4829                           ;doprnt.c: 1415: if(width)
  4830  00FDE6  5025               	movf	sprintf@width,w,c
  4831  00FDE8  1026               	iorwf	sprintf@width+1,w,c
  4832  00FDEA  B4D8               	btfsc	status,2,c
  4833  00FDEC  D026               	goto	l299
  4834  00FDEE                     l2129:
  4835                           
  4836                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4837  00FDEE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4838  00FDF2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4839  00FDF6  0E30               	movlw	48
  4840  00FDF8  6EDF               	movwf	indf2,c
  4841  00FDFA  4A0D               	infsnz	sprintf@sp,f,c
  4842  00FDFC  2A0E               	incf	sprintf@sp+1,f,c
  4843                           
  4844                           ;doprnt.c: 1418: while(--width);
  4845  00FDFE  0625               	decf	sprintf@width,f,c
  4846  00FE00  A0D8               	btfss	status,0,c
  4847  00FE02  0626               	decf	sprintf@width+1,f,c
  4848  00FE04  5025               	movf	sprintf@width,w,c
  4849  00FE06  1026               	iorwf	sprintf@width+1,w,c
  4850  00FE08  B4D8               	btfsc	status,2,c
  4851  00FE0A  D017               	goto	l299
  4852  00FE0C  D7F0               	goto	l2129
  4853                           
  4854                           ;doprnt.c: 1420: } else
  4855  00FE0E  D015               	goto	l299
  4856  00FE10                     l2135:
  4857                           
  4858                           ;doprnt.c: 1422: {
  4859                           ;doprnt.c: 1424: if(width
  4860                           ;doprnt.c: 1428: )
  4861  00FE10  5025               	movf	sprintf@width,w,c
  4862  00FE12  1026               	iorwf	sprintf@width+1,w,c
  4863  00FE14  B4D8               	btfsc	status,2,c
  4864  00FE16  D011               	goto	l299
  4865  00FE18                     l2137:
  4866                           
  4867                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4868  00FE18  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4869  00FE1C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4870  00FE20  0E20               	movlw	32
  4871  00FE22  6EDF               	movwf	indf2,c
  4872  00FE24  4A0D               	infsnz	sprintf@sp,f,c
  4873  00FE26  2A0E               	incf	sprintf@sp+1,f,c
  4874                           
  4875                           ;doprnt.c: 1431: while(--width);
  4876  00FE28  0625               	decf	sprintf@width,f,c
  4877  00FE2A  A0D8               	btfss	status,0,c
  4878  00FE2C  0626               	decf	sprintf@width+1,f,c
  4879  00FE2E  5025               	movf	sprintf@width,w,c
  4880  00FE30  1026               	iorwf	sprintf@width+1,w,c
  4881  00FE32  B4D8               	btfsc	status,2,c
  4882  00FE34  D002               	goto	l299
  4883  00FE36  D7F0               	goto	l2137
  4884  00FE38  D000               	goto	l299
  4885  00FE3A                     l299:
  4886                           
  4887                           ;doprnt.c: 1469: }
  4888                           ;doprnt.c: 1472: prec = c;
  4889  00FE3A  C027  F01E         	movff	sprintf@c,sprintf@prec
  4890                           
  4891                           ;doprnt.c: 1474: while(prec--) {
  4892  00FE3E  D02A               	goto	l2149
  4893  00FE40                     l2143:
  4894                           
  4895                           ;doprnt.c: 1478: {
  4896                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4897  00FE40  501E               	movf	sprintf@prec,w,c
  4898  00FE42  0D02               	mullw	2
  4899  00FE44  0ECD               	movlw	low _dpowers
  4900  00FE46  24F3               	addwf	prodl,w,c
  4901  00FE48  6EF6               	movwf	tblptrl,c
  4902  00FE4A  0EFE               	movlw	high _dpowers
  4903  00FE4C  20F4               	addwfc	prodh,w,c
  4904  00FE4E  6EF7               	movwf	tblptrh,c
  4905  00FE50                     	if	0	;There are less than 3 active tblptr bytes
  4906  00FE50                     	endif
  4907  00FE50  0009               	tblrd		*+
  4908  00FE52  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4909  00FE56  000A               	tblrd		*-
  4910  00FE58  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4911  00FE5C  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  4912  00FE60  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  4913  00FE64  ECB2  F074         	call	___lwdiv	;wreg free
  4914  00FE68  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4915  00FE6C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4916  00FE70  0E00               	movlw	0
  4917  00FE72  6E0B               	movwf	___lwmod@divisor+1,c
  4918  00FE74  0E0A               	movlw	10
  4919  00FE76  6E0A               	movwf	___lwmod@divisor,c
  4920  00FE78  EC8C  F074         	call	___lwmod	;wreg free
  4921  00FE7C  5008               	movf	?___lwmod,w,c
  4922  00FE7E  0F30               	addlw	48
  4923  00FE80  6E27               	movwf	sprintf@c,c
  4924                           
  4925                           ;doprnt.c: 1523: }
  4926                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4927  00FE82  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4928  00FE86  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4929  00FE8A  C027  FFDF         	movff	sprintf@c,indf2
  4930  00FE8E  4A0D               	infsnz	sprintf@sp,f,c
  4931  00FE90  2A0E               	incf	sprintf@sp+1,f,c
  4932  00FE92  D000               	goto	l2149
  4933  00FE94                     l2149:
  4934  00FE94  061E               	decf	sprintf@prec,f,c
  4935  00FE96  281E               	incf	sprintf@prec,w,c
  4936  00FE98  B4D8               	btfsc	status,2,c
  4937  00FE9A  D002               	goto	l2151
  4938  00FE9C  D7D1               	goto	l2143
  4939  00FE9E  D000               	goto	l2151
  4940  00FEA0                     l2151:
  4941  00FEA0  C00F  FFF6         	movff	sprintf@f,tblptrl
  4942  00FEA4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4943  00FEA8  4A0F               	infsnz	sprintf@f,f,c
  4944  00FEAA  2A10               	incf	sprintf@f+1,f,c
  4945  00FEAC                     	if	0	;tblptru may be non-zero
  4946  00FEAC                     	endif
  4947  00FEAC                     	if	0	;tblptru may be non-zero
  4948  00FEAC                     	endif
  4949  00FEAC  0008               	tblrd		*
  4950  00FEAE  CFF5 F027          	movff	tablat,sprintf@c
  4951  00FEB2  5027               	movf	sprintf@c,w,c
  4952  00FEB4  B4D8               	btfsc	status,2,c
  4953  00FEB6  D002               	goto	l2153
  4954  00FEB8  D671               	goto	l2035
  4955  00FEBA  D000               	goto	l2153
  4956  00FEBC                     l2153:
  4957                           
  4958                           ;doprnt.c: 1538: *sp = 0;
  4959  00FEBC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4960  00FEC0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4961  00FEC4  0E00               	movlw	0
  4962  00FEC6  6EDF               	movwf	indf2,c
  4963  00FEC8  0012               	return	
  4964                           
  4965                           ;doprnt.c: 1540: return 0;
  4966                           ;	Return value of _sprintf is never used
  4967  00FECA  0012               	return		;funcret
  4968  00FECC                     __end_of_sprintf:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           prodh	equ	0xFF4
  4975                           prodl	equ	0xFF3
  4976                           intcon	equ	0xFF2
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           indf2	equ	0xFDF
  4982                           postinc2	equ	0xFDE
  4983                           postdec2	equ	0xFDD
  4984                           fsr2h	equ	0xFDA
  4985                           fsr2l	equ	0xFD9
  4986                           status	equ	0xFD8
  4987                           
  4988 ;; *************** function _isdigit *****************
  4989 ;; Defined at:
  4990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;  c               1    wreg     unsigned char 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  c               1    2[COMRAM] unsigned char 
  4995 ;; Return value:  Size  Location     Type
  4996 ;;		None               void
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5007 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5008 ;;Total ram usage:        3 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; This function calls:
  5011 ;;		Nothing
  5012 ;; This function is called by:
  5013 ;;		_sprintf
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text16
  5018  00E8AC                     __ptext16:
  5019                           	opt stack 0
  5020  00E8AC                     _isdigit:
  5021                           	opt stack 29
  5022                           
  5023                           ;incstack = 0
  5024                           ;isdigit@c stored from wreg
  5025  00E8AC  6E03               	movwf	isdigit@c,c
  5026  00E8AE  0E00               	movlw	0
  5027  00E8B0  6E02               	movwf	_isdigit$2086,c
  5028  00E8B2  0E3A               	movlw	58
  5029  00E8B4  6003               	cpfslt	isdigit@c,c
  5030  00E8B6  D006               	goto	l1939
  5031  00E8B8  0E2F               	movlw	47
  5032  00E8BA  6403               	cpfsgt	isdigit@c,c
  5033  00E8BC  D003               	goto	l1939
  5034  00E8BE  0E01               	movlw	1
  5035  00E8C0  6E02               	movwf	_isdigit$2086,c
  5036  00E8C2  D000               	goto	l1939
  5037  00E8C4                     l1939:
  5038  00E8C4  C002  F001         	movff	_isdigit$2086,??_isdigit
  5039  00E8C8  3001               	rrcf	??_isdigit,w,c
  5040  00E8CA  0012               	return	
  5041  00E8CC  0012               	return		;funcret
  5042  00E8CE                     __end_of_isdigit:
  5043                           	opt stack 0
  5044                           tblptru	equ	0xFF8
  5045                           tblptrh	equ	0xFF7
  5046                           tblptrl	equ	0xFF6
  5047                           tablat	equ	0xFF5
  5048                           prodh	equ	0xFF4
  5049                           prodl	equ	0xFF3
  5050                           intcon	equ	0xFF2
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postdec1	equ	0xFE5
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           fsr2h	equ	0xFDA
  5059                           fsr2l	equ	0xFD9
  5060                           status	equ	0xFD8
  5061                           
  5062 ;; *************** function ___wmul *****************
  5063 ;; Defined at:
  5064 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  multiplier      2    0[COMRAM] unsigned int 
  5067 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;  product         2    4[COMRAM] unsigned int 
  5070 ;; Return value:  Size  Location     Type
  5071 ;;                  2    0[COMRAM] unsigned int 
  5072 ;; Registers used:
  5073 ;;		wreg, status,2, status,0, prodl, prodh
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5079 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5082 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5083 ;;Total ram usage:        6 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_sprintf
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text17
  5093  00E8F0                     __ptext17:
  5094                           	opt stack 0
  5095  00E8F0                     ___wmul:
  5096                           	opt stack 29
  5097                           
  5098                           ;incstack = 0
  5099  00E8F0  5001               	movf	___wmul@multiplier,w,c
  5100  00E8F2  0203               	mulwf	___wmul@multiplicand,c
  5101  00E8F4  CFF3 F005          	movff	prodl,___wmul@product
  5102  00E8F8  CFF4 F006          	movff	prodh,___wmul@product+1
  5103  00E8FC  5001               	movf	___wmul@multiplier,w,c
  5104  00E8FE  0204               	mulwf	___wmul@multiplicand+1,c
  5105  00E900  50F3               	movf	prodl,w,c
  5106  00E902  2606               	addwf	___wmul@product+1,f,c
  5107  00E904  5002               	movf	___wmul@multiplier+1,w,c
  5108  00E906  0203               	mulwf	___wmul@multiplicand,c
  5109  00E908  50F3               	movf	prodl,w,c
  5110  00E90A  2606               	addwf	___wmul@product+1,f,c
  5111  00E90C  C005  F001         	movff	___wmul@product,?___wmul
  5112  00E910  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5113  00E914  0012               	return	
  5114  00E916  0012               	return		;funcret
  5115  00E918                     __end_of___wmul:
  5116                           	opt stack 0
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           intcon	equ	0xFF2
  5124                           postinc0	equ	0xFEE
  5125                           wreg	equ	0xFE8
  5126                           postdec1	equ	0xFE5
  5127                           fsr1l	equ	0xFE1
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function ___lwmod *****************
  5136 ;; Defined at:
  5137 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;  dividend        2    7[COMRAM] unsigned int 
  5140 ;;  divisor         2    9[COMRAM] unsigned int 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  counter         1   11[COMRAM] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2    7[COMRAM] unsigned int 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5152 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;Total ram usage:        5 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_sprintf
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text18
  5166  00E918                     __ptext18:
  5167                           	opt stack 0
  5168  00E918                     ___lwmod:
  5169                           	opt stack 29
  5170                           
  5171                           ;incstack = 0
  5172  00E918  500A               	movf	___lwmod@divisor,w,c
  5173  00E91A  100B               	iorwf	___lwmod@divisor+1,w,c
  5174  00E91C  B4D8               	btfsc	status,2,c
  5175  00E91E  D01D               	goto	l932
  5176  00E920  0E01               	movlw	1
  5177  00E922  6E0C               	movwf	___lwmod@counter,c
  5178  00E924  D005               	goto	l1977
  5179  00E926                     l1975:
  5180  00E926  90D8               	bcf	status,0,c
  5181  00E928  360A               	rlcf	___lwmod@divisor,f,c
  5182  00E92A  360B               	rlcf	___lwmod@divisor+1,f,c
  5183  00E92C  2A0C               	incf	___lwmod@counter,f,c
  5184  00E92E  D000               	goto	l1977
  5185  00E930                     l1977:
  5186  00E930  BE0B               	btfsc	___lwmod@divisor+1,7,c
  5187  00E932  D002               	goto	l1979
  5188  00E934  D7F8               	goto	l1975
  5189  00E936  D000               	goto	l1979
  5190  00E938                     l1979:
  5191  00E938  500A               	movf	___lwmod@divisor,w,c
  5192  00E93A  5C08               	subwf	___lwmod@dividend,w,c
  5193  00E93C  500B               	movf	___lwmod@divisor+1,w,c
  5194  00E93E  5809               	subwfb	___lwmod@dividend+1,w,c
  5195  00E940  A0D8               	btfss	status,0,c
  5196  00E942  D005               	goto	l1983
  5197  00E944  500A               	movf	___lwmod@divisor,w,c
  5198  00E946  5E08               	subwf	___lwmod@dividend,f,c
  5199  00E948  500B               	movf	___lwmod@divisor+1,w,c
  5200  00E94A  5A09               	subwfb	___lwmod@dividend+1,f,c
  5201  00E94C  D000               	goto	l1983
  5202  00E94E                     l1983:
  5203  00E94E  90D8               	bcf	status,0,c
  5204  00E950  320B               	rrcf	___lwmod@divisor+1,f,c
  5205  00E952  320A               	rrcf	___lwmod@divisor,f,c
  5206  00E954  2E0C               	decfsz	___lwmod@counter,f,c
  5207  00E956  D7F0               	goto	l1979
  5208  00E958  D000               	goto	l932
  5209  00E95A                     l932:
  5210  00E95A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5211  00E95E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5212  00E962  0012               	return		;funcret
  5213  00E964                     __end_of___lwmod:
  5214                           	opt stack 0
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           intcon	equ	0xFF2
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           postdec1	equ	0xFE5
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           postdec2	equ	0xFDD
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function ___lwdiv *****************
  5234 ;; Defined at:
  5235 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;  dividend        2    0[COMRAM] unsigned int 
  5238 ;;  divisor         2    2[COMRAM] unsigned int 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  quotient        2    4[COMRAM] unsigned int 
  5241 ;;  counter         1    6[COMRAM] unsigned char 
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  2    0[COMRAM] unsigned int 
  5244 ;; Registers used:
  5245 ;;		wreg, status,2, status,0
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5251 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5252 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5254 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5255 ;;Total ram usage:        7 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; This function calls:
  5258 ;;		Nothing
  5259 ;; This function is called by:
  5260 ;;		_sprintf
  5261 ;; This function uses a non-reentrant model
  5262 ;;
  5263                           
  5264                           	psect	text19
  5265  00E964                     __ptext19:
  5266                           	opt stack 0
  5267  00E964                     ___lwdiv:
  5268                           	opt stack 29
  5269                           
  5270                           ;incstack = 0
  5271  00E964  0E00               	movlw	0
  5272  00E966  6E06               	movwf	___lwdiv@quotient+1,c
  5273  00E968  0E00               	movlw	0
  5274  00E96A  6E05               	movwf	___lwdiv@quotient,c
  5275  00E96C  5003               	movf	___lwdiv@divisor,w,c
  5276  00E96E  1004               	iorwf	___lwdiv@divisor+1,w,c
  5277  00E970  B4D8               	btfsc	status,2,c
  5278  00E972  D021               	goto	l922
  5279  00E974  0E01               	movlw	1
  5280  00E976  6E07               	movwf	___lwdiv@counter,c
  5281  00E978  D005               	goto	l1957
  5282  00E97A                     l1955:
  5283  00E97A  90D8               	bcf	status,0,c
  5284  00E97C  3603               	rlcf	___lwdiv@divisor,f,c
  5285  00E97E  3604               	rlcf	___lwdiv@divisor+1,f,c
  5286  00E980  2A07               	incf	___lwdiv@counter,f,c
  5287  00E982  D000               	goto	l1957
  5288  00E984                     l1957:
  5289  00E984  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5290  00E986  D002               	goto	l1959
  5291  00E988  D7F8               	goto	l1955
  5292  00E98A  D000               	goto	l1959
  5293  00E98C                     l1959:
  5294  00E98C  90D8               	bcf	status,0,c
  5295  00E98E  3605               	rlcf	___lwdiv@quotient,f,c
  5296  00E990  3606               	rlcf	___lwdiv@quotient+1,f,c
  5297  00E992  5003               	movf	___lwdiv@divisor,w,c
  5298  00E994  5C01               	subwf	___lwdiv@dividend,w,c
  5299  00E996  5004               	movf	___lwdiv@divisor+1,w,c
  5300  00E998  5802               	subwfb	___lwdiv@dividend+1,w,c
  5301  00E99A  A0D8               	btfss	status,0,c
  5302  00E99C  D006               	goto	l1967
  5303  00E99E  5003               	movf	___lwdiv@divisor,w,c
  5304  00E9A0  5E01               	subwf	___lwdiv@dividend,f,c
  5305  00E9A2  5004               	movf	___lwdiv@divisor+1,w,c
  5306  00E9A4  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5307  00E9A6  8005               	bsf	___lwdiv@quotient,0,c
  5308  00E9A8  D000               	goto	l1967
  5309  00E9AA                     l1967:
  5310  00E9AA  90D8               	bcf	status,0,c
  5311  00E9AC  3204               	rrcf	___lwdiv@divisor+1,f,c
  5312  00E9AE  3203               	rrcf	___lwdiv@divisor,f,c
  5313  00E9B0  2E07               	decfsz	___lwdiv@counter,f,c
  5314  00E9B2  D7EC               	goto	l1959
  5315  00E9B4  D000               	goto	l922
  5316  00E9B6                     l922:
  5317  00E9B6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5318  00E9BA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5319  00E9BE  0012               	return		;funcret
  5320  00E9C0                     __end_of___lwdiv:
  5321                           	opt stack 0
  5322                           tblptru	equ	0xFF8
  5323                           tblptrh	equ	0xFF7
  5324                           tblptrl	equ	0xFF6
  5325                           tablat	equ	0xFF5
  5326                           prodh	equ	0xFF4
  5327                           prodl	equ	0xFF3
  5328                           intcon	equ	0xFF2
  5329                           postinc0	equ	0xFEE
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _Lcd_Init *****************
  5341 ;; Defined at:
  5342 ;;		line 42 in file "../lcd.h"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  data            1    4[COMRAM] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;		None               void
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5360 ;;Total ram usage:        2 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    1
  5363 ;; This function calls:
  5364 ;;		_Lcd_Cmd
  5365 ;; This function is called by:
  5366 ;;		_main
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text20
  5371  00EE12                     __ptext20:
  5372                           	opt stack 0
  5373  00EE12                     _Lcd_Init:
  5374                           	opt stack 29
  5375                           
  5376                           ;lcd.h: 43: unsigned char data;
  5377                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  5378                           
  5379                           ;incstack = 0
  5380  00EE12  9093               	bcf	3987,0,c	;volatile
  5381                           
  5382                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  5383  00EE14  9293               	bcf	3987,1,c	;volatile
  5384                           
  5385                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  5386  00EE16  9493               	bcf	3987,2,c	;volatile
  5387                           
  5388                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  5389  00EE18  9693               	bcf	3987,3,c	;volatile
  5390                           
  5391                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  5392  00EE1A  9893               	bcf	3987,4,c	;volatile
  5393                           
  5394                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  5395  00EE1C  9A93               	bcf	3987,5,c	;volatile
  5396                           
  5397                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  5398  00EE1E  908A               	bcf	3978,0,c	;volatile
  5399                           
  5400                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  5401  00EE20  928A               	bcf	3978,1,c	;volatile
  5402                           
  5403                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  5404  00EE22  948A               	bcf	3978,2,c	;volatile
  5405                           
  5406                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  5407  00EE24  968A               	bcf	3978,3,c	;volatile
  5408                           
  5409                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  5410  00EE26  988A               	bcf	3978,4,c	;volatile
  5411                           
  5412                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  5413  00EE28  9A8A               	bcf	3978,5,c	;volatile
  5414                           
  5415                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5416  00EE2A  0E0F               	movlw	15
  5417  00EE2C  6E04               	movwf	??_Lcd_Init& (0+255),c
  5418  00EE2E  0E48               	movlw	72
  5419  00EE30                     u2317:
  5420  00EE30  2EE8               	decfsz	wreg,f,c
  5421  00EE32  D7FE               	goto	u2317
  5422  00EE34  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5423  00EE36  D7FC               	goto	u2317
  5424                           
  5425                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5426  00EE38  0E0F               	movlw	15
  5427  00EE3A  6E04               	movwf	??_Lcd_Init& (0+255),c
  5428  00EE3C  0E48               	movlw	72
  5429  00EE3E                     u2327:
  5430  00EE3E  2EE8               	decfsz	wreg,f,c
  5431  00EE40  D7FE               	goto	u2327
  5432  00EE42  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5433  00EE44  D7FC               	goto	u2327
  5434                           
  5435                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5436  00EE46  0E0F               	movlw	15
  5437  00EE48  6E04               	movwf	??_Lcd_Init& (0+255),c
  5438  00EE4A  0E48               	movlw	72
  5439  00EE4C                     u2337:
  5440  00EE4C  2EE8               	decfsz	wreg,f,c
  5441  00EE4E  D7FE               	goto	u2337
  5442  00EE50  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5443  00EE52  D7FC               	goto	u2337
  5444                           
  5445                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5446  00EE54  0E0F               	movlw	15
  5447  00EE56  6E04               	movwf	??_Lcd_Init& (0+255),c
  5448  00EE58  0E48               	movlw	72
  5449  00EE5A                     u2347:
  5450  00EE5A  2EE8               	decfsz	wreg,f,c
  5451  00EE5C  D7FE               	goto	u2347
  5452  00EE5E  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5453  00EE60  D7FC               	goto	u2347
  5454                           
  5455                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5456  00EE62  0E0F               	movlw	15
  5457  00EE64  6E04               	movwf	??_Lcd_Init& (0+255),c
  5458  00EE66  0E48               	movlw	72
  5459  00EE68                     u2357:
  5460  00EE68  2EE8               	decfsz	wreg,f,c
  5461  00EE6A  D7FE               	goto	u2357
  5462  00EE6C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5463  00EE6E  D7FC               	goto	u2357
  5464                           
  5465                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5466  00EE70  0E0F               	movlw	15
  5467  00EE72  6E04               	movwf	??_Lcd_Init& (0+255),c
  5468  00EE74  0E48               	movlw	72
  5469  00EE76                     u2367:
  5470  00EE76  2EE8               	decfsz	wreg,f,c
  5471  00EE78  D7FE               	goto	u2367
  5472  00EE7A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5473  00EE7C  D7FC               	goto	u2367
  5474                           
  5475                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5476  00EE7E  0E01               	movlw	1
  5477  00EE80  6E05               	movwf	Lcd_Init@data,c
  5478  00EE82  D01F               	goto	L5
  5479  00EE84  D021               	goto	l72
  5480  00EE86                     l71:
  5481                           
  5482                           ;lcd.h: 63: {
  5483                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5484  00EE86  908A               	bcf	3978,0,c	;volatile
  5485  00EE88  928A               	bcf	3978,1,c	;volatile
  5486  00EE8A  848A               	bsf	3978,2,c	;volatile
  5487  00EE8C  868A               	bsf	3978,3,c	;volatile
  5488  00EE8E  988A               	bcf	3978,4,c	;volatile
  5489                           
  5490                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5491  00EE90  9A8A               	bcf	3978,5,c	;volatile
  5492  00EE92  908A               	bcf	3978,0,c	;volatile
  5493  00EE94  928A               	bcf	3978,1,c	;volatile
  5494  00EE96  848A               	bsf	3978,2,c	;volatile
  5495  00EE98  868A               	bsf	3978,3,c	;volatile
  5496                           
  5497                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5498  00EE9A  888A               	bsf	3978,4,c	;volatile
  5499  00EE9C  9A8A               	bcf	3978,5,c	;volatile
  5500                           
  5501                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5502  00EE9E  0E03               	movlw	3
  5503  00EEA0                     u2377:
  5504  00EEA0  2EE8               	decfsz	wreg,f,c
  5505  00EEA2  D7FE               	goto	u2377
  5506  00EEA4  F000               	nop	
  5507                           
  5508                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5509  00EEA6  908A               	bcf	3978,0,c	;volatile
  5510  00EEA8  928A               	bcf	3978,1,c	;volatile
  5511  00EEAA  848A               	bsf	3978,2,c	;volatile
  5512  00EEAC  868A               	bsf	3978,3,c	;volatile
  5513  00EEAE  988A               	bcf	3978,4,c	;volatile
  5514                           
  5515                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5516  00EEB0  9A8A               	bcf	3978,5,c	;volatile
  5517                           
  5518                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5519  00EEB2  0E0F               	movlw	15
  5520  00EEB4  6E04               	movwf	??_Lcd_Init& (0+255),c
  5521  00EEB6  0E48               	movlw	72
  5522  00EEB8                     u2387:
  5523  00EEB8  2EE8               	decfsz	wreg,f,c
  5524  00EEBA  D7FE               	goto	u2387
  5525  00EEBC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5526  00EEBE  D7FC               	goto	u2387
  5527  00EEC0  2A05               	incf	Lcd_Init@data,f,c
  5528  00EEC2                     L5:
  5529  00EEC2  0E03               	movlw	3
  5530  00EEC4  6405               	cpfsgt	Lcd_Init@data,c
  5531  00EEC6  D7DF               	goto	l71
  5532  00EEC8                     l72:
  5533                           
  5534                           ;lcd.h: 71: }
  5535                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5536  00EEC8  908A               	bcf	3978,0,c	;volatile
  5537  00EECA  928A               	bcf	3978,1,c	;volatile
  5538  00EECC  848A               	bsf	3978,2,c	;volatile
  5539  00EECE  968A               	bcf	3978,3,c	;volatile
  5540  00EED0  988A               	bcf	3978,4,c	;volatile
  5541  00EED2  9A8A               	bcf	3978,5,c	;volatile
  5542                           
  5543                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5544  00EED4  908A               	bcf	3978,0,c	;volatile
  5545  00EED6  928A               	bcf	3978,1,c	;volatile
  5546  00EED8  848A               	bsf	3978,2,c	;volatile
  5547  00EEDA  968A               	bcf	3978,3,c	;volatile
  5548  00EEDC  888A               	bsf	3978,4,c	;volatile
  5549  00EEDE  9A8A               	bcf	3978,5,c	;volatile
  5550                           
  5551                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5552  00EEE0  0E03               	movlw	3
  5553  00EEE2                     u2397:
  5554  00EEE2  2EE8               	decfsz	wreg,f,c
  5555  00EEE4  D7FE               	goto	u2397
  5556  00EEE6  F000               	nop	
  5557                           
  5558                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5559  00EEE8  908A               	bcf	3978,0,c	;volatile
  5560  00EEEA  928A               	bcf	3978,1,c	;volatile
  5561  00EEEC  848A               	bsf	3978,2,c	;volatile
  5562  00EEEE  968A               	bcf	3978,3,c	;volatile
  5563  00EEF0  988A               	bcf	3978,4,c	;volatile
  5564  00EEF2  9A8A               	bcf	3978,5,c	;volatile
  5565                           
  5566                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5567  00EEF4  0E0F               	movlw	15
  5568  00EEF6  6E04               	movwf	??_Lcd_Init& (0+255),c
  5569  00EEF8  0E48               	movlw	72
  5570  00EEFA                     u2407:
  5571  00EEFA  2EE8               	decfsz	wreg,f,c
  5572  00EEFC  D7FE               	goto	u2407
  5573  00EEFE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5574  00EF00  D7FC               	goto	u2407
  5575                           
  5576                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5577  00EF02  0E28               	movlw	40
  5578  00EF04  6E05               	movwf	Lcd_Init@data,c
  5579  00EF06  5005               	movf	Lcd_Init@data,w,c
  5580  00EF08  EC25  F078         	call	_Lcd_Cmd
  5581                           
  5582                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  5583  00EF0C  0E10               	movlw	16
  5584  00EF0E  6E05               	movwf	Lcd_Init@data,c
  5585  00EF10  5005               	movf	Lcd_Init@data,w,c
  5586  00EF12  EC25  F078         	call	_Lcd_Cmd
  5587                           
  5588                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  5589  00EF16  0E01               	movlw	1
  5590  00EF18  6E05               	movwf	Lcd_Init@data,c
  5591  00EF1A  5005               	movf	Lcd_Init@data,w,c
  5592  00EF1C  EC25  F078         	call	_Lcd_Cmd
  5593                           
  5594                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  5595  00EF20  0E0F               	movlw	15
  5596  00EF22  6E05               	movwf	Lcd_Init@data,c
  5597  00EF24  5005               	movf	Lcd_Init@data,w,c
  5598  00EF26  EC25  F078         	call	_Lcd_Cmd
  5599  00EF2A  0012               	return		;funcret
  5600  00EF2C                     __end_of_Lcd_Init:
  5601                           	opt stack 0
  5602                           tblptru	equ	0xFF8
  5603                           tblptrh	equ	0xFF7
  5604                           tblptrl	equ	0xFF6
  5605                           tablat	equ	0xFF5
  5606                           prodh	equ	0xFF4
  5607                           prodl	equ	0xFF3
  5608                           intcon	equ	0xFF2
  5609                           postinc0	equ	0xFEE
  5610                           wreg	equ	0xFE8
  5611                           postdec1	equ	0xFE5
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           postinc2	equ	0xFDE
  5615                           postdec2	equ	0xFDD
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _Lcd_Cmd *****************
  5621 ;; Defined at:
  5622 ;;		line 140 in file "../lcd.h"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  data            1    wreg     unsigned char 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  data            1    2[COMRAM] unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;		None               void
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5638 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5639 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5640 ;;Total ram usage:        3 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; This function calls:
  5643 ;;		Nothing
  5644 ;; This function is called by:
  5645 ;;		_Lcd_Init
  5646 ;;		_Lcd_Out
  5647 ;;		_main
  5648 ;;		_ManejaMovimientos
  5649 ;;		_Lcd_Out2
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text21
  5654  00F04A                     __ptext21:
  5655                           	opt stack 0
  5656  00F04A                     _Lcd_Cmd:
  5657                           	opt stack 28
  5658                           
  5659                           ;incstack = 0
  5660                           ;Lcd_Cmd@data stored from wreg
  5661  00F04A  6E03               	movwf	Lcd_Cmd@data,c
  5662                           
  5663                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5664  00F04C  988A               	bcf	3978,4,c	;volatile
  5665  00F04E  9A8A               	bcf	3978,5,c	;volatile
  5666                           
  5667                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  5668  00F050  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  5669  00F052  AE03               	btfss	Lcd_Cmd@data,7,c
  5670  00F054  D001               	bra	u1155
  5671  00F056  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  5672  00F058                     u1155:
  5673  00F058  0E01               	movlw	1
  5674  00F05A  1601               	andwf	??_Lcd_Cmd,f,c
  5675  00F05C  508A               	movf	3978,w,c	;volatile
  5676  00F05E  1801               	xorwf	??_Lcd_Cmd,w,c
  5677  00F060  0BFE               	andlw	-2
  5678  00F062  1801               	xorwf	??_Lcd_Cmd,w,c
  5679  00F064  6E8A               	movwf	3978,c	;volatile
  5680  00F066  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5681  00F06A  0E06               	movlw	6
  5682  00F06C  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5683  00F06E                     u1165:
  5684  00F06E  90D8               	bcf	status,0,c
  5685  00F070  3201               	rrcf	??_Lcd_Cmd,f,c
  5686  00F072  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5687  00F074  D7FC               	goto	u1165
  5688  00F076  0E01               	movlw	1
  5689  00F078  1601               	andwf	??_Lcd_Cmd,f,c
  5690  00F07A  4601               	rlncf	??_Lcd_Cmd,f,c
  5691  00F07C  508A               	movf	3978,w,c	;volatile
  5692  00F07E  1801               	xorwf	??_Lcd_Cmd,w,c
  5693  00F080  0BFD               	andlw	-3
  5694  00F082  1801               	xorwf	??_Lcd_Cmd,w,c
  5695  00F084  6E8A               	movwf	3978,c	;volatile
  5696                           
  5697                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  5698  00F086  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5699  00F08A  0E05               	movlw	5
  5700  00F08C  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5701  00F08E                     u1175:
  5702  00F08E  90D8               	bcf	status,0,c
  5703  00F090  3201               	rrcf	??_Lcd_Cmd,f,c
  5704  00F092  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5705  00F094  D7FC               	goto	u1175
  5706  00F096  0E01               	movlw	1
  5707  00F098  1601               	andwf	??_Lcd_Cmd,f,c
  5708  00F09A  4601               	rlncf	??_Lcd_Cmd,f,c
  5709  00F09C  4601               	rlncf	??_Lcd_Cmd,f,c
  5710  00F09E  508A               	movf	3978,w,c	;volatile
  5711  00F0A0  1801               	xorwf	??_Lcd_Cmd,w,c
  5712  00F0A2  0BFB               	andlw	-5
  5713  00F0A4  1801               	xorwf	??_Lcd_Cmd,w,c
  5714  00F0A6  6E8A               	movwf	3978,c	;volatile
  5715  00F0A8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5716  00F0AC  3A01               	swapf	??_Lcd_Cmd,f,c
  5717  00F0AE  0E0F               	movlw	15
  5718  00F0B0  1601               	andwf	??_Lcd_Cmd,f,c
  5719  00F0B2  0E01               	movlw	1
  5720  00F0B4  1601               	andwf	??_Lcd_Cmd,f,c
  5721  00F0B6  4601               	rlncf	??_Lcd_Cmd,f,c
  5722  00F0B8  4601               	rlncf	??_Lcd_Cmd,f,c
  5723  00F0BA  4601               	rlncf	??_Lcd_Cmd,f,c
  5724  00F0BC  508A               	movf	3978,w,c	;volatile
  5725  00F0BE  1801               	xorwf	??_Lcd_Cmd,w,c
  5726  00F0C0  0BF7               	andlw	-9
  5727  00F0C2  1801               	xorwf	??_Lcd_Cmd,w,c
  5728  00F0C4  6E8A               	movwf	3978,c	;volatile
  5729                           
  5730                           ;lcd.h: 144: _delay(10);
  5731  00F0C6  0E03               	movlw	3
  5732  00F0C8                     u2417:
  5733  00F0C8  2EE8               	decfsz	wreg,f,c
  5734  00F0CA  D7FE               	goto	u2417
  5735  00F0CC  F000               	nop	
  5736                           
  5737                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5738  00F0CE  888A               	bsf	3978,4,c	;volatile
  5739  00F0D0  0E03               	movlw	3
  5740  00F0D2                     u2427:
  5741  00F0D2  2EE8               	decfsz	wreg,f,c
  5742  00F0D4  D7FE               	goto	u2427
  5743  00F0D6  F000               	nop	
  5744  00F0D8  988A               	bcf	3978,4,c	;volatile
  5745                           
  5746                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  5747  00F0DA  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5748  00F0DE  90D8               	bcf	status,0,c
  5749  00F0E0  3201               	rrcf	??_Lcd_Cmd,f,c
  5750  00F0E2  90D8               	bcf	status,0,c
  5751  00F0E4  3201               	rrcf	??_Lcd_Cmd,f,c
  5752  00F0E6  90D8               	bcf	status,0,c
  5753  00F0E8  3201               	rrcf	??_Lcd_Cmd,f,c
  5754  00F0EA  0E01               	movlw	1
  5755  00F0EC  1601               	andwf	??_Lcd_Cmd,f,c
  5756  00F0EE  508A               	movf	3978,w,c	;volatile
  5757  00F0F0  1801               	xorwf	??_Lcd_Cmd,w,c
  5758  00F0F2  0BFE               	andlw	-2
  5759  00F0F4  1801               	xorwf	??_Lcd_Cmd,w,c
  5760  00F0F6  6E8A               	movwf	3978,c	;volatile
  5761  00F0F8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5762  00F0FC  90D8               	bcf	status,0,c
  5763  00F0FE  3201               	rrcf	??_Lcd_Cmd,f,c
  5764  00F100  90D8               	bcf	status,0,c
  5765  00F102  3201               	rrcf	??_Lcd_Cmd,f,c
  5766  00F104  0E01               	movlw	1
  5767  00F106  1601               	andwf	??_Lcd_Cmd,f,c
  5768  00F108  4601               	rlncf	??_Lcd_Cmd,f,c
  5769  00F10A  508A               	movf	3978,w,c	;volatile
  5770  00F10C  1801               	xorwf	??_Lcd_Cmd,w,c
  5771  00F10E  0BFD               	andlw	-3
  5772  00F110  1801               	xorwf	??_Lcd_Cmd,w,c
  5773  00F112  6E8A               	movwf	3978,c	;volatile
  5774                           
  5775                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  5776  00F114  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5777  00F118  90D8               	bcf	status,0,c
  5778  00F11A  3201               	rrcf	??_Lcd_Cmd,f,c
  5779  00F11C  0E01               	movlw	1
  5780  00F11E  1601               	andwf	??_Lcd_Cmd,f,c
  5781  00F120  4601               	rlncf	??_Lcd_Cmd,f,c
  5782  00F122  4601               	rlncf	??_Lcd_Cmd,f,c
  5783  00F124  508A               	movf	3978,w,c	;volatile
  5784  00F126  1801               	xorwf	??_Lcd_Cmd,w,c
  5785  00F128  0BFB               	andlw	-5
  5786  00F12A  1801               	xorwf	??_Lcd_Cmd,w,c
  5787  00F12C  6E8A               	movwf	3978,c	;volatile
  5788  00F12E  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5789  00F132  0E01               	movlw	1
  5790  00F134  1601               	andwf	??_Lcd_Cmd,f,c
  5791  00F136  4601               	rlncf	??_Lcd_Cmd,f,c
  5792  00F138  4601               	rlncf	??_Lcd_Cmd,f,c
  5793  00F13A  4601               	rlncf	??_Lcd_Cmd,f,c
  5794  00F13C  508A               	movf	3978,w,c	;volatile
  5795  00F13E  1801               	xorwf	??_Lcd_Cmd,w,c
  5796  00F140  0BF7               	andlw	-9
  5797  00F142  1801               	xorwf	??_Lcd_Cmd,w,c
  5798  00F144  6E8A               	movwf	3978,c	;volatile
  5799                           
  5800                           ;lcd.h: 148: _delay(10);
  5801  00F146  0E03               	movlw	3
  5802  00F148                     u2437:
  5803  00F148  2EE8               	decfsz	wreg,f,c
  5804  00F14A  D7FE               	goto	u2437
  5805  00F14C  F000               	nop	
  5806                           
  5807                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5808  00F14E  888A               	bsf	3978,4,c	;volatile
  5809  00F150  0E03               	movlw	3
  5810  00F152                     u2447:
  5811  00F152  2EE8               	decfsz	wreg,f,c
  5812  00F154  D7FE               	goto	u2447
  5813  00F156  F000               	nop	
  5814  00F158  988A               	bcf	3978,4,c	;volatile
  5815                           
  5816                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5817  00F15A  0E0F               	movlw	15
  5818  00F15C  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  5819  00F15E  0E48               	movlw	72
  5820  00F160                     u2457:
  5821  00F160  2EE8               	decfsz	wreg,f,c
  5822  00F162  D7FE               	goto	u2457
  5823  00F164  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  5824  00F166  D7FC               	goto	u2457
  5825  00F168  0012               	return		;funcret
  5826  00F16A                     __end_of_Lcd_Cmd:
  5827                           	opt stack 0
  5828                           tblptru	equ	0xFF8
  5829                           tblptrh	equ	0xFF7
  5830                           tblptrl	equ	0xFF6
  5831                           tablat	equ	0xFF5
  5832                           prodh	equ	0xFF4
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           postinc0	equ	0xFEE
  5836                           wreg	equ	0xFE8
  5837                           postdec1	equ	0xFE5
  5838                           fsr1l	equ	0xFE1
  5839                           indf2	equ	0xFDF
  5840                           postinc2	equ	0xFDE
  5841                           postdec2	equ	0xFDD
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           tblptru	equ	0xFF8
  5846                           tblptrh	equ	0xFF7
  5847                           tblptrl	equ	0xFF6
  5848                           tablat	equ	0xFF5
  5849                           prodh	equ	0xFF4
  5850                           prodl	equ	0xFF3
  5851                           intcon	equ	0xFF2
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863                           	psect	rparam
  5864  0000                     tblptru	equ	0xFF8
  5865                           tblptrh	equ	0xFF7
  5866                           tblptrl	equ	0xFF6
  5867                           tablat	equ	0xFF5
  5868                           prodh	equ	0xFF4
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           postinc0	equ	0xFEE
  5872                           wreg	equ	0xFE8
  5873                           postdec1	equ	0xFE5
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        42
    BSS         68
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      95
    BANK0           160      0     107
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_36(CODE[7]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_33(CODE[5]), STR_31(CODE[5]), STR_29(CODE[5]), STR_27(CODE[5]), 
		 -> STR_25(CODE[5]), STR_21(CODE[3]), STR_19(CODE[3]), STR_17(CODE[3]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_35(CODE[1]), STR_34(CODE[1]), STR_32(CODE[1]), STR_30(CODE[1]), 
		 -> STR_28(CODE[1]), STR_26(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), 
		 -> Convert_diasem@buffer_dia(COMRAM[20]), STR_6(CODE[21]), STR_5(CODE[20]), STR_4(CODE[18]), 
		 -> STR_3(CODE[19]), buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_ManejaMovimientos
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _ManejaMovimientos->_Lcd_Out
    _Write_RTC->_RtccWriteDate
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   37050
                                             78 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                  _ManejaMovimientos
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0   12518
                                             68 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _ManejaMovimientos                                   10    10      0   14434
                                             68 COMRAM    10    10      0
                     _Convert_diasem
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3    3477
                                             63 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    4196
                                             39 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    3854
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _ManejaMovimientos
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _V_Principal
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6B       5       66.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CA       6        0.0%
DATA                 0      0      CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 25 23:45:54 2020

            V_Principal@cte 0045                           _i 007C                          l71 EE86  
                        l72 EEC8                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                         l209 E892                         l299 FE3A  
                       l922 E9B6                         l932 E95A   ManejaMovimientos@posicion 004D  
ManejaMovimientos@minuto_tr 004C                         _dia 005A                         _mes 005E  
                       wreg 000FE8             RtccReadDate@pDt 0001                        l2101 FD64  
                      l2111 FD8C                        l2041 FBB6                        l2123 FDD8  
                      l2115 FDB0                        l2107 FD80                        l2043 FBC4  
                      l2035 FB9C                        l2125 FDE2                        l2061 FC64  
                      l2053 FC02                        l2213 EDFA                        l2143 FE40  
                      l2135 FE10                        l2119 FDB4                        l2071 FC98  
                      l2047 FBCE                        l2151 FEA0                        l2137 FE18  
                      l2129 FDEE                        l2081 FCDC                        l2073 FC9E  
                      l2153 FEBC                        l2049 FBE4                        l2401 EB2E  
                      l2233 F414                        l2217 EE06                        l2209 EDEE  
                      l2411 EB60                        l2403 EB34                        l2243 F462  
                      l2171 ED6E                        l2149 FE94                        l2093 FD22  
                      l2085 FCEE                        l2069 FC8E                        l2181 ED9E  
                      l2165 ED44                        l2095 FD36                        l2087 FD02  
                      l2079 FCD2                        l2415 EB8A                        l2407 EB3C  
                      l2239 F44E                        l2175 ED82                        l2319 EA90  
                      l2521 EF4C                        l2409 EB58                        l2281 F4D4  
                      l2249 F47E                        l2099 FD3C                        l2531 EFE2  
                      l2523 EF6A                        l2371 EBF0                        l2525 EF88  
                      l2285 F4E0                        l2373 EBFA                        l2365 EBDA  
                      l2293 EA22                        l2527 EFA6                        l2519 EF2E  
                      l2535 F000                        l2391 EC3C                        l2383 EC20  
                      l2375 EC02                        l2359 EBC8                        l2711 FB74  
                      l2529 EFC4                        l2537 F03E                        l2289 F4EC  
                      l2705 FB30                        l2633 F8DA                        l2801 F84C  
                      l2387 EC2C                        l2715 FB8A                        l2397 EB22  
                      l2399 EB28                        l2647 F944                        l2657 F990  
                      l1955 E97A                        l1939 E8C4                        l2667 F9DC  
                      l1957 E984                        l2677 FA28                        l2781 F784  
                      l2773 F752                        l1967 E9AA                        l1959 E98C  
                      l1983 E94E                        l1975 E926                        l2687 FA74  
                      l2791 F7F2                        l1977 E930                        l2697 FAC0  
                      l1979 E938                        l2795 F81C                        l2787 F7C8  
                      STR_1 FFB8                        STR_2 FFEF                        STR_3 FF93  
                      STR_4 FFA6                        STR_5 FF7F                        STR_6 FED7  
                      STR_7 FFCA                        STR_8 FFD9                        STR_9 FFF4  
                      u2000 F78E                        u2020 F7D0                        u1205 F2CE  
                      u2030 F7D2                        u2050 F7FA                        u1155 F058  
                      u2060 F7FC                        u1165 F06E                        u1175 F08E  
                      u2207 F740                        u2080 F824                        u1185 F298  
                      u2217 F858                        u2137 F6D0                        u2090 F826  
                      u2307 F3A8                        u1195 F2AE                        u2227 F86E  
                      u2147 F6E0                        u2317 EE30                        u2237 E89C  
                      u2157 F6F0                        u2407 EEFA                        u2327 EE3E  
                      u2247 F8E0                        u2167 F700                        u1720 EB80  
                      u1800 F8F4                        u2417 F0C8                        u2337 EE4C  
                      u2257 F308                        u2177 F710                        u1730 EBAA  
                      u2427 F0D2                        u2347 EE5A                        u2267 F312  
                      u2187 F720                        u2437 F148                        u2357 EE68  
                      u2277 F388                        u2197 F730                        u1910 FB38  
                      u2447 F152                        u2367 EE76                        u2287 F392  
                      u1727 EB76                        u1920 FB3A                        u2457 F160  
                      u2377 EEA0                        u2297 F39C                        u1737 EBA0  
                      u2387 EEB8                        u1780 F8D8                        u2397 EEE2  
                      u1790 F8F2                        u1880 FAC8                        u1960 F75E  
                      u1890 FACA                        u1970 F760                        u1990 F78C  
                      _anio 0058                        _main F682                        _hora 00BA  
                      fsr2h 000FDA                        fsr1l 000FE1                        indf2 000FDF  
                      fsr2l 000FD9               __CFG_T1DIG$ON 000000                        prodh 000FF4  
                      prodl 000FF3                        start 0000               __CFG_IESO$OFF 000000  
          RtccReadDate@rTD0 000B            RtccReadDate@rTD1 0003             __end_of_Lcd_Cmd F16A  
           __end_of_Lcd_Out EBB2                ___param_bank 000010             RtccReadTime@pTm 0001  
                _Lcd_Chr_CP F28A               ??_V_Principal 0045               __CFG_PLLDIV$1 000000  
                     ?_main 0001             __end_of___awdiv EC48                       STR_10 FF40  
                     STR_11 FFF4                       STR_20 FF55                       STR_12 FEEC  
                     STR_21 FFF4                       STR_13 FFF4                       STR_30 FEEB  
                     STR_14 FF16                       STR_22 FF01                       STR_23 FEEB  
                     STR_15 FFF4                       STR_31 FFD4                       STR_32 FEEB  
                     STR_24 FEEB                       STR_16 FF6A                       STR_17 FFF4  
                     STR_33 FFD4                       STR_25 FFD4                       STR_34 FEEB  
                     STR_26 FEEB                       STR_18 FF2B                       STR_35 FEEB  
                     STR_19 FFF4                       STR_27 FFD4                       STR_28 FEEB  
                     STR_36 FFE8                       STR_29 FFD4             ___awdiv@divisor 0003  
           __end_of___lwdiv E9C0             __end_of___lwmod E964             ___awdiv@counter 0005  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
            __CFG_FCMEN$OFF 000000                       _Sw_Up 0086             __end_of_dpowers FED7  
                     _mes_d 00C5                       _mes_u 00C6             __end_of_isdigit E8CE  
                     tablat 000FF5                  _CuentamSeg 0080  __size_of_ManejaMovimientos 0314  
                     status 000FD8             __end_of_sprintf FECC            __end_of_Lcd_Init EF2C  
   __CFG_DSWDTOSC$INTOSCREF 000000             __initialization E9C0                __end_of_main F87E  
          RtccReadTime@rTD0 000B            RtccReadTime@rTD1 0003            __end_of_Read_RTC F28A  
                    ??_main 004F               __activetblptr 000002         __end_of_V_Principal ED06  
          __end_of_RtccWrOn E88C                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADRESH 000FC4                      _EECON2 000FA7                      _ANCON0 000F48  
                    _ANCON1 000F49            ___awdiv@dividend 0001              __CFG_WDTEN$OFF 000000  
           _lee_temperatura E88C                   ??_Lcd_Cmd 0001            RtccWriteDate@pDt 0001  
                    _RTCCFG 000F3F                   ??_Lcd_Out 0043              __CFG_WPCFG$OFF 000000  
                    _Flag_1 0081              __CFG_WPDIS$OFF 000000                      _Grados 00B4  
            __CFG_XINST$OFF 000000                 ?_Lcd_Chr_CP 0001                      ___wmul E8F0  
                 ??___awdiv 0005              __CFG_STVREN$ON 000000                      _diasem 005C  
                    _anio_d 00BE                      _anio_u 00BF            ??_Convert_diasem 002A  
                 ??___lwdiv 0005                   ??___lwmod 000C                      _hora_d 00C3  
                    _hora_u 00C4                      clear_0 E9C6                      clear_1 E9D2  
          ___awdiv@quotient 0007                      _minuto 00BC       __end_of_RtccWriteDate F4F8  
     __end_of_RtccWriteTime EE12            RtccWriteTime@pTm 0001                __pdataCOMRAM 0058  
                 ??_isdigit 0001                __mediumconst FECC                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_sprintf 0017  
                __accesstop 0060     __end_of__initialization EA18          __size_of_Write_RTC 018A  
             ___rparam_used 000001              __pcstackCOMRAM 0001                __pidataBANK0 E8CE  
               _V_Principal EC48             __CFG_DSWDTPS$G2 000000             __CFG_OSC$INTOSC 000000  
   __end_of_lee_temperatura E8AC                   ?_Lcd_Init 0001                sprintf@width 0025  
       __size_of_Lcd_Chr_CP 0128                  __pbssBANK0 0060                   ?_Read_RTC 0001  
                _dia_semana 00C0   RtccWriteTime@tempHourWDay 000A                   ?_RtccWrOn 0001  
                   ?___wmul 0001               ?_RtccReadDate 0001               ?_RtccReadTime 0001  
         __end_of_Write_RTC F682                  ??_Lcd_Init 0004                     _RTCVALH 000F99  
                   _RTCVALL 000F98                  ??_Read_RTC 0013                     _Lcd_Cmd F04A  
                   _Lcd_Out EB1E                     __Hparam 0000                     __Lparam 0000  
                   _Sw_Left 0084                     _Sw_Down 0083                  ??_RtccWrOn 0001  
            ??_RtccReadDate 0003              ??_RtccReadTime 0003                     ___awdiv EBB2  
           __size_of___wmul 0028                     ___lwdiv E964                     ___lwmod E918  
               _RtccTimeVal 0078                     __pcinit E9C0                     _fecha_d 00C1  
                   _fecha_u 00C2                     __ramtop 0F00                     __ptext0 F682  
                   __ptext1 EC48                     __ptext2 E88C                     __ptext3 F16A  
                   __ptext4 EA22                     __ptext5 EA90                     __ptext6 F87E  
                   __ptext7 F4F8                     __ptext8 EBB2                     __ptext9 ED06  
                   _buffer1 0088                   _T1CONbits 000FCD                     _lectura 0087  
                   _dpowers FECD                     _isdigit E8AC                     _segundo 007E  
          ?_lee_temperatura 0001                     _sprintf FB92        end_of_initialization EA18  
             __Lmediumconst FECC                ??_Lcd_Chr_CP 0001                     postdec1 000FE5  
                   postdec2 000FDD                     postinc0 000FEE                     postinc2 000FDE  
                 _PORTAbits 000F80                   _PORTCbits 000F82            __CFG_DSBOREN$OFF 000000  
          __CFG_CPUDIV$OSC1 000000                   _TRISBbits 000F93          __end_of_Lcd_Chr_CP F3B2  
          __CFG_IOL1WAY$OFF 000000   RtccWriteDate@tempDayMonth 000A         __CFG_MSSP7B_EN$MSK7 000000  
              ?_V_Principal 0001              __end_of___wmul E918               __pidataCOMRAM E872  
 RtccWriteDate@tempHourWDay 000C            __CFG_DSWDTEN$OFF 000000         start_initialization E9C0  
      __end_of_RtccReadDate EB1E               Lcd_Out@buffer 0041        __end_of_RtccReadTime EA90  
         __size_of_Lcd_Init 011A        RtccWriteTime@wasAlrm 0006        RtccWriteTime@wasWrEn 0007  
    __size_of_RtccWriteDate 0146             RtccWriteDate@di 0003      __size_of_RtccWriteTime 010C  
         __size_of_Read_RTC 0120                   _Sw_Center 0082                   _Temp_prog 00B7  
                  ??___wmul 0005                 __pdataBANK0 009C           __size_of_RtccWrOn 0012  
           RtccWriteTime@di 0003            __CFG_LPT1OSC$OFF 000000           Convert_diasem@dia 0028  
               _ALRMCFGbits 000F91                 __pbssCOMRAM 0050     __size_of_Convert_diasem 011E  
                 _Write_RTC F4F8                _isdigit$2086 0002                    ?_Lcd_Cmd 0001  
               sprintf@flag 001B                    ?_Lcd_Out 0040                 sprintf@prec 001E  
                 __pnvBANK0 00BE            ___lwdiv@dividend 0001               __pmediumconst FECC  
                  ?___awdiv 0001                    ?___lwdiv 0001                    ?___lwmod 0008  
   RtccWriteTime@tempMinSec 0008               _RtccWriteDate F3B2               _RtccWriteTime ED06  
                  ?_isdigit 0001        __CFG_RTCOSC$T1OSCREF 000000    ManejaMovimientos@anio_tr 004A  
  Convert_diasem@buffer_dia 002C                  ?_Write_RTC 0001            ___lwdiv@quotient 0005  
  ManejaMovimientos@hora_tr 004B                    ?_sprintf 000D            _RtccAlrmTimeDate 0060  
            ___wmul@product 0005                    _LATAbits 000F89                    _LATBbits 000F8A  
                  _PIE3bits 000FA3                   _segundo_d 00C9                   _segundo_u 00CA  
                  Lcd_Out@x 0040            __CFG_WDTPS$32768 000000                    Lcd_Out@y 0043  
        RtccWriteDate@wasOn 0005          _Rtcc_read_TimeDate 0070                Lcd_Init@data 0005  
            ?_RtccWriteDate 0001                  _ADCON0bits 000FC2           ___wmul@multiplier 0001  
      __size_of_V_Principal 00BE              ?_RtccWriteTime 0001       __size_of_RtccReadDate 008E  
     __size_of_RtccReadTime 006E                    _Lcd_Init EE12                   copy_data0 E9EC  
                 copy_data1 EA0C                    _Read_RTC F16A    __size_of_lee_temperatura 0020  
          __size_of_Lcd_Cmd 0120            __size_of_Lcd_Out 0094                    __Hrparam 0000  
                  _RtccDate 0050                    __Lrparam 0000                    _RtccTime 0054  
                  _RtccWrOn E87A                    _Sw_Right 0085                _RtccReadDate EA90  
          __size_of___awdiv 0096                _RtccReadTime EA22            __size_of___lwdiv 005C  
          __size_of___lwmod 004C              _posicionesLeft 009C                _RtccTimeDate 0068  
                sprintf@len 0023                  sprintf@val 001C              _Convert_diasem EF2C  
          __size_of_isdigit 0022              Lcd_Chr_CP@data 0003             ___lwdiv@divisor 0003  
               ??_Write_RTC 000E             ___lwdiv@counter 0007                    __ptext10 F3B2  
                  __ptext11 E87A                    __ptext20 EE12                    __ptext12 EB1E  
                  __ptext21 F04A                    __ptext13 F28A                    __ptext14 EF2C  
                  __ptext15 FB92                    __ptext16 E8AC                    __ptext17 E8F0  
                  __ptext18 E918                    __ptext19 E964            __size_of_sprintf 033A  
   ManejaMovimientos@dia_tr 0048                 Lcd_Cmd@data 0003               __size_of_main 01FC  
   ManejaMovimientos@mes_tr 0049                    _minuto_d 00C7                    _minuto_u 00C8  
           ??_RtccWriteDate 0004             ??_RtccWriteTime 0004      __end_of_Convert_diasem F04A  
               Lcd_Out@data 0044                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
        RtccWriteTime@wasOn 0005                    isdigit@c 0003                   sprintf@ap 001F  
                 sprintf@cp 0021                   sprintf@sp 000D            ___lwmod@dividend 0008  
         _ManejaMovimientos F87E                  _OSCCONbits 000FD3          ?_ManejaMovimientos 0001  
     RtccWriteDate@tempYear 0007           ??_lee_temperatura 0001         ??_ManejaMovimientos 0045  
                _RTCCFGbits 000F3F                    sprintf@c 0027                    sprintf@f 000F  
           ?_Convert_diasem 0028             ___lwmod@divisor 000A             ___lwmod@counter 000C  
      RtccWriteDate@wasAlrm 0006        RtccWriteDate@wasWrEn 0009  ManejaMovimientos@diasem_tr 0047  
 __end_of_ManejaMovimientos FB92  
