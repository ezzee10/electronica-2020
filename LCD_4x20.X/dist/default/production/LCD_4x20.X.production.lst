

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Nov 25 19:47:20 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  00EA18                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _anio
    45  00EA18  0014               	dw	20
    46                           
    47                           ;initializer for _dia
    48  00EA1A  0006               	dw	6
    49                           
    50                           ;initializer for _diasem
    51  00EA1C  0002               	dw	2
    52                           
    53                           ;initializer for _mes
    54  00EA1E  000B               	dw	11
    55                           
    56                           	psect	idataBANK0
    57  00EA32                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _posicionesLeft
    61  00EA32  000A               	dw	10
    62  00EA34  0014               	dw	20
    63  00EA36  0017               	dw	23
    64  00EA38  0019               	dw	25
    65  00EA3A  001E               	dw	30
    66  00EA3C  0021               	dw	33
    67                           
    68                           ;initializer for _Grados
    69  00EA3E  00                 	db	0
    70  00EA3F  A0                 	db	160
    71  00EA40  41                 	db	65
    72                           
    73                           ;initializer for _Temp_prog
    74  00EA41  00                 	db	0
    75  00EA42  B4                 	db	180
    76  00EA43  41                 	db	65
    77                           
    78                           ;initializer for _hora
    79  00EA44  0012               	dw	18
    80                           
    81                           ;initializer for _minuto
    82  00EA46  0037               	dw	55
    83                           
    84                           	psect	mediumconst
    85  00FECC                     __pmediumconst:
    86                           	opt stack 0
    87  00FECC  00                 	db	0
    88  00FECD                     _dpowers:
    89                           	opt stack 0
    90  00FECD  0001               	dw	1
    91  00FECF  000A               	dw	10
    92  00FED1  0064               	dw	100
    93  00FED3  03E8               	dw	1000
    94  00FED5  2710               	dw	10000
    95  00FED7                     __end_of_dpowers:
    96                           	opt stack 0
    97  00FED7                     STR_6:
    98  00FED7  20                 	db	32
    99  00FED8  20                 	db	32
   100  00FED9  20                 	db	32
   101  00FEDA  20                 	db	32
   102  00FEDB  20                 	db	32
   103  00FEDC  20                 	db	32
   104  00FEDD  20                 	db	32
   105  00FEDE  20                 	db	32
   106  00FEDF  20                 	db	32
   107  00FEE0  20                 	db	32
   108  00FEE1  20                 	db	32
   109  00FEE2  20                 	db	32
   110  00FEE3  20                 	db	32
   111  00FEE4  20                 	db	32
   112  00FEE5  20                 	db	32
   113  00FEE6  20                 	db	32
   114  00FEE7  20                 	db	32
   115  00FEE8  20                 	db	32
   116  00FEE9  20                 	db	32
   117  00FEEA  20                 	db	32
   118  00FEEB  00                 	db	0
   119  00FEEC                     STR_12:
   120  00FEEC  4C                 	db	76	;'L'
   121  00FEED  75                 	db	117	;'u'
   122  00FEEE  6E                 	db	110	;'n'
   123  00FEEF  65                 	db	101	;'e'
   124  00FEF0  73                 	db	115	;'s'
   125  00FEF1  20                 	db	32
   126  00FEF2  20                 	db	32
   127  00FEF3  20                 	db	32
   128  00FEF4  20                 	db	32
   129  00FEF5  20                 	db	32
   130  00FEF6  20                 	db	32
   131  00FEF7  20                 	db	32
   132  00FEF8  20                 	db	32
   133  00FEF9  20                 	db	32
   134  00FEFA  20                 	db	32
   135  00FEFB  20                 	db	32
   136  00FEFC  20                 	db	32
   137  00FEFD  20                 	db	32
   138  00FEFE  20                 	db	32
   139  00FEFF  20                 	db	32
   140  00FF00  00                 	db	0
   141  00FF01                     STR_22:
   142  00FF01  53                 	db	83	;'S'
   143  00FF02  61                 	db	97	;'a'
   144  00FF03  62                 	db	98	;'b'
   145  00FF04  61                 	db	97	;'a'
   146  00FF05  64                 	db	100	;'d'
   147  00FF06  6F                 	db	111	;'o'
   148  00FF07  20                 	db	32
   149  00FF08  20                 	db	32
   150  00FF09  20                 	db	32
   151  00FF0A  20                 	db	32
   152  00FF0B  20                 	db	32
   153  00FF0C  20                 	db	32
   154  00FF0D  20                 	db	32
   155  00FF0E  20                 	db	32
   156  00FF0F  20                 	db	32
   157  00FF10  20                 	db	32
   158  00FF11  20                 	db	32
   159  00FF12  20                 	db	32
   160  00FF13  20                 	db	32
   161  00FF14  20                 	db	32
   162  00FF15  00                 	db	0
   163  00FF16                     STR_14:
   164  00FF16  4D                 	db	77	;'M'
   165  00FF17  61                 	db	97	;'a'
   166  00FF18  72                 	db	114	;'r'
   167  00FF19  74                 	db	116	;'t'
   168  00FF1A  65                 	db	101	;'e'
   169  00FF1B  73                 	db	115	;'s'
   170  00FF1C  20                 	db	32
   171  00FF1D  20                 	db	32
   172  00FF1E  20                 	db	32
   173  00FF1F  20                 	db	32
   174  00FF20  20                 	db	32
   175  00FF21  20                 	db	32
   176  00FF22  20                 	db	32
   177  00FF23  20                 	db	32
   178  00FF24  20                 	db	32
   179  00FF25  20                 	db	32
   180  00FF26  20                 	db	32
   181  00FF27  20                 	db	32
   182  00FF28  20                 	db	32
   183  00FF29  20                 	db	32
   184  00FF2A  00                 	db	0
   185  00FF2B                     STR_18:
   186  00FF2B  4A                 	db	74	;'J'
   187  00FF2C  75                 	db	117	;'u'
   188  00FF2D  65                 	db	101	;'e'
   189  00FF2E  76                 	db	118	;'v'
   190  00FF2F  65                 	db	101	;'e'
   191  00FF30  73                 	db	115	;'s'
   192  00FF31  20                 	db	32
   193  00FF32  20                 	db	32
   194  00FF33  20                 	db	32
   195  00FF34  20                 	db	32
   196  00FF35  20                 	db	32
   197  00FF36  20                 	db	32
   198  00FF37  20                 	db	32
   199  00FF38  20                 	db	32
   200  00FF39  20                 	db	32
   201  00FF3A  20                 	db	32
   202  00FF3B  20                 	db	32
   203  00FF3C  20                 	db	32
   204  00FF3D  20                 	db	32
   205  00FF3E  20                 	db	32
   206  00FF3F  00                 	db	0
   207  00FF40                     STR_10:
   208  00FF40  44                 	db	68	;'D'
   209  00FF41  6F                 	db	111	;'o'
   210  00FF42  6D                 	db	109	;'m'
   211  00FF43  69                 	db	105	;'i'
   212  00FF44  6E                 	db	110	;'n'
   213  00FF45  67                 	db	103	;'g'
   214  00FF46  6F                 	db	111	;'o'
   215  00FF47  20                 	db	32
   216  00FF48  20                 	db	32
   217  00FF49  20                 	db	32
   218  00FF4A  20                 	db	32
   219  00FF4B  20                 	db	32
   220  00FF4C  20                 	db	32
   221  00FF4D  20                 	db	32
   222  00FF4E  20                 	db	32
   223  00FF4F  20                 	db	32
   224  00FF50  20                 	db	32
   225  00FF51  20                 	db	32
   226  00FF52  20                 	db	32
   227  00FF53  20                 	db	32
   228  00FF54  00                 	db	0
   229  00FF55                     STR_20:
   230  00FF55  56                 	db	86	;'V'
   231  00FF56  69                 	db	105	;'i'
   232  00FF57  65                 	db	101	;'e'
   233  00FF58  72                 	db	114	;'r'
   234  00FF59  6E                 	db	110	;'n'
   235  00FF5A  65                 	db	101	;'e'
   236  00FF5B  73                 	db	115	;'s'
   237  00FF5C  20                 	db	32
   238  00FF5D  20                 	db	32
   239  00FF5E  20                 	db	32
   240  00FF5F  20                 	db	32
   241  00FF60  20                 	db	32
   242  00FF61  20                 	db	32
   243  00FF62  20                 	db	32
   244  00FF63  20                 	db	32
   245  00FF64  20                 	db	32
   246  00FF65  20                 	db	32
   247  00FF66  20                 	db	32
   248  00FF67  20                 	db	32
   249  00FF68  20                 	db	32
   250  00FF69  00                 	db	0
   251  00FF6A                     STR_16:
   252  00FF6A  4D                 	db	77	;'M'
   253  00FF6B  69                 	db	105	;'i'
   254  00FF6C  65                 	db	101	;'e'
   255  00FF6D  72                 	db	114	;'r'
   256  00FF6E  63                 	db	99	;'c'
   257  00FF6F  6F                 	db	111	;'o'
   258  00FF70  6C                 	db	108	;'l'
   259  00FF71  65                 	db	101	;'e'
   260  00FF72  73                 	db	115	;'s'
   261  00FF73  20                 	db	32
   262  00FF74  20                 	db	32
   263  00FF75  20                 	db	32
   264  00FF76  20                 	db	32
   265  00FF77  20                 	db	32
   266  00FF78  20                 	db	32
   267  00FF79  20                 	db	32
   268  00FF7A  20                 	db	32
   269  00FF7B  20                 	db	32
   270  00FF7C  20                 	db	32
   271  00FF7D  20                 	db	32
   272  00FF7E  00                 	db	0
   273  00FF7F                     STR_5:
   274  00FF7F  43                 	db	67	;'C'
   275  00FF80  45                 	db	69	;'E'
   276  00FF81  4E                 	db	78	;'N'
   277  00FF82  54                 	db	84	;'T'
   278  00FF83  45                 	db	69	;'E'
   279  00FF84  52                 	db	82	;'R'
   280  00FF85  20                 	db	32
   281  00FF86  20                 	db	32
   282  00FF87  20                 	db	32
   283  00FF88  20                 	db	32
   284  00FF89  20                 	db	32
   285  00FF8A  20                 	db	32
   286  00FF8B  20                 	db	32
   287  00FF8C  20                 	db	32
   288  00FF8D  20                 	db	32
   289  00FF8E  20                 	db	32
   290  00FF8F  20                 	db	32
   291  00FF90  20                 	db	32
   292  00FF91  20                 	db	32
   293  00FF92  00                 	db	0
   294  00FF93                     STR_3:
   295  00FF93  52                 	db	82	;'R'
   296  00FF94  49                 	db	73	;'I'
   297  00FF95  47                 	db	71	;'G'
   298  00FF96  48                 	db	72	;'H'
   299  00FF97  54                 	db	84	;'T'
   300  00FF98  20                 	db	32
   301  00FF99  20                 	db	32
   302  00FF9A  20                 	db	32
   303  00FF9B  20                 	db	32
   304  00FF9C  20                 	db	32
   305  00FF9D  20                 	db	32
   306  00FF9E  20                 	db	32
   307  00FF9F  20                 	db	32
   308  00FFA0  20                 	db	32
   309  00FFA1  20                 	db	32
   310  00FFA2  20                 	db	32
   311  00FFA3  20                 	db	32
   312  00FFA4  20                 	db	32
   313  00FFA5  00                 	db	0
   314  00FFA6                     STR_4:
   315  00FFA6  55                 	db	85	;'U'
   316  00FFA7  50                 	db	80	;'P'
   317  00FFA8  20                 	db	32
   318  00FFA9  20                 	db	32
   319  00FFAA  20                 	db	32
   320  00FFAB  20                 	db	32
   321  00FFAC  20                 	db	32
   322  00FFAD  20                 	db	32
   323  00FFAE  20                 	db	32
   324  00FFAF  20                 	db	32
   325  00FFB0  20                 	db	32
   326  00FFB1  20                 	db	32
   327  00FFB2  20                 	db	32
   328  00FFB3  20                 	db	32
   329  00FFB4  20                 	db	32
   330  00FFB5  20                 	db	32
   331  00FFB6  20                 	db	32
   332  00FFB7  00                 	db	0
   333  00FFB8                     STR_1:
   334  00FFB8  50                 	db	80	;'P'
   335  00FFB9  72                 	db	114	;'r'
   336  00FFBA  6F                 	db	111	;'o'
   337  00FFBB  67                 	db	103	;'g'
   338  00FFBC  72                 	db	114	;'r'
   339  00FFBD  61                 	db	97	;'a'
   340  00FFBE  6D                 	db	109	;'m'
   341  00FFBF  20                 	db	32
   342  00FFC0  64                 	db	100	;'d'
   343  00FFC1  65                 	db	101	;'e'
   344  00FFC2  6C                 	db	108	;'l'
   345  00FFC3  20                 	db	32
   346  00FFC4  72                 	db	114	;'r'
   347  00FFC5  65                 	db	101	;'e'
   348  00FFC6  6C                 	db	108	;'l'
   349  00FFC7  6F                 	db	111	;'o'
   350  00FFC8  6A                 	db	106	;'j'
   351  00FFC9  00                 	db	0
   352  00FFCA                     STR_7:
   353  00FFCA  25                 	db	37
   354  00FFCB  30                 	db	48	;'0'
   355  00FFCC  32                 	db	50	;'2'
   356  00FFCD  75                 	db	117	;'u'
   357  00FFCE  2F                 	db	47
   358  00FFCF  25                 	db	37
   359  00FFD0  30                 	db	48	;'0'
   360  00FFD1  32                 	db	50	;'2'
   361  00FFD2  75                 	db	117	;'u'
   362  00FFD3  2F                 	db	47
   363  00FFD4  25                 	db	37
   364  00FFD5  30                 	db	48	;'0'
   365  00FFD6  32                 	db	50	;'2'
   366  00FFD7  75                 	db	117	;'u'
   367  00FFD8  00                 	db	0
   368  00FFD9                     STR_8:
   369  00FFD9  25                 	db	37
   370  00FFDA  30                 	db	48	;'0'
   371  00FFDB  32                 	db	50	;'2'
   372  00FFDC  75                 	db	117	;'u'
   373  00FFDD  3A                 	db	58	;':'
   374  00FFDE  25                 	db	37
   375  00FFDF  30                 	db	48	;'0'
   376  00FFE0  32                 	db	50	;'2'
   377  00FFE1  75                 	db	117	;'u'
   378  00FFE2  3A                 	db	58	;':'
   379  00FFE3  25                 	db	37
   380  00FFE4  30                 	db	48	;'0'
   381  00FFE5  32                 	db	50	;'2'
   382  00FFE6  75                 	db	117	;'u'
   383  00FFE7  00                 	db	0
   384  00FFE8                     STR_28:
   385  00FFE8  28                 	db	40
   386  00FFE9  6E                 	db	110	;'n'
   387  00FFEA  75                 	db	117	;'u'
   388  00FFEB  6C                 	db	108	;'l'
   389  00FFEC  6C                 	db	108	;'l'
   390  00FFED  29                 	db	41
   391  00FFEE  00                 	db	0
   392  00FFEF                     STR_2:
   393  00FFEF  25                 	db	37
   394  00FFF0  30                 	db	48	;'0'
   395  00FFF1  33                 	db	51	;'3'
   396  00FFF2  75                 	db	117	;'u'
   397  00FFF3  00                 	db	0
   398  00FFF4                     STR_9:
   399  00FFF4  25                 	db	37
   400  00FFF5  73                 	db	115	;'s'
   401  00FFF6  00                 	db	0
   402  0000                     
   403                           ; #config settings
   404  00FFF7  00                 	db	0	; dummy byte at the end
   405  0000                     
   406                           	psect	nvBANK0
   407  0000AF                     __pnvBANK0:
   408                           	opt stack 0
   409  0000AF                     _anio_d:
   410                           	opt stack 0
   411  0000AF                     	ds	1
   412  0000B0                     _anio_u:
   413                           	opt stack 0
   414  0000B0                     	ds	1
   415  0000B1                     _dia_semana:
   416                           	opt stack 0
   417  0000B1                     	ds	1
   418  0000B2                     _fecha_d:
   419                           	opt stack 0
   420  0000B2                     	ds	1
   421  0000B3                     _fecha_u:
   422                           	opt stack 0
   423  0000B3                     	ds	1
   424  0000B4                     _hora_d:
   425                           	opt stack 0
   426  0000B4                     	ds	1
   427  0000B5                     _hora_u:
   428                           	opt stack 0
   429  0000B5                     	ds	1
   430  0000B6                     _mes_d:
   431                           	opt stack 0
   432  0000B6                     	ds	1
   433  0000B7                     _mes_u:
   434                           	opt stack 0
   435  0000B7                     	ds	1
   436  0000B8                     _minuto_d:
   437                           	opt stack 0
   438  0000B8                     	ds	1
   439  0000B9                     _minuto_u:
   440                           	opt stack 0
   441  0000B9                     	ds	1
   442  0000BA                     _segundo_d:
   443                           	opt stack 0
   444  0000BA                     	ds	1
   445  0000BB                     _segundo_u:
   446                           	opt stack 0
   447  0000BB                     	ds	1
   448  0000                     _ANCON0	set	3912
   449  0000                     _ANCON1	set	3913
   450  0000                     _RTCCFG	set	3903
   451  0000                     _RTCCFGbits	set	3903
   452  0000                     _ADCON0	set	4034
   453  0000                     _ADCON0bits	set	4034
   454  0000                     _ADCON1	set	4033
   455  0000                     _ADRESH	set	4036
   456  0000                     _ALRMCFGbits	set	3985
   457  0000                     _EECON2	set	4007
   458  0000                     _INTCONbits	set	4082
   459  0000                     _LATAbits	set	3977
   460  0000                     _LATBbits	set	3978
   461  0000                     _OSCCONbits	set	4051
   462  0000                     _OSCTUNEbits	set	3995
   463  0000                     _PIE3bits	set	4003
   464  0000                     _PORTAbits	set	3968
   465  0000                     _PORTCbits	set	3970
   466  0000                     _RTCVALH	set	3993
   467  0000                     _RTCVALL	set	3992
   468  0000                     _T1CONbits	set	4045
   469  0000                     _TRISA	set	3986
   470  0000                     _TRISB	set	3987
   471  0000                     _TRISBbits	set	3987
   472  0000                     _TRISC	set	3988
   473                           
   474                           	psect	cinit
   475  00EB5A                     __pcinit:
   476                           	opt stack 0
   477  00EB5A                     start_initialization:
   478                           	opt stack 0
   479  00EB5A                     __initialization:
   480                           	opt stack 0
   481                           
   482                           ; Clear objects allocated to BANK0 (57 bytes)
   483  00EB5A  EE00  F060         	lfsr	0,__pbssBANK0
   484  00EB5E  0E39               	movlw	57
   485  00EB60                     clear_0:
   486  00EB60  6AEE               	clrf	postinc0,c
   487  00EB62  06E8               	decf	wreg,f,c
   488  00EB64  E1FD               	bnz	clear_0
   489                           
   490                           ; Clear objects allocated to COMRAM (11 bytes)
   491  00EB66  EE00  F04D         	lfsr	0,__pbssCOMRAM
   492  00EB6A  0E0B               	movlw	11
   493  00EB6C                     clear_1:
   494  00EB6C  6AEE               	clrf	postinc0,c
   495  00EB6E  06E8               	decf	wreg,f,c
   496  00EB70  E1FD               	bnz	clear_1
   497                           
   498                           ; Initialize objects allocated to BANK0 (22 bytes)
   499                           ; load TBLPTR registers with __pidataBANK0
   500  00EB72  0E32               	movlw	low __pidataBANK0
   501  00EB74  6EF6               	movwf	tblptrl,c
   502  00EB76  0EEA               	movlw	high __pidataBANK0
   503  00EB78  6EF7               	movwf	tblptrh,c
   504  00EB7A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   505  00EB7C  6EF8               	movwf	tblptru,c
   506  00EB7E  EE00  F099         	lfsr	0,__pdataBANK0
   507  00EB82  EE10 F016          	lfsr	1,22
   508  00EB86                     copy_data0:
   509  00EB86  0009               	tblrd		*+
   510  00EB88  CFF5 FFEE          	movff	tablat,postinc0
   511  00EB8C  50E5               	movf	postdec1,w,c
   512  00EB8E  50E1               	movf	fsr1l,w,c
   513  00EB90  E1FA               	bnz	copy_data0
   514                           
   515                           ; Initialize objects allocated to COMRAM (8 bytes)
   516                           ; load TBLPTR registers with __pidataCOMRAM
   517  00EB92  0E18               	movlw	low __pidataCOMRAM
   518  00EB94  6EF6               	movwf	tblptrl,c
   519  00EB96  0EEA               	movlw	high __pidataCOMRAM
   520  00EB98  6EF7               	movwf	tblptrh,c
   521  00EB9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   522  00EB9C  6EF8               	movwf	tblptru,c
   523  00EB9E  EE00  F058         	lfsr	0,__pdataCOMRAM
   524  00EBA2  EE10 F008          	lfsr	1,8
   525  00EBA6                     copy_data1:
   526  00EBA6  0009               	tblrd		*+
   527  00EBA8  CFF5 FFEE          	movff	tablat,postinc0
   528  00EBAC  50E5               	movf	postdec1,w,c
   529  00EBAE  50E1               	movf	fsr1l,w,c
   530  00EBB0  E1FA               	bnz	copy_data1
   531  00EBB2                     end_of_initialization:
   532                           	opt stack 0
   533  00EBB2                     __end_of__initialization:
   534                           	opt stack 0
   535  00EBB2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   536  00EBB4  6EF8               	movwf	tblptru,c
   537  00EBB6  0100               	movlb	0
   538  00EBB8  EFCB  F07C         	goto	_main	;jump to C main() function
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	bssCOMRAM
   549  00004D                     __pbssCOMRAM:
   550                           	opt stack 0
   551  00004D                     _i:
   552                           	opt stack 0
   553  00004D                     	ds	2
   554  00004F                     _lectura:
   555                           	opt stack 0
   556  00004F                     	ds	1
   557  000050                     _RtccDate:
   558                           	opt stack 0
   559  000050                     	ds	4
   560  000054                     _RtccTime:
   561                           	opt stack 0
   562  000054                     	ds	4
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataCOMRAM
   573  000058                     __pdataCOMRAM:
   574                           	opt stack 0
   575  000058                     _anio:
   576                           	opt stack 0
   577  000058                     	ds	2
   578  00005A                     _dia:
   579                           	opt stack 0
   580  00005A                     	ds	2
   581  00005C                     _diasem:
   582                           	opt stack 0
   583  00005C                     	ds	2
   584  00005E                     _mes:
   585                           	opt stack 0
   586  00005E                     	ds	2
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK0
   597  000060                     __pbssBANK0:
   598                           	opt stack 0
   599  000060                     _RtccAlrmTimeDate:
   600                           	opt stack 0
   601  000060                     	ds	8
   602  000068                     _RtccTimeDate:
   603                           	opt stack 0
   604  000068                     	ds	8
   605  000070                     _Rtcc_read_TimeDate:
   606                           	opt stack 0
   607  000070                     	ds	8
   608  000078                     _RtccTimeVal:
   609                           	opt stack 0
   610  000078                     	ds	4
   611  00007C                     _segundo:
   612                           	opt stack 0
   613  00007C                     	ds	2
   614  00007E                     _CuentamSeg:
   615                           	opt stack 0
   616  00007E                     	ds	1
   617  00007F                     _Flag_1:
   618                           	opt stack 0
   619  00007F                     	ds	1
   620  000080                     _Sw_Center:
   621                           	opt stack 0
   622  000080                     	ds	1
   623  000081                     _Sw_Down:
   624                           	opt stack 0
   625  000081                     	ds	1
   626  000082                     _Sw_Left:
   627                           	opt stack 0
   628  000082                     	ds	1
   629  000083                     _Sw_Right:
   630                           	opt stack 0
   631  000083                     	ds	1
   632  000084                     _Sw_Up:
   633                           	opt stack 0
   634  000084                     	ds	1
   635  000085                     _buffer1:
   636                           	opt stack 0
   637  000085                     	ds	20
   638                           tblptru	equ	0xFF8
   639                           tblptrh	equ	0xFF7
   640                           tblptrl	equ	0xFF6
   641                           tablat	equ	0xFF5
   642                           postinc0	equ	0xFEE
   643                           wreg	equ	0xFE8
   644                           postdec1	equ	0xFE5
   645                           fsr1l	equ	0xFE1
   646                           
   647                           	psect	dataBANK0
   648  000099                     __pdataBANK0:
   649                           	opt stack 0
   650  000099                     _posicionesLeft:
   651                           	opt stack 0
   652  000099                     	ds	12
   653  0000A5                     _Grados:
   654                           	opt stack 0
   655  0000A5                     	ds	3
   656  0000A8                     _Temp_prog:
   657                           	opt stack 0
   658  0000A8                     	ds	3
   659  0000AB                     _hora:
   660                           	opt stack 0
   661  0000AB                     	ds	2
   662  0000AD                     _minuto:
   663                           	opt stack 0
   664  0000AD                     	ds	2
   665                           tblptru	equ	0xFF8
   666                           tblptrh	equ	0xFF7
   667                           tblptrl	equ	0xFF6
   668                           tablat	equ	0xFF5
   669                           postinc0	equ	0xFEE
   670                           wreg	equ	0xFE8
   671                           postdec1	equ	0xFE5
   672                           fsr1l	equ	0xFE1
   673                           
   674                           	psect	cstackCOMRAM
   675  000001                     __pcstackCOMRAM:
   676                           	opt stack 0
   677  000001                     ??_Lcd_Cmd:
   678  000001                     ??_Lcd_Chr_CP:
   679  000001                     ??_lee_temperatura:
   680  000001                     ??_isdigit:
   681  000001                     ?___wmul:
   682                           	opt stack 0
   683  000001                     ?___awdiv:
   684                           	opt stack 0
   685  000001                     ?___lwdiv:
   686                           	opt stack 0
   687  000001                     RtccReadDate@pDt:
   688                           	opt stack 0
   689  000001                     RtccReadTime@pTm:
   690                           	opt stack 0
   691  000001                     RtccWriteDate@pDt:
   692                           	opt stack 0
   693  000001                     RtccWriteTime@pTm:
   694                           	opt stack 0
   695  000001                     ___wmul@multiplier:
   696                           	opt stack 0
   697  000001                     ___awdiv@dividend:
   698                           	opt stack 0
   699  000001                     ___lwdiv@dividend:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x0
   703  000001                     	ds	1
   704  000002                     _isdigit$2078:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1
   708  000002                     	ds	1
   709  000003                     Lcd_Chr_CP@data:
   710                           	opt stack 0
   711  000003                     Lcd_Cmd@data:
   712                           	opt stack 0
   713  000003                     RtccWriteDate@di:
   714                           	opt stack 0
   715  000003                     RtccWriteTime@di:
   716                           	opt stack 0
   717  000003                     isdigit@c:
   718                           	opt stack 0
   719  000003                     ___wmul@multiplicand:
   720                           	opt stack 0
   721  000003                     ___awdiv@divisor:
   722                           	opt stack 0
   723  000003                     ___lwdiv@divisor:
   724                           	opt stack 0
   725  000003                     RtccReadDate@rTD1:
   726                           	opt stack 0
   727  000003                     RtccReadTime@rTD1:
   728                           	opt stack 0
   729                           
   730                           ; 8 bytes @ 0x2
   731  000003                     	ds	1
   732  000004                     ??_Lcd_Init:
   733                           
   734                           ; 0 bytes @ 0x3
   735  000004                     	ds	1
   736  000005                     Lcd_Init@data:
   737                           	opt stack 0
   738  000005                     RtccWriteDate@wasOn:
   739                           	opt stack 0
   740  000005                     RtccWriteTime@wasOn:
   741                           	opt stack 0
   742  000005                     ___awdiv@counter:
   743                           	opt stack 0
   744  000005                     ___wmul@product:
   745                           	opt stack 0
   746  000005                     ___lwdiv@quotient:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x4
   750  000005                     	ds	1
   751  000006                     RtccWriteDate@wasAlrm:
   752                           	opt stack 0
   753  000006                     RtccWriteTime@wasAlrm:
   754                           	opt stack 0
   755  000006                     ___awdiv@sign:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x5
   759  000006                     	ds	1
   760  000007                     RtccWriteTime@wasWrEn:
   761                           	opt stack 0
   762  000007                     ___lwdiv@counter:
   763                           	opt stack 0
   764  000007                     RtccWriteDate@tempYear:
   765                           	opt stack 0
   766  000007                     ___awdiv@quotient:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x6
   770  000007                     	ds	1
   771  000008                     ?___lwmod:
   772                           	opt stack 0
   773  000008                     RtccWriteTime@tempMinSec:
   774                           	opt stack 0
   775  000008                     ___lwmod@dividend:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x7
   779  000008                     	ds	1
   780  000009                     RtccWriteDate@wasWrEn:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x8
   784  000009                     	ds	1
   785  00000A                     RtccWriteDate@tempDayMonth:
   786                           	opt stack 0
   787  00000A                     RtccWriteTime@tempHourWDay:
   788                           	opt stack 0
   789  00000A                     ___lwmod@divisor:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x9
   793  00000A                     	ds	1
   794  00000B                     RtccReadDate@rTD0:
   795                           	opt stack 0
   796  00000B                     RtccReadTime@rTD0:
   797                           	opt stack 0
   798                           
   799                           ; 8 bytes @ 0xA
   800  00000B                     	ds	1
   801  00000C                     ___lwmod@counter:
   802                           	opt stack 0
   803  00000C                     RtccWriteDate@tempHourWDay:
   804                           	opt stack 0
   805                           
   806                           ; 2 bytes @ 0xB
   807  00000C                     	ds	1
   808  00000D                     ?_sprintf:
   809                           	opt stack 0
   810  00000D                     sprintf@sp:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0xC
   814  00000D                     	ds	1
   815  00000E                     
   816                           ; 0 bytes @ 0xD
   817  00000E                     	ds	1
   818  00000F                     sprintf@f:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0xE
   822  00000F                     	ds	4
   823  000013                     
   824                           ; 0 bytes @ 0x12
   825  000013                     	ds	4
   826  000017                     ??_sprintf:
   827                           
   828                           ; 0 bytes @ 0x16
   829  000017                     	ds	4
   830  00001B                     sprintf@flag:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x1A
   834  00001B                     	ds	1
   835  00001C                     sprintf@val:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x1B
   839  00001C                     	ds	2
   840  00001E                     sprintf@prec:
   841                           	opt stack 0
   842                           
   843                           ; 1 bytes @ 0x1D
   844  00001E                     	ds	1
   845  00001F                     sprintf@ap:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x1E
   849  00001F                     	ds	2
   850  000021                     sprintf@cp:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x20
   854  000021                     	ds	2
   855  000023                     sprintf@len:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x22
   859  000023                     	ds	2
   860  000025                     sprintf@width:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x24
   864  000025                     	ds	2
   865  000027                     sprintf@c:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x26
   869  000027                     	ds	1
   870  000028                     ?_Convert_diasem:
   871                           	opt stack 0
   872  000028                     Convert_diasem@dia:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x27
   876  000028                     	ds	2
   877  00002A                     ??_Convert_diasem:
   878                           
   879                           ; 0 bytes @ 0x29
   880  00002A                     	ds	2
   881  00002C                     Convert_diasem@buffer_dia:
   882                           	opt stack 0
   883                           
   884                           ; 20 bytes @ 0x2B
   885  00002C                     	ds	20
   886  000040                     Lcd_Out@x:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x3F
   890  000040                     	ds	1
   891  000041                     Lcd_Out@buffer:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x40
   895  000041                     	ds	2
   896  000043                     Lcd_Out@y:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x42
   900  000043                     	ds	1
   901  000044                     Lcd_Out@data:
   902                           	opt stack 0
   903                           
   904                           ; 1 bytes @ 0x43
   905  000044                     	ds	1
   906  000045                     ??_ManejaMovimientos:
   907  000045                     V_Principal@cte:
   908                           	opt stack 0
   909                           
   910                           ; 2 bytes @ 0x44
   911  000045                     	ds	1
   912  000046                     ManejaMovimientos@anio_tr:
   913                           	opt stack 0
   914                           
   915                           ; 1 bytes @ 0x45
   916  000046                     	ds	1
   917  000047                     ManejaMovimientos@mes_tr:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x46
   921  000047                     	ds	1
   922  000048                     ManejaMovimientos@posicion:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0x47
   926  000048                     	ds	2
   927  00004A                     ManejaMovimientos@diasem_tr:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x49
   931  00004A                     	ds	1
   932  00004B                     ManejaMovimientos@dia_tr:
   933                           	opt stack 0
   934                           
   935                           ; 1 bytes @ 0x4A
   936  00004B                     	ds	1
   937  00004C                     ??_main:
   938                           
   939                           ; 0 bytes @ 0x4B
   940  00004C                     	ds	1
   941                           tblptru	equ	0xFF8
   942                           tblptrh	equ	0xFF7
   943                           tblptrl	equ	0xFF6
   944                           tablat	equ	0xFF5
   945                           postinc0	equ	0xFEE
   946                           wreg	equ	0xFE8
   947                           postdec1	equ	0xFE5
   948                           fsr1l	equ	0xFE1
   949                           
   950 ;;
   951 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   952 ;;
   953 ;; *************** function _main *****************
   954 ;; Defined at:
   955 ;;		line 129 in file "../main.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;		None               void
   962 ;; Registers used:
   963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   973 ;;Total ram usage:        1 bytes
   974 ;; Hardware stack levels required when called:    4
   975 ;; This function calls:
   976 ;;		_Lcd_Cmd
   977 ;;		_Lcd_Init
   978 ;;		_Lcd_Out
   979 ;;		_ManejaMovimientos
   980 ;;		_V_Principal
   981 ;;		_Write_RTC
   982 ;;		_sprintf
   983 ;; This function is called by:
   984 ;;		Startup code after reset
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text0
   989  00F996                     __ptext0:
   990                           	opt stack 0
   991  00F996                     _main:
   992                           	opt stack 27
   993                           
   994                           ;main.c: 131: OSCTUNEbits.INTSRC=1;
   995                           
   996                           ;incstack = 0
   997  00F996  8E9B               	bsf	3995,7,c	;volatile
   998                           
   999                           ;main.c: 132: OSCTUNEbits.PLLEN=0;
  1000  00F998  9C9B               	bcf	3995,6,c	;volatile
  1001                           
  1002                           ;main.c: 133: OSCCONbits.IRCF0=1;
  1003  00F99A  88D3               	bsf	4051,4,c	;volatile
  1004                           
  1005                           ;main.c: 134: OSCCONbits.IRCF1=1;
  1006  00F99C  8AD3               	bsf	4051,5,c	;volatile
  1007                           
  1008                           ;main.c: 135: OSCCONbits.IRCF2=1;
  1009  00F99E  8CD3               	bsf	4051,6,c	;volatile
  1010                           
  1011                           ;main.c: 136: OSCCONbits.SCS0=0;
  1012  00F9A0  90D3               	bcf	4051,0,c	;volatile
  1013                           
  1014                           ;main.c: 137: OSCCONbits.SCS1=0;
  1015  00F9A2  92D3               	bcf	4051,1,c	;volatile
  1016                           
  1017                           ;main.c: 139: RTCCFGbits.RTCEN=1;
  1018  00F9A4  010F               	movlb	15	; () banked
  1019  00F9A6  8F3F               	bsf	63,7,b	;volatile
  1020                           
  1021                           ;main.c: 140: RTCCFGbits.RTCWREN=1;
  1022  00F9A8  010F               	movlb	15	; () banked
  1023  00F9AA  8B3F               	bsf	63,5,b	;volatile
  1024                           
  1025                           ;main.c: 141: T1CONbits.T1OSCEN=1;
  1026  00F9AC  86CD               	bsf	4045,3,c	;volatile
  1027                           
  1028                           ; BSR set to: 15
  1029                           ;main.c: 143: TRISA = 0b11111101;
  1030  00F9AE  0EFD               	movlw	253
  1031  00F9B0  6E92               	movwf	3986,c	;volatile
  1032                           
  1033                           ;main.c: 144: TRISB = 0;
  1034  00F9B2  0E00               	movlw	0
  1035  00F9B4  6E93               	movwf	3987,c	;volatile
  1036                           
  1037                           ; BSR set to: 15
  1038                           ;main.c: 145: TRISC = 0b11111111;
  1039  00F9B6  6894               	setf	3988,c	;volatile
  1040                           
  1041                           ; BSR set to: 15
  1042                           ;main.c: 146: ANCON0 = 0b11111111;
  1043  00F9B8  010F               	movlb	15	; () banked
  1044  00F9BA  6948               	setf	72,b	;volatile
  1045                           
  1046                           ;main.c: 147: ANCON1 = 0b11110111;
  1047  00F9BC  0EF7               	movlw	247
  1048  00F9BE  010F               	movlb	15	; () banked
  1049  00F9C0  6F49               	movwf	73,b	;volatile
  1050                           
  1051                           ;main.c: 148: ADCON0 = 0b00101111;
  1052  00F9C2  0E2F               	movlw	47
  1053  00F9C4  6EC2               	movwf	4034,c	;volatile
  1054                           
  1055                           ;main.c: 149: ADCON1 = 0b00111001;
  1056  00F9C6  0E39               	movlw	57
  1057  00F9C8  6EC1               	movwf	4033,c	;volatile
  1058                           
  1059                           ; BSR set to: 15
  1060                           ;main.c: 151: Write_RTC();
  1061  00F9CA  EC06  F07C         	call	_Write_RTC	;wreg free
  1062                           
  1063                           ;main.c: 152: Lcd_Init();
  1064  00F9CE  ECD6  F077         	call	_Lcd_Init	;wreg free
  1065                           
  1066                           ;main.c: 153: Lcd_Cmd(1);
  1067  00F9D2  0E01               	movlw	1
  1068  00F9D4  ECF2  F078         	call	_Lcd_Cmd
  1069                           
  1070                           ;main.c: 154: Lcd_Cmd(12);
  1071  00F9D8  0E0C               	movlw	12
  1072  00F9DA  ECF2  F078         	call	_Lcd_Cmd
  1073                           
  1074                           ;main.c: 163: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1075  00F9DE  0EFF               	movlw	255
  1076  00F9E0  6E4C               	movwf	??_main& (0+255),c
  1077  00F9E2  0E8A               	movlw	138
  1078  00F9E4                     u2037:
  1079  00F9E4  2EE8               	decfsz	wreg,f,c
  1080  00F9E6  D7FE               	goto	u2037
  1081  00F9E8  2E4C               	decfsz	??_main& (0+255),f,c
  1082  00F9EA  D7FC               	goto	u2037
  1083  00F9EC  D000               	nop2	
  1084  00F9EE  0EFF               	movlw	255
  1085  00F9F0  6E4C               	movwf	??_main& (0+255),c
  1086  00F9F2  0E8A               	movlw	138
  1087  00F9F4                     u2047:
  1088  00F9F4  2EE8               	decfsz	wreg,f,c
  1089  00F9F6  D7FE               	goto	u2047
  1090  00F9F8  2E4C               	decfsz	??_main& (0+255),f,c
  1091  00F9FA  D7FC               	goto	u2047
  1092  00F9FC  D000               	nop2	
  1093  00F9FE  0EFF               	movlw	255
  1094  00FA00  6E4C               	movwf	??_main& (0+255),c
  1095  00FA02  0E8A               	movlw	138
  1096  00FA04                     u2057:
  1097  00FA04  2EE8               	decfsz	wreg,f,c
  1098  00FA06  D7FE               	goto	u2057
  1099  00FA08  2E4C               	decfsz	??_main& (0+255),f,c
  1100  00FA0A  D7FC               	goto	u2057
  1101  00FA0C  D000               	nop2	
  1102  00FA0E  0EFF               	movlw	255
  1103  00FA10  6E4C               	movwf	??_main& (0+255),c
  1104  00FA12  0E8A               	movlw	138
  1105  00FA14                     u2067:
  1106  00FA14  2EE8               	decfsz	wreg,f,c
  1107  00FA16  D7FE               	goto	u2067
  1108  00FA18  2E4C               	decfsz	??_main& (0+255),f,c
  1109  00FA1A  D7FC               	goto	u2067
  1110  00FA1C  D000               	nop2	
  1111  00FA1E  0EFF               	movlw	255
  1112  00FA20  6E4C               	movwf	??_main& (0+255),c
  1113  00FA22  0E8A               	movlw	138
  1114  00FA24                     u2077:
  1115  00FA24  2EE8               	decfsz	wreg,f,c
  1116  00FA26  D7FE               	goto	u2077
  1117  00FA28  2E4C               	decfsz	??_main& (0+255),f,c
  1118  00FA2A  D7FC               	goto	u2077
  1119  00FA2C  D000               	nop2	
  1120  00FA2E  0EFF               	movlw	255
  1121  00FA30  6E4C               	movwf	??_main& (0+255),c
  1122  00FA32  0E8A               	movlw	138
  1123  00FA34                     u2087:
  1124  00FA34  2EE8               	decfsz	wreg,f,c
  1125  00FA36  D7FE               	goto	u2087
  1126  00FA38  2E4C               	decfsz	??_main& (0+255),f,c
  1127  00FA3A  D7FC               	goto	u2087
  1128  00FA3C  D000               	nop2	
  1129  00FA3E  0EFF               	movlw	255
  1130  00FA40  6E4C               	movwf	??_main& (0+255),c
  1131  00FA42  0E8A               	movlw	138
  1132  00FA44                     u2097:
  1133  00FA44  2EE8               	decfsz	wreg,f,c
  1134  00FA46  D7FE               	goto	u2097
  1135  00FA48  2E4C               	decfsz	??_main& (0+255),f,c
  1136  00FA4A  D7FC               	goto	u2097
  1137  00FA4C  D000               	nop2	
  1138  00FA4E  0EFF               	movlw	255
  1139  00FA50  6E4C               	movwf	??_main& (0+255),c
  1140  00FA52  0E8A               	movlw	138
  1141  00FA54                     u2107:
  1142  00FA54  2EE8               	decfsz	wreg,f,c
  1143  00FA56  D7FE               	goto	u2107
  1144  00FA58  2E4C               	decfsz	??_main& (0+255),f,c
  1145  00FA5A  D7FC               	goto	u2107
  1146  00FA5C  D000               	nop2	
  1147                           
  1148                           ;main.c: 164: Lcd_Cmd(1);
  1149  00FA5E  0E01               	movlw	1
  1150  00FA60  ECF2  F078         	call	_Lcd_Cmd
  1151  00FA64  D000               	goto	l2688
  1152  00FA66                     l2688:
  1153                           
  1154                           ;main.c: 170: V_Principal();
  1155  00FA66  ECF1  F076         	call	_V_Principal	;wreg free
  1156                           
  1157                           ;main.c: 171: if(Sw_Left = PORTAbits.RA0 == 0){
  1158  00FA6A  B080               	btfsc	3968,0,c	;volatile
  1159  00FA6C  D002               	goto	u1880
  1160  00FA6E  0E01               	movlw	1
  1161  00FA70  D001               	goto	u1890
  1162  00FA72                     u1880:
  1163  00FA72  0E00               	movlw	0
  1164  00FA74                     u1890:
  1165  00FA74  0100               	movlb	0	; () banked
  1166  00FA76  6F82               	movwf	_Sw_Left& (0+255),b
  1167  00FA78  0100               	movlb	0	; () banked
  1168  00FA7A  5182               	movf	_Sw_Left& (0+255),w,b
  1169  00FA7C  B4D8               	btfsc	status,2,c
  1170  00FA7E  D00C               	goto	l2696
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;main.c: 175: Lcd_Out(1, 0, "Program del reloj");
  1174  00FA80  0E00               	movlw	0
  1175  00FA82  6E40               	movwf	Lcd_Out@x,c
  1176  00FA84  0EB8               	movlw	low STR_1
  1177  00FA86  6E41               	movwf	Lcd_Out@buffer,c
  1178  00FA88  0EFF               	movlw	high STR_1
  1179  00FA8A  6E42               	movwf	Lcd_Out@buffer+1,c
  1180  00FA8C  0E01               	movlw	1
  1181  00FA8E  EC5C  F076         	call	_Lcd_Out
  1182                           
  1183                           ;main.c: 179: ManejaMovimientos();
  1184  00FA92  EC49  F07B         	call	_ManejaMovimientos	;wreg free
  1185  00FA96  D000               	goto	l2696
  1186  00FA98                     l2696:
  1187                           
  1188                           ;main.c: 183: }
  1189                           ;main.c: 185: if(Sw_Down = PORTCbits.RC4 == 0){
  1190  00FA98  B882               	btfsc	3970,4,c	;volatile
  1191  00FA9A  D002               	goto	u1910
  1192  00FA9C  0E01               	movlw	1
  1193  00FA9E  D001               	goto	u1920
  1194  00FAA0                     u1910:
  1195  00FAA0  0E00               	movlw	0
  1196  00FAA2                     u1920:
  1197  00FAA2  0100               	movlb	0	; () banked
  1198  00FAA4  6F81               	movwf	_Sw_Down& (0+255),b
  1199  00FAA6  0100               	movlb	0	; () banked
  1200  00FAA8  5181               	movf	_Sw_Down& (0+255),w,b
  1201  00FAAA  B4D8               	btfsc	status,2,c
  1202  00FAAC  D017               	goto	l2702
  1203                           
  1204                           ; BSR set to: 0
  1205                           ;main.c: 187: sprintf(buffer1,"%03u",lectura);
  1206  00FAAE  0E85               	movlw	low _buffer1
  1207  00FAB0  6E0D               	movwf	sprintf@sp,c
  1208  00FAB2  0E00               	movlw	high _buffer1
  1209  00FAB4  6E0E               	movwf	sprintf@sp+1,c
  1210  00FAB6  0EEF               	movlw	low STR_2
  1211  00FAB8  6E0F               	movwf	sprintf@f,c
  1212  00FABA  0EFF               	movlw	high STR_2
  1213  00FABC  6E10               	movwf	sprintf@f+1,c
  1214  00FABE  C04F  F011         	movff	_lectura,?_sprintf+4
  1215  00FAC2  6A12               	clrf	?_sprintf+5,c
  1216  00FAC4  ECC9  F07D         	call	_sprintf	;wreg free
  1217                           
  1218                           ;main.c: 189: Lcd_Out(4,0,buffer1);
  1219  00FAC8  0E00               	movlw	0
  1220  00FACA  6E40               	movwf	Lcd_Out@x,c
  1221  00FACC  0E85               	movlw	low _buffer1
  1222  00FACE  6E41               	movwf	Lcd_Out@buffer,c
  1223  00FAD0  0E00               	movlw	high _buffer1
  1224  00FAD2  6E42               	movwf	Lcd_Out@buffer+1,c
  1225  00FAD4  0E04               	movlw	4
  1226  00FAD6  EC5C  F076         	call	_Lcd_Out
  1227  00FADA  D000               	goto	l2702
  1228  00FADC                     l2702:
  1229                           
  1230                           ;main.c: 190: }
  1231                           ;main.c: 192: if(Sw_Right = PORTAbits.RA2 == 0){
  1232  00FADC  B480               	btfsc	3968,2,c	;volatile
  1233  00FADE  D002               	goto	u1940
  1234  00FAE0  0E01               	movlw	1
  1235  00FAE2  D001               	goto	u1950
  1236  00FAE4                     u1940:
  1237  00FAE4  0E00               	movlw	0
  1238  00FAE6                     u1950:
  1239  00FAE6  0100               	movlb	0	; () banked
  1240  00FAE8  6F83               	movwf	_Sw_Right& (0+255),b
  1241  00FAEA  0100               	movlb	0	; () banked
  1242  00FAEC  5183               	movf	_Sw_Right& (0+255),w,b
  1243  00FAEE  B4D8               	btfsc	status,2,c
  1244  00FAF0  D00A               	goto	l2706
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;main.c: 193: Lcd_Out(3, 0, "RIGHT             ");
  1248  00FAF2  0E00               	movlw	0
  1249  00FAF4  6E40               	movwf	Lcd_Out@x,c
  1250  00FAF6  0E93               	movlw	low STR_3
  1251  00FAF8  6E41               	movwf	Lcd_Out@buffer,c
  1252  00FAFA  0EFF               	movlw	high STR_3
  1253  00FAFC  6E42               	movwf	Lcd_Out@buffer+1,c
  1254  00FAFE  0E03               	movlw	3
  1255  00FB00  EC5C  F076         	call	_Lcd_Out
  1256  00FB04  D000               	goto	l2706
  1257  00FB06                     l2706:
  1258                           
  1259                           ;main.c: 194: }
  1260                           ;main.c: 196: if(Sw_Up = PORTAbits.RA3 == 0){
  1261  00FB06  B680               	btfsc	3968,3,c	;volatile
  1262  00FB08  D002               	goto	u1970
  1263  00FB0A  0E01               	movlw	1
  1264  00FB0C  D001               	goto	u1980
  1265  00FB0E                     u1970:
  1266  00FB0E  0E00               	movlw	0
  1267  00FB10                     u1980:
  1268  00FB10  0100               	movlb	0	; () banked
  1269  00FB12  6F84               	movwf	_Sw_Up& (0+255),b
  1270  00FB14  0100               	movlb	0	; () banked
  1271  00FB16  5184               	movf	_Sw_Up& (0+255),w,b
  1272  00FB18  B4D8               	btfsc	status,2,c
  1273  00FB1A  D00A               	goto	l2710
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;main.c: 197: Lcd_Out(4, 0, "UP               ");
  1277  00FB1C  0E00               	movlw	0
  1278  00FB1E  6E40               	movwf	Lcd_Out@x,c
  1279  00FB20  0EA6               	movlw	low STR_4
  1280  00FB22  6E41               	movwf	Lcd_Out@buffer,c
  1281  00FB24  0EFF               	movlw	high STR_4
  1282  00FB26  6E42               	movwf	Lcd_Out@buffer+1,c
  1283  00FB28  0E04               	movlw	4
  1284  00FB2A  EC5C  F076         	call	_Lcd_Out
  1285  00FB2E  D000               	goto	l2710
  1286  00FB30                     l2710:
  1287                           
  1288                           ;main.c: 198: }
  1289                           ;main.c: 200: if(Sw_Center = PORTAbits.RA5 == 0){
  1290  00FB30  BA80               	btfsc	3968,5,c	;volatile
  1291  00FB32  D002               	goto	u2000
  1292  00FB34  0E01               	movlw	1
  1293  00FB36  D001               	goto	u2010
  1294  00FB38                     u2000:
  1295  00FB38  0E00               	movlw	0
  1296  00FB3A                     u2010:
  1297  00FB3A  0100               	movlb	0	; () banked
  1298  00FB3C  6F80               	movwf	_Sw_Center& (0+255),b
  1299  00FB3E  0100               	movlb	0	; () banked
  1300  00FB40  5180               	movf	_Sw_Center& (0+255),w,b
  1301  00FB42  B4D8               	btfsc	status,2,c
  1302  00FB44  D00D               	goto	l2716
  1303                           
  1304                           ; BSR set to: 0
  1305                           ;main.c: 201: Lcd_Cmd(1);
  1306  00FB46  0E01               	movlw	1
  1307  00FB48  ECF2  F078         	call	_Lcd_Cmd
  1308                           
  1309                           ;main.c: 202: Lcd_Out(2, 0, "CENTER             ");
  1310  00FB4C  0E00               	movlw	0
  1311  00FB4E  6E40               	movwf	Lcd_Out@x,c
  1312  00FB50  0E7F               	movlw	low STR_5
  1313  00FB52  6E41               	movwf	Lcd_Out@buffer,c
  1314  00FB54  0EFF               	movlw	high STR_5
  1315  00FB56  6E42               	movwf	Lcd_Out@buffer+1,c
  1316  00FB58  0E02               	movlw	2
  1317  00FB5A  EC5C  F076         	call	_Lcd_Out
  1318  00FB5E  D000               	goto	l2716
  1319  00FB60                     l2716:
  1320                           
  1321                           ;main.c: 203: }
  1322                           ;main.c: 205: LATBbits.LATB7 = 1;
  1323  00FB60  8E8A               	bsf	3978,7,c	;volatile
  1324                           
  1325                           ;main.c: 206: LATBbits.LATB6 = 1;
  1326  00FB62  8C8A               	bsf	3978,6,c	;volatile
  1327                           
  1328                           ;main.c: 207: LATAbits.LA1 = 1;
  1329  00FB64  8289               	bsf	3977,1,c	;volatile
  1330                           
  1331                           ;main.c: 208: _delay((unsigned long)((10)*(8000000/4000.0)));
  1332  00FB66  0E1A               	movlw	26
  1333  00FB68  6E4C               	movwf	??_main& (0+255),c
  1334  00FB6A  0EF8               	movlw	248
  1335  00FB6C                     u2117:
  1336  00FB6C  2EE8               	decfsz	wreg,f,c
  1337  00FB6E  D7FE               	goto	u2117
  1338  00FB70  2E4C               	decfsz	??_main& (0+255),f,c
  1339  00FB72  D7FC               	goto	u2117
  1340  00FB74  D000               	nop2	
  1341                           
  1342                           ;main.c: 209: LATBbits.LATB7 = 0;
  1343  00FB76  9E8A               	bcf	3978,7,c	;volatile
  1344                           
  1345                           ;main.c: 210: LATBbits.LATB6 = 0;
  1346  00FB78  9C8A               	bcf	3978,6,c	;volatile
  1347                           
  1348                           ;main.c: 211: LATAbits.LA1 = 0;
  1349  00FB7A  9289               	bcf	3977,1,c	;volatile
  1350                           
  1351                           ;main.c: 212: _delay((unsigned long)((10)*(8000000/4000.0)));
  1352  00FB7C  0E1A               	movlw	26
  1353  00FB7E  6E4C               	movwf	??_main& (0+255),c
  1354  00FB80  0EF8               	movlw	248
  1355  00FB82                     u2127:
  1356  00FB82  2EE8               	decfsz	wreg,f,c
  1357  00FB84  D7FE               	goto	u2127
  1358  00FB86  2E4C               	decfsz	??_main& (0+255),f,c
  1359  00FB88  D7FC               	goto	u2127
  1360  00FB8A  D000               	nop2	
  1361  00FB8C  D76C               	goto	l2688
  1362  00FB8E  EF00  F000         	goto	start
  1363  00FB92                     __end_of_main:
  1364                           	opt stack 0
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           fsr1l	equ	0xFE1
  1373                           status	equ	0xFD8
  1374                           
  1375 ;; *************** function _V_Principal *****************
  1376 ;; Defined at:
  1377 ;;		line 220 in file "../main.c"
  1378 ;; Parameters:    Size  Location     Type
  1379 ;;		None
  1380 ;; Auto vars:     Size  Location     Type
  1381 ;;  cte             2   68[COMRAM] PTR unsigned char 
  1382 ;;		 -> Convert_diasem@buffer_dia(20), 
  1383 ;; Return value:  Size  Location     Type
  1384 ;;		None               void
  1385 ;; Registers used:
  1386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1387 ;; Tracked objects:
  1388 ;;		On entry : 0/0
  1389 ;;		On exit  : 0/0
  1390 ;;		Unchanged: 0/0
  1391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1396 ;;Total ram usage:        2 bytes
  1397 ;; Hardware stack levels used:    1
  1398 ;; Hardware stack levels required when called:    3
  1399 ;; This function calls:
  1400 ;;		_Convert_diasem
  1401 ;;		_Lcd_Out
  1402 ;;		_Read_RTC
  1403 ;;		_lee_temperatura
  1404 ;;		_sprintf
  1405 ;; This function is called by:
  1406 ;;		_main
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text1
  1411  00EDE2                     __ptext1:
  1412                           	opt stack 0
  1413  00EDE2                     _V_Principal:
  1414                           	opt stack 27
  1415                           
  1416                           ;main.c: 222: Read_RTC();
  1417                           
  1418                           ;incstack = 0
  1419  00EDE2  EC82  F079         	call	_Read_RTC	;wreg free
  1420                           
  1421                           ;main.c: 223: lee_temperatura();
  1422  00EDE6  EC24  F075         	call	_lee_temperatura	;wreg free
  1423                           
  1424                           ;main.c: 224: Lcd_Out(1, 0, "                    ");
  1425  00EDEA  0E00               	movlw	0
  1426  00EDEC  6E40               	movwf	Lcd_Out@x,c
  1427  00EDEE  0ED7               	movlw	low STR_6
  1428  00EDF0  6E41               	movwf	Lcd_Out@buffer,c
  1429  00EDF2  0EFE               	movlw	high STR_6
  1430  00EDF4  6E42               	movwf	Lcd_Out@buffer+1,c
  1431  00EDF6  0E01               	movlw	1
  1432  00EDF8  EC5C  F076         	call	_Lcd_Out
  1433                           
  1434                           ;main.c: 225: char* cte = Convert_diasem(diasem);
  1435  00EDFC  C05C  F028         	movff	_diasem,Convert_diasem@dia
  1436  00EE00  C05D  F029         	movff	_diasem+1,Convert_diasem@dia+1
  1437  00EE04  EC63  F078         	call	_Convert_diasem	;wreg free
  1438  00EE08  C028  F045         	movff	?_Convert_diasem,V_Principal@cte
  1439  00EE0C  C029  F046         	movff	?_Convert_diasem+1,V_Principal@cte+1
  1440                           
  1441                           ;main.c: 227: Lcd_Out(2, 0, cte);
  1442  00EE10  0E00               	movlw	0
  1443  00EE12  6E40               	movwf	Lcd_Out@x,c
  1444  00EE14  C045  F041         	movff	V_Principal@cte,Lcd_Out@buffer
  1445  00EE18  C046  F042         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  1446  00EE1C  0E02               	movlw	2
  1447  00EE1E  EC5C  F076         	call	_Lcd_Out
  1448                           
  1449                           ;main.c: 230: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  1450  00EE22  0E85               	movlw	low _buffer1
  1451  00EE24  6E0D               	movwf	sprintf@sp,c
  1452  00EE26  0E00               	movlw	high _buffer1
  1453  00EE28  6E0E               	movwf	sprintf@sp+1,c
  1454  00EE2A  0ECA               	movlw	low STR_7
  1455  00EE2C  6E0F               	movwf	sprintf@f,c
  1456  00EE2E  0EFF               	movlw	high STR_7
  1457  00EE30  6E10               	movwf	sprintf@f+1,c
  1458  00EE32  C05A  F011         	movff	_dia,?_sprintf+4
  1459  00EE36  C05B  F012         	movff	_dia+1,?_sprintf+5
  1460  00EE3A  C05E  F013         	movff	_mes,?_sprintf+6
  1461  00EE3E  C05F  F014         	movff	_mes+1,?_sprintf+7
  1462  00EE42  C058  F015         	movff	_anio,?_sprintf+8
  1463  00EE46  C059  F016         	movff	_anio+1,?_sprintf+9
  1464  00EE4A  ECC9  F07D         	call	_sprintf	;wreg free
  1465                           
  1466                           ;main.c: 231: Lcd_Out(3,0,buffer1);
  1467  00EE4E  0E00               	movlw	0
  1468  00EE50  6E40               	movwf	Lcd_Out@x,c
  1469  00EE52  0E85               	movlw	low _buffer1
  1470  00EE54  6E41               	movwf	Lcd_Out@buffer,c
  1471  00EE56  0E00               	movlw	high _buffer1
  1472  00EE58  6E42               	movwf	Lcd_Out@buffer+1,c
  1473  00EE5A  0E03               	movlw	3
  1474  00EE5C  EC5C  F076         	call	_Lcd_Out
  1475                           
  1476                           ;main.c: 232: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  1477  00EE60  0E85               	movlw	low _buffer1
  1478  00EE62  6E0D               	movwf	sprintf@sp,c
  1479  00EE64  0E00               	movlw	high _buffer1
  1480  00EE66  6E0E               	movwf	sprintf@sp+1,c
  1481  00EE68  0ED9               	movlw	low STR_8
  1482  00EE6A  6E0F               	movwf	sprintf@f,c
  1483  00EE6C  0EFF               	movlw	high STR_8
  1484  00EE6E  6E10               	movwf	sprintf@f+1,c
  1485  00EE70  C0AB  F011         	movff	_hora,?_sprintf+4
  1486  00EE74  C0AC  F012         	movff	_hora+1,?_sprintf+5
  1487  00EE78  C0AD  F013         	movff	_minuto,?_sprintf+6
  1488  00EE7C  C0AE  F014         	movff	_minuto+1,?_sprintf+7
  1489  00EE80  C07C  F015         	movff	_segundo,?_sprintf+8
  1490  00EE84  C07D  F016         	movff	_segundo+1,?_sprintf+9
  1491  00EE88  ECC9  F07D         	call	_sprintf	;wreg free
  1492                           
  1493                           ;main.c: 233: Lcd_Out(4,0,buffer1);
  1494  00EE8C  0E00               	movlw	0
  1495  00EE8E  6E40               	movwf	Lcd_Out@x,c
  1496  00EE90  0E85               	movlw	low _buffer1
  1497  00EE92  6E41               	movwf	Lcd_Out@buffer,c
  1498  00EE94  0E00               	movlw	high _buffer1
  1499  00EE96  6E42               	movwf	Lcd_Out@buffer+1,c
  1500  00EE98  0E04               	movlw	4
  1501  00EE9A  EC5C  F076         	call	_Lcd_Out
  1502  00EE9E  0012               	return		;funcret
  1503  00EEA0                     __end_of_V_Principal:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           postdec1	equ	0xFE5
  1512                           fsr1l	equ	0xFE1
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _lee_temperatura *****************
  1516 ;; Defined at:
  1517 ;;		line 324 in file "../main.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;		None
  1522 ;; Return value:  Size  Location     Type
  1523 ;;		None               void
  1524 ;; Registers used:
  1525 ;;		wreg
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; This function calls:
  1538 ;;		Nothing
  1539 ;; This function is called by:
  1540 ;;		_V_Principal
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text2
  1545  00EA48                     __ptext2:
  1546                           	opt stack 0
  1547  00EA48                     _lee_temperatura:
  1548                           	opt stack 29
  1549                           
  1550                           ;main.c: 326: ADCON0bits.ADON = 1;
  1551                           
  1552                           ;incstack = 0
  1553  00EA48  80C2               	bsf	4034,0,c	;volatile
  1554                           
  1555                           ;main.c: 327: ADCON0bits.GO = 1;
  1556  00EA4A  82C2               	bsf	4034,1,c	;volatile
  1557                           
  1558                           ;main.c: 328: while(ADCON0bits.GO);
  1559  00EA4C  D000               	goto	l209
  1560  00EA4E                     l209:
  1561  00EA4E  B2C2               	btfsc	4034,1,c	;volatile
  1562  00EA50  D7FE               	goto	l209
  1563                           
  1564                           ;main.c: 329: _delay((unsigned long)((1)*(8000000/4000.0)));
  1565  00EA52  0E03               	movlw	3
  1566  00EA54  6E01               	movwf	??_lee_temperatura& (0+255),c
  1567  00EA56  0E98               	movlw	152
  1568  00EA58                     u2137:
  1569  00EA58  2EE8               	decfsz	wreg,f,c
  1570  00EA5A  D7FE               	goto	u2137
  1571  00EA5C  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  1572  00EA5E  D7FC               	goto	u2137
  1573                           
  1574                           ;main.c: 330: lectura = ADRESH;
  1575  00EA60  CFC4 F04F          	movff	4036,_lectura	;volatile
  1576                           
  1577                           ;main.c: 331: ADCON0bits.ADON = 0;
  1578  00EA64  90C2               	bcf	4034,0,c	;volatile
  1579  00EA66  0012               	return		;funcret
  1580  00EA68                     __end_of_lee_temperatura:
  1581                           	opt stack 0
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1l	equ	0xFE1
  1590                           status	equ	0xFD8
  1591                           
  1592 ;; *************** function _Read_RTC *****************
  1593 ;; Defined at:
  1594 ;;		line 291 in file "../main.c"
  1595 ;; Parameters:    Size  Location     Type
  1596 ;;		None
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;		None
  1599 ;; Return value:  Size  Location     Type
  1600 ;;		None               void
  1601 ;; Registers used:
  1602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1612 ;;Total ram usage:        0 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    1
  1615 ;; This function calls:
  1616 ;;		_RtccReadDate
  1617 ;;		_RtccReadTime
  1618 ;; This function is called by:
  1619 ;;		_V_Principal
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           	psect	text3
  1624  00F304                     __ptext3:
  1625                           	opt stack 0
  1626  00F304                     _Read_RTC:
  1627                           	opt stack 28
  1628                           
  1629                           ;main.c: 294: RtccReadTime(&RtccTime);
  1630                           
  1631                           ;incstack = 0
  1632  00F304  0E54               	movlw	low _RtccTime
  1633  00F306  6E01               	movwf	RtccReadTime@pTm,c
  1634  00F308  0E00               	movlw	high _RtccTime
  1635  00F30A  6E02               	movwf	RtccReadTime@pTm+1,c
  1636  00F30C  ECDE  F075         	call	_RtccReadTime	;wreg free
  1637                           
  1638                           ;main.c: 295: segundo_u=(RtccTime.f.sec & 0x0F);
  1639  00F310  5055               	movf	_RtccTime+1,w,c
  1640  00F312  0B0F               	andlw	15
  1641  00F314  0100               	movlb	0	; () banked
  1642  00F316  6FBB               	movwf	_segundo_u& (0+255),b
  1643                           
  1644                           ; BSR set to: 0
  1645                           ;main.c: 296: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  1646  00F318  3855               	swapf	_RtccTime+1,w,c
  1647  00F31A  0B0F               	andlw	15
  1648  00F31C  0B0F               	andlw	15
  1649  00F31E  0100               	movlb	0	; () banked
  1650  00F320  6FBA               	movwf	_segundo_d& (0+255),b
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 297: minuto_u=(RtccTime.f.min & 0x0F);
  1654  00F322  5056               	movf	_RtccTime+2,w,c
  1655  00F324  0B0F               	andlw	15
  1656  00F326  0100               	movlb	0	; () banked
  1657  00F328  6FB9               	movwf	_minuto_u& (0+255),b
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;main.c: 298: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  1661  00F32A  3856               	swapf	_RtccTime+2,w,c
  1662  00F32C  0B0F               	andlw	15
  1663  00F32E  0B0F               	andlw	15
  1664  00F330  0100               	movlb	0	; () banked
  1665  00F332  6FB8               	movwf	_minuto_d& (0+255),b
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;main.c: 299: hora_u=(RtccTime.f.hour & 0x0F);
  1669  00F334  5057               	movf	_RtccTime+3,w,c
  1670  00F336  0B0F               	andlw	15
  1671  00F338  0100               	movlb	0	; () banked
  1672  00F33A  6FB5               	movwf	_hora_u& (0+255),b
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;main.c: 300: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  1676  00F33C  3857               	swapf	_RtccTime+3,w,c
  1677  00F33E  0B0F               	andlw	15
  1678  00F340  0B0F               	andlw	15
  1679  00F342  0100               	movlb	0	; () banked
  1680  00F344  6FB4               	movwf	_hora_d& (0+255),b
  1681                           
  1682                           ;main.c: 301: RtccReadDate(&RtccDate);
  1683  00F346  0E50               	movlw	low _RtccDate
  1684  00F348  6E01               	movwf	RtccReadDate@pDt,c
  1685  00F34A  0E00               	movlw	high _RtccDate
  1686  00F34C  6E02               	movwf	RtccReadDate@pDt+1,c
  1687  00F34E  EC15  F076         	call	_RtccReadDate	;wreg free
  1688                           
  1689                           ;main.c: 302: fecha_u=(RtccDate.f.mday & 0x0F);
  1690  00F352  5051               	movf	_RtccDate+1,w,c
  1691  00F354  0B0F               	andlw	15
  1692  00F356  0100               	movlb	0	; () banked
  1693  00F358  6FB3               	movwf	_fecha_u& (0+255),b
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 303: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  1697  00F35A  3851               	swapf	_RtccDate+1,w,c
  1698  00F35C  0B0F               	andlw	15
  1699  00F35E  0B0F               	andlw	15
  1700  00F360  0100               	movlb	0	; () banked
  1701  00F362  6FB2               	movwf	_fecha_d& (0+255),b
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 304: mes_u=(RtccDate.f.mon & 0x0F);
  1705  00F364  5052               	movf	_RtccDate+2,w,c
  1706  00F366  0B0F               	andlw	15
  1707  00F368  0100               	movlb	0	; () banked
  1708  00F36A  6FB7               	movwf	_mes_u& (0+255),b
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 305: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  1712  00F36C  3852               	swapf	_RtccDate+2,w,c
  1713  00F36E  0B0F               	andlw	15
  1714  00F370  0B0F               	andlw	15
  1715  00F372  0100               	movlb	0	; () banked
  1716  00F374  6FB6               	movwf	_mes_d& (0+255),b
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;main.c: 306: dia_semana=RtccDate.f.wday;
  1720  00F376  C050  F0B1         	movff	_RtccDate,_dia_semana
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;main.c: 307: anio_u=(RtccDate.f.year & 0x0F);
  1724  00F37A  5053               	movf	_RtccDate+3,w,c
  1725  00F37C  0B0F               	andlw	15
  1726  00F37E  0100               	movlb	0	; () banked
  1727  00F380  6FB0               	movwf	_anio_u& (0+255),b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 308: anio_d=((RtccDate.f.year & 0xF0)>>4);
  1731  00F382  3853               	swapf	_RtccDate+3,w,c
  1732  00F384  0B0F               	andlw	15
  1733  00F386  0B0F               	andlw	15
  1734  00F388  0100               	movlb	0	; () banked
  1735  00F38A  6FAF               	movwf	_anio_d& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 309: segundo=segundo_d*10+segundo_u;
  1739  00F38C  0100               	movlb	0	; () banked
  1740  00F38E  51BA               	movf	_segundo_d& (0+255),w,b
  1741  00F390  0D0A               	mullw	10
  1742  00F392  0100               	movlb	0	; () banked
  1743  00F394  51BB               	movf	_segundo_u& (0+255),w,b
  1744  00F396  24F3               	addwf	prodl,w,c
  1745  00F398  0100               	movlb	0	; () banked
  1746  00F39A  6F7C               	movwf	_segundo& (0+255),b
  1747  00F39C  0100               	movlb	0	; () banked
  1748  00F39E  0E00               	movlw	0
  1749  00F3A0  20F4               	addwfc	prodh,w,c
  1750  00F3A2  0100               	movlb	0	; () banked
  1751  00F3A4  6F7D               	movwf	(_segundo+1)& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 310: minuto=minuto_d*10+minuto_u;
  1755  00F3A6  0100               	movlb	0	; () banked
  1756  00F3A8  51B8               	movf	_minuto_d& (0+255),w,b
  1757  00F3AA  0D0A               	mullw	10
  1758  00F3AC  0100               	movlb	0	; () banked
  1759  00F3AE  51B9               	movf	_minuto_u& (0+255),w,b
  1760  00F3B0  24F3               	addwf	prodl,w,c
  1761  00F3B2  0100               	movlb	0	; () banked
  1762  00F3B4  6FAD               	movwf	_minuto& (0+255),b
  1763  00F3B6  0100               	movlb	0	; () banked
  1764  00F3B8  0E00               	movlw	0
  1765  00F3BA  20F4               	addwfc	prodh,w,c
  1766  00F3BC  0100               	movlb	0	; () banked
  1767  00F3BE  6FAE               	movwf	(_minuto+1)& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 311: hora=hora_d*10+hora_u;
  1771  00F3C0  0100               	movlb	0	; () banked
  1772  00F3C2  51B4               	movf	_hora_d& (0+255),w,b
  1773  00F3C4  0D0A               	mullw	10
  1774  00F3C6  0100               	movlb	0	; () banked
  1775  00F3C8  51B5               	movf	_hora_u& (0+255),w,b
  1776  00F3CA  24F3               	addwf	prodl,w,c
  1777  00F3CC  0100               	movlb	0	; () banked
  1778  00F3CE  6FAB               	movwf	_hora& (0+255),b
  1779  00F3D0  0100               	movlb	0	; () banked
  1780  00F3D2  0E00               	movlw	0
  1781  00F3D4  20F4               	addwfc	prodh,w,c
  1782  00F3D6  0100               	movlb	0	; () banked
  1783  00F3D8  6FAC               	movwf	(_hora+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 312: dia=fecha_d*10+fecha_u;
  1787  00F3DA  0100               	movlb	0	; () banked
  1788  00F3DC  51B2               	movf	_fecha_d& (0+255),w,b
  1789  00F3DE  0D0A               	mullw	10
  1790  00F3E0  0100               	movlb	0	; () banked
  1791  00F3E2  51B3               	movf	_fecha_u& (0+255),w,b
  1792  00F3E4  24F3               	addwf	prodl,w,c
  1793  00F3E6  6E5A               	movwf	_dia,c
  1794  00F3E8  0100               	movlb	0	; () banked
  1795  00F3EA  0E00               	movlw	0
  1796  00F3EC  20F4               	addwfc	prodh,w,c
  1797  00F3EE  6E5B               	movwf	_dia+1,c
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 313: diasem=dia_semana;
  1801  00F3F0  C0B1  F05C         	movff	_dia_semana,_diasem
  1802  00F3F4  6A5D               	clrf	_diasem+1,c
  1803                           
  1804                           ; BSR set to: 0
  1805                           ;main.c: 314: mes=mes_d*10+mes_u;
  1806  00F3F6  0100               	movlb	0	; () banked
  1807  00F3F8  51B6               	movf	_mes_d& (0+255),w,b
  1808  00F3FA  0D0A               	mullw	10
  1809  00F3FC  0100               	movlb	0	; () banked
  1810  00F3FE  51B7               	movf	_mes_u& (0+255),w,b
  1811  00F400  24F3               	addwf	prodl,w,c
  1812  00F402  6E5E               	movwf	_mes,c
  1813  00F404  0100               	movlb	0	; () banked
  1814  00F406  0E00               	movlw	0
  1815  00F408  20F4               	addwfc	prodh,w,c
  1816  00F40A  6E5F               	movwf	_mes+1,c
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 315: anio=anio_d*10+anio_u;
  1820  00F40C  0100               	movlb	0	; () banked
  1821  00F40E  51AF               	movf	_anio_d& (0+255),w,b
  1822  00F410  0D0A               	mullw	10
  1823  00F412  0100               	movlb	0	; () banked
  1824  00F414  51B0               	movf	_anio_u& (0+255),w,b
  1825  00F416  24F3               	addwf	prodl,w,c
  1826  00F418  6E58               	movwf	_anio,c
  1827  00F41A  0100               	movlb	0	; () banked
  1828  00F41C  0E00               	movlw	0
  1829  00F41E  20F4               	addwfc	prodh,w,c
  1830  00F420  6E59               	movwf	_anio+1,c
  1831                           
  1832                           ; BSR set to: 0
  1833  00F422  0012               	return		;funcret
  1834  00F424                     __end_of_Read_RTC:
  1835                           	opt stack 0
  1836                           tblptru	equ	0xFF8
  1837                           tblptrh	equ	0xFF7
  1838                           tblptrl	equ	0xFF6
  1839                           tablat	equ	0xFF5
  1840                           prodh	equ	0xFF4
  1841                           prodl	equ	0xFF3
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _RtccReadTime *****************
  1849 ;; Defined at:
  1850 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  pTm             2    0[COMRAM] PTR struct .
  1853 ;;		 -> RtccTime(4), 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  rTD0            8   10[COMRAM] struct .
  1856 ;;  rTD1            8    2[COMRAM] struct .
  1857 ;; Return value:  Size  Location     Type
  1858 ;;		None               void
  1859 ;; Registers used:
  1860 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1867 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1869 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1870 ;;Total ram usage:       18 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; This function calls:
  1873 ;;		Nothing
  1874 ;; This function is called by:
  1875 ;;		_Read_RTC
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879                           	psect	text4
  1880  00EBBC                     __ptext4:
  1881                           	opt stack 0
  1882  00EBBC                     _RtccReadTime:
  1883                           	opt stack 28
  1884  00EBBC  0EFC               	movlw	252
  1885  00EBBE  010F               	movlb	15	; () banked
  1886  00EBC0  173F               	andwf	63,f,b	;volatile
  1887                           
  1888                           ; BSR set to: 15
  1889  00EBC2  010F               	movlb	15	; () banked
  1890  00EBC4  813F               	bsf	63,0,b	;volatile
  1891                           
  1892                           ; BSR set to: 15
  1893  00EBC6  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  1894                           
  1895                           ; BSR set to: 15
  1896  00EBCA  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  1897                           
  1898                           ; BSR set to: 15
  1899  00EBCE  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  1900                           
  1901                           ; BSR set to: 15
  1902  00EBD2  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  1903                           
  1904                           ; BSR set to: 15
  1905  00EBD6  0EFC               	movlw	252
  1906  00EBD8  010F               	movlb	15	; () banked
  1907  00EBDA  173F               	andwf	63,f,b	;volatile
  1908  00EBDC  010F               	movlb	15	; () banked
  1909  00EBDE  813F               	bsf	63,0,b	;volatile
  1910                           
  1911                           ; BSR set to: 15
  1912  00EBE0  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  1913                           
  1914                           ; BSR set to: 15
  1915  00EBE4  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  1916                           
  1917                           ; BSR set to: 15
  1918  00EBE8  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  1919                           
  1920                           ; BSR set to: 15
  1921  00EBEC  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  1922                           
  1923                           ; BSR set to: 15
  1924  00EBF0  5009               	movf	RtccReadTime@rTD1+6,w,c
  1925  00EBF2  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  1926  00EBF4  A4D8               	btfss	status,2,c
  1927  00EBF6  D7E2               	goto	l2248
  1928                           
  1929                           ; BSR set to: 15
  1930                           
  1931                           ; BSR set to: 15
  1932  00EBF8  EE20 F003          	lfsr	2,3
  1933  00EBFC  5001               	movf	RtccReadTime@pTm,w,c
  1934  00EBFE  26D9               	addwf	fsr2l,f,c
  1935  00EC00  5002               	movf	RtccReadTime@pTm+1,w,c
  1936  00EC02  22DA               	addwfc	fsr2h,f,c
  1937  00EC04  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  1938  00EC08  EE20 F002          	lfsr	2,2
  1939  00EC0C  5001               	movf	RtccReadTime@pTm,w,c
  1940  00EC0E  26D9               	addwf	fsr2l,f,c
  1941  00EC10  5002               	movf	RtccReadTime@pTm+1,w,c
  1942  00EC12  22DA               	addwfc	fsr2h,f,c
  1943  00EC14  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  1944  00EC18  EE20 F001          	lfsr	2,1
  1945  00EC1C  5001               	movf	RtccReadTime@pTm,w,c
  1946  00EC1E  26D9               	addwf	fsr2l,f,c
  1947  00EC20  5002               	movf	RtccReadTime@pTm+1,w,c
  1948  00EC22  22DA               	addwfc	fsr2h,f,c
  1949  00EC24  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  1950                           
  1951                           ; BSR set to: 15
  1952  00EC28  0012               	return		;funcret
  1953  00EC2A                     __end_of_RtccReadTime:
  1954                           	opt stack 0
  1955                           tblptru	equ	0xFF8
  1956                           tblptrh	equ	0xFF7
  1957                           tblptrl	equ	0xFF6
  1958                           tablat	equ	0xFF5
  1959                           prodh	equ	0xFF4
  1960                           prodl	equ	0xFF3
  1961                           postinc0	equ	0xFEE
  1962                           wreg	equ	0xFE8
  1963                           postdec1	equ	0xFE5
  1964                           fsr1l	equ	0xFE1
  1965                           indf2	equ	0xFDF
  1966                           fsr2h	equ	0xFDA
  1967                           fsr2l	equ	0xFD9
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _RtccReadDate *****************
  1971 ;; Defined at:
  1972 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  pDt             2    0[COMRAM] PTR struct .
  1975 ;;		 -> RtccDate(4), 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  rTD0            8   10[COMRAM] struct .
  1978 ;;  rTD1            8    2[COMRAM] struct .
  1979 ;; Return value:  Size  Location     Type
  1980 ;;		None               void
  1981 ;; Registers used:
  1982 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1983 ;; Tracked objects:
  1984 ;;		On entry : 0/0
  1985 ;;		On exit  : 0/0
  1986 ;;		Unchanged: 0/0
  1987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1988 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1989 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1991 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1992 ;;Total ram usage:       18 bytes
  1993 ;; Hardware stack levels used:    1
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_Read_RTC
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text5
  2002  00EC2A                     __ptext5:
  2003                           	opt stack 0
  2004  00EC2A                     _RtccReadDate:
  2005                           	opt stack 28
  2006  00EC2A  0EFC               	movlw	252
  2007  00EC2C  010F               	movlb	15	; () banked
  2008  00EC2E  173F               	andwf	63,f,b	;volatile
  2009  00EC30  0E03               	movlw	3
  2010  00EC32  010F               	movlb	15	; () banked
  2011  00EC34  133F               	iorwf	63,f,b	;volatile
  2012                           
  2013                           ; BSR set to: 15
  2014  00EC36  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  2015                           
  2016                           ; BSR set to: 15
  2017  00EC3A  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  2018                           
  2019                           ; BSR set to: 15
  2020  00EC3E  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  2021                           
  2022                           ; BSR set to: 15
  2023  00EC42  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  2024                           
  2025                           ; BSR set to: 15
  2026  00EC46  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  2027                           
  2028                           ; BSR set to: 15
  2029  00EC4A  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  2030  00EC4E  0EFC               	movlw	252
  2031  00EC50  010F               	movlb	15	; () banked
  2032  00EC52  173F               	andwf	63,f,b	;volatile
  2033  00EC54  0E03               	movlw	3
  2034  00EC56  010F               	movlb	15	; () banked
  2035  00EC58  133F               	iorwf	63,f,b	;volatile
  2036                           
  2037                           ; BSR set to: 15
  2038  00EC5A  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  2039                           
  2040                           ; BSR set to: 15
  2041  00EC5E  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  2042                           
  2043                           ; BSR set to: 15
  2044  00EC62  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  2045                           
  2046                           ; BSR set to: 15
  2047  00EC66  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  2048                           
  2049                           ; BSR set to: 15
  2050  00EC6A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  2051                           
  2052                           ; BSR set to: 15
  2053  00EC6E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  2054  00EC72  5005               	movf	RtccReadDate@rTD1+2,w,c
  2055  00EC74  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  2056  00EC76  A4D8               	btfss	status,2,c
  2057  00EC78  D7D8               	goto	l2274
  2058                           
  2059                           ; BSR set to: 15
  2060                           
  2061                           ; BSR set to: 15
  2062  00EC7A  EE20 F001          	lfsr	2,1
  2063  00EC7E  5001               	movf	RtccReadDate@pDt,w,c
  2064  00EC80  26D9               	addwf	fsr2l,f,c
  2065  00EC82  5002               	movf	RtccReadDate@pDt+1,w,c
  2066  00EC84  22DA               	addwfc	fsr2h,f,c
  2067  00EC86  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  2068  00EC8A  EE20 F002          	lfsr	2,2
  2069  00EC8E  5001               	movf	RtccReadDate@pDt,w,c
  2070  00EC90  26D9               	addwf	fsr2l,f,c
  2071  00EC92  5002               	movf	RtccReadDate@pDt+1,w,c
  2072  00EC94  22DA               	addwfc	fsr2h,f,c
  2073  00EC96  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  2074                           
  2075                           ; BSR set to: 15
  2076  00EC9A  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  2077  00EC9E  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  2078  00ECA2  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  2079                           
  2080                           ; BSR set to: 15
  2081  00ECA6  EE20 F003          	lfsr	2,3
  2082  00ECAA  5001               	movf	RtccReadDate@pDt,w,c
  2083  00ECAC  26D9               	addwf	fsr2l,f,c
  2084  00ECAE  5002               	movf	RtccReadDate@pDt+1,w,c
  2085  00ECB0  22DA               	addwfc	fsr2h,f,c
  2086  00ECB2  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  2087                           
  2088                           ; BSR set to: 15
  2089  00ECB6  0012               	return		;funcret
  2090  00ECB8                     __end_of_RtccReadDate:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           prodh	equ	0xFF4
  2097                           prodl	equ	0xFF3
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           postdec1	equ	0xFE5
  2101                           fsr1l	equ	0xFE1
  2102                           indf2	equ	0xFDF
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _ManejaMovimientos *****************
  2108 ;; Defined at:
  2109 ;;		line 378 in file "../main.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  posicion        2   71[COMRAM] int 
  2114 ;;  dia_tr          1   74[COMRAM] unsigned char 
  2115 ;;  diasem_tr       1   73[COMRAM] unsigned char 
  2116 ;;  mes_tr          1   70[COMRAM] unsigned char 
  2117 ;;  anio_tr         1   69[COMRAM] unsigned char 
  2118 ;; Return value:  Size  Location     Type
  2119 ;;		None               void
  2120 ;; Registers used:
  2121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2128 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;Total ram usage:        7 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    3
  2134 ;; This function calls:
  2135 ;;		_Convert_diasem
  2136 ;;		_Lcd_Cmd
  2137 ;;		_Lcd_Out
  2138 ;;		_Write_RTC
  2139 ;;		_sprintf
  2140 ;; This function is called by:
  2141 ;;		_main
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text6
  2146  00F692                     __ptext6:
  2147                           	opt stack 0
  2148  00F692                     _ManejaMovimientos:
  2149                           	opt stack 27
  2150                           
  2151                           ;main.c: 380: char diasem_tr = diasem;
  2152                           
  2153                           ; BSR set to: 15
  2154                           ;incstack = 0
  2155  00F692  C05C  F04A         	movff	_diasem,ManejaMovimientos@diasem_tr
  2156                           
  2157                           ;main.c: 383: char dia_tr = dia;
  2158  00F696  C05A  F04B         	movff	_dia,ManejaMovimientos@dia_tr
  2159                           
  2160                           ;main.c: 385: char mes_tr = mes;
  2161  00F69A  C05E  F047         	movff	_mes,ManejaMovimientos@mes_tr
  2162                           
  2163                           ;main.c: 386: char anio_tr = anio;
  2164  00F69E  C058  F046         	movff	_anio,ManejaMovimientos@anio_tr
  2165                           
  2166                           ;main.c: 387: int posicion = 0;
  2167  00F6A2  0E00               	movlw	0
  2168  00F6A4  6E49               	movwf	ManejaMovimientos@posicion+1,c
  2169  00F6A6  0E00               	movlw	0
  2170  00F6A8  6E48               	movwf	ManejaMovimientos@posicion,c
  2171                           
  2172                           ;main.c: 388: Lcd_Cmd(14);
  2173  00F6AA  0E0E               	movlw	14
  2174  00F6AC  ECF2  F078         	call	_Lcd_Cmd
  2175                           
  2176                           ;main.c: 389: Lcd_Out(2, 0, "" );
  2177  00F6B0  0E00               	movlw	0
  2178  00F6B2  6E40               	movwf	Lcd_Out@x,c
  2179  00F6B4  0EEB               	movlw	low (STR_6+20)
  2180  00F6B6  6E41               	movwf	Lcd_Out@buffer,c
  2181  00F6B8  0EFE               	movlw	high (STR_6+20)
  2182  00F6BA  6E42               	movwf	Lcd_Out@buffer+1,c
  2183  00F6BC  0E02               	movlw	2
  2184  00F6BE  EC5C  F076         	call	_Lcd_Out
  2185                           
  2186                           ;main.c: 392: for(i=0 ;i<30;i++){
  2187  00F6C2  0E00               	movlw	0
  2188  00F6C4  6E4E               	movwf	_i+1,c
  2189  00F6C6  0E00               	movlw	0
  2190  00F6C8  6E4D               	movwf	_i,c
  2191  00F6CA  BE4E               	btfsc	_i+1,7,c
  2192  00F6CC  D008               	goto	l2588
  2193  00F6CE  504E               	movf	_i+1,w,c
  2194  00F6D0  E105               	bnz	u1740
  2195  00F6D2  0E1E               	movlw	30
  2196  00F6D4  5C4D               	subwf	_i,w,c
  2197  00F6D6  B0D8               	btfsc	status,0,c
  2198  00F6D8  D095               	goto	l2630
  2199  00F6DA  D001               	goto	l2588
  2200  00F6DC                     u1740:
  2201  00F6DC  D093               	goto	l2630
  2202  00F6DE                     l2588:
  2203                           
  2204                           ;main.c: 395: _delay((unsigned long)((90)*(8000000/4000.0)));
  2205  00F6DE  0EEA               	movlw	234
  2206  00F6E0  6E45               	movwf	??_ManejaMovimientos& (0+255),c
  2207  00F6E2  0EC3               	movlw	195
  2208  00F6E4                     u2147:
  2209  00F6E4  2EE8               	decfsz	wreg,f,c
  2210  00F6E6  D7FE               	goto	u2147
  2211  00F6E8  2E45               	decfsz	??_ManejaMovimientos& (0+255),f,c
  2212  00F6EA  D7FC               	goto	u2147
  2213  00F6EC  F000               	nop	
  2214                           
  2215                           ;main.c: 397: if(Sw_Up = PORTAbits.RA3 == 0){
  2216  00F6EE  B680               	btfsc	3968,3,c	;volatile
  2217  00F6F0  D002               	goto	u1750
  2218  00F6F2  0E01               	movlw	1
  2219  00F6F4  D001               	goto	u1760
  2220  00F6F6                     u1750:
  2221  00F6F6  0E00               	movlw	0
  2222  00F6F8                     u1760:
  2223  00F6F8  0100               	movlb	0	; () banked
  2224  00F6FA  6F84               	movwf	_Sw_Up& (0+255),b
  2225  00F6FC  0100               	movlb	0	; () banked
  2226  00F6FE  5184               	movf	_Sw_Up& (0+255),w,b
  2227  00F700  B4D8               	btfsc	status,2,c
  2228  00F702  D046               	goto	l2612
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;main.c: 398: i=0;
  2232  00F704  0E00               	movlw	0
  2233  00F706  6E4E               	movwf	_i+1,c
  2234  00F708  0E00               	movlw	0
  2235  00F70A  6E4D               	movwf	_i,c
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;main.c: 400: if(posicion == 0){
  2239  00F70C  5048               	movf	ManejaMovimientos@posicion,w,c
  2240  00F70E  1049               	iorwf	ManejaMovimientos@posicion+1,w,c
  2241  00F710  A4D8               	btfss	status,2,c
  2242  00F712  D019               	goto	l2602
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 401: diasem_tr++;
  2246  00F714  2A4A               	incf	ManejaMovimientos@diasem_tr,f,c
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;main.c: 402: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2250  00F716  0E00               	movlw	0
  2251  00F718  6E40               	movwf	Lcd_Out@x,c
  2252  00F71A  C04A  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2253  00F71E  6A29               	clrf	Convert_diasem@dia+1,c
  2254  00F720  EC63  F078         	call	_Convert_diasem	;wreg free
  2255  00F724  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2256  00F728  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2257  00F72C  0E02               	movlw	2
  2258  00F72E  EC5C  F076         	call	_Lcd_Out
  2259                           
  2260                           ;main.c: 403: Lcd_Out(2, 0, "" );
  2261  00F732  0E00               	movlw	0
  2262  00F734  6E40               	movwf	Lcd_Out@x,c
  2263  00F736  0EEB               	movlw	low (STR_6+20)
  2264  00F738  6E41               	movwf	Lcd_Out@buffer,c
  2265  00F73A  0EFE               	movlw	high (STR_6+20)
  2266  00F73C  6E42               	movwf	Lcd_Out@buffer+1,c
  2267  00F73E  0E02               	movlw	2
  2268  00F740  EC5C  F076         	call	_Lcd_Out
  2269                           
  2270                           ;main.c: 404: }else if(posicion != 0){
  2271  00F744  D025               	goto	l2612
  2272  00F746                     l2602:
  2273  00F746  5048               	movf	ManejaMovimientos@posicion,w,c
  2274  00F748  1049               	iorwf	ManejaMovimientos@posicion+1,w,c
  2275  00F74A  B4D8               	btfsc	status,2,c
  2276  00F74C  D021               	goto	l2612
  2277                           
  2278                           ;main.c: 405: dia_tr++;
  2279  00F74E  2A4B               	incf	ManejaMovimientos@dia_tr,f,c
  2280                           
  2281                           ;main.c: 406: sprintf(buffer1,"%02u",dia_tr);
  2282  00F750  0E85               	movlw	low _buffer1
  2283  00F752  6E0D               	movwf	sprintf@sp,c
  2284  00F754  0E00               	movlw	high _buffer1
  2285  00F756  6E0E               	movwf	sprintf@sp+1,c
  2286  00F758  0ED4               	movlw	low (STR_7+10)
  2287  00F75A  6E0F               	movwf	sprintf@f,c
  2288  00F75C  0EFF               	movlw	high (STR_7+10)
  2289  00F75E  6E10               	movwf	sprintf@f+1,c
  2290  00F760  C04B  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2291  00F764  6A12               	clrf	?_sprintf+5,c
  2292  00F766  ECC9  F07D         	call	_sprintf	;wreg free
  2293                           
  2294                           ;main.c: 408: Lcd_Out(3, 0, buffer1);
  2295  00F76A  0E00               	movlw	0
  2296  00F76C  6E40               	movwf	Lcd_Out@x,c
  2297  00F76E  0E85               	movlw	low _buffer1
  2298  00F770  6E41               	movwf	Lcd_Out@buffer,c
  2299  00F772  0E00               	movlw	high _buffer1
  2300  00F774  6E42               	movwf	Lcd_Out@buffer+1,c
  2301  00F776  0E03               	movlw	3
  2302  00F778  EC5C  F076         	call	_Lcd_Out
  2303                           
  2304                           ;main.c: 409: Lcd_Out(3, 0, "" );
  2305  00F77C  0E00               	movlw	0
  2306  00F77E  6E40               	movwf	Lcd_Out@x,c
  2307  00F780  0EEB               	movlw	low (STR_6+20)
  2308  00F782  6E41               	movwf	Lcd_Out@buffer,c
  2309  00F784  0EFE               	movlw	high (STR_6+20)
  2310  00F786  6E42               	movwf	Lcd_Out@buffer+1,c
  2311  00F788  0E03               	movlw	3
  2312  00F78A  EC5C  F076         	call	_Lcd_Out
  2313  00F78E  D000               	goto	l2612
  2314  00F790                     l2612:
  2315                           
  2316                           ;main.c: 410: }
  2317                           ;main.c: 415: }
  2318                           ;main.c: 416: if(Sw_Right = PORTAbits.RA2 == 0){
  2319  00F790  B480               	btfsc	3968,2,c	;volatile
  2320  00F792  D002               	goto	u1800
  2321  00F794  0E01               	movlw	1
  2322  00F796  D001               	goto	u1810
  2323  00F798                     u1800:
  2324  00F798  0E00               	movlw	0
  2325  00F79A                     u1810:
  2326  00F79A  0100               	movlb	0	; () banked
  2327  00F79C  6F83               	movwf	_Sw_Right& (0+255),b
  2328  00F79E  0100               	movlb	0	; () banked
  2329  00F7A0  5183               	movf	_Sw_Right& (0+255),w,b
  2330  00F7A2  B4D8               	btfsc	status,2,c
  2331  00F7A4  D010               	goto	l2620
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;main.c: 417: posicion++;
  2335  00F7A6  4A48               	infsnz	ManejaMovimientos@posicion,f,c
  2336  00F7A8  2A49               	incf	ManejaMovimientos@posicion+1,f,c
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;main.c: 418: i=0;
  2340  00F7AA  0E00               	movlw	0
  2341  00F7AC  6E4E               	movwf	_i+1,c
  2342  00F7AE  0E00               	movlw	0
  2343  00F7B0  6E4D               	movwf	_i,c
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;main.c: 419: Lcd_Out(3, 0, "" );
  2347  00F7B2  0E00               	movlw	0
  2348  00F7B4  6E40               	movwf	Lcd_Out@x,c
  2349  00F7B6  0EEB               	movlw	low (STR_6+20)
  2350  00F7B8  6E41               	movwf	Lcd_Out@buffer,c
  2351  00F7BA  0EFE               	movlw	high (STR_6+20)
  2352  00F7BC  6E42               	movwf	Lcd_Out@buffer+1,c
  2353  00F7BE  0E03               	movlw	3
  2354  00F7C0  EC5C  F076         	call	_Lcd_Out
  2355  00F7C4  D000               	goto	l2620
  2356  00F7C6                     l2620:
  2357                           
  2358                           ;main.c: 421: }
  2359                           ;main.c: 422: if(Sw_Center = PORTAbits.RA5 == 0){
  2360  00F7C6  BA80               	btfsc	3968,5,c	;volatile
  2361  00F7C8  D002               	goto	u1830
  2362  00F7CA  0E01               	movlw	1
  2363  00F7CC  D001               	goto	u1840
  2364  00F7CE                     u1830:
  2365  00F7CE  0E00               	movlw	0
  2366  00F7D0                     u1840:
  2367  00F7D0  0100               	movlb	0	; () banked
  2368  00F7D2  6F80               	movwf	_Sw_Center& (0+255),b
  2369  00F7D4  0100               	movlb	0	; () banked
  2370  00F7D6  5180               	movf	_Sw_Center& (0+255),w,b
  2371  00F7D8  B4D8               	btfsc	status,2,c
  2372  00F7DA  D00C               	goto	l2626
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;main.c: 423: diasem = diasem_tr;
  2376  00F7DC  C04A  F05C         	movff	ManejaMovimientos@diasem_tr,_diasem
  2377  00F7E0  6A5D               	clrf	_diasem+1,c
  2378                           
  2379                           ;main.c: 424: dia = dia_tr;
  2380  00F7E2  C04B  F05A         	movff	ManejaMovimientos@dia_tr,_dia
  2381  00F7E6  6A5B               	clrf	_dia+1,c
  2382                           
  2383                           ;main.c: 425: mes = mes_tr;
  2384  00F7E8  C047  F05E         	movff	ManejaMovimientos@mes_tr,_mes
  2385  00F7EC  6A5F               	clrf	_mes+1,c
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;main.c: 426: Write_RTC();
  2389  00F7EE  EC06  F07C         	call	_Write_RTC	;wreg free
  2390                           
  2391                           ;main.c: 428: break;
  2392  00F7F2  D008               	goto	l2630
  2393  00F7F4                     l2626:
  2394  00F7F4  4A4D               	infsnz	_i,f,c
  2395  00F7F6  2A4E               	incf	_i+1,f,c
  2396  00F7F8  BE4E               	btfsc	_i+1,7,c
  2397  00F7FA  D771               	goto	l2588
  2398  00F7FC  504E               	movf	_i+1,w,c
  2399  00F7FE  E102               	bnz	l2630
  2400  00F800  D768               	goto	L1
  2401  00F802  D000               	goto	l2630
  2402  00F804                     l2630:
  2403                           
  2404                           ;main.c: 429: }
  2405                           ;main.c: 430: }
  2406                           ;main.c: 432: Lcd_Cmd(12);
  2407  00F804  0E0C               	movlw	12
  2408  00F806  ECF2  F078         	call	_Lcd_Cmd
  2409  00F80A  0012               	return		;funcret
  2410  00F80C                     __end_of_ManejaMovimientos:
  2411                           	opt stack 0
  2412                           tblptru	equ	0xFF8
  2413                           tblptrh	equ	0xFF7
  2414                           tblptrl	equ	0xFF6
  2415                           tablat	equ	0xFF5
  2416                           prodh	equ	0xFF4
  2417                           prodl	equ	0xFF3
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           postdec1	equ	0xFE5
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           fsr2h	equ	0xFDA
  2424                           fsr2l	equ	0xFD9
  2425                           status	equ	0xFD8
  2426                           
  2427 ;; *************** function _Write_RTC *****************
  2428 ;; Defined at:
  2429 ;;		line 253 in file "../main.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;		None               void
  2436 ;; Registers used:
  2437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2447 ;;Total ram usage:        0 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    2
  2450 ;; This function calls:
  2451 ;;		_RtccWrOn
  2452 ;;		_RtccWriteDate
  2453 ;;		_RtccWriteTime
  2454 ;;		___awdiv
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;;		_ManejaMovimientos
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           	psect	text7
  2462  00F80C                     __ptext7:
  2463                           	opt stack 0
  2464  00F80C                     _Write_RTC:
  2465                           	opt stack 28
  2466                           
  2467                           ;main.c: 255: RtccWrOn();
  2468                           
  2469                           ;incstack = 0
  2470  00F80C  EC10  F075         	call	_RtccWrOn	;wreg free
  2471                           
  2472                           ;main.c: 257: PIE3bits.RTCCIE=1;
  2473  00F810  80A3               	bsf	4003,0,c	;volatile
  2474                           
  2475                           ;main.c: 258: segundo_d=segundo/10;
  2476  00F812  C07C  F001         	movff	_segundo,___awdiv@dividend
  2477  00F816  C07D  F002         	movff	_segundo+1,___awdiv@dividend+1
  2478  00F81A  0E00               	movlw	0
  2479  00F81C  6E04               	movwf	___awdiv@divisor+1,c
  2480  00F81E  0E0A               	movlw	10
  2481  00F820  6E03               	movwf	___awdiv@divisor,c
  2482  00F822  ECA6  F076         	call	___awdiv	;wreg free
  2483  00F826  5001               	movf	?___awdiv,w,c
  2484  00F828  0100               	movlb	0	; () banked
  2485  00F82A  6FBA               	movwf	_segundo_d& (0+255),b
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;main.c: 259: segundo_u=segundo-segundo_d*10;
  2489  00F82C  0100               	movlb	0	; () banked
  2490  00F82E  51BA               	movf	_segundo_d& (0+255),w,b
  2491  00F830  0D0A               	mullw	10
  2492  00F832  50F3               	movf	prodl,w,c
  2493  00F834  0800               	sublw	0
  2494  00F836  0100               	movlb	0	; () banked
  2495  00F838  257C               	addwf	_segundo& (0+255),w,b
  2496  00F83A  0100               	movlb	0	; () banked
  2497  00F83C  6FBB               	movwf	_segundo_u& (0+255),b
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;main.c: 260: RtccTime.f.sec =segundo_d*16+segundo_u;
  2501  00F83E  0100               	movlb	0	; () banked
  2502  00F840  51BA               	movf	_segundo_d& (0+255),w,b
  2503  00F842  0D10               	mullw	16
  2504  00F844  50F3               	movf	prodl,w,c
  2505  00F846  0100               	movlb	0	; () banked
  2506  00F848  25BB               	addwf	_segundo_u& (0+255),w,b
  2507  00F84A  6E55               	movwf	_RtccTime+1,c
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 261: minuto_d=minuto/10;
  2511  00F84C  C0AD  F001         	movff	_minuto,___awdiv@dividend
  2512  00F850  C0AE  F002         	movff	_minuto+1,___awdiv@dividend+1
  2513  00F854  0E00               	movlw	0
  2514  00F856  6E04               	movwf	___awdiv@divisor+1,c
  2515  00F858  0E0A               	movlw	10
  2516  00F85A  6E03               	movwf	___awdiv@divisor,c
  2517  00F85C  ECA6  F076         	call	___awdiv	;wreg free
  2518  00F860  5001               	movf	?___awdiv,w,c
  2519  00F862  0100               	movlb	0	; () banked
  2520  00F864  6FB8               	movwf	_minuto_d& (0+255),b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 262: minuto_u=minuto-minuto_d*10;
  2524  00F866  0100               	movlb	0	; () banked
  2525  00F868  51B8               	movf	_minuto_d& (0+255),w,b
  2526  00F86A  0D0A               	mullw	10
  2527  00F86C  50F3               	movf	prodl,w,c
  2528  00F86E  0800               	sublw	0
  2529  00F870  0100               	movlb	0	; () banked
  2530  00F872  25AD               	addwf	_minuto& (0+255),w,b
  2531  00F874  0100               	movlb	0	; () banked
  2532  00F876  6FB9               	movwf	_minuto_u& (0+255),b
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;main.c: 263: RtccTime.f.min =minuto_d*16+minuto_u;
  2536  00F878  0100               	movlb	0	; () banked
  2537  00F87A  51B8               	movf	_minuto_d& (0+255),w,b
  2538  00F87C  0D10               	mullw	16
  2539  00F87E  50F3               	movf	prodl,w,c
  2540  00F880  0100               	movlb	0	; () banked
  2541  00F882  25B9               	addwf	_minuto_u& (0+255),w,b
  2542  00F884  6E56               	movwf	_RtccTime+2,c
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 264: hora_d=hora/10;
  2546  00F886  C0AB  F001         	movff	_hora,___awdiv@dividend
  2547  00F88A  C0AC  F002         	movff	_hora+1,___awdiv@dividend+1
  2548  00F88E  0E00               	movlw	0
  2549  00F890  6E04               	movwf	___awdiv@divisor+1,c
  2550  00F892  0E0A               	movlw	10
  2551  00F894  6E03               	movwf	___awdiv@divisor,c
  2552  00F896  ECA6  F076         	call	___awdiv	;wreg free
  2553  00F89A  5001               	movf	?___awdiv,w,c
  2554  00F89C  0100               	movlb	0	; () banked
  2555  00F89E  6FB4               	movwf	_hora_d& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;main.c: 265: hora_u=hora-hora_d*10;
  2559  00F8A0  0100               	movlb	0	; () banked
  2560  00F8A2  51B4               	movf	_hora_d& (0+255),w,b
  2561  00F8A4  0D0A               	mullw	10
  2562  00F8A6  50F3               	movf	prodl,w,c
  2563  00F8A8  0800               	sublw	0
  2564  00F8AA  0100               	movlb	0	; () banked
  2565  00F8AC  25AB               	addwf	_hora& (0+255),w,b
  2566  00F8AE  0100               	movlb	0	; () banked
  2567  00F8B0  6FB5               	movwf	_hora_u& (0+255),b
  2568                           
  2569                           ; BSR set to: 0
  2570                           ;main.c: 266: RtccTime.f.hour=hora_d*16+hora_u;
  2571  00F8B2  0100               	movlb	0	; () banked
  2572  00F8B4  51B4               	movf	_hora_d& (0+255),w,b
  2573  00F8B6  0D10               	mullw	16
  2574  00F8B8  50F3               	movf	prodl,w,c
  2575  00F8BA  0100               	movlb	0	; () banked
  2576  00F8BC  25B5               	addwf	_hora_u& (0+255),w,b
  2577  00F8BE  6E57               	movwf	_RtccTime+3,c
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;main.c: 267: anio_d=anio/10;
  2581  00F8C0  C058  F001         	movff	_anio,___awdiv@dividend
  2582  00F8C4  C059  F002         	movff	_anio+1,___awdiv@dividend+1
  2583  00F8C8  0E00               	movlw	0
  2584  00F8CA  6E04               	movwf	___awdiv@divisor+1,c
  2585  00F8CC  0E0A               	movlw	10
  2586  00F8CE  6E03               	movwf	___awdiv@divisor,c
  2587  00F8D0  ECA6  F076         	call	___awdiv	;wreg free
  2588  00F8D4  5001               	movf	?___awdiv,w,c
  2589  00F8D6  0100               	movlb	0	; () banked
  2590  00F8D8  6FAF               	movwf	_anio_d& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 268: anio_u=anio-anio_d*10;
  2594  00F8DA  0100               	movlb	0	; () banked
  2595  00F8DC  51AF               	movf	_anio_d& (0+255),w,b
  2596  00F8DE  0D0A               	mullw	10
  2597  00F8E0  50F3               	movf	prodl,w,c
  2598  00F8E2  0800               	sublw	0
  2599  00F8E4  2458               	addwf	_anio,w,c
  2600  00F8E6  0100               	movlb	0	; () banked
  2601  00F8E8  6FB0               	movwf	_anio_u& (0+255),b
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 269: RtccDate.f.year=anio_d*16+anio_u;
  2605  00F8EA  0100               	movlb	0	; () banked
  2606  00F8EC  51AF               	movf	_anio_d& (0+255),w,b
  2607  00F8EE  0D10               	mullw	16
  2608  00F8F0  50F3               	movf	prodl,w,c
  2609  00F8F2  0100               	movlb	0	; () banked
  2610  00F8F4  25B0               	addwf	_anio_u& (0+255),w,b
  2611  00F8F6  6E53               	movwf	_RtccDate+3,c
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;main.c: 270: mes_d=mes/10;
  2615  00F8F8  C05E  F001         	movff	_mes,___awdiv@dividend
  2616  00F8FC  C05F  F002         	movff	_mes+1,___awdiv@dividend+1
  2617  00F900  0E00               	movlw	0
  2618  00F902  6E04               	movwf	___awdiv@divisor+1,c
  2619  00F904  0E0A               	movlw	10
  2620  00F906  6E03               	movwf	___awdiv@divisor,c
  2621  00F908  ECA6  F076         	call	___awdiv	;wreg free
  2622  00F90C  5001               	movf	?___awdiv,w,c
  2623  00F90E  0100               	movlb	0	; () banked
  2624  00F910  6FB6               	movwf	_mes_d& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;main.c: 271: mes_u=mes-mes_d*10;
  2628  00F912  0100               	movlb	0	; () banked
  2629  00F914  51B6               	movf	_mes_d& (0+255),w,b
  2630  00F916  0D0A               	mullw	10
  2631  00F918  50F3               	movf	prodl,w,c
  2632  00F91A  0800               	sublw	0
  2633  00F91C  245E               	addwf	_mes,w,c
  2634  00F91E  0100               	movlb	0	; () banked
  2635  00F920  6FB7               	movwf	_mes_u& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;main.c: 272: RtccDate.f.mon=mes_d*16+mes_u;
  2639  00F922  0100               	movlb	0	; () banked
  2640  00F924  51B6               	movf	_mes_d& (0+255),w,b
  2641  00F926  0D10               	mullw	16
  2642  00F928  50F3               	movf	prodl,w,c
  2643  00F92A  0100               	movlb	0	; () banked
  2644  00F92C  25B7               	addwf	_mes_u& (0+255),w,b
  2645  00F92E  6E52               	movwf	_RtccDate+2,c
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 273: fecha_d=dia/10;
  2649  00F930  C05A  F001         	movff	_dia,___awdiv@dividend
  2650  00F934  C05B  F002         	movff	_dia+1,___awdiv@dividend+1
  2651  00F938  0E00               	movlw	0
  2652  00F93A  6E04               	movwf	___awdiv@divisor+1,c
  2653  00F93C  0E0A               	movlw	10
  2654  00F93E  6E03               	movwf	___awdiv@divisor,c
  2655  00F940  ECA6  F076         	call	___awdiv	;wreg free
  2656  00F944  5001               	movf	?___awdiv,w,c
  2657  00F946  0100               	movlb	0	; () banked
  2658  00F948  6FB2               	movwf	_fecha_d& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 274: fecha_u=dia-fecha_d*10;
  2662  00F94A  0100               	movlb	0	; () banked
  2663  00F94C  51B2               	movf	_fecha_d& (0+255),w,b
  2664  00F94E  0D0A               	mullw	10
  2665  00F950  50F3               	movf	prodl,w,c
  2666  00F952  0800               	sublw	0
  2667  00F954  245A               	addwf	_dia,w,c
  2668  00F956  0100               	movlb	0	; () banked
  2669  00F958  6FB3               	movwf	_fecha_u& (0+255),b
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 275: RtccDate.f.mday=fecha_d*16+fecha_u;
  2673  00F95A  0100               	movlb	0	; () banked
  2674  00F95C  51B2               	movf	_fecha_d& (0+255),w,b
  2675  00F95E  0D10               	mullw	16
  2676  00F960  50F3               	movf	prodl,w,c
  2677  00F962  0100               	movlb	0	; () banked
  2678  00F964  25B3               	addwf	_fecha_u& (0+255),w,b
  2679  00F966  6E51               	movwf	_RtccDate+1,c
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;main.c: 276: dia_semana=diasem;
  2683  00F968  C05C  F0B1         	movff	_diasem,_dia_semana
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 277: RtccDate.f.wday =diasem;
  2687  00F96C  C05C  F050         	movff	_diasem,_RtccDate
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;main.c: 279: RtccWriteTime(&RtccTime,1);
  2691  00F970  0E54               	movlw	low _RtccTime
  2692  00F972  6E01               	movwf	RtccWriteTime@pTm,c
  2693  00F974  0E00               	movlw	high _RtccTime
  2694  00F976  6E02               	movwf	RtccWriteTime@pTm+1,c
  2695  00F978  0E01               	movlw	1
  2696  00F97A  6E03               	movwf	RtccWriteTime@di,c
  2697  00F97C  EC50  F077         	call	_RtccWriteTime	;wreg free
  2698                           
  2699                           ;main.c: 280: RtccWriteDate(&RtccDate,1);
  2700  00F980  0E50               	movlw	low _RtccDate
  2701  00F982  6E01               	movwf	RtccWriteDate@pDt,c
  2702  00F984  0E00               	movlw	high _RtccDate
  2703  00F986  6E02               	movwf	RtccWriteDate@pDt+1,c
  2704  00F988  0E01               	movlw	1
  2705  00F98A  6E03               	movwf	RtccWriteDate@di,c
  2706  00F98C  ECA6  F07A         	call	_RtccWriteDate	;wreg free
  2707                           
  2708                           ;main.c: 281: (RTCCFGbits.RTCEN=1);
  2709  00F990  010F               	movlb	15	; () banked
  2710  00F992  8F3F               	bsf	63,7,b	;volatile
  2711                           
  2712                           ; BSR set to: 15
  2713  00F994  0012               	return		;funcret
  2714  00F996                     __end_of_Write_RTC:
  2715                           	opt stack 0
  2716                           tblptru	equ	0xFF8
  2717                           tblptrh	equ	0xFF7
  2718                           tblptrl	equ	0xFF6
  2719                           tablat	equ	0xFF5
  2720                           prodh	equ	0xFF4
  2721                           prodl	equ	0xFF3
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function ___awdiv *****************
  2732 ;; Defined at:
  2733 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;  dividend        2    0[COMRAM] int 
  2736 ;;  divisor         2    2[COMRAM] int 
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  quotient        2    6[COMRAM] int 
  2739 ;;  sign            1    5[COMRAM] unsigned char 
  2740 ;;  counter         1    4[COMRAM] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  2    0[COMRAM] int 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2750 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2751 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2753 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2754 ;;Total ram usage:        8 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_Write_RTC
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text8
  2764  00ED4C                     __ptext8:
  2765                           	opt stack 0
  2766  00ED4C                     ___awdiv:
  2767                           	opt stack 29
  2768                           
  2769                           ; BSR set to: 15
  2770                           ;incstack = 0
  2771  00ED4C  0E00               	movlw	0
  2772  00ED4E  6E06               	movwf	___awdiv@sign,c
  2773  00ED50  AE04               	btfss	___awdiv@divisor+1,7,c
  2774  00ED52  D007               	goto	l2314
  2775  00ED54  6C03               	negf	___awdiv@divisor,c
  2776  00ED56  1E04               	comf	___awdiv@divisor+1,f,c
  2777  00ED58  B0D8               	btfsc	status,0,c
  2778  00ED5A  2A04               	incf	___awdiv@divisor+1,f,c
  2779  00ED5C  0E01               	movlw	1
  2780  00ED5E  6E06               	movwf	___awdiv@sign,c
  2781  00ED60  D000               	goto	l2314
  2782  00ED62                     l2314:
  2783  00ED62  AE02               	btfss	___awdiv@dividend+1,7,c
  2784  00ED64  D007               	goto	l2320
  2785  00ED66  6C01               	negf	___awdiv@dividend,c
  2786  00ED68  1E02               	comf	___awdiv@dividend+1,f,c
  2787  00ED6A  B0D8               	btfsc	status,0,c
  2788  00ED6C  2A02               	incf	___awdiv@dividend+1,f,c
  2789  00ED6E  0E01               	movlw	1
  2790  00ED70  1A06               	xorwf	___awdiv@sign,f,c
  2791  00ED72  D000               	goto	l2320
  2792  00ED74                     l2320:
  2793  00ED74  0E00               	movlw	0
  2794  00ED76  6E08               	movwf	___awdiv@quotient+1,c
  2795  00ED78  0E00               	movlw	0
  2796  00ED7A  6E07               	movwf	___awdiv@quotient,c
  2797  00ED7C  5003               	movf	___awdiv@divisor,w,c
  2798  00ED7E  1004               	iorwf	___awdiv@divisor+1,w,c
  2799  00ED80  B4D8               	btfsc	status,2,c
  2800  00ED82  D021               	goto	l2342
  2801  00ED84  0E01               	movlw	1
  2802  00ED86  6E05               	movwf	___awdiv@counter,c
  2803  00ED88  D005               	goto	l2328
  2804  00ED8A                     l2326:
  2805  00ED8A  90D8               	bcf	status,0,c
  2806  00ED8C  3603               	rlcf	___awdiv@divisor,f,c
  2807  00ED8E  3604               	rlcf	___awdiv@divisor+1,f,c
  2808  00ED90  2A05               	incf	___awdiv@counter,f,c
  2809  00ED92  D000               	goto	l2328
  2810  00ED94                     l2328:
  2811  00ED94  BE04               	btfsc	___awdiv@divisor+1,7,c
  2812  00ED96  D002               	goto	l2330
  2813  00ED98  D7F8               	goto	l2326
  2814  00ED9A  D000               	goto	l2330
  2815  00ED9C                     l2330:
  2816  00ED9C  90D8               	bcf	status,0,c
  2817  00ED9E  3607               	rlcf	___awdiv@quotient,f,c
  2818  00EDA0  3608               	rlcf	___awdiv@quotient+1,f,c
  2819  00EDA2  5003               	movf	___awdiv@divisor,w,c
  2820  00EDA4  5C01               	subwf	___awdiv@dividend,w,c
  2821  00EDA6  5004               	movf	___awdiv@divisor+1,w,c
  2822  00EDA8  5802               	subwfb	___awdiv@dividend+1,w,c
  2823  00EDAA  A0D8               	btfss	status,0,c
  2824  00EDAC  D006               	goto	l2338
  2825  00EDAE  5003               	movf	___awdiv@divisor,w,c
  2826  00EDB0  5E01               	subwf	___awdiv@dividend,f,c
  2827  00EDB2  5004               	movf	___awdiv@divisor+1,w,c
  2828  00EDB4  5A02               	subwfb	___awdiv@dividend+1,f,c
  2829  00EDB6  8007               	bsf	___awdiv@quotient,0,c
  2830  00EDB8  D000               	goto	l2338
  2831  00EDBA                     l2338:
  2832  00EDBA  90D8               	bcf	status,0,c
  2833  00EDBC  3204               	rrcf	___awdiv@divisor+1,f,c
  2834  00EDBE  3203               	rrcf	___awdiv@divisor,f,c
  2835  00EDC0  2E05               	decfsz	___awdiv@counter,f,c
  2836  00EDC2  D7EC               	goto	l2330
  2837  00EDC4  D000               	goto	l2342
  2838  00EDC6                     l2342:
  2839  00EDC6  5006               	movf	___awdiv@sign,w,c
  2840  00EDC8  B4D8               	btfsc	status,2,c
  2841  00EDCA  D005               	goto	l2346
  2842  00EDCC  6C07               	negf	___awdiv@quotient,c
  2843  00EDCE  1E08               	comf	___awdiv@quotient+1,f,c
  2844  00EDD0  B0D8               	btfsc	status,0,c
  2845  00EDD2  2A08               	incf	___awdiv@quotient+1,f,c
  2846  00EDD4  D000               	goto	l2346
  2847  00EDD6                     l2346:
  2848  00EDD6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2849  00EDDA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2850  00EDDE  0012               	return	
  2851  00EDE0  0012               	return		;funcret
  2852  00EDE2                     __end_of___awdiv:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           prodh	equ	0xFF4
  2859                           prodl	equ	0xFF3
  2860                           postinc0	equ	0xFEE
  2861                           wreg	equ	0xFE8
  2862                           postdec1	equ	0xFE5
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _RtccWriteTime *****************
  2870 ;; Defined at:
  2871 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;  pTm             2    0[COMRAM] PTR const struct .
  2874 ;;		 -> RtccTime(4), 
  2875 ;;  di              1    2[COMRAM] enum E7121
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  tempHourWDay    2    9[COMRAM] struct .
  2878 ;;  tempMinSec      2    7[COMRAM] struct .
  2879 ;;  wasWrEn         1    6[COMRAM] enum E7121
  2880 ;;  wasAlrm         1    5[COMRAM] enum E7121
  2881 ;;  wasOn           1    4[COMRAM] enum E7121
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      enum E7337
  2884 ;; Registers used:
  2885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2891 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2892 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2894 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2895 ;;Total ram usage:       11 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    1
  2898 ;; This function calls:
  2899 ;;		_RtccWrOn
  2900 ;; This function is called by:
  2901 ;;		_Write_RTC
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text9
  2906  00EEA0                     __ptext9:
  2907                           	opt stack 0
  2908  00EEA0                     _RtccWriteTime:
  2909                           	opt stack 28
  2910                           
  2911                           ;incstack = 0
  2912  00EEA0  0E00               	movlw	0
  2913  00EEA2  6E06               	movwf	RtccWriteTime@wasAlrm,c
  2914  00EEA4  EE20 F002          	lfsr	2,2
  2915  00EEA8  5001               	movf	RtccWriteTime@pTm,w,c
  2916  00EEAA  26D9               	addwf	fsr2l,f,c
  2917  00EEAC  5002               	movf	RtccWriteTime@pTm+1,w,c
  2918  00EEAE  22DA               	addwfc	fsr2h,f,c
  2919  00EEB0  0E5A               	movlw	90
  2920  00EEB2  60DF               	cpfslt	indf2,c
  2921  00EEB4  0012               	return	
  2922  00EEB6  EE20 F001          	lfsr	2,1
  2923  00EEBA  5001               	movf	RtccWriteTime@pTm,w,c
  2924  00EEBC  26D9               	addwf	fsr2l,f,c
  2925  00EEBE  5002               	movf	RtccWriteTime@pTm+1,w,c
  2926  00EEC0  22DA               	addwfc	fsr2h,f,c
  2927  00EEC2  0E5A               	movlw	90
  2928  00EEC4  60DF               	cpfslt	indf2,c
  2929  00EEC6  0012               	return	
  2930  00EEC8  EE20 F003          	lfsr	2,3
  2931  00EECC  5001               	movf	RtccWriteTime@pTm,w,c
  2932  00EECE  26D9               	addwf	fsr2l,f,c
  2933  00EED0  5002               	movf	RtccWriteTime@pTm+1,w,c
  2934  00EED2  22DA               	addwfc	fsr2h,f,c
  2935  00EED4  0E24               	movlw	36
  2936  00EED6  64DF               	cpfsgt	indf2,c
  2937  00EED8  D002               	goto	l2120
  2938  00EEDA  0012               	return	
  2939                           
  2940                           ;	Return value of _RtccWriteTime is never used
  2941  00EEDC  0012               	return	
  2942  00EEDE                     l2120:
  2943  00EEDE  EE20 F002          	lfsr	2,2
  2944  00EEE2  5001               	movf	RtccWriteTime@pTm,w,c
  2945  00EEE4  26D9               	addwf	fsr2l,f,c
  2946  00EEE6  5002               	movf	RtccWriteTime@pTm+1,w,c
  2947  00EEE8  22DA               	addwfc	fsr2h,f,c
  2948  00EEEA  50DF               	movf	indf2,w,c
  2949  00EEEC  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  2950  00EEEE  EE20 F001          	lfsr	2,1
  2951  00EEF2  5001               	movf	RtccWriteTime@pTm,w,c
  2952  00EEF4  26D9               	addwf	fsr2l,f,c
  2953  00EEF6  5002               	movf	RtccWriteTime@pTm+1,w,c
  2954  00EEF8  22DA               	addwfc	fsr2h,f,c
  2955  00EEFA  50DF               	movf	indf2,w,c
  2956  00EEFC  6E08               	movwf	RtccWriteTime@tempMinSec,c
  2957  00EEFE  5003               	movf	RtccWriteTime@di,w,c
  2958  00EF00  B4D8               	btfsc	status,2,c
  2959  00EF02  D002               	goto	l2126
  2960  00EF04  9CF2               	bcf	intcon,6,c	;volatile
  2961  00EF06  D000               	goto	l2126
  2962  00EF08                     l2126:
  2963  00EF08  0E00               	movlw	0
  2964  00EF0A  BB3F               	btfsc	63,5,b	;volatile
  2965  00EF0C  0E01               	movlw	1
  2966  00EF0E  6E07               	movwf	RtccWriteTime@wasWrEn,c
  2967  00EF10  5007               	movf	RtccWriteTime@wasWrEn,w,c
  2968  00EF12  A4D8               	btfss	status,2,c
  2969  00EF14  D003               	goto	l2130
  2970  00EF16  EC10  F075         	call	_RtccWrOn	;wreg free
  2971  00EF1A  D000               	goto	l2130
  2972  00EF1C                     l2130:
  2973  00EF1C  0E00               	movlw	0
  2974  00EF1E  BF3F               	btfsc	63,7,b	;volatile
  2975  00EF20  0E01               	movlw	1
  2976  00EF22  6E05               	movwf	RtccWriteTime@wasOn,c
  2977  00EF24  5005               	movf	RtccWriteTime@wasOn,w,c
  2978  00EF26  B4D8               	btfsc	status,2,c
  2979  00EF28  D007               	goto	l2136
  2980  00EF2A  0E00               	movlw	0
  2981  00EF2C  BE91               	btfsc	3985,7,c	;volatile
  2982  00EF2E  0E01               	movlw	1
  2983  00EF30  6E06               	movwf	RtccWriteTime@wasAlrm,c
  2984  00EF32  010F               	movlb	15	; () banked
  2985  00EF34  9F3F               	bcf	63,7,b	;volatile
  2986  00EF36  D000               	goto	l2136
  2987  00EF38                     l2136:
  2988  00EF38  0EFC               	movlw	252
  2989  00EF3A  010F               	movlb	15	; () banked
  2990  00EF3C  173F               	andwf	63,f,b	;volatile
  2991  00EF3E  010F               	movlb	15	; () banked
  2992  00EF40  813F               	bsf	63,0,b	;volatile
  2993                           
  2994                           ; BSR set to: 15
  2995  00EF42  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  2996                           
  2997                           ; BSR set to: 15
  2998  00EF46  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  2999                           
  3000                           ; BSR set to: 15
  3001  00EF4A  EE20 F003          	lfsr	2,3
  3002  00EF4E  5001               	movf	RtccWriteTime@pTm,w,c
  3003  00EF50  26D9               	addwf	fsr2l,f,c
  3004  00EF52  5002               	movf	RtccWriteTime@pTm+1,w,c
  3005  00EF54  22DA               	addwfc	fsr2h,f,c
  3006  00EF56  50DF               	movf	indf2,w,c
  3007  00EF58  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3008                           
  3009                           ; BSR set to: 15
  3010  00EF5A  0EFC               	movlw	252
  3011  00EF5C  010F               	movlb	15	; () banked
  3012  00EF5E  173F               	andwf	63,f,b	;volatile
  3013                           
  3014                           ; BSR set to: 15
  3015  00EF60  010F               	movlb	15	; () banked
  3016  00EF62  813F               	bsf	63,0,b	;volatile
  3017                           
  3018                           ; BSR set to: 15
  3019  00EF64  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3020                           
  3021                           ; BSR set to: 15
  3022  00EF68  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3023                           
  3024                           ; BSR set to: 15
  3025  00EF6C  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3026                           
  3027                           ; BSR set to: 15
  3028  00EF70  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3029                           
  3030                           ; BSR set to: 15
  3031  00EF74  5005               	movf	RtccWriteTime@wasOn,w,c
  3032  00EF76  B4D8               	btfsc	status,2,c
  3033  00EF78  D00D               	goto	l2168
  3034                           
  3035                           ; BSR set to: 15
  3036  00EF7A  010F               	movlb	15	; () banked
  3037  00EF7C  8F3F               	bsf	63,7,b	;volatile
  3038                           
  3039                           ; BSR set to: 15
  3040  00EF7E  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3041  00EF80  B4D8               	btfsc	status,2,c
  3042  00EF82  D002               	goto	l2164
  3043                           
  3044                           ; BSR set to: 15
  3045  00EF84  8E91               	bsf	3985,7,c	;volatile
  3046  00EF86  D000               	goto	l2164
  3047  00EF88                     l2164:
  3048                           
  3049                           ; BSR set to: 15
  3050  00EF88  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3051  00EF8A  B4D8               	btfsc	status,2,c
  3052  00EF8C  D009               	goto	l2172
  3053                           
  3054                           ; BSR set to: 15
  3055  00EF8E  EC10  F075         	call	_RtccWrOn	;wreg free
  3056  00EF92  D006               	goto	l2172
  3057  00EF94                     l2168:
  3058  00EF94  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3059  00EF96  A4D8               	btfss	status,2,c
  3060  00EF98  D003               	goto	l2172
  3061  00EF9A  010F               	movlb	15	; () banked
  3062  00EF9C  9B3F               	bcf	63,5,b	;volatile
  3063                           
  3064                           ; BSR set to: 15
  3065  00EF9E  D000               	goto	l2172
  3066  00EFA0                     l2172:
  3067  00EFA0  5003               	movf	RtccWriteTime@di,w,c
  3068  00EFA2  B4D8               	btfsc	status,2,c
  3069  00EFA4  0012               	return	
  3070  00EFA6  8CF2               	bsf	intcon,6,c	;volatile
  3071  00EFA8  0012               	return	
  3072                           
  3073                           ;	Return value of _RtccWriteTime is never used
  3074  00EFAA  0012               	return		;funcret
  3075  00EFAC                     __end_of_RtccWriteTime:
  3076                           	opt stack 0
  3077                           tblptru	equ	0xFF8
  3078                           tblptrh	equ	0xFF7
  3079                           tblptrl	equ	0xFF6
  3080                           tablat	equ	0xFF5
  3081                           prodh	equ	0xFF4
  3082                           prodl	equ	0xFF3
  3083                           intcon	equ	0xFF2
  3084                           postinc0	equ	0xFEE
  3085                           wreg	equ	0xFE8
  3086                           postdec1	equ	0xFE5
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           fsr2h	equ	0xFDA
  3090                           fsr2l	equ	0xFD9
  3091                           status	equ	0xFD8
  3092                           
  3093 ;; *************** function _RtccWriteDate *****************
  3094 ;; Defined at:
  3095 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3096 ;; Parameters:    Size  Location     Type
  3097 ;;  pDt             2    0[COMRAM] PTR const struct .
  3098 ;;		 -> RtccDate(4), 
  3099 ;;  di              1    2[COMRAM] enum E7121
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  tempHourWDay    2   11[COMRAM] struct .
  3102 ;;  tempDayMonth    2    9[COMRAM] struct .
  3103 ;;  tempYear        2    6[COMRAM] struct .
  3104 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3105 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3106 ;;  wasOn           1    4[COMRAM] enum E7121
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      enum E7337
  3109 ;; Registers used:
  3110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3111 ;; Tracked objects:
  3112 ;;		On entry : 0/0
  3113 ;;		On exit  : 0/0
  3114 ;;		Unchanged: 0/0
  3115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3116 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3117 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3119 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3120 ;;Total ram usage:       13 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    1
  3123 ;; This function calls:
  3124 ;;		_RtccWrOn
  3125 ;; This function is called by:
  3126 ;;		_Write_RTC
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text10
  3131  00F54C                     __ptext10:
  3132                           	opt stack 0
  3133  00F54C                     _RtccWriteDate:
  3134                           	opt stack 28
  3135                           
  3136                           ;incstack = 0
  3137  00F54C  0E00               	movlw	0
  3138  00F54E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3139  00F550  EE20 F002          	lfsr	2,2
  3140  00F554  5001               	movf	RtccWriteDate@pDt,w,c
  3141  00F556  26D9               	addwf	fsr2l,f,c
  3142  00F558  5002               	movf	RtccWriteDate@pDt+1,w,c
  3143  00F55A  22DA               	addwfc	fsr2h,f,c
  3144  00F55C  0E13               	movlw	19
  3145  00F55E  60DF               	cpfslt	indf2,c
  3146  00F560  0012               	return	
  3147  00F562  EE20 F002          	lfsr	2,2
  3148  00F566  5001               	movf	RtccWriteDate@pDt,w,c
  3149  00F568  26D9               	addwf	fsr2l,f,c
  3150  00F56A  5002               	movf	RtccWriteDate@pDt+1,w,c
  3151  00F56C  22DA               	addwfc	fsr2h,f,c
  3152  00F56E  50DF               	movf	indf2,w,c
  3153  00F570  B4D8               	btfsc	status,2,c
  3154  00F572  0012               	return	
  3155  00F574  EE20 F001          	lfsr	2,1
  3156  00F578  5001               	movf	RtccWriteDate@pDt,w,c
  3157  00F57A  26D9               	addwf	fsr2l,f,c
  3158  00F57C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3159  00F57E  22DA               	addwfc	fsr2h,f,c
  3160  00F580  0E32               	movlw	50
  3161  00F582  60DF               	cpfslt	indf2,c
  3162  00F584  0012               	return	
  3163  00F586  EE20 F001          	lfsr	2,1
  3164  00F58A  5001               	movf	RtccWriteDate@pDt,w,c
  3165  00F58C  26D9               	addwf	fsr2l,f,c
  3166  00F58E  5002               	movf	RtccWriteDate@pDt+1,w,c
  3167  00F590  22DA               	addwfc	fsr2h,f,c
  3168  00F592  50DF               	movf	indf2,w,c
  3169  00F594  B4D8               	btfsc	status,2,c
  3170  00F596  0012               	return	
  3171  00F598  EE20 F003          	lfsr	2,3
  3172  00F59C  5001               	movf	RtccWriteDate@pDt,w,c
  3173  00F59E  26D9               	addwf	fsr2l,f,c
  3174  00F5A0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3175  00F5A2  22DA               	addwfc	fsr2h,f,c
  3176  00F5A4  0E99               	movlw	153
  3177  00F5A6  64DF               	cpfsgt	indf2,c
  3178  00F5A8  D002               	goto	l2188
  3179  00F5AA  0012               	return	
  3180                           
  3181                           ;	Return value of _RtccWriteDate is never used
  3182  00F5AC  0012               	return	
  3183  00F5AE                     l2188:
  3184  00F5AE  EE20 F003          	lfsr	2,3
  3185  00F5B2  5001               	movf	RtccWriteDate@pDt,w,c
  3186  00F5B4  26D9               	addwf	fsr2l,f,c
  3187  00F5B6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3188  00F5B8  22DA               	addwfc	fsr2h,f,c
  3189  00F5BA  50DF               	movf	indf2,w,c
  3190  00F5BC  6E07               	movwf	RtccWriteDate@tempYear,c
  3191  00F5BE  EE20 F001          	lfsr	2,1
  3192  00F5C2  5001               	movf	RtccWriteDate@pDt,w,c
  3193  00F5C4  26D9               	addwf	fsr2l,f,c
  3194  00F5C6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3195  00F5C8  22DA               	addwfc	fsr2h,f,c
  3196  00F5CA  50DF               	movf	indf2,w,c
  3197  00F5CC  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  3198  00F5CE  EE20 F002          	lfsr	2,2
  3199  00F5D2  5001               	movf	RtccWriteDate@pDt,w,c
  3200  00F5D4  26D9               	addwf	fsr2l,f,c
  3201  00F5D6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3202  00F5D8  22DA               	addwfc	fsr2h,f,c
  3203  00F5DA  50DF               	movf	indf2,w,c
  3204  00F5DC  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  3205  00F5DE  5003               	movf	RtccWriteDate@di,w,c
  3206  00F5E0  B4D8               	btfsc	status,2,c
  3207  00F5E2  D002               	goto	l2194
  3208  00F5E4  9CF2               	bcf	intcon,6,c	;volatile
  3209  00F5E6  D000               	goto	l2194
  3210  00F5E8                     l2194:
  3211  00F5E8  0E00               	movlw	0
  3212  00F5EA  BB3F               	btfsc	63,5,b	;volatile
  3213  00F5EC  0E01               	movlw	1
  3214  00F5EE  6E09               	movwf	RtccWriteDate@wasWrEn,c
  3215  00F5F0  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3216  00F5F2  A4D8               	btfss	status,2,c
  3217  00F5F4  D003               	goto	l2198
  3218  00F5F6  EC10  F075         	call	_RtccWrOn	;wreg free
  3219  00F5FA  D000               	goto	l2198
  3220  00F5FC                     l2198:
  3221  00F5FC  0E00               	movlw	0
  3222  00F5FE  BF3F               	btfsc	63,7,b	;volatile
  3223  00F600  0E01               	movlw	1
  3224  00F602  6E05               	movwf	RtccWriteDate@wasOn,c
  3225  00F604  5005               	movf	RtccWriteDate@wasOn,w,c
  3226  00F606  B4D8               	btfsc	status,2,c
  3227  00F608  D007               	goto	l2204
  3228  00F60A  0E00               	movlw	0
  3229  00F60C  BE91               	btfsc	3985,7,c	;volatile
  3230  00F60E  0E01               	movlw	1
  3231  00F610  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3232  00F612  010F               	movlb	15	; () banked
  3233  00F614  9F3F               	bcf	63,7,b	;volatile
  3234  00F616  D000               	goto	l2204
  3235  00F618                     l2204:
  3236  00F618  0EFC               	movlw	252
  3237  00F61A  010F               	movlb	15	; () banked
  3238  00F61C  173F               	andwf	63,f,b	;volatile
  3239  00F61E  010F               	movlb	15	; () banked
  3240  00F620  813F               	bsf	63,0,b	;volatile
  3241                           
  3242                           ; BSR set to: 15
  3243  00F622  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  3244                           
  3245                           ; BSR set to: 15
  3246  00F626  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  3247                           
  3248                           ; BSR set to: 15
  3249  00F62A  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  3250  00F62E  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  3251  00F632  50DF               	movf	indf2,w,c
  3252  00F634  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  3253                           
  3254                           ; BSR set to: 15
  3255  00F636  0EFC               	movlw	252
  3256  00F638  010F               	movlb	15	; () banked
  3257  00F63A  173F               	andwf	63,f,b	;volatile
  3258                           
  3259                           ; BSR set to: 15
  3260  00F63C  0E03               	movlw	3
  3261  00F63E  010F               	movlb	15	; () banked
  3262  00F640  133F               	iorwf	63,f,b	;volatile
  3263                           
  3264                           ; BSR set to: 15
  3265  00F642  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  3266                           
  3267                           ; BSR set to: 15
  3268  00F646  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  3269                           
  3270                           ; BSR set to: 15
  3271  00F64A  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  3272                           
  3273                           ; BSR set to: 15
  3274  00F64E  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  3275                           
  3276                           ; BSR set to: 15
  3277  00F652  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  3278                           
  3279                           ; BSR set to: 15
  3280  00F656  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  3281                           
  3282                           ; BSR set to: 15
  3283  00F65A  5005               	movf	RtccWriteDate@wasOn,w,c
  3284  00F65C  B4D8               	btfsc	status,2,c
  3285  00F65E  D00D               	goto	l2240
  3286                           
  3287                           ; BSR set to: 15
  3288  00F660  010F               	movlb	15	; () banked
  3289  00F662  8F3F               	bsf	63,7,b	;volatile
  3290                           
  3291                           ; BSR set to: 15
  3292  00F664  5006               	movf	RtccWriteDate@wasAlrm,w,c
  3293  00F666  B4D8               	btfsc	status,2,c
  3294  00F668  D002               	goto	l2236
  3295                           
  3296                           ; BSR set to: 15
  3297  00F66A  8E91               	bsf	3985,7,c	;volatile
  3298  00F66C  D000               	goto	l2236
  3299  00F66E                     l2236:
  3300                           
  3301                           ; BSR set to: 15
  3302  00F66E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3303  00F670  B4D8               	btfsc	status,2,c
  3304  00F672  D009               	goto	l2244
  3305                           
  3306                           ; BSR set to: 15
  3307  00F674  EC10  F075         	call	_RtccWrOn	;wreg free
  3308  00F678  D006               	goto	l2244
  3309  00F67A                     l2240:
  3310  00F67A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3311  00F67C  A4D8               	btfss	status,2,c
  3312  00F67E  D003               	goto	l2244
  3313  00F680  010F               	movlb	15	; () banked
  3314  00F682  9B3F               	bcf	63,5,b	;volatile
  3315                           
  3316                           ; BSR set to: 15
  3317  00F684  D000               	goto	l2244
  3318  00F686                     l2244:
  3319  00F686  5003               	movf	RtccWriteDate@di,w,c
  3320  00F688  B4D8               	btfsc	status,2,c
  3321  00F68A  0012               	return	
  3322  00F68C  9CF2               	bcf	intcon,6,c	;volatile
  3323  00F68E  0012               	return	
  3324                           
  3325                           ;	Return value of _RtccWriteDate is never used
  3326  00F690  0012               	return		;funcret
  3327  00F692                     __end_of_RtccWriteDate:
  3328                           	opt stack 0
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           intcon	equ	0xFF2
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           postdec1	equ	0xFE5
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _RtccWrOn *****************
  3346 ;; Defined at:
  3347 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;		None
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;  data            2    0        unsigned int 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;		None               void
  3354 ;; Registers used:
  3355 ;;		wreg, status,2
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3365 ;;Total ram usage:        0 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; This function calls:
  3368 ;;		Nothing
  3369 ;; This function is called by:
  3370 ;;		_Write_RTC
  3371 ;;		_RtccWriteDate
  3372 ;;		_RtccWriteTime
  3373 ;; This function uses a non-reentrant model
  3374 ;;
  3375                           
  3376                           	psect	text11
  3377  00EA20                     __ptext11:
  3378                           	opt stack 0
  3379  00EA20                     _RtccWrOn:
  3380                           	opt stack 28
  3381                           
  3382                           ;incstack = 0
  3383  00EA20  9CF2               	bcf	intcon,6,c	;volatile
  3384  00EA22  0E55               	movlw	85
  3385  00EA24  6EA7               	movwf	4007,c	;volatile
  3386  00EA26  0EAA               	movlw	170
  3387  00EA28  6EA7               	movwf	4007,c	;volatile
  3388  00EA2A  010F               	movlb	15	; () banked
  3389  00EA2C  8B3F               	bsf	63,5,b	;volatile
  3390                           
  3391                           ; BSR set to: 15
  3392  00EA2E  8CF2               	bsf	intcon,6,c	;volatile
  3393                           
  3394                           ; BSR set to: 15
  3395  00EA30  0012               	return		;funcret
  3396  00EA32                     __end_of_RtccWrOn:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           fsr2h	equ	0xFDA
  3411                           fsr2l	equ	0xFD9
  3412                           status	equ	0xFD8
  3413                           
  3414 ;; *************** function _Lcd_Out *****************
  3415 ;; Defined at:
  3416 ;;		line 84 in file "../lcd.h"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  y               1    wreg     unsigned char 
  3419 ;;  x               1   63[COMRAM] unsigned char 
  3420 ;;  buffer          2   64[COMRAM] PTR const unsigned char 
  3421 ;;		 -> STR_27(1), STR_26(1), STR_24(1), STR_23(1), 
  3422 ;;		 -> Convert_diasem@buffer_dia(20), STR_6(21), STR_5(20), STR_4(18), 
  3423 ;;		 -> STR_3(19), buffer1(20), STR_1(18), 
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;  y               1   66[COMRAM] unsigned char 
  3426 ;;  data            1   67[COMRAM] unsigned char 
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3436 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3437 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3439 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3440 ;;Total ram usage:        5 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    1
  3443 ;; This function calls:
  3444 ;;		_Lcd_Chr_CP
  3445 ;;		_Lcd_Cmd
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;;		_V_Principal
  3449 ;;		_ManejaMovimientos
  3450 ;; This function uses a non-reentrant model
  3451 ;;
  3452                           
  3453                           	psect	text12
  3454  00ECB8                     __ptext12:
  3455                           	opt stack 0
  3456  00ECB8                     _Lcd_Out:
  3457                           	opt stack 28
  3458                           
  3459                           ; BSR set to: 15
  3460                           ;incstack = 0
  3461                           ;Lcd_Out@y stored from wreg
  3462  00ECB8  6E43               	movwf	Lcd_Out@y,c
  3463                           
  3464                           ;lcd.h: 86: unsigned char data;
  3465                           ;lcd.h: 87: switch (y)
  3466  00ECBA  D00D               	goto	l2362
  3467  00ECBC                     l2352:
  3468  00ECBC  5040               	movf	Lcd_Out@x,w,c
  3469  00ECBE  0F80               	addlw	128
  3470  00ECC0  D008               	goto	L4
  3471  00ECC2                     l2354:
  3472  00ECC2  5040               	movf	Lcd_Out@x,w,c
  3473  00ECC4  0FC0               	addlw	192
  3474  00ECC6  D005               	goto	L4
  3475  00ECC8                     l2356:
  3476  00ECC8  5040               	movf	Lcd_Out@x,w,c
  3477  00ECCA  0F94               	addlw	148
  3478  00ECCC  D002               	goto	L4
  3479  00ECCE                     l2358:
  3480  00ECCE  5040               	movf	Lcd_Out@x,w,c
  3481  00ECD0  0FD4               	addlw	212
  3482  00ECD2                     L4:
  3483  00ECD2  6E44               	movwf	Lcd_Out@data,c
  3484                           
  3485                           ;lcd.h: 94: }
  3486                           
  3487                           ;lcd.h: 93: default: break;
  3488  00ECD4  D00E               	goto	l2364
  3489  00ECD6                     l2362:
  3490  00ECD6  5043               	movf	Lcd_Out@y,w,c
  3491                           
  3492                           ; Switch size 1, requested type "space"
  3493                           ; Number of cases is 4, Range of values is 1 to 4
  3494                           ; switch strategies available:
  3495                           ; Name         Instructions Cycles
  3496                           ; simple_byte           13     7 (average)
  3497                           ;	Chosen strategy is simple_byte
  3498  00ECD8  0A01               	xorlw	1	; case 1
  3499  00ECDA  B4D8               	btfsc	status,2,c
  3500  00ECDC  D7EF               	goto	l2352
  3501  00ECDE  0A03               	xorlw	3	; case 2
  3502  00ECE0  B4D8               	btfsc	status,2,c
  3503  00ECE2  D7EF               	goto	l2354
  3504  00ECE4  0A01               	xorlw	1	; case 3
  3505  00ECE6  B4D8               	btfsc	status,2,c
  3506  00ECE8  D7EF               	goto	l2356
  3507  00ECEA  0A07               	xorlw	7	; case 4
  3508  00ECEC  B4D8               	btfsc	status,2,c
  3509  00ECEE  D7EF               	goto	l2358
  3510  00ECF0  D000               	goto	l2364
  3511  00ECF2                     l2364:
  3512                           
  3513                           ;lcd.h: 95: Lcd_Cmd(data);
  3514  00ECF2  5044               	movf	Lcd_Out@data,w,c
  3515  00ECF4  ECF2  F078         	call	_Lcd_Cmd
  3516                           
  3517                           ;lcd.h: 96: while(*buffer)
  3518  00ECF8  D015               	goto	l2370
  3519  00ECFA                     l2366:
  3520                           
  3521                           ;lcd.h: 97: {
  3522                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  3523  00ECFA  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3524  00ECFE  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3525  00ED02  6AF8               	clrf	tblptru,c
  3526  00ED04  0E0E               	movlw	(high __ramtop+-1)
  3527  00ED06  64F7               	cpfsgt	tblptrh,c
  3528  00ED08  D003               	bra	u1687
  3529  00ED0A  0008               	tblrd		*
  3530  00ED0C  50F5               	movf	tablat,w,c
  3531  00ED0E  D005               	bra	u1680
  3532  00ED10                     u1687:
  3533  00ED10  CFF6 FFD9          	movff	tblptrl,fsr2l
  3534  00ED14  CFF7 FFDA          	movff	tblptrh,fsr2h
  3535  00ED18  50DF               	movf	indf2,w,c
  3536  00ED1A                     u1680:
  3537  00ED1A  EC12  F07A         	call	_Lcd_Chr_CP
  3538                           
  3539                           ;lcd.h: 99: buffer++;
  3540  00ED1E  4A41               	infsnz	Lcd_Out@buffer,f,c
  3541  00ED20  2A42               	incf	Lcd_Out@buffer+1,f,c
  3542  00ED22  D000               	goto	l2370
  3543  00ED24                     l2370:
  3544  00ED24  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  3545  00ED28  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  3546  00ED2C  6AF8               	clrf	tblptru,c
  3547  00ED2E  0E0E               	movlw	(high __ramtop+-1)
  3548  00ED30  64F7               	cpfsgt	tblptrh,c
  3549  00ED32  D003               	bra	u1697
  3550  00ED34  0008               	tblrd		*
  3551  00ED36  50F5               	movf	tablat,w,c
  3552  00ED38  D005               	bra	u1690
  3553  00ED3A                     u1697:
  3554  00ED3A  CFF6 FFD9          	movff	tblptrl,fsr2l
  3555  00ED3E  CFF7 FFDA          	movff	tblptrh,fsr2h
  3556  00ED42  50DF               	movf	indf2,w,c
  3557  00ED44                     u1690:
  3558  00ED44  0900               	iorlw	0
  3559  00ED46  A4D8               	btfss	status,2,c
  3560  00ED48  D7D8               	goto	l2366
  3561                           
  3562                           ;lcd.h: 100: }
  3563                           ;lcd.h: 101: return;
  3564  00ED4A  0012               	return		;funcret
  3565  00ED4C                     __end_of_Lcd_Out:
  3566                           	opt stack 0
  3567                           tblptru	equ	0xFF8
  3568                           tblptrh	equ	0xFF7
  3569                           tblptrl	equ	0xFF6
  3570                           tablat	equ	0xFF5
  3571                           prodh	equ	0xFF4
  3572                           prodl	equ	0xFF3
  3573                           intcon	equ	0xFF2
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _Lcd_Chr_CP *****************
  3584 ;; Defined at:
  3585 ;;		line 126 in file "../lcd.h"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  data            1    wreg     unsigned char 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  data            1    2[COMRAM] unsigned char 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;		None               void
  3592 ;; Registers used:
  3593 ;;		wreg, status,2, status,0
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3600 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3601 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3602 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3603 ;;Total ram usage:        3 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; This function calls:
  3606 ;;		Nothing
  3607 ;; This function is called by:
  3608 ;;		_Lcd_Out
  3609 ;;		_Lcd_Out2
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text13
  3614  00F424                     __ptext13:
  3615                           	opt stack 0
  3616  00F424                     _Lcd_Chr_CP:
  3617                           	opt stack 28
  3618                           
  3619                           ;incstack = 0
  3620                           ;Lcd_Chr_CP@data stored from wreg
  3621  00F424  6E03               	movwf	Lcd_Chr_CP@data,c
  3622                           
  3623                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  3624  00F426  988A               	bcf	3978,4,c	;volatile
  3625  00F428  8A8A               	bsf	3978,5,c	;volatile
  3626                           
  3627                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  3628  00F42A  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  3629  00F42C  AE03               	btfss	Lcd_Chr_CP@data,7,c
  3630  00F42E  D001               	bra	u1145
  3631  00F430  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  3632  00F432                     u1145:
  3633  00F432  0E01               	movlw	1
  3634  00F434  1601               	andwf	??_Lcd_Chr_CP,f,c
  3635  00F436  508A               	movf	3978,w,c	;volatile
  3636  00F438  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3637  00F43A  0BFE               	andlw	-2
  3638  00F43C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3639  00F43E  6E8A               	movwf	3978,c	;volatile
  3640  00F440  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3641  00F444  0E06               	movlw	6
  3642  00F446  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3643  00F448                     u1155:
  3644  00F448  90D8               	bcf	status,0,c
  3645  00F44A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3646  00F44C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3647  00F44E  D7FC               	goto	u1155
  3648  00F450  0E01               	movlw	1
  3649  00F452  1601               	andwf	??_Lcd_Chr_CP,f,c
  3650  00F454  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3651  00F456  508A               	movf	3978,w,c	;volatile
  3652  00F458  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3653  00F45A  0BFD               	andlw	-3
  3654  00F45C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3655  00F45E  6E8A               	movwf	3978,c	;volatile
  3656                           
  3657                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  3658  00F460  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3659  00F464  0E05               	movlw	5
  3660  00F466  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  3661  00F468                     u1165:
  3662  00F468  90D8               	bcf	status,0,c
  3663  00F46A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3664  00F46C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  3665  00F46E  D7FC               	goto	u1165
  3666  00F470  0E01               	movlw	1
  3667  00F472  1601               	andwf	??_Lcd_Chr_CP,f,c
  3668  00F474  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3669  00F476  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3670  00F478  508A               	movf	3978,w,c	;volatile
  3671  00F47A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3672  00F47C  0BFB               	andlw	-5
  3673  00F47E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3674  00F480  6E8A               	movwf	3978,c	;volatile
  3675  00F482  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3676  00F486  3A01               	swapf	??_Lcd_Chr_CP,f,c
  3677  00F488  0E0F               	movlw	15
  3678  00F48A  1601               	andwf	??_Lcd_Chr_CP,f,c
  3679  00F48C  0E01               	movlw	1
  3680  00F48E  1601               	andwf	??_Lcd_Chr_CP,f,c
  3681  00F490  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3682  00F492  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3683  00F494  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3684  00F496  508A               	movf	3978,w,c	;volatile
  3685  00F498  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3686  00F49A  0BF7               	andlw	-9
  3687  00F49C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3688  00F49E  6E8A               	movwf	3978,c	;volatile
  3689                           
  3690                           ;lcd.h: 130: _delay(10);
  3691  00F4A0  0E03               	movlw	3
  3692  00F4A2                     u2157:
  3693  00F4A2  2EE8               	decfsz	wreg,f,c
  3694  00F4A4  D7FE               	goto	u2157
  3695  00F4A6  F000               	nop	
  3696                           
  3697                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3698  00F4A8  888A               	bsf	3978,4,c	;volatile
  3699  00F4AA  0E03               	movlw	3
  3700  00F4AC                     u2167:
  3701  00F4AC  2EE8               	decfsz	wreg,f,c
  3702  00F4AE  D7FE               	goto	u2167
  3703  00F4B0  F000               	nop	
  3704  00F4B2  988A               	bcf	3978,4,c	;volatile
  3705                           
  3706                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  3707  00F4B4  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3708  00F4B8  90D8               	bcf	status,0,c
  3709  00F4BA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3710  00F4BC  90D8               	bcf	status,0,c
  3711  00F4BE  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3712  00F4C0  90D8               	bcf	status,0,c
  3713  00F4C2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3714  00F4C4  0E01               	movlw	1
  3715  00F4C6  1601               	andwf	??_Lcd_Chr_CP,f,c
  3716  00F4C8  508A               	movf	3978,w,c	;volatile
  3717  00F4CA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3718  00F4CC  0BFE               	andlw	-2
  3719  00F4CE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3720  00F4D0  6E8A               	movwf	3978,c	;volatile
  3721  00F4D2  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3722  00F4D6  90D8               	bcf	status,0,c
  3723  00F4D8  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3724  00F4DA  90D8               	bcf	status,0,c
  3725  00F4DC  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3726  00F4DE  0E01               	movlw	1
  3727  00F4E0  1601               	andwf	??_Lcd_Chr_CP,f,c
  3728  00F4E2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3729  00F4E4  508A               	movf	3978,w,c	;volatile
  3730  00F4E6  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3731  00F4E8  0BFD               	andlw	-3
  3732  00F4EA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3733  00F4EC  6E8A               	movwf	3978,c	;volatile
  3734                           
  3735                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  3736  00F4EE  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3737  00F4F2  90D8               	bcf	status,0,c
  3738  00F4F4  3201               	rrcf	??_Lcd_Chr_CP,f,c
  3739  00F4F6  0E01               	movlw	1
  3740  00F4F8  1601               	andwf	??_Lcd_Chr_CP,f,c
  3741  00F4FA  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3742  00F4FC  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3743  00F4FE  508A               	movf	3978,w,c	;volatile
  3744  00F500  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3745  00F502  0BFB               	andlw	-5
  3746  00F504  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3747  00F506  6E8A               	movwf	3978,c	;volatile
  3748  00F508  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  3749  00F50C  0E01               	movlw	1
  3750  00F50E  1601               	andwf	??_Lcd_Chr_CP,f,c
  3751  00F510  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3752  00F512  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3753  00F514  4601               	rlncf	??_Lcd_Chr_CP,f,c
  3754  00F516  508A               	movf	3978,w,c	;volatile
  3755  00F518  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3756  00F51A  0BF7               	andlw	-9
  3757  00F51C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  3758  00F51E  6E8A               	movwf	3978,c	;volatile
  3759                           
  3760                           ;lcd.h: 134: _delay(10);
  3761  00F520  0E03               	movlw	3
  3762  00F522                     u2177:
  3763  00F522  2EE8               	decfsz	wreg,f,c
  3764  00F524  D7FE               	goto	u2177
  3765  00F526  F000               	nop	
  3766                           
  3767                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  3768  00F528  888A               	bsf	3978,4,c	;volatile
  3769  00F52A  0E03               	movlw	3
  3770  00F52C                     u2187:
  3771  00F52C  2EE8               	decfsz	wreg,f,c
  3772  00F52E  D7FE               	goto	u2187
  3773  00F530  F000               	nop	
  3774  00F532  988A               	bcf	3978,4,c	;volatile
  3775                           
  3776                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  3777  00F534  0E03               	movlw	3
  3778  00F536                     u2197:
  3779  00F536  2EE8               	decfsz	wreg,f,c
  3780  00F538  D7FE               	goto	u2197
  3781  00F53A  F000               	nop	
  3782  00F53C  0E0F               	movlw	15
  3783  00F53E  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  3784  00F540  0E48               	movlw	72
  3785  00F542                     u2207:
  3786  00F542  2EE8               	decfsz	wreg,f,c
  3787  00F544  D7FE               	goto	u2207
  3788  00F546  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  3789  00F548  D7FC               	goto	u2207
  3790  00F54A  0012               	return		;funcret
  3791  00F54C                     __end_of_Lcd_Chr_CP:
  3792                           	opt stack 0
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           postinc0	equ	0xFEE
  3801                           wreg	equ	0xFE8
  3802                           postdec1	equ	0xFE5
  3803                           fsr1l	equ	0xFE1
  3804                           indf2	equ	0xFDF
  3805                           fsr2h	equ	0xFDA
  3806                           fsr2l	equ	0xFD9
  3807                           status	equ	0xFD8
  3808                           
  3809 ;; *************** function _Convert_diasem *****************
  3810 ;; Defined at:
  3811 ;;		line 341 in file "../main.c"
  3812 ;; Parameters:    Size  Location     Type
  3813 ;;  dia             2   39[COMRAM] int 
  3814 ;; Auto vars:     Size  Location     Type
  3815 ;;  buffer_dia     20   43[COMRAM] unsigned char [20]
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  2   39[COMRAM] PTR unsigned char 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3826 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3828 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3829 ;;Total ram usage:       24 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		_sprintf
  3834 ;; This function is called by:
  3835 ;;		_V_Principal
  3836 ;;		_ManejaMovimientos
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text14
  3841  00F0C6                     __ptext14:
  3842                           	opt stack 0
  3843  00F0C6                     _Convert_diasem:
  3844                           	opt stack 27
  3845                           
  3846                           ;main.c: 343: unsigned char buffer_dia[20];
  3847                           ;main.c: 345: switch(dia){
  3848                           
  3849                           ;incstack = 0
  3850  00F0C6  D069               	goto	l2490
  3851  00F0C8                     l2474:
  3852                           
  3853                           ;main.c: 347: sprintf(buffer_dia,"%s", "Domingo             ");
  3854  00F0C8  0E2C               	movlw	low Convert_diasem@buffer_dia
  3855  00F0CA  6E0D               	movwf	sprintf@sp,c
  3856  00F0CC  0E00               	movlw	high Convert_diasem@buffer_dia
  3857  00F0CE  6E0E               	movwf	sprintf@sp+1,c
  3858  00F0D0  0EF4               	movlw	low STR_9
  3859  00F0D2  6E0F               	movwf	sprintf@f,c
  3860  00F0D4  0EFF               	movlw	high STR_9
  3861  00F0D6  6E10               	movwf	sprintf@f+1,c
  3862  00F0D8  0E40               	movlw	low STR_10
  3863  00F0DA  6E11               	movwf	?_sprintf+4,c
  3864  00F0DC  0EFF               	movlw	high STR_10
  3865  00F0DE  6E12               	movwf	?_sprintf+5,c
  3866  00F0E0  ECC9  F07D         	call	_sprintf	;wreg free
  3867                           
  3868                           ;main.c: 348: break;
  3869  00F0E4  D079               	goto	l2492
  3870  00F0E6                     l2476:
  3871                           
  3872                           ;main.c: 351: sprintf(buffer_dia,"%s", "Lunes               ");
  3873  00F0E6  0E2C               	movlw	low Convert_diasem@buffer_dia
  3874  00F0E8  6E0D               	movwf	sprintf@sp,c
  3875  00F0EA  0E00               	movlw	high Convert_diasem@buffer_dia
  3876  00F0EC  6E0E               	movwf	sprintf@sp+1,c
  3877  00F0EE  0EF4               	movlw	low STR_9
  3878  00F0F0  6E0F               	movwf	sprintf@f,c
  3879  00F0F2  0EFF               	movlw	high STR_9
  3880  00F0F4  6E10               	movwf	sprintf@f+1,c
  3881  00F0F6  0EEC               	movlw	low STR_12
  3882  00F0F8  6E11               	movwf	?_sprintf+4,c
  3883  00F0FA  0EFE               	movlw	high STR_12
  3884  00F0FC  6E12               	movwf	?_sprintf+5,c
  3885  00F0FE  ECC9  F07D         	call	_sprintf	;wreg free
  3886                           
  3887                           ;main.c: 352: break;
  3888  00F102  D06A               	goto	l2492
  3889  00F104                     l2478:
  3890                           
  3891                           ;main.c: 355: sprintf(buffer_dia,"%s", "Martes              ");
  3892  00F104  0E2C               	movlw	low Convert_diasem@buffer_dia
  3893  00F106  6E0D               	movwf	sprintf@sp,c
  3894  00F108  0E00               	movlw	high Convert_diasem@buffer_dia
  3895  00F10A  6E0E               	movwf	sprintf@sp+1,c
  3896  00F10C  0EF4               	movlw	low STR_9
  3897  00F10E  6E0F               	movwf	sprintf@f,c
  3898  00F110  0EFF               	movlw	high STR_9
  3899  00F112  6E10               	movwf	sprintf@f+1,c
  3900  00F114  0E16               	movlw	low STR_14
  3901  00F116  6E11               	movwf	?_sprintf+4,c
  3902  00F118  0EFF               	movlw	high STR_14
  3903  00F11A  6E12               	movwf	?_sprintf+5,c
  3904  00F11C  ECC9  F07D         	call	_sprintf	;wreg free
  3905                           
  3906                           ;main.c: 356: break;
  3907  00F120  D05B               	goto	l2492
  3908  00F122                     l2480:
  3909                           
  3910                           ;main.c: 359: sprintf(buffer_dia,"%s", "Miercoles           ");
  3911  00F122  0E2C               	movlw	low Convert_diasem@buffer_dia
  3912  00F124  6E0D               	movwf	sprintf@sp,c
  3913  00F126  0E00               	movlw	high Convert_diasem@buffer_dia
  3914  00F128  6E0E               	movwf	sprintf@sp+1,c
  3915  00F12A  0EF4               	movlw	low STR_9
  3916  00F12C  6E0F               	movwf	sprintf@f,c
  3917  00F12E  0EFF               	movlw	high STR_9
  3918  00F130  6E10               	movwf	sprintf@f+1,c
  3919  00F132  0E6A               	movlw	low STR_16
  3920  00F134  6E11               	movwf	?_sprintf+4,c
  3921  00F136  0EFF               	movlw	high STR_16
  3922  00F138  6E12               	movwf	?_sprintf+5,c
  3923  00F13A  ECC9  F07D         	call	_sprintf	;wreg free
  3924                           
  3925                           ;main.c: 360: break;
  3926  00F13E  D04C               	goto	l2492
  3927  00F140                     l2482:
  3928                           
  3929                           ;main.c: 363: sprintf(buffer_dia,"%s", "Jueves              ");
  3930  00F140  0E2C               	movlw	low Convert_diasem@buffer_dia
  3931  00F142  6E0D               	movwf	sprintf@sp,c
  3932  00F144  0E00               	movlw	high Convert_diasem@buffer_dia
  3933  00F146  6E0E               	movwf	sprintf@sp+1,c
  3934  00F148  0EF4               	movlw	low STR_9
  3935  00F14A  6E0F               	movwf	sprintf@f,c
  3936  00F14C  0EFF               	movlw	high STR_9
  3937  00F14E  6E10               	movwf	sprintf@f+1,c
  3938  00F150  0E2B               	movlw	low STR_18
  3939  00F152  6E11               	movwf	?_sprintf+4,c
  3940  00F154  0EFF               	movlw	high STR_18
  3941  00F156  6E12               	movwf	?_sprintf+5,c
  3942  00F158  ECC9  F07D         	call	_sprintf	;wreg free
  3943                           
  3944                           ;main.c: 364: break;
  3945  00F15C  D03D               	goto	l2492
  3946  00F15E                     l2484:
  3947                           
  3948                           ;main.c: 367: sprintf(buffer_dia,"%s", "Viernes             ");
  3949  00F15E  0E2C               	movlw	low Convert_diasem@buffer_dia
  3950  00F160  6E0D               	movwf	sprintf@sp,c
  3951  00F162  0E00               	movlw	high Convert_diasem@buffer_dia
  3952  00F164  6E0E               	movwf	sprintf@sp+1,c
  3953  00F166  0EF4               	movlw	low STR_9
  3954  00F168  6E0F               	movwf	sprintf@f,c
  3955  00F16A  0EFF               	movlw	high STR_9
  3956  00F16C  6E10               	movwf	sprintf@f+1,c
  3957  00F16E  0E55               	movlw	low STR_20
  3958  00F170  6E11               	movwf	?_sprintf+4,c
  3959  00F172  0EFF               	movlw	high STR_20
  3960  00F174  6E12               	movwf	?_sprintf+5,c
  3961  00F176  ECC9  F07D         	call	_sprintf	;wreg free
  3962                           
  3963                           ;main.c: 368: break;
  3964  00F17A  D02E               	goto	l2492
  3965  00F17C                     l2486:
  3966                           
  3967                           ;main.c: 371: sprintf(buffer_dia,"%s", "Sabado              ");
  3968  00F17C  0E2C               	movlw	low Convert_diasem@buffer_dia
  3969  00F17E  6E0D               	movwf	sprintf@sp,c
  3970  00F180  0E00               	movlw	high Convert_diasem@buffer_dia
  3971  00F182  6E0E               	movwf	sprintf@sp+1,c
  3972  00F184  0EF4               	movlw	low STR_9
  3973  00F186  6E0F               	movwf	sprintf@f,c
  3974  00F188  0EFF               	movlw	high STR_9
  3975  00F18A  6E10               	movwf	sprintf@f+1,c
  3976  00F18C  0E01               	movlw	low STR_22
  3977  00F18E  6E11               	movwf	?_sprintf+4,c
  3978  00F190  0EFF               	movlw	high STR_22
  3979  00F192  6E12               	movwf	?_sprintf+5,c
  3980  00F194  ECC9  F07D         	call	_sprintf	;wreg free
  3981                           
  3982                           ;main.c: 373: }
  3983                           ;main.c: 374: }
  3984                           
  3985                           ;main.c: 372: break;
  3986  00F198  D01F               	goto	l2492
  3987  00F19A                     l2490:
  3988  00F19A  C028  F02A         	movff	Convert_diasem@dia,??_Convert_diasem
  3989  00F19E  C029  F02B         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  3990                           
  3991                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3992                           ; Switch size 1, requested type "space"
  3993                           ; Number of cases is 1, Range of values is 0 to 0
  3994                           ; switch strategies available:
  3995                           ; Name         Instructions Cycles
  3996                           ; simple_byte            4     3 (average)
  3997                           ;	Chosen strategy is simple_byte
  3998  00F1A2  502B               	movf	??_Convert_diasem+1,w,c
  3999  00F1A4  0A00               	xorlw	0	; case 0
  4000  00F1A6  A4D8               	btfss	status,2,c
  4001  00F1A8  D017               	goto	l2492
  4002                           
  4003                           ; Switch size 1, requested type "space"
  4004                           ; Number of cases is 7, Range of values is 0 to 6
  4005                           ; switch strategies available:
  4006                           ; Name         Instructions Cycles
  4007                           ; simple_byte           22    12 (average)
  4008                           ;	Chosen strategy is simple_byte
  4009  00F1AA  502A               	movf	??_Convert_diasem,w,c
  4010  00F1AC  0A00               	xorlw	0	; case 0
  4011  00F1AE  B4D8               	btfsc	status,2,c
  4012  00F1B0  D78B               	goto	l2474
  4013  00F1B2  0A01               	xorlw	1	; case 1
  4014  00F1B4  B4D8               	btfsc	status,2,c
  4015  00F1B6  D797               	goto	l2476
  4016  00F1B8  0A03               	xorlw	3	; case 2
  4017  00F1BA  B4D8               	btfsc	status,2,c
  4018  00F1BC  D7A3               	goto	l2478
  4019  00F1BE  0A01               	xorlw	1	; case 3
  4020  00F1C0  B4D8               	btfsc	status,2,c
  4021  00F1C2  D7AF               	goto	l2480
  4022  00F1C4  0A07               	xorlw	7	; case 4
  4023  00F1C6  B4D8               	btfsc	status,2,c
  4024  00F1C8  D7BB               	goto	l2482
  4025  00F1CA  0A01               	xorlw	1	; case 5
  4026  00F1CC  B4D8               	btfsc	status,2,c
  4027  00F1CE  D7C7               	goto	l2484
  4028  00F1D0  0A03               	xorlw	3	; case 6
  4029  00F1D2  B4D8               	btfsc	status,2,c
  4030  00F1D4  D7D3               	goto	l2486
  4031  00F1D6  D000               	goto	l2492
  4032  00F1D8                     l2492:
  4033                           
  4034                           ;main.c: 375: return buffer_dia;
  4035  00F1D8  0E2C               	movlw	low Convert_diasem@buffer_dia
  4036  00F1DA  6E28               	movwf	?_Convert_diasem,c
  4037  00F1DC  0E00               	movlw	high Convert_diasem@buffer_dia
  4038  00F1DE  6E29               	movwf	?_Convert_diasem+1,c
  4039  00F1E0  0012               	return	
  4040  00F1E2  0012               	return		;funcret
  4041  00F1E4                     __end_of_Convert_diasem:
  4042                           	opt stack 0
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           intcon	equ	0xFF2
  4050                           postinc0	equ	0xFEE
  4051                           wreg	equ	0xFE8
  4052                           postdec1	equ	0xFE5
  4053                           fsr1l	equ	0xFE1
  4054                           indf2	equ	0xFDF
  4055                           fsr2h	equ	0xFDA
  4056                           fsr2l	equ	0xFD9
  4057                           status	equ	0xFD8
  4058                           
  4059 ;; *************** function _sprintf *****************
  4060 ;; Defined at:
  4061 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4064 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4065 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4066 ;;		 -> STR_25(5), STR_21(3), STR_19(3), STR_17(3), 
  4067 ;;		 -> STR_15(3), STR_13(3), STR_11(3), STR_9(3), 
  4068 ;;		 -> STR_8(15), STR_7(15), STR_2(5), 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  tmpval          4    0        struct .
  4071 ;;  width           2   36[COMRAM] int 
  4072 ;;  len             2   34[COMRAM] unsigned int 
  4073 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  4074 ;;		 -> STR_28(7), STR_22(21), STR_20(21), STR_18(21), 
  4075 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  4076 ;;  ap              2   30[COMRAM] PTR void [1]
  4077 ;;		 -> ?_sprintf(2), 
  4078 ;;  val             2   27[COMRAM] unsigned int 
  4079 ;;  c               1   38[COMRAM] char 
  4080 ;;  prec            1   29[COMRAM] char 
  4081 ;;  flag            1   26[COMRAM] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  2   12[COMRAM] int 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4091 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4092 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4093 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4094 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4095 ;;Total ram usage:       27 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    1
  4098 ;; This function calls:
  4099 ;;		___lwdiv
  4100 ;;		___lwmod
  4101 ;;		___wmul
  4102 ;;		_isdigit
  4103 ;; This function is called by:
  4104 ;;		_main
  4105 ;;		_V_Principal
  4106 ;;		_Convert_diasem
  4107 ;;		_ManejaMovimientos
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text15
  4112  00FB92                     __ptext15:
  4113                           	opt stack 0
  4114  00FB92                     _sprintf:
  4115                           	opt stack 29
  4116                           
  4117                           ;doprnt.c: 494: va_list ap;
  4118                           ;doprnt.c: 499: signed char c;
  4119                           ;doprnt.c: 501: int width;
  4120                           ;doprnt.c: 506: signed char prec;
  4121                           ;doprnt.c: 508: unsigned char flag;
  4122                           ;doprnt.c: 523: union {
  4123                           ;doprnt.c: 524: unsigned long vd;
  4124                           ;doprnt.c: 525: double integ;
  4125                           ;doprnt.c: 526: } tmpval;
  4126                           ;doprnt.c: 528: unsigned int val;
  4127                           ;doprnt.c: 529: unsigned len;
  4128                           ;doprnt.c: 530: const char * cp;
  4129                           ;doprnt.c: 533: *ap = __va_start();
  4130                           
  4131                           ;incstack = 0
  4132  00FB92  0E11               	movlw	low (?_sprintf+4)
  4133  00FB94  6E1F               	movwf	sprintf@ap,c
  4134  00FB96  0E00               	movlw	high (?_sprintf+4)
  4135  00FB98  6E20               	movwf	sprintf@ap+1,c
  4136                           
  4137                           ;doprnt.c: 536: while(c = *f++) {
  4138  00FB9A  D182               	goto	l2106
  4139  00FB9C                     l1990:
  4140                           
  4141                           ;doprnt.c: 538: if(c != '%')
  4142  00FB9C  0E25               	movlw	37
  4143  00FB9E  1827               	xorwf	sprintf@c,w,c
  4144  00FBA0  B4D8               	btfsc	status,2,c
  4145  00FBA2  D009               	goto	l1996
  4146                           
  4147                           ;doprnt.c: 540: {
  4148                           ;doprnt.c: 541: ((*sp++ = (c)));
  4149  00FBA4  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4150  00FBA8  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4151  00FBAC  C027  FFDF         	movff	sprintf@c,indf2
  4152  00FBB0  4A0D               	infsnz	sprintf@sp,f,c
  4153  00FBB2  2A0E               	incf	sprintf@sp+1,f,c
  4154                           
  4155                           ;doprnt.c: 542: continue;
  4156  00FBB4  D175               	goto	l2106
  4157  00FBB6                     l1996:
  4158                           
  4159                           ;doprnt.c: 543: }
  4160                           ;doprnt.c: 546: width = 0;
  4161  00FBB6  0E00               	movlw	0
  4162  00FBB8  6E26               	movwf	sprintf@width+1,c
  4163  00FBBA  0E00               	movlw	0
  4164  00FBBC  6E25               	movwf	sprintf@width,c
  4165                           
  4166                           ;doprnt.c: 548: flag = 0;
  4167  00FBBE  0E00               	movlw	0
  4168  00FBC0  6E1B               	movwf	sprintf@flag,c
  4169                           
  4170                           ;doprnt.c: 551: switch(*f) {
  4171                           
  4172                           ;doprnt.c: 550: for(;;) {
  4173  00FBC2  D005               	goto	l2002
  4174  00FBC4                     l1998:
  4175                           
  4176                           ;doprnt.c: 580: flag |= 0x04;
  4177  00FBC4  841B               	bsf	sprintf@flag,2,c
  4178                           
  4179                           ;doprnt.c: 581: f++;
  4180  00FBC6  4A0F               	infsnz	sprintf@f,f,c
  4181  00FBC8  2A10               	incf	sprintf@f+1,f,c
  4182                           
  4183                           ;doprnt.c: 582: continue;
  4184  00FBCA  D001               	goto	l2002
  4185                           
  4186                           ;doprnt.c: 584: }
  4187  00FBCC  D00B               	goto	l2004
  4188  00FBCE                     l2002:
  4189  00FBCE  C00F  FFF6         	movff	sprintf@f,tblptrl
  4190  00FBD2  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4191  00FBD6                     	if	0	;tblptru may be non-zero
  4192  00FBD6                     	endif
  4193  00FBD6                     	if	0	;tblptru may be non-zero
  4194  00FBD6                     	endif
  4195  00FBD6  0008               	tblrd		*
  4196  00FBD8  50F5               	movf	tablat,w,c
  4197                           
  4198                           ; Switch size 1, requested type "space"
  4199                           ; Number of cases is 1, Range of values is 48 to 48
  4200                           ; switch strategies available:
  4201                           ; Name         Instructions Cycles
  4202                           ; simple_byte            4     3 (average)
  4203                           ;	Chosen strategy is simple_byte
  4204  00FBDA  0A30               	xorlw	48	; case 48
  4205  00FBDC  B4D8               	btfsc	status,2,c
  4206  00FBDE  D7F2               	goto	l1998
  4207                           
  4208                           ;doprnt.c: 585: break;
  4209  00FBE0  D001               	goto	l2004
  4210                           
  4211                           ;doprnt.c: 586: }
  4212  00FBE2  D7F5               	goto	l2002
  4213  00FBE4                     l2004:
  4214                           
  4215                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4216  00FBE4  C00F  FFF6         	movff	sprintf@f,tblptrl
  4217  00FBE8  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4218  00FBEC                     	if	0	;tblptru may be non-zero
  4219  00FBEC                     	endif
  4220  00FBEC                     	if	0	;tblptru may be non-zero
  4221  00FBEC                     	endif
  4222  00FBEC  0008               	tblrd		*
  4223  00FBEE  50F5               	movf	tablat,w,c
  4224  00FBF0  EC34  F075         	call	_isdigit
  4225  00FBF4  A0D8               	btfss	status,0,c
  4226  00FBF6  D0A2               	goto	l2054
  4227                           
  4228                           ;doprnt.c: 598: width = 0;
  4229  00FBF8  0E00               	movlw	0
  4230  00FBFA  6E26               	movwf	sprintf@width+1,c
  4231  00FBFC  0E00               	movlw	0
  4232  00FBFE  6E25               	movwf	sprintf@width,c
  4233  00FC00  D000               	goto	l2008
  4234  00FC02                     l2008:
  4235                           
  4236                           ;doprnt.c: 600: width *= 10;
  4237  00FC02  C025  F001         	movff	sprintf@width,___wmul@multiplier
  4238  00FC06  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4239  00FC0A  0E00               	movlw	0
  4240  00FC0C  6E04               	movwf	___wmul@multiplicand+1,c
  4241  00FC0E  0E0A               	movlw	10
  4242  00FC10  6E03               	movwf	___wmul@multiplicand,c
  4243  00FC12  EC45  F075         	call	___wmul	;wreg free
  4244  00FC16  C001  F025         	movff	?___wmul,sprintf@width
  4245  00FC1A  C002  F026         	movff	?___wmul+1,sprintf@width+1
  4246                           
  4247                           ;doprnt.c: 601: width += *f++ - '0';
  4248  00FC1E  0ED0               	movlw	208
  4249  00FC20  6E17               	movwf	??_sprintf& (0+255),c
  4250  00FC22  0EFF               	movlw	255
  4251  00FC24  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4252  00FC26  C00F  FFF6         	movff	sprintf@f,tblptrl
  4253  00FC2A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4254  00FC2E                     	if	0	;tblptru may be non-zero
  4255  00FC2E                     	endif
  4256  00FC2E                     	if	0	;tblptru may be non-zero
  4257  00FC2E                     	endif
  4258  00FC2E  0008               	tblrd		*
  4259  00FC30  50F5               	movf	tablat,w,c
  4260  00FC32  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4261  00FC34  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4262  00FC36  5017               	movf	??_sprintf,w,c
  4263  00FC38  2619               	addwf	??_sprintf+2,f,c
  4264  00FC3A  5018               	movf	??_sprintf+1,w,c
  4265  00FC3C  221A               	addwfc	??_sprintf+3,f,c
  4266  00FC3E  5019               	movf	??_sprintf+2,w,c
  4267  00FC40  2625               	addwf	sprintf@width,f,c
  4268  00FC42  501A               	movf	??_sprintf+3,w,c
  4269  00FC44  2226               	addwfc	sprintf@width+1,f,c
  4270  00FC46  4A0F               	infsnz	sprintf@f,f,c
  4271  00FC48  2A10               	incf	sprintf@f+1,f,c
  4272                           
  4273                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4274  00FC4A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4275  00FC4E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4276  00FC52                     	if	0	;tblptru may be non-zero
  4277  00FC52                     	endif
  4278  00FC52                     	if	0	;tblptru may be non-zero
  4279  00FC52                     	endif
  4280  00FC52  0008               	tblrd		*
  4281  00FC54  50F5               	movf	tablat,w,c
  4282  00FC56  EC34  F075         	call	_isdigit
  4283  00FC5A  A0D8               	btfss	status,0,c
  4284  00FC5C  D06F               	goto	l2054
  4285  00FC5E  D7D1               	goto	l2008
  4286                           
  4287                           ;doprnt.c: 608: }
  4288                           ;doprnt.c: 635: switch(c = *f++) {
  4289  00FC60  D06D               	goto	l2054
  4290                           
  4291                           ;doprnt.c: 638: goto alldone;
  4292                           
  4293                           ;doprnt.c: 637: case 0:
  4294  00FC62  D12C               	goto	l2108
  4295  00FC64                     l2016:
  4296                           
  4297                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4298  00FC64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4299  00FC68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4300  00FC6C  CFDE F021          	movff	postinc2,sprintf@cp
  4301  00FC70  CFDD F022          	movff	postdec2,sprintf@cp+1
  4302  00FC74  0E02               	movlw	2
  4303  00FC76  261F               	addwf	sprintf@ap,f,c
  4304  00FC78  0E00               	movlw	0
  4305  00FC7A  2220               	addwfc	sprintf@ap+1,f,c
  4306                           
  4307                           ;doprnt.c: 740: if(!cp)
  4308  00FC7C  5021               	movf	sprintf@cp,w,c
  4309  00FC7E  1022               	iorwf	sprintf@cp+1,w,c
  4310  00FC80  A4D8               	btfss	status,2,c
  4311  00FC82  D005               	goto	l2024
  4312                           
  4313                           ;doprnt.c: 741: cp = "(null)";
  4314  00FC84  0EE8               	movlw	low STR_28
  4315  00FC86  6E21               	movwf	sprintf@cp,c
  4316  00FC88  0EFF               	movlw	high STR_28
  4317  00FC8A  6E22               	movwf	sprintf@cp+1,c
  4318  00FC8C  D000               	goto	l2024
  4319  00FC8E                     l2024:
  4320                           
  4321                           ;doprnt.c: 745: len = 0;
  4322  00FC8E  0E00               	movlw	0
  4323  00FC90  6E24               	movwf	sprintf@len+1,c
  4324  00FC92  0E00               	movlw	0
  4325  00FC94  6E23               	movwf	sprintf@len,c
  4326                           
  4327                           ;doprnt.c: 746: while(cp[len])
  4328  00FC96  D003               	goto	l2028
  4329  00FC98                     l2026:
  4330                           
  4331                           ;doprnt.c: 747: len++;
  4332  00FC98  4A23               	infsnz	sprintf@len,f,c
  4333  00FC9A  2A24               	incf	sprintf@len+1,f,c
  4334  00FC9C  D000               	goto	l2028
  4335  00FC9E                     l2028:
  4336  00FC9E  5023               	movf	sprintf@len,w,c
  4337  00FCA0  2421               	addwf	sprintf@cp,w,c
  4338  00FCA2  6E17               	movwf	??_sprintf& (0+255),c
  4339  00FCA4  5024               	movf	sprintf@len+1,w,c
  4340  00FCA6  2022               	addwfc	sprintf@cp+1,w,c
  4341  00FCA8  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4342  00FCAA  C017  FFF6         	movff	??_sprintf,tblptrl
  4343  00FCAE  C018  FFF7         	movff	??_sprintf+1,tblptrh
  4344  00FCB2                     	if	0	;tblptru may be non-zero
  4345  00FCB2                     	endif
  4346  00FCB2                     	if	0	;tblptru may be non-zero
  4347  00FCB2                     	endif
  4348  00FCB2  0008               	tblrd		*
  4349  00FCB4  50F5               	movf	tablat,w,c
  4350  00FCB6  0900               	iorlw	0
  4351  00FCB8  A4D8               	btfss	status,2,c
  4352  00FCBA  D7EE               	goto	l2026
  4353                           
  4354                           ;doprnt.c: 757: if(width > len)
  4355  00FCBC  5025               	movf	sprintf@width,w,c
  4356  00FCBE  5C23               	subwf	sprintf@len,w,c
  4357  00FCC0  5026               	movf	sprintf@width+1,w,c
  4358  00FCC2  5824               	subwfb	sprintf@len+1,w,c
  4359  00FCC4  B0D8               	btfsc	status,0,c
  4360  00FCC6  D005               	goto	l2034
  4361                           
  4362                           ;doprnt.c: 758: width -= len;
  4363  00FCC8  5023               	movf	sprintf@len,w,c
  4364  00FCCA  5E25               	subwf	sprintf@width,f,c
  4365  00FCCC  5024               	movf	sprintf@len+1,w,c
  4366  00FCCE  5A26               	subwfb	sprintf@width+1,f,c
  4367  00FCD0  D00E               	goto	l2040
  4368  00FCD2                     l2034:
  4369                           
  4370                           ;doprnt.c: 759: else
  4371                           ;doprnt.c: 760: width = 0;
  4372  00FCD2  0E00               	movlw	0
  4373  00FCD4  6E26               	movwf	sprintf@width+1,c
  4374  00FCD6  0E00               	movlw	0
  4375  00FCD8  6E25               	movwf	sprintf@width,c
  4376                           
  4377                           ;doprnt.c: 764: while(width--)
  4378  00FCDA  D009               	goto	l2040
  4379  00FCDC                     l2036:
  4380                           
  4381                           ;doprnt.c: 765: ((*sp++ = (' ')));
  4382  00FCDC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4383  00FCE0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4384  00FCE4  0E20               	movlw	32
  4385  00FCE6  6EDF               	movwf	indf2,c
  4386  00FCE8  4A0D               	infsnz	sprintf@sp,f,c
  4387  00FCEA  2A0E               	incf	sprintf@sp+1,f,c
  4388  00FCEC  D000               	goto	l2040
  4389  00FCEE                     l2040:
  4390  00FCEE  0625               	decf	sprintf@width,f,c
  4391  00FCF0  A0D8               	btfss	status,0,c
  4392  00FCF2  0626               	decf	sprintf@width+1,f,c
  4393  00FCF4  2825               	incf	sprintf@width,w,c
  4394  00FCF6  E1F2               	bnz	l2036
  4395  00FCF8  2826               	incf	sprintf@width+1,w,c
  4396  00FCFA  B4D8               	btfsc	status,2,c
  4397  00FCFC  D012               	goto	l2048
  4398  00FCFE  D7EE               	goto	l2036
  4399                           
  4400                           ;doprnt.c: 767: while(len--)
  4401  00FD00  D010               	goto	l2048
  4402  00FD02                     l2042:
  4403                           
  4404                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  4405  00FD02  C021  FFF6         	movff	sprintf@cp,tblptrl
  4406  00FD06  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  4407  00FD0A                     	if	0	;tblptru may be non-zero
  4408  00FD0A                     	endif
  4409  00FD0A                     	if	0	;tblptru may be non-zero
  4410  00FD0A                     	endif
  4411  00FD0A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4412  00FD0E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4413  00FD12  0008               	tblrd		*
  4414  00FD14  CFF5 FFDF          	movff	tablat,indf2
  4415  00FD18  4A21               	infsnz	sprintf@cp,f,c
  4416  00FD1A  2A22               	incf	sprintf@cp+1,f,c
  4417  00FD1C  4A0D               	infsnz	sprintf@sp,f,c
  4418  00FD1E  2A0E               	incf	sprintf@sp+1,f,c
  4419  00FD20  D000               	goto	l2048
  4420  00FD22                     l2048:
  4421  00FD22  0623               	decf	sprintf@len,f,c
  4422  00FD24  A0D8               	btfss	status,0,c
  4423  00FD26  0624               	decf	sprintf@len+1,f,c
  4424  00FD28  2823               	incf	sprintf@len,w,c
  4425  00FD2A  E1EB               	bnz	l2042
  4426  00FD2C  2824               	incf	sprintf@len+1,w,c
  4427  00FD2E  B4D8               	btfsc	status,2,c
  4428  00FD30  D0B7               	goto	l2106
  4429  00FD32  D7E7               	goto	l2042
  4430                           
  4431                           ;doprnt.c: 813: continue;
  4432                           
  4433                           ;doprnt.c: 802: default:
  4434                           
  4435                           ;doprnt.c: 774: continue;
  4436  00FD34  D0B5               	goto	l2106
  4437  00FD36                     l2050:
  4438                           
  4439                           ;doprnt.c: 818: flag |= 0xC0;
  4440  00FD36  0EC0               	movlw	192
  4441  00FD38  121B               	iorwf	sprintf@flag,f,c
  4442                           
  4443                           ;doprnt.c: 822: }
  4444                           
  4445                           ;doprnt.c: 819: break;
  4446  00FD3A  D014               	goto	l2056
  4447  00FD3C                     l2054:
  4448  00FD3C  C00F  FFF6         	movff	sprintf@f,tblptrl
  4449  00FD40  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4450  00FD44  4A0F               	infsnz	sprintf@f,f,c
  4451  00FD46  2A10               	incf	sprintf@f+1,f,c
  4452  00FD48                     	if	0	;tblptru may be non-zero
  4453  00FD48                     	endif
  4454  00FD48                     	if	0	;tblptru may be non-zero
  4455  00FD48                     	endif
  4456  00FD48  0008               	tblrd		*
  4457  00FD4A  CFF5 F027          	movff	tablat,sprintf@c
  4458  00FD4E  5027               	movf	sprintf@c,w,c
  4459                           
  4460                           ; Switch size 1, requested type "space"
  4461                           ; Number of cases is 3, Range of values is 0 to 117
  4462                           ; switch strategies available:
  4463                           ; Name         Instructions Cycles
  4464                           ; simple_byte           10     6 (average)
  4465                           ;	Chosen strategy is simple_byte
  4466  00FD50  0A00               	xorlw	0	; case 0
  4467  00FD52  B4D8               	btfsc	status,2,c
  4468  00FD54  D0B3               	goto	l2108
  4469  00FD56  0A73               	xorlw	115	; case 115
  4470  00FD58  B4D8               	btfsc	status,2,c
  4471  00FD5A  D784               	goto	l2016
  4472  00FD5C  0A06               	xorlw	6	; case 117
  4473  00FD5E  B4D8               	btfsc	status,2,c
  4474  00FD60  D7EA               	goto	l2050
  4475  00FD62  D09E               	goto	l2106
  4476  00FD64                     l2056:
  4477                           
  4478                           ;doprnt.c: 1273: {
  4479                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4480  00FD64  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4481  00FD68  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4482  00FD6C  CFDE F01C          	movff	postinc2,sprintf@val
  4483  00FD70  CFDD F01D          	movff	postdec2,sprintf@val+1
  4484  00FD74  0E02               	movlw	2
  4485  00FD76  261F               	addwf	sprintf@ap,f,c
  4486  00FD78  0E00               	movlw	0
  4487  00FD7A  2220               	addwfc	sprintf@ap+1,f,c
  4488                           
  4489                           ;doprnt.c: 1287: }
  4490                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4491  00FD7C  0E01               	movlw	1
  4492  00FD7E  6E27               	movwf	sprintf@c,c
  4493  00FD80                     l2062:
  4494  00FD80  0E05               	movlw	5
  4495  00FD82  1827               	xorwf	sprintf@c,w,c
  4496  00FD84  B4D8               	btfsc	status,2,c
  4497  00FD86  D016               	goto	l2074
  4498  00FD88  D001               	goto	l2066
  4499  00FD8A  D014               	goto	l2074
  4500  00FD8C                     l2066:
  4501                           
  4502                           ;doprnt.c: 1306: if(val < dpowers[c])
  4503  00FD8C  5027               	movf	sprintf@c,w,c
  4504  00FD8E  0D02               	mullw	2
  4505  00FD90  0ECD               	movlw	low _dpowers
  4506  00FD92  24F3               	addwf	prodl,w,c
  4507  00FD94  6EF6               	movwf	tblptrl,c
  4508  00FD96  0EFE               	movlw	high _dpowers
  4509  00FD98  20F4               	addwfc	prodh,w,c
  4510  00FD9A  6EF7               	movwf	tblptrh,c
  4511  00FD9C                     	if	0	;There are less than 3 active tblptr bytes
  4512  00FD9C                     	endif
  4513  00FD9C  0009               	tblrd		*+
  4514  00FD9E  50F5               	movf	tablat,w,c
  4515  00FDA0  5C1C               	subwf	sprintf@val,w,c
  4516  00FDA2  0009               	tblrd		*+
  4517  00FDA4  50F5               	movf	tablat,w,c
  4518  00FDA6  581D               	subwfb	sprintf@val+1,w,c
  4519  00FDA8  A0D8               	btfss	status,0,c
  4520  00FDAA  D004               	goto	l2074
  4521  00FDAC  D001               	goto	l2070
  4522                           
  4523                           ;doprnt.c: 1307: break;
  4524  00FDAE  D002               	goto	l2074
  4525  00FDB0                     l2070:
  4526  00FDB0  2A27               	incf	sprintf@c,f,c
  4527  00FDB2  D7E6               	goto	l2062
  4528  00FDB4                     l2074:
  4529                           
  4530                           ;doprnt.c: 1381: if(width > c)
  4531  00FDB4  0E80               	movlw	128
  4532  00FDB6  BE27               	btfsc	sprintf@c,7,c
  4533  00FDB8  0E7F               	movlw	127
  4534  00FDBA  6E17               	movwf	??_sprintf& (0+255),c
  4535  00FDBC  5025               	movf	sprintf@width,w,c
  4536  00FDBE  5C27               	subwf	sprintf@c,w,c
  4537  00FDC0  5026               	movf	sprintf@width+1,w,c
  4538  00FDC2  0A80               	xorlw	128
  4539  00FDC4  5817               	subwfb	??_sprintf& (0+255),w,c
  4540  00FDC6  B0D8               	btfsc	status,0,c
  4541  00FDC8  D007               	goto	l2078
  4542                           
  4543                           ;doprnt.c: 1382: width -= c;
  4544  00FDCA  5027               	movf	sprintf@c,w,c
  4545  00FDCC  5E25               	subwf	sprintf@width,f,c
  4546  00FDCE  0E00               	movlw	0
  4547  00FDD0  BE27               	btfsc	sprintf@c,7,c
  4548  00FDD2  0EFF               	movlw	255
  4549  00FDD4  5A26               	subwfb	sprintf@width+1,f,c
  4550  00FDD6  D005               	goto	l2080
  4551  00FDD8                     l2078:
  4552                           
  4553                           ;doprnt.c: 1383: else
  4554                           ;doprnt.c: 1384: width = 0;
  4555  00FDD8  0E00               	movlw	0
  4556  00FDDA  6E26               	movwf	sprintf@width+1,c
  4557  00FDDC  0E00               	movlw	0
  4558  00FDDE  6E25               	movwf	sprintf@width,c
  4559  00FDE0  D000               	goto	l2080
  4560  00FDE2                     l2080:
  4561                           
  4562                           ;doprnt.c: 1387: if(flag & 0x04) {
  4563  00FDE2  A41B               	btfss	sprintf@flag,2,c
  4564  00FDE4  D015               	goto	l2090
  4565                           
  4566                           ;doprnt.c: 1415: if(width)
  4567  00FDE6  5025               	movf	sprintf@width,w,c
  4568  00FDE8  1026               	iorwf	sprintf@width+1,w,c
  4569  00FDEA  B4D8               	btfsc	status,2,c
  4570  00FDEC  D026               	goto	l294
  4571  00FDEE                     l2084:
  4572                           
  4573                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  4574  00FDEE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4575  00FDF2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4576  00FDF6  0E30               	movlw	48
  4577  00FDF8  6EDF               	movwf	indf2,c
  4578  00FDFA  4A0D               	infsnz	sprintf@sp,f,c
  4579  00FDFC  2A0E               	incf	sprintf@sp+1,f,c
  4580                           
  4581                           ;doprnt.c: 1418: while(--width);
  4582  00FDFE  0625               	decf	sprintf@width,f,c
  4583  00FE00  A0D8               	btfss	status,0,c
  4584  00FE02  0626               	decf	sprintf@width+1,f,c
  4585  00FE04  5025               	movf	sprintf@width,w,c
  4586  00FE06  1026               	iorwf	sprintf@width+1,w,c
  4587  00FE08  B4D8               	btfsc	status,2,c
  4588  00FE0A  D017               	goto	l294
  4589  00FE0C  D7F0               	goto	l2084
  4590                           
  4591                           ;doprnt.c: 1420: } else
  4592  00FE0E  D015               	goto	l294
  4593  00FE10                     l2090:
  4594                           
  4595                           ;doprnt.c: 1422: {
  4596                           ;doprnt.c: 1424: if(width
  4597                           ;doprnt.c: 1428: )
  4598  00FE10  5025               	movf	sprintf@width,w,c
  4599  00FE12  1026               	iorwf	sprintf@width+1,w,c
  4600  00FE14  B4D8               	btfsc	status,2,c
  4601  00FE16  D011               	goto	l294
  4602  00FE18                     l2092:
  4603                           
  4604                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4605  00FE18  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4606  00FE1C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4607  00FE20  0E20               	movlw	32
  4608  00FE22  6EDF               	movwf	indf2,c
  4609  00FE24  4A0D               	infsnz	sprintf@sp,f,c
  4610  00FE26  2A0E               	incf	sprintf@sp+1,f,c
  4611                           
  4612                           ;doprnt.c: 1431: while(--width);
  4613  00FE28  0625               	decf	sprintf@width,f,c
  4614  00FE2A  A0D8               	btfss	status,0,c
  4615  00FE2C  0626               	decf	sprintf@width+1,f,c
  4616  00FE2E  5025               	movf	sprintf@width,w,c
  4617  00FE30  1026               	iorwf	sprintf@width+1,w,c
  4618  00FE32  B4D8               	btfsc	status,2,c
  4619  00FE34  D002               	goto	l294
  4620  00FE36  D7F0               	goto	l2092
  4621  00FE38  D000               	goto	l294
  4622  00FE3A                     l294:
  4623                           
  4624                           ;doprnt.c: 1469: }
  4625                           ;doprnt.c: 1472: prec = c;
  4626  00FE3A  C027  F01E         	movff	sprintf@c,sprintf@prec
  4627                           
  4628                           ;doprnt.c: 1474: while(prec--) {
  4629  00FE3E  D02A               	goto	l2104
  4630  00FE40                     l2098:
  4631                           
  4632                           ;doprnt.c: 1478: {
  4633                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4634  00FE40  501E               	movf	sprintf@prec,w,c
  4635  00FE42  0D02               	mullw	2
  4636  00FE44  0ECD               	movlw	low _dpowers
  4637  00FE46  24F3               	addwf	prodl,w,c
  4638  00FE48  6EF6               	movwf	tblptrl,c
  4639  00FE4A  0EFE               	movlw	high _dpowers
  4640  00FE4C  20F4               	addwfc	prodh,w,c
  4641  00FE4E  6EF7               	movwf	tblptrh,c
  4642  00FE50                     	if	0	;There are less than 3 active tblptr bytes
  4643  00FE50                     	endif
  4644  00FE50  0009               	tblrd		*+
  4645  00FE52  CFF5 F003          	movff	tablat,___lwdiv@divisor
  4646  00FE56  000A               	tblrd		*-
  4647  00FE58  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  4648  00FE5C  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  4649  00FE60  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  4650  00FE64  EC7F  F075         	call	___lwdiv	;wreg free
  4651  00FE68  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4652  00FE6C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4653  00FE70  0E00               	movlw	0
  4654  00FE72  6E0B               	movwf	___lwmod@divisor+1,c
  4655  00FE74  0E0A               	movlw	10
  4656  00FE76  6E0A               	movwf	___lwmod@divisor,c
  4657  00FE78  EC59  F075         	call	___lwmod	;wreg free
  4658  00FE7C  5008               	movf	?___lwmod,w,c
  4659  00FE7E  0F30               	addlw	48
  4660  00FE80  6E27               	movwf	sprintf@c,c
  4661                           
  4662                           ;doprnt.c: 1523: }
  4663                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4664  00FE82  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4665  00FE86  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4666  00FE8A  C027  FFDF         	movff	sprintf@c,indf2
  4667  00FE8E  4A0D               	infsnz	sprintf@sp,f,c
  4668  00FE90  2A0E               	incf	sprintf@sp+1,f,c
  4669  00FE92  D000               	goto	l2104
  4670  00FE94                     l2104:
  4671  00FE94  061E               	decf	sprintf@prec,f,c
  4672  00FE96  281E               	incf	sprintf@prec,w,c
  4673  00FE98  B4D8               	btfsc	status,2,c
  4674  00FE9A  D002               	goto	l2106
  4675  00FE9C  D7D1               	goto	l2098
  4676  00FE9E  D000               	goto	l2106
  4677  00FEA0                     l2106:
  4678  00FEA0  C00F  FFF6         	movff	sprintf@f,tblptrl
  4679  00FEA4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4680  00FEA8  4A0F               	infsnz	sprintf@f,f,c
  4681  00FEAA  2A10               	incf	sprintf@f+1,f,c
  4682  00FEAC                     	if	0	;tblptru may be non-zero
  4683  00FEAC                     	endif
  4684  00FEAC                     	if	0	;tblptru may be non-zero
  4685  00FEAC                     	endif
  4686  00FEAC  0008               	tblrd		*
  4687  00FEAE  CFF5 F027          	movff	tablat,sprintf@c
  4688  00FEB2  5027               	movf	sprintf@c,w,c
  4689  00FEB4  B4D8               	btfsc	status,2,c
  4690  00FEB6  D002               	goto	l2108
  4691  00FEB8  D671               	goto	l1990
  4692  00FEBA  D000               	goto	l2108
  4693  00FEBC                     l2108:
  4694                           
  4695                           ;doprnt.c: 1538: *sp = 0;
  4696  00FEBC  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4697  00FEC0  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4698  00FEC4  0E00               	movlw	0
  4699  00FEC6  6EDF               	movwf	indf2,c
  4700  00FEC8  0012               	return	
  4701                           
  4702                           ;doprnt.c: 1540: return 0;
  4703                           ;	Return value of _sprintf is never used
  4704  00FECA  0012               	return		;funcret
  4705  00FECC                     __end_of_sprintf:
  4706                           	opt stack 0
  4707                           tblptru	equ	0xFF8
  4708                           tblptrh	equ	0xFF7
  4709                           tblptrl	equ	0xFF6
  4710                           tablat	equ	0xFF5
  4711                           prodh	equ	0xFF4
  4712                           prodl	equ	0xFF3
  4713                           intcon	equ	0xFF2
  4714                           postinc0	equ	0xFEE
  4715                           wreg	equ	0xFE8
  4716                           postdec1	equ	0xFE5
  4717                           fsr1l	equ	0xFE1
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _isdigit *****************
  4726 ;; Defined at:
  4727 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  c               1    wreg     unsigned char 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  c               1    2[COMRAM] unsigned char 
  4732 ;; Return value:  Size  Location     Type
  4733 ;;		None               void
  4734 ;; Registers used:
  4735 ;;		wreg, status,2, status,0
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4742 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4744 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4745 ;;Total ram usage:        3 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_sprintf
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           	psect	text16
  4755  00EA68                     __ptext16:
  4756                           	opt stack 0
  4757  00EA68                     _isdigit:
  4758                           	opt stack 29
  4759                           
  4760                           ;incstack = 0
  4761                           ;isdigit@c stored from wreg
  4762  00EA68  6E03               	movwf	isdigit@c,c
  4763  00EA6A  0E00               	movlw	0
  4764  00EA6C  6E02               	movwf	_isdigit$2078,c
  4765  00EA6E  0E3A               	movlw	58
  4766  00EA70  6003               	cpfslt	isdigit@c,c
  4767  00EA72  D006               	goto	l1894
  4768  00EA74  0E2F               	movlw	47
  4769  00EA76  6403               	cpfsgt	isdigit@c,c
  4770  00EA78  D003               	goto	l1894
  4771  00EA7A  0E01               	movlw	1
  4772  00EA7C  6E02               	movwf	_isdigit$2078,c
  4773  00EA7E  D000               	goto	l1894
  4774  00EA80                     l1894:
  4775  00EA80  C002  F001         	movff	_isdigit$2078,??_isdigit
  4776  00EA84  3001               	rrcf	??_isdigit,w,c
  4777  00EA86  0012               	return	
  4778  00EA88  0012               	return		;funcret
  4779  00EA8A                     __end_of_isdigit:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           postinc0	equ	0xFEE
  4789                           wreg	equ	0xFE8
  4790                           postdec1	equ	0xFE5
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function ___wmul *****************
  4800 ;; Defined at:
  4801 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  multiplier      2    0[COMRAM] unsigned int 
  4804 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;  product         2    4[COMRAM] unsigned int 
  4807 ;; Return value:  Size  Location     Type
  4808 ;;                  2    0[COMRAM] unsigned int 
  4809 ;; Registers used:
  4810 ;;		wreg, status,2, status,0, prodl, prodh
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4816 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4820 ;;Total ram usage:        6 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_sprintf
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text17
  4830  00EA8A                     __ptext17:
  4831                           	opt stack 0
  4832  00EA8A                     ___wmul:
  4833                           	opt stack 29
  4834                           
  4835                           ;incstack = 0
  4836  00EA8A  5001               	movf	___wmul@multiplier,w,c
  4837  00EA8C  0203               	mulwf	___wmul@multiplicand,c
  4838  00EA8E  CFF3 F005          	movff	prodl,___wmul@product
  4839  00EA92  CFF4 F006          	movff	prodh,___wmul@product+1
  4840  00EA96  5001               	movf	___wmul@multiplier,w,c
  4841  00EA98  0204               	mulwf	___wmul@multiplicand+1,c
  4842  00EA9A  50F3               	movf	prodl,w,c
  4843  00EA9C  2606               	addwf	___wmul@product+1,f,c
  4844  00EA9E  5002               	movf	___wmul@multiplier+1,w,c
  4845  00EAA0  0203               	mulwf	___wmul@multiplicand,c
  4846  00EAA2  50F3               	movf	prodl,w,c
  4847  00EAA4  2606               	addwf	___wmul@product+1,f,c
  4848  00EAA6  C005  F001         	movff	___wmul@product,?___wmul
  4849  00EAAA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4850  00EAAE  0012               	return	
  4851  00EAB0  0012               	return		;funcret
  4852  00EAB2                     __end_of___wmul:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           prodh	equ	0xFF4
  4859                           prodl	equ	0xFF3
  4860                           intcon	equ	0xFF2
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           postdec1	equ	0xFE5
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872 ;; *************** function ___lwmod *****************
  4873 ;; Defined at:
  4874 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  4875 ;; Parameters:    Size  Location     Type
  4876 ;;  dividend        2    7[COMRAM] unsigned int 
  4877 ;;  divisor         2    9[COMRAM] unsigned int 
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;  counter         1   11[COMRAM] unsigned char 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  2    7[COMRAM] unsigned int 
  4882 ;; Registers used:
  4883 ;;		wreg, status,2, status,0
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4892 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4893 ;;Total ram usage:        5 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; This function calls:
  4896 ;;		Nothing
  4897 ;; This function is called by:
  4898 ;;		_sprintf
  4899 ;; This function uses a non-reentrant model
  4900 ;;
  4901                           
  4902                           	psect	text18
  4903  00EAB2                     __ptext18:
  4904                           	opt stack 0
  4905  00EAB2                     ___lwmod:
  4906                           	opt stack 29
  4907                           
  4908                           ;incstack = 0
  4909  00EAB2  500A               	movf	___lwmod@divisor,w,c
  4910  00EAB4  100B               	iorwf	___lwmod@divisor+1,w,c
  4911  00EAB6  B4D8               	btfsc	status,2,c
  4912  00EAB8  D01D               	goto	l927
  4913  00EABA  0E01               	movlw	1
  4914  00EABC  6E0C               	movwf	___lwmod@counter,c
  4915  00EABE  D005               	goto	l1932
  4916  00EAC0                     l1930:
  4917  00EAC0  90D8               	bcf	status,0,c
  4918  00EAC2  360A               	rlcf	___lwmod@divisor,f,c
  4919  00EAC4  360B               	rlcf	___lwmod@divisor+1,f,c
  4920  00EAC6  2A0C               	incf	___lwmod@counter,f,c
  4921  00EAC8  D000               	goto	l1932
  4922  00EACA                     l1932:
  4923  00EACA  BE0B               	btfsc	___lwmod@divisor+1,7,c
  4924  00EACC  D002               	goto	l1934
  4925  00EACE  D7F8               	goto	l1930
  4926  00EAD0  D000               	goto	l1934
  4927  00EAD2                     l1934:
  4928  00EAD2  500A               	movf	___lwmod@divisor,w,c
  4929  00EAD4  5C08               	subwf	___lwmod@dividend,w,c
  4930  00EAD6  500B               	movf	___lwmod@divisor+1,w,c
  4931  00EAD8  5809               	subwfb	___lwmod@dividend+1,w,c
  4932  00EADA  A0D8               	btfss	status,0,c
  4933  00EADC  D005               	goto	l1938
  4934  00EADE  500A               	movf	___lwmod@divisor,w,c
  4935  00EAE0  5E08               	subwf	___lwmod@dividend,f,c
  4936  00EAE2  500B               	movf	___lwmod@divisor+1,w,c
  4937  00EAE4  5A09               	subwfb	___lwmod@dividend+1,f,c
  4938  00EAE6  D000               	goto	l1938
  4939  00EAE8                     l1938:
  4940  00EAE8  90D8               	bcf	status,0,c
  4941  00EAEA  320B               	rrcf	___lwmod@divisor+1,f,c
  4942  00EAEC  320A               	rrcf	___lwmod@divisor,f,c
  4943  00EAEE  2E0C               	decfsz	___lwmod@counter,f,c
  4944  00EAF0  D7F0               	goto	l1934
  4945  00EAF2  D000               	goto	l927
  4946  00EAF4                     l927:
  4947  00EAF4  C008  F008         	movff	___lwmod@dividend,?___lwmod
  4948  00EAF8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  4949  00EAFC  0012               	return		;funcret
  4950  00EAFE                     __end_of___lwmod:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           postinc0	equ	0xFEE
  4960                           wreg	equ	0xFE8
  4961                           postdec1	equ	0xFE5
  4962                           fsr1l	equ	0xFE1
  4963                           indf2	equ	0xFDF
  4964                           postinc2	equ	0xFDE
  4965                           postdec2	equ	0xFDD
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function ___lwdiv *****************
  4971 ;; Defined at:
  4972 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  dividend        2    0[COMRAM] unsigned int 
  4975 ;;  divisor         2    2[COMRAM] unsigned int 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  quotient        2    4[COMRAM] unsigned int 
  4978 ;;  counter         1    6[COMRAM] unsigned char 
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  2    0[COMRAM] unsigned int 
  4981 ;; Registers used:
  4982 ;;		wreg, status,2, status,0
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4988 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4989 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4991 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4992 ;;Total ram usage:        7 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; This function calls:
  4995 ;;		Nothing
  4996 ;; This function is called by:
  4997 ;;		_sprintf
  4998 ;; This function uses a non-reentrant model
  4999 ;;
  5000                           
  5001                           	psect	text19
  5002  00EAFE                     __ptext19:
  5003                           	opt stack 0
  5004  00EAFE                     ___lwdiv:
  5005                           	opt stack 29
  5006                           
  5007                           ;incstack = 0
  5008  00EAFE  0E00               	movlw	0
  5009  00EB00  6E06               	movwf	___lwdiv@quotient+1,c
  5010  00EB02  0E00               	movlw	0
  5011  00EB04  6E05               	movwf	___lwdiv@quotient,c
  5012  00EB06  5003               	movf	___lwdiv@divisor,w,c
  5013  00EB08  1004               	iorwf	___lwdiv@divisor+1,w,c
  5014  00EB0A  B4D8               	btfsc	status,2,c
  5015  00EB0C  D021               	goto	l917
  5016  00EB0E  0E01               	movlw	1
  5017  00EB10  6E07               	movwf	___lwdiv@counter,c
  5018  00EB12  D005               	goto	l1912
  5019  00EB14                     l1910:
  5020  00EB14  90D8               	bcf	status,0,c
  5021  00EB16  3603               	rlcf	___lwdiv@divisor,f,c
  5022  00EB18  3604               	rlcf	___lwdiv@divisor+1,f,c
  5023  00EB1A  2A07               	incf	___lwdiv@counter,f,c
  5024  00EB1C  D000               	goto	l1912
  5025  00EB1E                     l1912:
  5026  00EB1E  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5027  00EB20  D002               	goto	l1914
  5028  00EB22  D7F8               	goto	l1910
  5029  00EB24  D000               	goto	l1914
  5030  00EB26                     l1914:
  5031  00EB26  90D8               	bcf	status,0,c
  5032  00EB28  3605               	rlcf	___lwdiv@quotient,f,c
  5033  00EB2A  3606               	rlcf	___lwdiv@quotient+1,f,c
  5034  00EB2C  5003               	movf	___lwdiv@divisor,w,c
  5035  00EB2E  5C01               	subwf	___lwdiv@dividend,w,c
  5036  00EB30  5004               	movf	___lwdiv@divisor+1,w,c
  5037  00EB32  5802               	subwfb	___lwdiv@dividend+1,w,c
  5038  00EB34  A0D8               	btfss	status,0,c
  5039  00EB36  D006               	goto	l1922
  5040  00EB38  5003               	movf	___lwdiv@divisor,w,c
  5041  00EB3A  5E01               	subwf	___lwdiv@dividend,f,c
  5042  00EB3C  5004               	movf	___lwdiv@divisor+1,w,c
  5043  00EB3E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5044  00EB40  8005               	bsf	___lwdiv@quotient,0,c
  5045  00EB42  D000               	goto	l1922
  5046  00EB44                     l1922:
  5047  00EB44  90D8               	bcf	status,0,c
  5048  00EB46  3204               	rrcf	___lwdiv@divisor+1,f,c
  5049  00EB48  3203               	rrcf	___lwdiv@divisor,f,c
  5050  00EB4A  2E07               	decfsz	___lwdiv@counter,f,c
  5051  00EB4C  D7EC               	goto	l1914
  5052  00EB4E  D000               	goto	l917
  5053  00EB50                     l917:
  5054  00EB50  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5055  00EB54  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5056  00EB58  0012               	return		;funcret
  5057  00EB5A                     __end_of___lwdiv:
  5058                           	opt stack 0
  5059                           tblptru	equ	0xFF8
  5060                           tblptrh	equ	0xFF7
  5061                           tblptrl	equ	0xFF6
  5062                           tablat	equ	0xFF5
  5063                           prodh	equ	0xFF4
  5064                           prodl	equ	0xFF3
  5065                           intcon	equ	0xFF2
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec1	equ	0xFE5
  5069                           fsr1l	equ	0xFE1
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           fsr2h	equ	0xFDA
  5074                           fsr2l	equ	0xFD9
  5075                           status	equ	0xFD8
  5076                           
  5077 ;; *************** function _Lcd_Init *****************
  5078 ;; Defined at:
  5079 ;;		line 42 in file "../lcd.h"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;		None
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  data            1    4[COMRAM] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, status,2, status,0, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5095 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5097 ;;Total ram usage:        2 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:    1
  5100 ;; This function calls:
  5101 ;;		_Lcd_Cmd
  5102 ;; This function is called by:
  5103 ;;		_main
  5104 ;; This function uses a non-reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text20
  5108  00EFAC                     __ptext20:
  5109                           	opt stack 0
  5110  00EFAC                     _Lcd_Init:
  5111                           	opt stack 29
  5112                           
  5113                           ;lcd.h: 43: unsigned char data;
  5114                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  5115                           
  5116                           ;incstack = 0
  5117  00EFAC  9093               	bcf	3987,0,c	;volatile
  5118                           
  5119                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  5120  00EFAE  9293               	bcf	3987,1,c	;volatile
  5121                           
  5122                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  5123  00EFB0  9493               	bcf	3987,2,c	;volatile
  5124                           
  5125                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  5126  00EFB2  9693               	bcf	3987,3,c	;volatile
  5127                           
  5128                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  5129  00EFB4  9893               	bcf	3987,4,c	;volatile
  5130                           
  5131                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  5132  00EFB6  9A93               	bcf	3987,5,c	;volatile
  5133                           
  5134                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  5135  00EFB8  908A               	bcf	3978,0,c	;volatile
  5136                           
  5137                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  5138  00EFBA  928A               	bcf	3978,1,c	;volatile
  5139                           
  5140                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  5141  00EFBC  948A               	bcf	3978,2,c	;volatile
  5142                           
  5143                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  5144  00EFBE  968A               	bcf	3978,3,c	;volatile
  5145                           
  5146                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  5147  00EFC0  988A               	bcf	3978,4,c	;volatile
  5148                           
  5149                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  5150  00EFC2  9A8A               	bcf	3978,5,c	;volatile
  5151                           
  5152                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5153  00EFC4  0E0F               	movlw	15
  5154  00EFC6  6E04               	movwf	??_Lcd_Init& (0+255),c
  5155  00EFC8  0E48               	movlw	72
  5156  00EFCA                     u2217:
  5157  00EFCA  2EE8               	decfsz	wreg,f,c
  5158  00EFCC  D7FE               	goto	u2217
  5159  00EFCE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5160  00EFD0  D7FC               	goto	u2217
  5161                           
  5162                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5163  00EFD2  0E0F               	movlw	15
  5164  00EFD4  6E04               	movwf	??_Lcd_Init& (0+255),c
  5165  00EFD6  0E48               	movlw	72
  5166  00EFD8                     u2227:
  5167  00EFD8  2EE8               	decfsz	wreg,f,c
  5168  00EFDA  D7FE               	goto	u2227
  5169  00EFDC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5170  00EFDE  D7FC               	goto	u2227
  5171                           
  5172                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5173  00EFE0  0E0F               	movlw	15
  5174  00EFE2  6E04               	movwf	??_Lcd_Init& (0+255),c
  5175  00EFE4  0E48               	movlw	72
  5176  00EFE6                     u2237:
  5177  00EFE6  2EE8               	decfsz	wreg,f,c
  5178  00EFE8  D7FE               	goto	u2237
  5179  00EFEA  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5180  00EFEC  D7FC               	goto	u2237
  5181                           
  5182                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5183  00EFEE  0E0F               	movlw	15
  5184  00EFF0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5185  00EFF2  0E48               	movlw	72
  5186  00EFF4                     u2247:
  5187  00EFF4  2EE8               	decfsz	wreg,f,c
  5188  00EFF6  D7FE               	goto	u2247
  5189  00EFF8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5190  00EFFA  D7FC               	goto	u2247
  5191                           
  5192                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5193  00EFFC  0E0F               	movlw	15
  5194  00EFFE  6E04               	movwf	??_Lcd_Init& (0+255),c
  5195  00F000  0E48               	movlw	72
  5196  00F002                     u2257:
  5197  00F002  2EE8               	decfsz	wreg,f,c
  5198  00F004  D7FE               	goto	u2257
  5199  00F006  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5200  00F008  D7FC               	goto	u2257
  5201                           
  5202                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5203  00F00A  0E0F               	movlw	15
  5204  00F00C  6E04               	movwf	??_Lcd_Init& (0+255),c
  5205  00F00E  0E48               	movlw	72
  5206  00F010                     u2267:
  5207  00F010  2EE8               	decfsz	wreg,f,c
  5208  00F012  D7FE               	goto	u2267
  5209  00F014  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5210  00F016  D7FC               	goto	u2267
  5211                           
  5212                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5213  00F018  0E01               	movlw	1
  5214  00F01A  6E05               	movwf	Lcd_Init@data,c
  5215  00F01C  D01F               	goto	L5
  5216  00F01E  D021               	goto	l72
  5217  00F020                     l71:
  5218                           
  5219                           ;lcd.h: 63: {
  5220                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5221  00F020  908A               	bcf	3978,0,c	;volatile
  5222  00F022  928A               	bcf	3978,1,c	;volatile
  5223  00F024  848A               	bsf	3978,2,c	;volatile
  5224  00F026  868A               	bsf	3978,3,c	;volatile
  5225  00F028  988A               	bcf	3978,4,c	;volatile
  5226                           
  5227                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5228  00F02A  9A8A               	bcf	3978,5,c	;volatile
  5229  00F02C  908A               	bcf	3978,0,c	;volatile
  5230  00F02E  928A               	bcf	3978,1,c	;volatile
  5231  00F030  848A               	bsf	3978,2,c	;volatile
  5232  00F032  868A               	bsf	3978,3,c	;volatile
  5233                           
  5234                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5235  00F034  888A               	bsf	3978,4,c	;volatile
  5236  00F036  9A8A               	bcf	3978,5,c	;volatile
  5237                           
  5238                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5239  00F038  0E03               	movlw	3
  5240  00F03A                     u2277:
  5241  00F03A  2EE8               	decfsz	wreg,f,c
  5242  00F03C  D7FE               	goto	u2277
  5243  00F03E  F000               	nop	
  5244                           
  5245                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5246  00F040  908A               	bcf	3978,0,c	;volatile
  5247  00F042  928A               	bcf	3978,1,c	;volatile
  5248  00F044  848A               	bsf	3978,2,c	;volatile
  5249  00F046  868A               	bsf	3978,3,c	;volatile
  5250  00F048  988A               	bcf	3978,4,c	;volatile
  5251                           
  5252                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5253  00F04A  9A8A               	bcf	3978,5,c	;volatile
  5254                           
  5255                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5256  00F04C  0E0F               	movlw	15
  5257  00F04E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5258  00F050  0E48               	movlw	72
  5259  00F052                     u2287:
  5260  00F052  2EE8               	decfsz	wreg,f,c
  5261  00F054  D7FE               	goto	u2287
  5262  00F056  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5263  00F058  D7FC               	goto	u2287
  5264  00F05A  2A05               	incf	Lcd_Init@data,f,c
  5265  00F05C                     L5:
  5266  00F05C  0E03               	movlw	3
  5267  00F05E  6405               	cpfsgt	Lcd_Init@data,c
  5268  00F060  D7DF               	goto	l71
  5269  00F062                     l72:
  5270                           
  5271                           ;lcd.h: 71: }
  5272                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5273  00F062  908A               	bcf	3978,0,c	;volatile
  5274  00F064  928A               	bcf	3978,1,c	;volatile
  5275  00F066  848A               	bsf	3978,2,c	;volatile
  5276  00F068  968A               	bcf	3978,3,c	;volatile
  5277  00F06A  988A               	bcf	3978,4,c	;volatile
  5278  00F06C  9A8A               	bcf	3978,5,c	;volatile
  5279                           
  5280                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5281  00F06E  908A               	bcf	3978,0,c	;volatile
  5282  00F070  928A               	bcf	3978,1,c	;volatile
  5283  00F072  848A               	bsf	3978,2,c	;volatile
  5284  00F074  968A               	bcf	3978,3,c	;volatile
  5285  00F076  888A               	bsf	3978,4,c	;volatile
  5286  00F078  9A8A               	bcf	3978,5,c	;volatile
  5287                           
  5288                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5289  00F07A  0E03               	movlw	3
  5290  00F07C                     u2297:
  5291  00F07C  2EE8               	decfsz	wreg,f,c
  5292  00F07E  D7FE               	goto	u2297
  5293  00F080  F000               	nop	
  5294                           
  5295                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5296  00F082  908A               	bcf	3978,0,c	;volatile
  5297  00F084  928A               	bcf	3978,1,c	;volatile
  5298  00F086  848A               	bsf	3978,2,c	;volatile
  5299  00F088  968A               	bcf	3978,3,c	;volatile
  5300  00F08A  988A               	bcf	3978,4,c	;volatile
  5301  00F08C  9A8A               	bcf	3978,5,c	;volatile
  5302                           
  5303                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5304  00F08E  0E0F               	movlw	15
  5305  00F090  6E04               	movwf	??_Lcd_Init& (0+255),c
  5306  00F092  0E48               	movlw	72
  5307  00F094                     u2307:
  5308  00F094  2EE8               	decfsz	wreg,f,c
  5309  00F096  D7FE               	goto	u2307
  5310  00F098  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5311  00F09A  D7FC               	goto	u2307
  5312                           
  5313                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5314  00F09C  0E28               	movlw	40
  5315  00F09E  6E05               	movwf	Lcd_Init@data,c
  5316  00F0A0  5005               	movf	Lcd_Init@data,w,c
  5317  00F0A2  ECF2  F078         	call	_Lcd_Cmd
  5318                           
  5319                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  5320  00F0A6  0E10               	movlw	16
  5321  00F0A8  6E05               	movwf	Lcd_Init@data,c
  5322  00F0AA  5005               	movf	Lcd_Init@data,w,c
  5323  00F0AC  ECF2  F078         	call	_Lcd_Cmd
  5324                           
  5325                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  5326  00F0B0  0E01               	movlw	1
  5327  00F0B2  6E05               	movwf	Lcd_Init@data,c
  5328  00F0B4  5005               	movf	Lcd_Init@data,w,c
  5329  00F0B6  ECF2  F078         	call	_Lcd_Cmd
  5330                           
  5331                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  5332  00F0BA  0E0F               	movlw	15
  5333  00F0BC  6E05               	movwf	Lcd_Init@data,c
  5334  00F0BE  5005               	movf	Lcd_Init@data,w,c
  5335  00F0C0  ECF2  F078         	call	_Lcd_Cmd
  5336  00F0C4  0012               	return		;funcret
  5337  00F0C6                     __end_of_Lcd_Init:
  5338                           	opt stack 0
  5339                           tblptru	equ	0xFF8
  5340                           tblptrh	equ	0xFF7
  5341                           tblptrl	equ	0xFF6
  5342                           tablat	equ	0xFF5
  5343                           prodh	equ	0xFF4
  5344                           prodl	equ	0xFF3
  5345                           intcon	equ	0xFF2
  5346                           postinc0	equ	0xFEE
  5347                           wreg	equ	0xFE8
  5348                           postdec1	equ	0xFE5
  5349                           fsr1l	equ	0xFE1
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _Lcd_Cmd *****************
  5358 ;; Defined at:
  5359 ;;		line 140 in file "../lcd.h"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  data            1    wreg     unsigned char 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  data            1    2[COMRAM] unsigned char 
  5364 ;; Return value:  Size  Location     Type
  5365 ;;		None               void
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5376 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5377 ;;Total ram usage:        3 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; This function calls:
  5380 ;;		Nothing
  5381 ;; This function is called by:
  5382 ;;		_Lcd_Init
  5383 ;;		_Lcd_Out
  5384 ;;		_main
  5385 ;;		_ManejaMovimientos
  5386 ;;		_Lcd_Out2
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text21
  5391  00F1E4                     __ptext21:
  5392                           	opt stack 0
  5393  00F1E4                     _Lcd_Cmd:
  5394                           	opt stack 28
  5395                           
  5396                           ;incstack = 0
  5397                           ;Lcd_Cmd@data stored from wreg
  5398  00F1E4  6E03               	movwf	Lcd_Cmd@data,c
  5399                           
  5400                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5401  00F1E6  988A               	bcf	3978,4,c	;volatile
  5402  00F1E8  9A8A               	bcf	3978,5,c	;volatile
  5403                           
  5404                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  5405  00F1EA  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  5406  00F1EC  AE03               	btfss	Lcd_Cmd@data,7,c
  5407  00F1EE  D001               	bra	u1115
  5408  00F1F0  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  5409  00F1F2                     u1115:
  5410  00F1F2  0E01               	movlw	1
  5411  00F1F4  1601               	andwf	??_Lcd_Cmd,f,c
  5412  00F1F6  508A               	movf	3978,w,c	;volatile
  5413  00F1F8  1801               	xorwf	??_Lcd_Cmd,w,c
  5414  00F1FA  0BFE               	andlw	-2
  5415  00F1FC  1801               	xorwf	??_Lcd_Cmd,w,c
  5416  00F1FE  6E8A               	movwf	3978,c	;volatile
  5417  00F200  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5418  00F204  0E06               	movlw	6
  5419  00F206  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5420  00F208                     u1125:
  5421  00F208  90D8               	bcf	status,0,c
  5422  00F20A  3201               	rrcf	??_Lcd_Cmd,f,c
  5423  00F20C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5424  00F20E  D7FC               	goto	u1125
  5425  00F210  0E01               	movlw	1
  5426  00F212  1601               	andwf	??_Lcd_Cmd,f,c
  5427  00F214  4601               	rlncf	??_Lcd_Cmd,f,c
  5428  00F216  508A               	movf	3978,w,c	;volatile
  5429  00F218  1801               	xorwf	??_Lcd_Cmd,w,c
  5430  00F21A  0BFD               	andlw	-3
  5431  00F21C  1801               	xorwf	??_Lcd_Cmd,w,c
  5432  00F21E  6E8A               	movwf	3978,c	;volatile
  5433                           
  5434                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  5435  00F220  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5436  00F224  0E05               	movlw	5
  5437  00F226  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  5438  00F228                     u1135:
  5439  00F228  90D8               	bcf	status,0,c
  5440  00F22A  3201               	rrcf	??_Lcd_Cmd,f,c
  5441  00F22C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  5442  00F22E  D7FC               	goto	u1135
  5443  00F230  0E01               	movlw	1
  5444  00F232  1601               	andwf	??_Lcd_Cmd,f,c
  5445  00F234  4601               	rlncf	??_Lcd_Cmd,f,c
  5446  00F236  4601               	rlncf	??_Lcd_Cmd,f,c
  5447  00F238  508A               	movf	3978,w,c	;volatile
  5448  00F23A  1801               	xorwf	??_Lcd_Cmd,w,c
  5449  00F23C  0BFB               	andlw	-5
  5450  00F23E  1801               	xorwf	??_Lcd_Cmd,w,c
  5451  00F240  6E8A               	movwf	3978,c	;volatile
  5452  00F242  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5453  00F246  3A01               	swapf	??_Lcd_Cmd,f,c
  5454  00F248  0E0F               	movlw	15
  5455  00F24A  1601               	andwf	??_Lcd_Cmd,f,c
  5456  00F24C  0E01               	movlw	1
  5457  00F24E  1601               	andwf	??_Lcd_Cmd,f,c
  5458  00F250  4601               	rlncf	??_Lcd_Cmd,f,c
  5459  00F252  4601               	rlncf	??_Lcd_Cmd,f,c
  5460  00F254  4601               	rlncf	??_Lcd_Cmd,f,c
  5461  00F256  508A               	movf	3978,w,c	;volatile
  5462  00F258  1801               	xorwf	??_Lcd_Cmd,w,c
  5463  00F25A  0BF7               	andlw	-9
  5464  00F25C  1801               	xorwf	??_Lcd_Cmd,w,c
  5465  00F25E  6E8A               	movwf	3978,c	;volatile
  5466                           
  5467                           ;lcd.h: 144: _delay(10);
  5468  00F260  0E03               	movlw	3
  5469  00F262                     u2317:
  5470  00F262  2EE8               	decfsz	wreg,f,c
  5471  00F264  D7FE               	goto	u2317
  5472  00F266  F000               	nop	
  5473                           
  5474                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5475  00F268  888A               	bsf	3978,4,c	;volatile
  5476  00F26A  0E03               	movlw	3
  5477  00F26C                     u2327:
  5478  00F26C  2EE8               	decfsz	wreg,f,c
  5479  00F26E  D7FE               	goto	u2327
  5480  00F270  F000               	nop	
  5481  00F272  988A               	bcf	3978,4,c	;volatile
  5482                           
  5483                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  5484  00F274  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5485  00F278  90D8               	bcf	status,0,c
  5486  00F27A  3201               	rrcf	??_Lcd_Cmd,f,c
  5487  00F27C  90D8               	bcf	status,0,c
  5488  00F27E  3201               	rrcf	??_Lcd_Cmd,f,c
  5489  00F280  90D8               	bcf	status,0,c
  5490  00F282  3201               	rrcf	??_Lcd_Cmd,f,c
  5491  00F284  0E01               	movlw	1
  5492  00F286  1601               	andwf	??_Lcd_Cmd,f,c
  5493  00F288  508A               	movf	3978,w,c	;volatile
  5494  00F28A  1801               	xorwf	??_Lcd_Cmd,w,c
  5495  00F28C  0BFE               	andlw	-2
  5496  00F28E  1801               	xorwf	??_Lcd_Cmd,w,c
  5497  00F290  6E8A               	movwf	3978,c	;volatile
  5498  00F292  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5499  00F296  90D8               	bcf	status,0,c
  5500  00F298  3201               	rrcf	??_Lcd_Cmd,f,c
  5501  00F29A  90D8               	bcf	status,0,c
  5502  00F29C  3201               	rrcf	??_Lcd_Cmd,f,c
  5503  00F29E  0E01               	movlw	1
  5504  00F2A0  1601               	andwf	??_Lcd_Cmd,f,c
  5505  00F2A2  4601               	rlncf	??_Lcd_Cmd,f,c
  5506  00F2A4  508A               	movf	3978,w,c	;volatile
  5507  00F2A6  1801               	xorwf	??_Lcd_Cmd,w,c
  5508  00F2A8  0BFD               	andlw	-3
  5509  00F2AA  1801               	xorwf	??_Lcd_Cmd,w,c
  5510  00F2AC  6E8A               	movwf	3978,c	;volatile
  5511                           
  5512                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  5513  00F2AE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5514  00F2B2  90D8               	bcf	status,0,c
  5515  00F2B4  3201               	rrcf	??_Lcd_Cmd,f,c
  5516  00F2B6  0E01               	movlw	1
  5517  00F2B8  1601               	andwf	??_Lcd_Cmd,f,c
  5518  00F2BA  4601               	rlncf	??_Lcd_Cmd,f,c
  5519  00F2BC  4601               	rlncf	??_Lcd_Cmd,f,c
  5520  00F2BE  508A               	movf	3978,w,c	;volatile
  5521  00F2C0  1801               	xorwf	??_Lcd_Cmd,w,c
  5522  00F2C2  0BFB               	andlw	-5
  5523  00F2C4  1801               	xorwf	??_Lcd_Cmd,w,c
  5524  00F2C6  6E8A               	movwf	3978,c	;volatile
  5525  00F2C8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  5526  00F2CC  0E01               	movlw	1
  5527  00F2CE  1601               	andwf	??_Lcd_Cmd,f,c
  5528  00F2D0  4601               	rlncf	??_Lcd_Cmd,f,c
  5529  00F2D2  4601               	rlncf	??_Lcd_Cmd,f,c
  5530  00F2D4  4601               	rlncf	??_Lcd_Cmd,f,c
  5531  00F2D6  508A               	movf	3978,w,c	;volatile
  5532  00F2D8  1801               	xorwf	??_Lcd_Cmd,w,c
  5533  00F2DA  0BF7               	andlw	-9
  5534  00F2DC  1801               	xorwf	??_Lcd_Cmd,w,c
  5535  00F2DE  6E8A               	movwf	3978,c	;volatile
  5536                           
  5537                           ;lcd.h: 148: _delay(10);
  5538  00F2E0  0E03               	movlw	3
  5539  00F2E2                     u2337:
  5540  00F2E2  2EE8               	decfsz	wreg,f,c
  5541  00F2E4  D7FE               	goto	u2337
  5542  00F2E6  F000               	nop	
  5543                           
  5544                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  5545  00F2E8  888A               	bsf	3978,4,c	;volatile
  5546  00F2EA  0E03               	movlw	3
  5547  00F2EC                     u2347:
  5548  00F2EC  2EE8               	decfsz	wreg,f,c
  5549  00F2EE  D7FE               	goto	u2347
  5550  00F2F0  F000               	nop	
  5551  00F2F2  988A               	bcf	3978,4,c	;volatile
  5552                           
  5553                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5554  00F2F4  0E0F               	movlw	15
  5555  00F2F6  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  5556  00F2F8  0E48               	movlw	72
  5557  00F2FA                     u2357:
  5558  00F2FA  2EE8               	decfsz	wreg,f,c
  5559  00F2FC  D7FE               	goto	u2357
  5560  00F2FE  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  5561  00F300  D7FC               	goto	u2357
  5562  00F302  0012               	return		;funcret
  5563  00F304                     __end_of_Lcd_Cmd:
  5564                           	opt stack 0
  5565                           tblptru	equ	0xFF8
  5566                           tblptrh	equ	0xFF7
  5567                           tblptrl	equ	0xFF6
  5568                           tablat	equ	0xFF5
  5569                           prodh	equ	0xFF4
  5570                           prodl	equ	0xFF3
  5571                           intcon	equ	0xFF2
  5572                           postinc0	equ	0xFEE
  5573                           wreg	equ	0xFE8
  5574                           postdec1	equ	0xFE5
  5575                           fsr1l	equ	0xFE1
  5576                           indf2	equ	0xFDF
  5577                           postinc2	equ	0xFDE
  5578                           postdec2	equ	0xFDD
  5579                           fsr2h	equ	0xFDA
  5580                           fsr2l	equ	0xFD9
  5581                           status	equ	0xFD8
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           postdec1	equ	0xFE5
  5592                           fsr1l	equ	0xFE1
  5593                           indf2	equ	0xFDF
  5594                           postinc2	equ	0xFDE
  5595                           postdec2	equ	0xFDD
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600                           	psect	rparam
  5601  0000                     tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1l	equ	0xFE1
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           fsr2h	equ	0xFDA
  5616                           fsr2l	equ	0xFD9
  5617                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        30
    BSS         68
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     76      95
    BANK0           160      0      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_28(CODE[7]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_25(CODE[5]), STR_21(CODE[3]), STR_19(CODE[3]), STR_17(CODE[3]), 
		 -> STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[15]), STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_27(CODE[1]), STR_26(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), 
		 -> Convert_diasem@buffer_dia(COMRAM[20]), STR_6(CODE[21]), STR_5(CODE[20]), STR_4(CODE[18]), 
		 -> STR_3(CODE[19]), buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_ManejaMovimientos
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _ManejaMovimientos->_Lcd_Out
    _Write_RTC->_RtccWriteDate
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   31126
                                             75 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                  _ManejaMovimientos
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0   10470
                                             68 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _ManejaMovimientos                                    7     7      0   12094
                                             68 COMRAM     7     7      0
                     _Convert_diasem
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3    2453
                                             63 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    3684
                                             39 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    3342
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _ManejaMovimientos
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _V_Principal
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      5C       5       57.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4C      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BB       6        0.0%
DATA                 0      0      BB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Nov 25 19:47:20 2020

            V_Principal@cte 0045                           _i 004D                          l71 F020  
                        l72 F062                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                         l209 EA4E                         l294 FE3A  
                       l917 EB50                         l927 EAF4   ManejaMovimientos@posicion 0048  
                       _dia 005A                         _mes 005E                         wreg 000FE8  
           RtccReadDate@pDt 0001                        l2002 FBCE                        l2004 FBE4  
                      l2104 FE94                        l2040 FCEE                        l2024 FC8E  
                      l2016 FC64                        l2008 FC02                        l2120 EEDE  
                      l2050 FD36                        l2042 FD02                        l2034 FCD2  
                      l2026 FC98                        l2106 FEA0                        l2130 EF1C  
                      l2036 FCDC                        l2028 FC9E                        l2108 FEBC  
                      l2204 F618                        l2070 FDB0                        l2062 FD80  
                      l2054 FD3C                        l2126 EF08                        l2080 FDE2  
                      l2056 FD64                        l2048 FD22                        l2240 F67A  
                      l2136 EF38                        l2320 ED74                        l2090 FE10  
                      l2074 FDB4                        l2066 FD8C                        l2330 ED9C  
                      l2314 ED62                        l2092 FE18                        l2084 FDEE  
                      l2244 F686                        l2236 F66E                        l2172 EFA0  
                      l2164 EF88                        l2078 FDD8                        l2326 ED8A  
                      l2342 EDC6                        l2352 ECBC                        l2168 EF94  
                      l2328 ED94                        l2248 EBBC                        l2098 FE40  
                      l2370 ED24                        l2354 ECC2                        l2362 ECD6  
                      l2194 F5E8                        l2346 EDD6                        l2338 EDBA  
                      l2602 F746                        l2274 EC2A                        l2356 ECC8  
                      l2364 ECF2                        l2188 F5AE                        l2620 F7C6  
                      l2612 F790                        l1910 EB14                        l2366 ECFA  
                      l2358 ECCE                        l2198 F5FC                        l2630 F804  
                      l2710 FB30                        l2702 FADC                        l1912 EB1E  
                      l2480 F122                        l1922 EB44                        l1914 EB26  
                      l1930 EAC0                        l2482 F140                        l2474 F0C8  
                      l2490 F19A                        l2626 F7F4                        l2706 FB06  
                      l1932 EACA                        l2484 F15E                        l2476 F0E6  
                      l2492 F1D8                        l2716 FB60                        l1934 EAD2  
                      l2486 F17C                        l2478 F104                        l1938 EAE8  
                      l2588 F6DE                        l1894 EA80                        l1990 FB9C  
                      l2696 FA98                        l2688 FA66                        l1996 FBB6  
                      l1998 FBC4                        STR_1 FFB8                        STR_2 FFEF  
                      STR_3 FF93                        STR_4 FFA6                        STR_5 FF7F  
                      STR_6 FED7                        STR_7 FFCA                        STR_8 FFD9  
                      STR_9 FFF4                        u2000 FB38                        u2010 FB3A  
                      u1115 F1F2                        u1125 F208                        u1135 F228  
                      u1145 F432                        u1155 F448                        u2107 FA54  
                      u1165 F468                        u2117 FB6C                        u2037 F9E4  
                      u2207 F542                        u2127 FB82                        u2047 F9F4  
                      u2217 EFCA                        u2137 EA58                        u2057 FA04  
                      u2307 F094                        u2227 EFD8                        u2147 F6E4  
                      u2067 FA14                        u2317 F262                        u2237 EFE6  
                      u2157 F4A2                        u2077 FA24                        u2327 F26C  
                      u2247 EFF4                        u2167 F4AC                        u2087 FA34  
                      u1800 F798                        u2337 F2E2                        u2257 F002  
                      u2177 F522                        u2097 FA44                        u1810 F79A  
                      u2347 F2EC                        u2267 F010                        u2187 F52C  
                      u1740 F6DC                        u2357 F2FA                        u2277 F03A  
                      u2197 F536                        u1830 F7CE                        u1750 F6F6  
                      u1910 FAA0                        u2287 F052                        u1680 ED1A  
                      u1840 F7D0                        u1760 F6F8                        u1920 FAA2  
                      u2297 F07C                        u1690 ED44                        u1940 FAE4  
                      u1950 FAE6                        u1687 ED10                        u1880 FA72  
                      u1697 ED3A                        u1970 FB0E                        u1890 FA74  
                      u1980 FB10                        _anio 0058                        _main F996  
                      _hora 00AB                        fsr2h 000FDA                        fsr1l 000FE1  
                      indf2 000FDF                        fsr2l 000FD9               __CFG_T1DIG$ON 000000  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
             __CFG_IESO$OFF 000000            RtccReadDate@rTD0 000B            RtccReadDate@rTD1 0003  
           __end_of_Lcd_Cmd F304             __end_of_Lcd_Out ED4C                ___param_bank 000010  
           RtccReadTime@pTm 0001                  _Lcd_Chr_CP F424               ??_V_Principal 0045  
             __CFG_PLLDIV$1 000000                       ?_main 0001             __end_of___awdiv EDE2  
                     STR_10 FF40                       STR_11 FFF4                       STR_20 FF55  
                     STR_12 FEEC                       STR_21 FFF4                       STR_13 FFF4  
                     STR_14 FF16                       STR_22 FF01                       STR_23 FEEB  
                     STR_15 FFF4                       STR_24 FEEB                       STR_16 FF6A  
                     STR_17 FFF4                       STR_25 FFD4                       STR_26 FEEB  
                     STR_18 FF2B                       STR_27 FEEB                       STR_19 FFF4  
                     STR_28 FFE8             ___awdiv@divisor 0003             __end_of___lwdiv EB5A  
           __end_of___lwmod EAFE             ___awdiv@counter 0005                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94              __CFG_FCMEN$OFF 000000  
                     _Sw_Up 0084             __end_of_dpowers FED7                       _mes_d 00B6  
                     _mes_u 00B7             __end_of_isdigit EA8A                       tablat 000FF5  
                _CuentamSeg 007E  __size_of_ManejaMovimientos 017A                       status 000FD8  
           __end_of_sprintf FECC            __end_of_Lcd_Init F0C6     __CFG_DSWDTOSC$INTOSCREF 000000  
           __initialization EB5A                __end_of_main FB92            RtccReadTime@rTD0 000B  
          RtccReadTime@rTD1 0003            __end_of_Read_RTC F424                      ??_main 004C  
             __activetblptr 000002         __end_of_V_Principal EEA0            __end_of_RtccWrOn EA32  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADRESH 000FC4  
                    _EECON2 000FA7                      _ANCON0 000F48                      _ANCON1 000F49  
          ___awdiv@dividend 0001              __CFG_WDTEN$OFF 000000             _lee_temperatura EA48  
                 ??_Lcd_Cmd 0001            RtccWriteDate@pDt 0001                      _RTCCFG 000F3F  
                 ??_Lcd_Out 0043              __CFG_WPCFG$OFF 000000                      _Flag_1 007F  
            __CFG_WPDIS$OFF 000000                      _Grados 00A5              __CFG_XINST$OFF 000000  
               ?_Lcd_Chr_CP 0001                      ___wmul EA8A                   ??___awdiv 0005  
            __CFG_STVREN$ON 000000                      _diasem 005C                      _anio_d 00AF  
                    _anio_u 00B0            ??_Convert_diasem 002A                   ??___lwdiv 0005  
                 ??___lwmod 000C                      _hora_d 00B4                      _hora_u 00B5  
                    clear_0 EB60                      clear_1 EB6C            ___awdiv@quotient 0007  
                    _minuto 00AD       __end_of_RtccWriteDate F692       __end_of_RtccWriteTime EFAC  
          RtccWriteTime@pTm 0001                __pdataCOMRAM 0058                   ??_isdigit 0001  
              __mediumconst FECC                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0017                  __accesstop 0060  
   __end_of__initialization EBB2          __size_of_Write_RTC 018A               ___rparam_used 000001  
            __pcstackCOMRAM 0001                __pidataBANK0 EA32                 _V_Principal EDE2  
           __CFG_DSWDTPS$G2 000000             __CFG_OSC$INTOSC 000000     __end_of_lee_temperatura EA68  
                 ?_Lcd_Init 0001                sprintf@width 0025         __size_of_Lcd_Chr_CP 0128  
                __pbssBANK0 0060                   ?_Read_RTC 0001                  _dia_semana 00B1  
 RtccWriteTime@tempHourWDay 000A                   ?_RtccWrOn 0001                     ?___wmul 0001  
             ?_RtccReadDate 0001               ?_RtccReadTime 0001           __end_of_Write_RTC F996  
                ??_Lcd_Init 0004                     _RTCVALH 000F99                     _RTCVALL 000F98  
                ??_Read_RTC 0013                     _Lcd_Cmd F1E4                     _Lcd_Out ECB8  
                   __Hparam 0000                     __Lparam 0000                     _Sw_Left 0082  
                   _Sw_Down 0081                  ??_RtccWrOn 0001              ??_RtccReadDate 0003  
            ??_RtccReadTime 0003                     ___awdiv ED4C             __size_of___wmul 0028  
                   ___lwdiv EAFE                     ___lwmod EAB2                 _RtccTimeVal 0078  
                   __pcinit EB5A                     _fecha_d 00B2                     _fecha_u 00B3  
                   __ramtop 0F00                     __ptext0 F996                     __ptext1 EDE2  
                   __ptext2 EA48                     __ptext3 F304                     __ptext4 EBBC  
                   __ptext5 EC2A                     __ptext6 F692                     __ptext7 F80C  
                   __ptext8 ED4C                     __ptext9 EEA0                     _buffer1 0085  
                 _T1CONbits 000FCD                     _lectura 004F                     _dpowers FECD  
                   _isdigit EA68                     _segundo 007C            ?_lee_temperatura 0001  
                   _sprintf FB92        end_of_initialization EBB2               __Lmediumconst FECC  
              ??_Lcd_Chr_CP 0001                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTAbits 000F80  
                 _PORTCbits 000F82            __CFG_DSBOREN$OFF 000000            __CFG_CPUDIV$OSC1 000000  
                 _TRISBbits 000F93          __end_of_Lcd_Chr_CP F54C            __CFG_IOL1WAY$OFF 000000  
 RtccWriteDate@tempDayMonth 000A         __CFG_MSSP7B_EN$MSK7 000000                ?_V_Principal 0001  
            __end_of___wmul EAB2               __pidataCOMRAM EA18   RtccWriteDate@tempHourWDay 000C  
          __CFG_DSWDTEN$OFF 000000         start_initialization EB5A        __end_of_RtccReadDate ECB8  
             Lcd_Out@buffer 0041        __end_of_RtccReadTime EC2A           __size_of_Lcd_Init 011A  
      RtccWriteTime@wasAlrm 0006        RtccWriteTime@wasWrEn 0007      __size_of_RtccWriteDate 0146  
           RtccWriteDate@di 0003      __size_of_RtccWriteTime 010C           __size_of_Read_RTC 0120  
                 _Sw_Center 0080                   _Temp_prog 00A8                    ??___wmul 0005  
               __pdataBANK0 0099           __size_of_RtccWrOn 0012             RtccWriteTime@di 0003  
          __CFG_LPT1OSC$OFF 000000           Convert_diasem@dia 0028                 _ALRMCFGbits 000F91  
               __pbssCOMRAM 004D     __size_of_Convert_diasem 011E                   _Write_RTC F80C  
              _isdigit$2078 0002                    ?_Lcd_Cmd 0001                 sprintf@flag 001B  
                  ?_Lcd_Out 0040                 sprintf@prec 001E                   __pnvBANK0 00AF  
          ___lwdiv@dividend 0001               __pmediumconst FECC                    ?___awdiv 0001  
                  ?___lwdiv 0001                    ?___lwmod 0008     RtccWriteTime@tempMinSec 0008  
             _RtccWriteDate F54C               _RtccWriteTime EEA0                    ?_isdigit 0001  
      __CFG_RTCOSC$T1OSCREF 000000    ManejaMovimientos@anio_tr 0046    Convert_diasem@buffer_dia 002C  
                ?_Write_RTC 0001            ___lwdiv@quotient 0005                    ?_sprintf 000D  
          _RtccAlrmTimeDate 0060              ___wmul@product 0005                    _LATAbits 000F89  
                  _LATBbits 000F8A                    _PIE3bits 000FA3                   _segundo_d 00BA  
                 _segundo_u 00BB                    Lcd_Out@x 0040            __CFG_WDTPS$32768 000000  
                  Lcd_Out@y 0043          RtccWriteDate@wasOn 0005          _Rtcc_read_TimeDate 0070  
              Lcd_Init@data 0005              ?_RtccWriteDate 0001                  _ADCON0bits 000FC2  
         ___wmul@multiplier 0001        __size_of_V_Principal 00BE              ?_RtccWriteTime 0001  
     __size_of_RtccReadDate 008E       __size_of_RtccReadTime 006E                    _Lcd_Init EFAC  
                 copy_data0 EB86                   copy_data1 EBA6                    _Read_RTC F304  
  __size_of_lee_temperatura 0020            __size_of_Lcd_Cmd 0120            __size_of_Lcd_Out 0094  
                  __Hrparam 0000                    _RtccDate 0050                    __Lrparam 0000  
                  _RtccTime 0054                    _RtccWrOn EA20                    _Sw_Right 0083  
              _RtccReadDate EC2A            __size_of___awdiv 0096                _RtccReadTime EBBC  
          __size_of___lwdiv 005C            __size_of___lwmod 004C              _posicionesLeft 0099  
              _RtccTimeDate 0068                  sprintf@len 0023                  sprintf@val 001C  
            _Convert_diasem F0C6            __size_of_isdigit 0022              Lcd_Chr_CP@data 0003  
           ___lwdiv@divisor 0003                 ??_Write_RTC 000E             ___lwdiv@counter 0007  
                  __ptext10 F54C                    __ptext11 EA20                    __ptext20 EFAC  
                  __ptext12 ECB8                    __ptext21 F1E4                    __ptext13 F424  
                  __ptext14 F0C6                    __ptext15 FB92                    __ptext16 EA68  
                  __ptext17 EA8A                    __ptext18 EAB2                    __ptext19 EAFE  
          __size_of_sprintf 033A     ManejaMovimientos@dia_tr 004B                 Lcd_Cmd@data 0003  
             __size_of_main 01FC     ManejaMovimientos@mes_tr 0047                    _minuto_d 00B8  
                  _minuto_u 00B9             ??_RtccWriteDate 0004             ??_RtccWriteTime 0004  
    __end_of_Convert_diasem F1E4                 Lcd_Out@data 0044                 _OSCTUNEbits 000F9B  
                _INTCONbits 000FF2          RtccWriteTime@wasOn 0005                    isdigit@c 0003  
                 sprintf@ap 001F                   sprintf@cp 0021                   sprintf@sp 000D  
          ___lwmod@dividend 0008           _ManejaMovimientos F692                  _OSCCONbits 000FD3  
        ?_ManejaMovimientos 0001       RtccWriteDate@tempYear 0007           ??_lee_temperatura 0001  
       ??_ManejaMovimientos 0045                  _RTCCFGbits 000F3F                    sprintf@c 0027  
                  sprintf@f 000F             ?_Convert_diasem 0028             ___lwmod@divisor 000A  
           ___lwmod@counter 000C        RtccWriteDate@wasAlrm 0006        RtccWriteDate@wasWrEn 0009  
ManejaMovimientos@diasem_tr 004A   __end_of_ManejaMovimientos F80C  
