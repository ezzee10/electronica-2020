

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Nov 26 00:11:39 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F26J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  00E62C                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for _anio
    45  00E62C  0014               	dw	20
    46                           
    47                           ;initializer for _dia
    48  00E62E  0006               	dw	6
    49                           
    50                           ;initializer for _diasem
    51  00E630  0002               	dw	2
    52                           
    53                           ;initializer for _mes
    54  00E632  000B               	dw	11
    55                           
    56                           	psect	idataBANK0
    57  00E688                     __pidataBANK0:
    58                           	opt stack 0
    59                           
    60                           ;initializer for _posicionesLeft
    61  00E688  0002               	dw	2
    62  00E68A  0000               	dw	0
    63  00E68C  0003               	dw	3
    64  00E68E  0000               	dw	0
    65  00E690  0003               	dw	3
    66  00E692  0003               	dw	3
    67  00E694  0003               	dw	3
    68  00E696  0006               	dw	6
    69  00E698  0004               	dw	4
    70  00E69A  0000               	dw	0
    71  00E69C  0004               	dw	4
    72  00E69E  0003               	dw	3
    73                           
    74                           ;initializer for _Grados
    75  00E6A0  00                 	db	0
    76  00E6A1  A0                 	db	160
    77  00E6A2  41                 	db	65
    78                           
    79                           ;initializer for _Temp_prog
    80  00E6A3  00                 	db	0
    81  00E6A4  B4                 	db	180
    82  00E6A5  41                 	db	65
    83                           
    84                           ;initializer for _hora
    85  00E6A6  0012               	dw	18
    86                           
    87                           ;initializer for _minuto
    88  00E6A8  0037               	dw	55
    89                           
    90                           	psect	mediumconst
    91  00FECC                     __pmediumconst:
    92                           	opt stack 0
    93  00FECC  00                 	db	0
    94  00FECD                     _dpowers:
    95                           	opt stack 0
    96  00FECD  0001               	dw	1
    97  00FECF  000A               	dw	10
    98  00FED1  0064               	dw	100
    99  00FED3  03E8               	dw	1000
   100  00FED5  2710               	dw	10000
   101  00FED7                     __end_of_dpowers:
   102                           	opt stack 0
   103  00FED7                     STR_6:
   104  00FED7  20                 	db	32
   105  00FED8  20                 	db	32
   106  00FED9  20                 	db	32
   107  00FEDA  20                 	db	32
   108  00FEDB  20                 	db	32
   109  00FEDC  20                 	db	32
   110  00FEDD  20                 	db	32
   111  00FEDE  20                 	db	32
   112  00FEDF  20                 	db	32
   113  00FEE0  20                 	db	32
   114  00FEE1  20                 	db	32
   115  00FEE2  20                 	db	32
   116  00FEE3  20                 	db	32
   117  00FEE4  20                 	db	32
   118  00FEE5  20                 	db	32
   119  00FEE6  20                 	db	32
   120  00FEE7  20                 	db	32
   121  00FEE8  20                 	db	32
   122  00FEE9  20                 	db	32
   123  00FEEA  20                 	db	32
   124  00FEEB  00                 	db	0
   125  00FEEC                     STR_12:
   126  00FEEC  4C                 	db	76	;'L'
   127  00FEED  75                 	db	117	;'u'
   128  00FEEE  6E                 	db	110	;'n'
   129  00FEEF  65                 	db	101	;'e'
   130  00FEF0  73                 	db	115	;'s'
   131  00FEF1  20                 	db	32
   132  00FEF2  20                 	db	32
   133  00FEF3  20                 	db	32
   134  00FEF4  20                 	db	32
   135  00FEF5  20                 	db	32
   136  00FEF6  20                 	db	32
   137  00FEF7  20                 	db	32
   138  00FEF8  20                 	db	32
   139  00FEF9  20                 	db	32
   140  00FEFA  20                 	db	32
   141  00FEFB  20                 	db	32
   142  00FEFC  20                 	db	32
   143  00FEFD  20                 	db	32
   144  00FEFE  20                 	db	32
   145  00FEFF  20                 	db	32
   146  00FF00  00                 	db	0
   147  00FF01                     STR_22:
   148  00FF01  53                 	db	83	;'S'
   149  00FF02  61                 	db	97	;'a'
   150  00FF03  62                 	db	98	;'b'
   151  00FF04  61                 	db	97	;'a'
   152  00FF05  64                 	db	100	;'d'
   153  00FF06  6F                 	db	111	;'o'
   154  00FF07  20                 	db	32
   155  00FF08  20                 	db	32
   156  00FF09  20                 	db	32
   157  00FF0A  20                 	db	32
   158  00FF0B  20                 	db	32
   159  00FF0C  20                 	db	32
   160  00FF0D  20                 	db	32
   161  00FF0E  20                 	db	32
   162  00FF0F  20                 	db	32
   163  00FF10  20                 	db	32
   164  00FF11  20                 	db	32
   165  00FF12  20                 	db	32
   166  00FF13  20                 	db	32
   167  00FF14  20                 	db	32
   168  00FF15  00                 	db	0
   169  00FF16                     STR_14:
   170  00FF16  4D                 	db	77	;'M'
   171  00FF17  61                 	db	97	;'a'
   172  00FF18  72                 	db	114	;'r'
   173  00FF19  74                 	db	116	;'t'
   174  00FF1A  65                 	db	101	;'e'
   175  00FF1B  73                 	db	115	;'s'
   176  00FF1C  20                 	db	32
   177  00FF1D  20                 	db	32
   178  00FF1E  20                 	db	32
   179  00FF1F  20                 	db	32
   180  00FF20  20                 	db	32
   181  00FF21  20                 	db	32
   182  00FF22  20                 	db	32
   183  00FF23  20                 	db	32
   184  00FF24  20                 	db	32
   185  00FF25  20                 	db	32
   186  00FF26  20                 	db	32
   187  00FF27  20                 	db	32
   188  00FF28  20                 	db	32
   189  00FF29  20                 	db	32
   190  00FF2A  00                 	db	0
   191  00FF2B                     STR_18:
   192  00FF2B  4A                 	db	74	;'J'
   193  00FF2C  75                 	db	117	;'u'
   194  00FF2D  65                 	db	101	;'e'
   195  00FF2E  76                 	db	118	;'v'
   196  00FF2F  65                 	db	101	;'e'
   197  00FF30  73                 	db	115	;'s'
   198  00FF31  20                 	db	32
   199  00FF32  20                 	db	32
   200  00FF33  20                 	db	32
   201  00FF34  20                 	db	32
   202  00FF35  20                 	db	32
   203  00FF36  20                 	db	32
   204  00FF37  20                 	db	32
   205  00FF38  20                 	db	32
   206  00FF39  20                 	db	32
   207  00FF3A  20                 	db	32
   208  00FF3B  20                 	db	32
   209  00FF3C  20                 	db	32
   210  00FF3D  20                 	db	32
   211  00FF3E  20                 	db	32
   212  00FF3F  00                 	db	0
   213  00FF40                     STR_10:
   214  00FF40  44                 	db	68	;'D'
   215  00FF41  6F                 	db	111	;'o'
   216  00FF42  6D                 	db	109	;'m'
   217  00FF43  69                 	db	105	;'i'
   218  00FF44  6E                 	db	110	;'n'
   219  00FF45  67                 	db	103	;'g'
   220  00FF46  6F                 	db	111	;'o'
   221  00FF47  20                 	db	32
   222  00FF48  20                 	db	32
   223  00FF49  20                 	db	32
   224  00FF4A  20                 	db	32
   225  00FF4B  20                 	db	32
   226  00FF4C  20                 	db	32
   227  00FF4D  20                 	db	32
   228  00FF4E  20                 	db	32
   229  00FF4F  20                 	db	32
   230  00FF50  20                 	db	32
   231  00FF51  20                 	db	32
   232  00FF52  20                 	db	32
   233  00FF53  20                 	db	32
   234  00FF54  00                 	db	0
   235  00FF55                     STR_20:
   236  00FF55  56                 	db	86	;'V'
   237  00FF56  69                 	db	105	;'i'
   238  00FF57  65                 	db	101	;'e'
   239  00FF58  72                 	db	114	;'r'
   240  00FF59  6E                 	db	110	;'n'
   241  00FF5A  65                 	db	101	;'e'
   242  00FF5B  73                 	db	115	;'s'
   243  00FF5C  20                 	db	32
   244  00FF5D  20                 	db	32
   245  00FF5E  20                 	db	32
   246  00FF5F  20                 	db	32
   247  00FF60  20                 	db	32
   248  00FF61  20                 	db	32
   249  00FF62  20                 	db	32
   250  00FF63  20                 	db	32
   251  00FF64  20                 	db	32
   252  00FF65  20                 	db	32
   253  00FF66  20                 	db	32
   254  00FF67  20                 	db	32
   255  00FF68  20                 	db	32
   256  00FF69  00                 	db	0
   257  00FF6A                     STR_16:
   258  00FF6A  4D                 	db	77	;'M'
   259  00FF6B  69                 	db	105	;'i'
   260  00FF6C  65                 	db	101	;'e'
   261  00FF6D  72                 	db	114	;'r'
   262  00FF6E  63                 	db	99	;'c'
   263  00FF6F  6F                 	db	111	;'o'
   264  00FF70  6C                 	db	108	;'l'
   265  00FF71  65                 	db	101	;'e'
   266  00FF72  73                 	db	115	;'s'
   267  00FF73  20                 	db	32
   268  00FF74  20                 	db	32
   269  00FF75  20                 	db	32
   270  00FF76  20                 	db	32
   271  00FF77  20                 	db	32
   272  00FF78  20                 	db	32
   273  00FF79  20                 	db	32
   274  00FF7A  20                 	db	32
   275  00FF7B  20                 	db	32
   276  00FF7C  20                 	db	32
   277  00FF7D  20                 	db	32
   278  00FF7E  00                 	db	0
   279  00FF7F                     STR_5:
   280  00FF7F  43                 	db	67	;'C'
   281  00FF80  45                 	db	69	;'E'
   282  00FF81  4E                 	db	78	;'N'
   283  00FF82  54                 	db	84	;'T'
   284  00FF83  45                 	db	69	;'E'
   285  00FF84  52                 	db	82	;'R'
   286  00FF85  20                 	db	32
   287  00FF86  20                 	db	32
   288  00FF87  20                 	db	32
   289  00FF88  20                 	db	32
   290  00FF89  20                 	db	32
   291  00FF8A  20                 	db	32
   292  00FF8B  20                 	db	32
   293  00FF8C  20                 	db	32
   294  00FF8D  20                 	db	32
   295  00FF8E  20                 	db	32
   296  00FF8F  20                 	db	32
   297  00FF90  20                 	db	32
   298  00FF91  20                 	db	32
   299  00FF92  00                 	db	0
   300  00FF93                     STR_3:
   301  00FF93  52                 	db	82	;'R'
   302  00FF94  49                 	db	73	;'I'
   303  00FF95  47                 	db	71	;'G'
   304  00FF96  48                 	db	72	;'H'
   305  00FF97  54                 	db	84	;'T'
   306  00FF98  20                 	db	32
   307  00FF99  20                 	db	32
   308  00FF9A  20                 	db	32
   309  00FF9B  20                 	db	32
   310  00FF9C  20                 	db	32
   311  00FF9D  20                 	db	32
   312  00FF9E  20                 	db	32
   313  00FF9F  20                 	db	32
   314  00FFA0  20                 	db	32
   315  00FFA1  20                 	db	32
   316  00FFA2  20                 	db	32
   317  00FFA3  20                 	db	32
   318  00FFA4  20                 	db	32
   319  00FFA5  00                 	db	0
   320  00FFA6                     STR_4:
   321  00FFA6  55                 	db	85	;'U'
   322  00FFA7  50                 	db	80	;'P'
   323  00FFA8  20                 	db	32
   324  00FFA9  20                 	db	32
   325  00FFAA  20                 	db	32
   326  00FFAB  20                 	db	32
   327  00FFAC  20                 	db	32
   328  00FFAD  20                 	db	32
   329  00FFAE  20                 	db	32
   330  00FFAF  20                 	db	32
   331  00FFB0  20                 	db	32
   332  00FFB1  20                 	db	32
   333  00FFB2  20                 	db	32
   334  00FFB3  20                 	db	32
   335  00FFB4  20                 	db	32
   336  00FFB5  20                 	db	32
   337  00FFB6  20                 	db	32
   338  00FFB7  00                 	db	0
   339  00FFB8                     STR_1:
   340  00FFB8  50                 	db	80	;'P'
   341  00FFB9  72                 	db	114	;'r'
   342  00FFBA  6F                 	db	111	;'o'
   343  00FFBB  67                 	db	103	;'g'
   344  00FFBC  72                 	db	114	;'r'
   345  00FFBD  61                 	db	97	;'a'
   346  00FFBE  6D                 	db	109	;'m'
   347  00FFBF  20                 	db	32
   348  00FFC0  64                 	db	100	;'d'
   349  00FFC1  65                 	db	101	;'e'
   350  00FFC2  6C                 	db	108	;'l'
   351  00FFC3  20                 	db	32
   352  00FFC4  72                 	db	114	;'r'
   353  00FFC5  65                 	db	101	;'e'
   354  00FFC6  6C                 	db	108	;'l'
   355  00FFC7  6F                 	db	111	;'o'
   356  00FFC8  6A                 	db	106	;'j'
   357  00FFC9  00                 	db	0
   358  00FFCA                     STR_7:
   359  00FFCA  25                 	db	37
   360  00FFCB  30                 	db	48	;'0'
   361  00FFCC  32                 	db	50	;'2'
   362  00FFCD  75                 	db	117	;'u'
   363  00FFCE  2F                 	db	47
   364  00FFCF  25                 	db	37
   365  00FFD0  30                 	db	48	;'0'
   366  00FFD1  32                 	db	50	;'2'
   367  00FFD2  75                 	db	117	;'u'
   368  00FFD3  2F                 	db	47
   369  00FFD4  25                 	db	37
   370  00FFD5  30                 	db	48	;'0'
   371  00FFD6  32                 	db	50	;'2'
   372  00FFD7  75                 	db	117	;'u'
   373  00FFD8  00                 	db	0
   374  00FFD9                     STR_8:
   375  00FFD9  25                 	db	37
   376  00FFDA  30                 	db	48	;'0'
   377  00FFDB  32                 	db	50	;'2'
   378  00FFDC  75                 	db	117	;'u'
   379  00FFDD  3A                 	db	58	;':'
   380  00FFDE  25                 	db	37
   381  00FFDF  30                 	db	48	;'0'
   382  00FFE0  32                 	db	50	;'2'
   383  00FFE1  75                 	db	117	;'u'
   384  00FFE2  3A                 	db	58	;':'
   385  00FFE3  25                 	db	37
   386  00FFE4  30                 	db	48	;'0'
   387  00FFE5  32                 	db	50	;'2'
   388  00FFE6  75                 	db	117	;'u'
   389  00FFE7  00                 	db	0
   390  00FFE8                     STR_48:
   391  00FFE8  28                 	db	40
   392  00FFE9  6E                 	db	110	;'n'
   393  00FFEA  75                 	db	117	;'u'
   394  00FFEB  6C                 	db	108	;'l'
   395  00FFEC  6C                 	db	108	;'l'
   396  00FFED  29                 	db	41
   397  00FFEE  00                 	db	0
   398  00FFEF                     STR_2:
   399  00FFEF  25                 	db	37
   400  00FFF0  30                 	db	48	;'0'
   401  00FFF1  33                 	db	51	;'3'
   402  00FFF2  75                 	db	117	;'u'
   403  00FFF3  00                 	db	0
   404  00FFF4                     STR_9:
   405  00FFF4  25                 	db	37
   406  00FFF5  73                 	db	115	;'s'
   407  00FFF6  00                 	db	0
   408  0000                     
   409                           ; #config settings
   410  00FFF7  00                 	db	0	; dummy byte at the end
   411  0000                     
   412                           	psect	nvBANK0
   413  0000BE                     __pnvBANK0:
   414                           	opt stack 0
   415  0000BE                     _anio_d:
   416                           	opt stack 0
   417  0000BE                     	ds	1
   418  0000BF                     _anio_u:
   419                           	opt stack 0
   420  0000BF                     	ds	1
   421  0000C0                     _dia_semana:
   422                           	opt stack 0
   423  0000C0                     	ds	1
   424  0000C1                     _fecha_d:
   425                           	opt stack 0
   426  0000C1                     	ds	1
   427  0000C2                     _fecha_u:
   428                           	opt stack 0
   429  0000C2                     	ds	1
   430  0000C3                     _hora_d:
   431                           	opt stack 0
   432  0000C3                     	ds	1
   433  0000C4                     _hora_u:
   434                           	opt stack 0
   435  0000C4                     	ds	1
   436  0000C5                     _mes_d:
   437                           	opt stack 0
   438  0000C5                     	ds	1
   439  0000C6                     _mes_u:
   440                           	opt stack 0
   441  0000C6                     	ds	1
   442  0000C7                     _minuto_d:
   443                           	opt stack 0
   444  0000C7                     	ds	1
   445  0000C8                     _minuto_u:
   446                           	opt stack 0
   447  0000C8                     	ds	1
   448  0000C9                     _segundo_d:
   449                           	opt stack 0
   450  0000C9                     	ds	1
   451  0000CA                     _segundo_u:
   452                           	opt stack 0
   453  0000CA                     	ds	1
   454  0000                     _ANCON0	set	3912
   455  0000                     _ANCON1	set	3913
   456  0000                     _RTCCFG	set	3903
   457  0000                     _RTCCFGbits	set	3903
   458  0000                     _ADCON0	set	4034
   459  0000                     _ADCON0bits	set	4034
   460  0000                     _ADCON1	set	4033
   461  0000                     _ADRESH	set	4036
   462  0000                     _ALRMCFGbits	set	3985
   463  0000                     _EECON2	set	4007
   464  0000                     _INTCONbits	set	4082
   465  0000                     _LATAbits	set	3977
   466  0000                     _LATBbits	set	3978
   467  0000                     _OSCCONbits	set	4051
   468  0000                     _OSCTUNEbits	set	3995
   469  0000                     _PIE3bits	set	4003
   470  0000                     _PORTAbits	set	3968
   471  0000                     _PORTCbits	set	3970
   472  0000                     _RTCVALH	set	3993
   473  0000                     _RTCVALL	set	3992
   474  0000                     _T1CONbits	set	4045
   475  0000                     _TRISA	set	3986
   476  0000                     _TRISB	set	3987
   477  0000                     _TRISBbits	set	3987
   478  0000                     _TRISC	set	3988
   479                           
   480                           	psect	cinit
   481  00E77A                     __pcinit:
   482                           	opt stack 0
   483  00E77A                     start_initialization:
   484                           	opt stack 0
   485  00E77A                     __initialization:
   486                           	opt stack 0
   487                           
   488                           ; Clear objects allocated to BANK0 (60 bytes)
   489  00E77A  EE00  F060         	lfsr	0,__pbssBANK0
   490  00E77E  0E3C               	movlw	60
   491  00E780                     clear_0:
   492  00E780  6AEE               	clrf	postinc0,c
   493  00E782  06E8               	decf	wreg,f,c
   494  00E784  E1FD               	bnz	clear_0
   495                           
   496                           ; Clear objects allocated to COMRAM (8 bytes)
   497  00E786  EE00  F050         	lfsr	0,__pbssCOMRAM
   498  00E78A  0E08               	movlw	8
   499  00E78C                     clear_1:
   500  00E78C  6AEE               	clrf	postinc0,c
   501  00E78E  06E8               	decf	wreg,f,c
   502  00E790  E1FD               	bnz	clear_1
   503                           
   504                           ; Initialize objects allocated to BANK0 (34 bytes)
   505                           ; load TBLPTR registers with __pidataBANK0
   506  00E792  0E88               	movlw	low __pidataBANK0
   507  00E794  6EF6               	movwf	tblptrl,c
   508  00E796  0EE6               	movlw	high __pidataBANK0
   509  00E798  6EF7               	movwf	tblptrh,c
   510  00E79A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   511  00E79C  6EF8               	movwf	tblptru,c
   512  00E79E  EE00  F09C         	lfsr	0,__pdataBANK0
   513  00E7A2  EE10 F022          	lfsr	1,34
   514  00E7A6                     copy_data0:
   515  00E7A6  0009               	tblrd		*+
   516  00E7A8  CFF5 FFEE          	movff	tablat,postinc0
   517  00E7AC  50E5               	movf	postdec1,w,c
   518  00E7AE  50E1               	movf	fsr1l,w,c
   519  00E7B0  E1FA               	bnz	copy_data0
   520                           
   521                           ; Initialize objects allocated to COMRAM (8 bytes)
   522                           ; load TBLPTR registers with __pidataCOMRAM
   523  00E7B2  0E2C               	movlw	low __pidataCOMRAM
   524  00E7B4  6EF6               	movwf	tblptrl,c
   525  00E7B6  0EE6               	movlw	high __pidataCOMRAM
   526  00E7B8  6EF7               	movwf	tblptrh,c
   527  00E7BA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   528  00E7BC  6EF8               	movwf	tblptru,c
   529  00E7BE  EE00  F058         	lfsr	0,__pdataCOMRAM
   530  00E7C2  EE10 F008          	lfsr	1,8
   531  00E7C6                     copy_data1:
   532  00E7C6  0009               	tblrd		*+
   533  00E7C8  CFF5 FFEE          	movff	tablat,postinc0
   534  00E7CC  50E5               	movf	postdec1,w,c
   535  00E7CE  50E1               	movf	fsr1l,w,c
   536  00E7D0  E1FA               	bnz	copy_data1
   537  00E7D2                     end_of_initialization:
   538                           	opt stack 0
   539  00E7D2                     __end_of__initialization:
   540                           	opt stack 0
   541  00E7D2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   542  00E7D4  6EF8               	movwf	tblptru,c
   543  00E7D6  0100               	movlb	0
   544  00E7D8  EF1E  F07A         	goto	_main	;jump to C main() function
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	bssCOMRAM
   555  000050                     __pbssCOMRAM:
   556                           	opt stack 0
   557  000050                     _RtccDate:
   558                           	opt stack 0
   559  000050                     	ds	4
   560  000054                     _RtccTime:
   561                           	opt stack 0
   562  000054                     	ds	4
   563                           tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           tblptrl	equ	0xFF6
   566                           tablat	equ	0xFF5
   567                           postinc0	equ	0xFEE
   568                           wreg	equ	0xFE8
   569                           postdec1	equ	0xFE5
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	dataCOMRAM
   573  000058                     __pdataCOMRAM:
   574                           	opt stack 0
   575  000058                     _anio:
   576                           	opt stack 0
   577  000058                     	ds	2
   578  00005A                     _dia:
   579                           	opt stack 0
   580  00005A                     	ds	2
   581  00005C                     _diasem:
   582                           	opt stack 0
   583  00005C                     	ds	2
   584  00005E                     _mes:
   585                           	opt stack 0
   586  00005E                     	ds	2
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           postinc0	equ	0xFEE
   592                           wreg	equ	0xFE8
   593                           postdec1	equ	0xFE5
   594                           fsr1l	equ	0xFE1
   595                           
   596                           	psect	bssBANK0
   597  000060                     __pbssBANK0:
   598                           	opt stack 0
   599  000060                     _RtccAlrmTimeDate:
   600                           	opt stack 0
   601  000060                     	ds	8
   602  000068                     _RtccTimeDate:
   603                           	opt stack 0
   604  000068                     	ds	8
   605  000070                     _Rtcc_read_TimeDate:
   606                           	opt stack 0
   607  000070                     	ds	8
   608  000078                     _RtccTimeVal:
   609                           	opt stack 0
   610  000078                     	ds	4
   611  00007C                     _i:
   612                           	opt stack 0
   613  00007C                     	ds	2
   614  00007E                     _segundo:
   615                           	opt stack 0
   616  00007E                     	ds	2
   617  000080                     _CuentamSeg:
   618                           	opt stack 0
   619  000080                     	ds	1
   620  000081                     _Flag_1:
   621                           	opt stack 0
   622  000081                     	ds	1
   623  000082                     _Sw_Center:
   624                           	opt stack 0
   625  000082                     	ds	1
   626  000083                     _Sw_Down:
   627                           	opt stack 0
   628  000083                     	ds	1
   629  000084                     _Sw_Left:
   630                           	opt stack 0
   631  000084                     	ds	1
   632  000085                     _Sw_Right:
   633                           	opt stack 0
   634  000085                     	ds	1
   635  000086                     _Sw_Up:
   636                           	opt stack 0
   637  000086                     	ds	1
   638  000087                     _lectura:
   639                           	opt stack 0
   640  000087                     	ds	1
   641  000088                     _buffer1:
   642                           	opt stack 0
   643  000088                     	ds	20
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	dataBANK0
   654  00009C                     __pdataBANK0:
   655                           	opt stack 0
   656  00009C                     _posicionesLeft:
   657                           	opt stack 0
   658  00009C                     	ds	24
   659  0000B4                     _Grados:
   660                           	opt stack 0
   661  0000B4                     	ds	3
   662  0000B7                     _Temp_prog:
   663                           	opt stack 0
   664  0000B7                     	ds	3
   665  0000BA                     _hora:
   666                           	opt stack 0
   667  0000BA                     	ds	2
   668  0000BC                     _minuto:
   669                           	opt stack 0
   670  0000BC                     	ds	2
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	cstackCOMRAM
   681  000001                     __pcstackCOMRAM:
   682                           	opt stack 0
   683  000001                     ??_Lcd_Cmd:
   684  000001                     ??_Lcd_Chr_CP:
   685  000001                     ??_lee_temperatura:
   686  000001                     ??_isdigit:
   687  000001                     ?___wmul:
   688                           	opt stack 0
   689  000001                     ?___awdiv:
   690                           	opt stack 0
   691  000001                     ?___lwdiv:
   692                           	opt stack 0
   693  000001                     RtccReadDate@pDt:
   694                           	opt stack 0
   695  000001                     RtccReadTime@pTm:
   696                           	opt stack 0
   697  000001                     RtccWriteDate@pDt:
   698                           	opt stack 0
   699  000001                     RtccWriteTime@pTm:
   700                           	opt stack 0
   701  000001                     ___wmul@multiplier:
   702                           	opt stack 0
   703  000001                     ___awdiv@dividend:
   704                           	opt stack 0
   705  000001                     ___lwdiv@dividend:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x0
   709  000001                     	ds	1
   710  000002                     _isdigit$2097:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x1
   714  000002                     	ds	1
   715  000003                     Lcd_Chr_CP@data:
   716                           	opt stack 0
   717  000003                     Lcd_Cmd@data:
   718                           	opt stack 0
   719  000003                     RtccWriteDate@di:
   720                           	opt stack 0
   721  000003                     RtccWriteTime@di:
   722                           	opt stack 0
   723  000003                     isdigit@c:
   724                           	opt stack 0
   725  000003                     ___wmul@multiplicand:
   726                           	opt stack 0
   727  000003                     ___awdiv@divisor:
   728                           	opt stack 0
   729  000003                     ___lwdiv@divisor:
   730                           	opt stack 0
   731  000003                     RtccReadDate@rTD1:
   732                           	opt stack 0
   733  000003                     RtccReadTime@rTD1:
   734                           	opt stack 0
   735                           
   736                           ; 8 bytes @ 0x2
   737  000003                     	ds	1
   738  000004                     ??_Lcd_Init:
   739                           
   740                           ; 0 bytes @ 0x3
   741  000004                     	ds	1
   742  000005                     Lcd_Init@data:
   743                           	opt stack 0
   744  000005                     RtccWriteDate@wasOn:
   745                           	opt stack 0
   746  000005                     RtccWriteTime@wasOn:
   747                           	opt stack 0
   748  000005                     ___awdiv@counter:
   749                           	opt stack 0
   750  000005                     ___wmul@product:
   751                           	opt stack 0
   752  000005                     ___lwdiv@quotient:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x4
   756  000005                     	ds	1
   757  000006                     RtccWriteDate@wasAlrm:
   758                           	opt stack 0
   759  000006                     RtccWriteTime@wasAlrm:
   760                           	opt stack 0
   761  000006                     ___awdiv@sign:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x5
   765  000006                     	ds	1
   766  000007                     RtccWriteTime@wasWrEn:
   767                           	opt stack 0
   768  000007                     ___lwdiv@counter:
   769                           	opt stack 0
   770  000007                     RtccWriteDate@tempYear:
   771                           	opt stack 0
   772  000007                     ___awdiv@quotient:
   773                           	opt stack 0
   774                           
   775                           ; 2 bytes @ 0x6
   776  000007                     	ds	1
   777  000008                     ?___lwmod:
   778                           	opt stack 0
   779  000008                     RtccWriteTime@tempMinSec:
   780                           	opt stack 0
   781  000008                     ___lwmod@dividend:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x7
   785  000008                     	ds	1
   786  000009                     RtccWriteDate@wasWrEn:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x8
   790  000009                     	ds	1
   791  00000A                     RtccWriteDate@tempDayMonth:
   792                           	opt stack 0
   793  00000A                     RtccWriteTime@tempHourWDay:
   794                           	opt stack 0
   795  00000A                     ___lwmod@divisor:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x9
   799  00000A                     	ds	1
   800  00000B                     RtccReadDate@rTD0:
   801                           	opt stack 0
   802  00000B                     RtccReadTime@rTD0:
   803                           	opt stack 0
   804                           
   805                           ; 8 bytes @ 0xA
   806  00000B                     	ds	1
   807  00000C                     ___lwmod@counter:
   808                           	opt stack 0
   809  00000C                     RtccWriteDate@tempHourWDay:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0xB
   813  00000C                     	ds	1
   814  00000D                     ?_sprintf:
   815                           	opt stack 0
   816  00000D                     sprintf@sp:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0xC
   820  00000D                     	ds	1
   821  00000E                     
   822                           ; 0 bytes @ 0xD
   823  00000E                     	ds	1
   824  00000F                     sprintf@f:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0xE
   828  00000F                     	ds	4
   829  000013                     
   830                           ; 0 bytes @ 0x12
   831  000013                     	ds	4
   832  000017                     ??_sprintf:
   833                           
   834                           ; 0 bytes @ 0x16
   835  000017                     	ds	4
   836  00001B                     sprintf@flag:
   837                           	opt stack 0
   838                           
   839                           ; 1 bytes @ 0x1A
   840  00001B                     	ds	1
   841  00001C                     sprintf@val:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x1B
   845  00001C                     	ds	2
   846  00001E                     sprintf@prec:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x1D
   850  00001E                     	ds	1
   851  00001F                     sprintf@ap:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x1E
   855  00001F                     	ds	2
   856  000021                     sprintf@cp:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x20
   860  000021                     	ds	2
   861  000023                     sprintf@len:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x22
   865  000023                     	ds	2
   866  000025                     sprintf@width:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x24
   870  000025                     	ds	2
   871  000027                     sprintf@c:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x26
   875  000027                     	ds	1
   876  000028                     ?_Convert_diasem:
   877                           	opt stack 0
   878  000028                     Convert_diasem@dia:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x27
   882  000028                     	ds	2
   883  00002A                     ??_Convert_diasem:
   884                           
   885                           ; 0 bytes @ 0x29
   886  00002A                     	ds	2
   887  00002C                     Convert_diasem@buffer_dia:
   888                           	opt stack 0
   889                           
   890                           ; 20 bytes @ 0x2B
   891  00002C                     	ds	20
   892  000040                     Lcd_Out@x:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x3F
   896  000040                     	ds	1
   897  000041                     Lcd_Out@buffer:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x40
   901  000041                     	ds	2
   902  000043                     Lcd_Out@y:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x42
   906  000043                     	ds	1
   907  000044                     Lcd_Out@data:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x43
   911  000044                     	ds	1
   912  000045                     ??_ManejaMovimientos:
   913  000045                     V_Principal@cte:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x44
   917  000045                     	ds	2
   918  000047                     ManejaMovimientos@diasem_tr:
   919                           	opt stack 0
   920                           
   921                           ; 1 bytes @ 0x46
   922  000047                     	ds	1
   923  000048                     ManejaMovimientos@dia_tr:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x47
   927  000048                     	ds	1
   928  000049                     ManejaMovimientos@mes_tr:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x48
   932  000049                     	ds	1
   933  00004A                     ManejaMovimientos@anio_tr:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x49
   937  00004A                     	ds	1
   938  00004B                     ManejaMovimientos@hora_tr:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x4A
   942  00004B                     	ds	1
   943  00004C                     ManejaMovimientos@minuto_tr:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x4B
   947  00004C                     	ds	1
   948  00004D                     ManejaMovimientos@posicion:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x4C
   952  00004D                     	ds	2
   953  00004F                     ??_main:
   954                           
   955                           ; 0 bytes @ 0x4E
   956  00004F                     	ds	1
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           postdec1	equ	0xFE5
   964                           fsr1l	equ	0xFE1
   965                           
   966 ;;
   967 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   968 ;;
   969 ;; *************** function _main *****************
   970 ;; Defined at:
   971 ;;		line 130 in file "../main.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;		None
   974 ;; Auto vars:     Size  Location     Type
   975 ;;		None
   976 ;; Return value:  Size  Location     Type
   977 ;;		None               void
   978 ;; Registers used:
   979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   987 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   988 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   989 ;;Total ram usage:        1 bytes
   990 ;; Hardware stack levels required when called:    4
   991 ;; This function calls:
   992 ;;		_Lcd_Cmd
   993 ;;		_Lcd_Init
   994 ;;		_Lcd_Out
   995 ;;		_ManejaMovimientos
   996 ;;		_V_Principal
   997 ;;		_Write_RTC
   998 ;;		_sprintf
   999 ;; This function is called by:
  1000 ;;		Startup code after reset
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           	psect	text0
  1005  00F43C                     __ptext0:
  1006                           	opt stack 0
  1007  00F43C                     _main:
  1008                           	opt stack 27
  1009                           
  1010                           ;main.c: 132: OSCTUNEbits.INTSRC=1;
  1011                           
  1012                           ;incstack = 0
  1013  00F43C  8E9B               	bsf	3995,7,c	;volatile
  1014                           
  1015                           ;main.c: 133: OSCTUNEbits.PLLEN=0;
  1016  00F43E  9C9B               	bcf	3995,6,c	;volatile
  1017                           
  1018                           ;main.c: 134: OSCCONbits.IRCF0=1;
  1019  00F440  88D3               	bsf	4051,4,c	;volatile
  1020                           
  1021                           ;main.c: 135: OSCCONbits.IRCF1=1;
  1022  00F442  8AD3               	bsf	4051,5,c	;volatile
  1023                           
  1024                           ;main.c: 136: OSCCONbits.IRCF2=1;
  1025  00F444  8CD3               	bsf	4051,6,c	;volatile
  1026                           
  1027                           ;main.c: 137: OSCCONbits.SCS0=0;
  1028  00F446  90D3               	bcf	4051,0,c	;volatile
  1029                           
  1030                           ;main.c: 138: OSCCONbits.SCS1=0;
  1031  00F448  92D3               	bcf	4051,1,c	;volatile
  1032                           
  1033                           ;main.c: 140: RTCCFGbits.RTCEN=1;
  1034  00F44A  010F               	movlb	15	; () banked
  1035  00F44C  8F3F               	bsf	63,7,b	;volatile
  1036                           
  1037                           ;main.c: 141: RTCCFGbits.RTCWREN=1;
  1038  00F44E  010F               	movlb	15	; () banked
  1039  00F450  8B3F               	bsf	63,5,b	;volatile
  1040                           
  1041                           ;main.c: 142: T1CONbits.T1OSCEN=1;
  1042  00F452  86CD               	bsf	4045,3,c	;volatile
  1043                           
  1044                           ; BSR set to: 15
  1045                           ;main.c: 144: TRISA = 0b11111101;
  1046  00F454  0EFD               	movlw	253
  1047  00F456  6E92               	movwf	3986,c	;volatile
  1048                           
  1049                           ;main.c: 145: TRISB = 0;
  1050  00F458  0E00               	movlw	0
  1051  00F45A  6E93               	movwf	3987,c	;volatile
  1052                           
  1053                           ; BSR set to: 15
  1054                           ;main.c: 146: TRISC = 0b11111111;
  1055  00F45C  6894               	setf	3988,c	;volatile
  1056                           
  1057                           ; BSR set to: 15
  1058                           ;main.c: 147: ANCON0 = 0b11111111;
  1059  00F45E  010F               	movlb	15	; () banked
  1060  00F460  6948               	setf	72,b	;volatile
  1061                           
  1062                           ;main.c: 148: ANCON1 = 0b11110111;
  1063  00F462  0EF7               	movlw	247
  1064  00F464  010F               	movlb	15	; () banked
  1065  00F466  6F49               	movwf	73,b	;volatile
  1066                           
  1067                           ;main.c: 149: ADCON0 = 0b00101111;
  1068  00F468  0E2F               	movlw	47
  1069  00F46A  6EC2               	movwf	4034,c	;volatile
  1070                           
  1071                           ;main.c: 150: ADCON1 = 0b00111001;
  1072  00F46C  0E39               	movlw	57
  1073  00F46E  6EC1               	movwf	4033,c	;volatile
  1074                           
  1075                           ; BSR set to: 15
  1076                           ;main.c: 152: Write_RTC();
  1077  00F470  EC59  F079         	call	_Write_RTC	;wreg free
  1078                           
  1079                           ;main.c: 153: Lcd_Init();
  1080  00F474  ECE6  F075         	call	_Lcd_Init	;wreg free
  1081                           
  1082                           ;main.c: 154: Lcd_Cmd(1);
  1083  00F478  0E01               	movlw	1
  1084  00F47A  EC02  F077         	call	_Lcd_Cmd
  1085                           
  1086                           ;main.c: 155: Lcd_Cmd(12);
  1087  00F47E  0E0C               	movlw	12
  1088  00F480  EC02  F077         	call	_Lcd_Cmd
  1089                           
  1090                           ;main.c: 164: _delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long)((98)
      +                          *(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigned long
      +                          )((98)*(8000000/4000.0)));_delay((unsigned long)((98)*(8000000/4000.0)));_delay((unsigne
  1091  00F484  0EFF               	movlw	255
  1092  00F486  6E4F               	movwf	??_main& (0+255),c
  1093  00F488  0E8A               	movlw	138
  1094  00F48A                     u2337:
  1095  00F48A  2EE8               	decfsz	wreg,f,c
  1096  00F48C  D7FE               	goto	u2337
  1097  00F48E  2E4F               	decfsz	??_main& (0+255),f,c
  1098  00F490  D7FC               	goto	u2337
  1099  00F492  D000               	nop2	
  1100  00F494  0EFF               	movlw	255
  1101  00F496  6E4F               	movwf	??_main& (0+255),c
  1102  00F498  0E8A               	movlw	138
  1103  00F49A                     u2347:
  1104  00F49A  2EE8               	decfsz	wreg,f,c
  1105  00F49C  D7FE               	goto	u2347
  1106  00F49E  2E4F               	decfsz	??_main& (0+255),f,c
  1107  00F4A0  D7FC               	goto	u2347
  1108  00F4A2  D000               	nop2	
  1109  00F4A4  0EFF               	movlw	255
  1110  00F4A6  6E4F               	movwf	??_main& (0+255),c
  1111  00F4A8  0E8A               	movlw	138
  1112  00F4AA                     u2357:
  1113  00F4AA  2EE8               	decfsz	wreg,f,c
  1114  00F4AC  D7FE               	goto	u2357
  1115  00F4AE  2E4F               	decfsz	??_main& (0+255),f,c
  1116  00F4B0  D7FC               	goto	u2357
  1117  00F4B2  D000               	nop2	
  1118  00F4B4  0EFF               	movlw	255
  1119  00F4B6  6E4F               	movwf	??_main& (0+255),c
  1120  00F4B8  0E8A               	movlw	138
  1121  00F4BA                     u2367:
  1122  00F4BA  2EE8               	decfsz	wreg,f,c
  1123  00F4BC  D7FE               	goto	u2367
  1124  00F4BE  2E4F               	decfsz	??_main& (0+255),f,c
  1125  00F4C0  D7FC               	goto	u2367
  1126  00F4C2  D000               	nop2	
  1127  00F4C4  0EFF               	movlw	255
  1128  00F4C6  6E4F               	movwf	??_main& (0+255),c
  1129  00F4C8  0E8A               	movlw	138
  1130  00F4CA                     u2377:
  1131  00F4CA  2EE8               	decfsz	wreg,f,c
  1132  00F4CC  D7FE               	goto	u2377
  1133  00F4CE  2E4F               	decfsz	??_main& (0+255),f,c
  1134  00F4D0  D7FC               	goto	u2377
  1135  00F4D2  D000               	nop2	
  1136  00F4D4  0EFF               	movlw	255
  1137  00F4D6  6E4F               	movwf	??_main& (0+255),c
  1138  00F4D8  0E8A               	movlw	138
  1139  00F4DA                     u2387:
  1140  00F4DA  2EE8               	decfsz	wreg,f,c
  1141  00F4DC  D7FE               	goto	u2387
  1142  00F4DE  2E4F               	decfsz	??_main& (0+255),f,c
  1143  00F4E0  D7FC               	goto	u2387
  1144  00F4E2  D000               	nop2	
  1145  00F4E4  0EFF               	movlw	255
  1146  00F4E6  6E4F               	movwf	??_main& (0+255),c
  1147  00F4E8  0E8A               	movlw	138
  1148  00F4EA                     u2397:
  1149  00F4EA  2EE8               	decfsz	wreg,f,c
  1150  00F4EC  D7FE               	goto	u2397
  1151  00F4EE  2E4F               	decfsz	??_main& (0+255),f,c
  1152  00F4F0  D7FC               	goto	u2397
  1153  00F4F2  D000               	nop2	
  1154  00F4F4  0EFF               	movlw	255
  1155  00F4F6  6E4F               	movwf	??_main& (0+255),c
  1156  00F4F8  0E8A               	movlw	138
  1157  00F4FA                     u2407:
  1158  00F4FA  2EE8               	decfsz	wreg,f,c
  1159  00F4FC  D7FE               	goto	u2407
  1160  00F4FE  2E4F               	decfsz	??_main& (0+255),f,c
  1161  00F500  D7FC               	goto	u2407
  1162  00F502  D000               	nop2	
  1163                           
  1164                           ;main.c: 165: Lcd_Cmd(1);
  1165  00F504  0E01               	movlw	1
  1166  00F506  EC02  F077         	call	_Lcd_Cmd
  1167  00F50A  D000               	goto	l2911
  1168  00F50C                     l2911:
  1169                           
  1170                           ;main.c: 171: V_Principal();
  1171  00F50C  EC01  F075         	call	_V_Principal	;wreg free
  1172                           
  1173                           ;main.c: 172: if(Sw_Left = PORTAbits.RA0 == 0){
  1174  00F510  B080               	btfsc	3968,0,c	;volatile
  1175  00F512  D002               	goto	u2180
  1176  00F514  0E01               	movlw	1
  1177  00F516  D001               	goto	u2190
  1178  00F518                     u2180:
  1179  00F518  0E00               	movlw	0
  1180  00F51A                     u2190:
  1181  00F51A  0100               	movlb	0	; () banked
  1182  00F51C  6F84               	movwf	_Sw_Left& (0+255),b
  1183  00F51E  0100               	movlb	0	; () banked
  1184  00F520  5184               	movf	_Sw_Left& (0+255),w,b
  1185  00F522  B4D8               	btfsc	status,2,c
  1186  00F524  D00C               	goto	l2919
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;main.c: 176: Lcd_Out(1, 0, "Program del reloj");
  1190  00F526  0E00               	movlw	0
  1191  00F528  6E40               	movwf	Lcd_Out@x,c
  1192  00F52A  0EB8               	movlw	low STR_1
  1193  00F52C  6E41               	movwf	Lcd_Out@buffer,c
  1194  00F52E  0EFF               	movlw	high STR_1
  1195  00F530  6E42               	movwf	Lcd_Out@buffer+1,c
  1196  00F532  0E01               	movlw	1
  1197  00F534  EC6C  F074         	call	_Lcd_Out
  1198                           
  1199                           ;main.c: 180: ManejaMovimientos();
  1200  00F538  ECB9  F07C         	call	_ManejaMovimientos	;wreg free
  1201  00F53C  D000               	goto	l2919
  1202  00F53E                     l2919:
  1203                           
  1204                           ;main.c: 184: }
  1205                           ;main.c: 186: if(Sw_Down = PORTCbits.RC4 == 0){
  1206  00F53E  B882               	btfsc	3970,4,c	;volatile
  1207  00F540  D002               	goto	u2210
  1208  00F542  0E01               	movlw	1
  1209  00F544  D001               	goto	u2220
  1210  00F546                     u2210:
  1211  00F546  0E00               	movlw	0
  1212  00F548                     u2220:
  1213  00F548  0100               	movlb	0	; () banked
  1214  00F54A  6F83               	movwf	_Sw_Down& (0+255),b
  1215  00F54C  0100               	movlb	0	; () banked
  1216  00F54E  5183               	movf	_Sw_Down& (0+255),w,b
  1217  00F550  B4D8               	btfsc	status,2,c
  1218  00F552  D017               	goto	l2925
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;main.c: 188: sprintf(buffer1,"%03u",lectura);
  1222  00F554  0E88               	movlw	low _buffer1
  1223  00F556  6E0D               	movwf	sprintf@sp,c
  1224  00F558  0E00               	movlw	high _buffer1
  1225  00F55A  6E0E               	movwf	sprintf@sp+1,c
  1226  00F55C  0EEF               	movlw	low STR_2
  1227  00F55E  6E0F               	movwf	sprintf@f,c
  1228  00F560  0EFF               	movlw	high STR_2
  1229  00F562  6E10               	movwf	sprintf@f+1,c
  1230  00F564  C087  F011         	movff	_lectura,?_sprintf+4
  1231  00F568  6A12               	clrf	?_sprintf+5,c
  1232  00F56A  EC1C  F07B         	call	_sprintf	;wreg free
  1233                           
  1234                           ;main.c: 190: Lcd_Out(4,0,buffer1);
  1235  00F56E  0E00               	movlw	0
  1236  00F570  6E40               	movwf	Lcd_Out@x,c
  1237  00F572  0E88               	movlw	low _buffer1
  1238  00F574  6E41               	movwf	Lcd_Out@buffer,c
  1239  00F576  0E00               	movlw	high _buffer1
  1240  00F578  6E42               	movwf	Lcd_Out@buffer+1,c
  1241  00F57A  0E04               	movlw	4
  1242  00F57C  EC6C  F074         	call	_Lcd_Out
  1243  00F580  D000               	goto	l2925
  1244  00F582                     l2925:
  1245                           
  1246                           ;main.c: 191: }
  1247                           ;main.c: 193: if(Sw_Right = PORTAbits.RA2 == 0){
  1248  00F582  B480               	btfsc	3968,2,c	;volatile
  1249  00F584  D002               	goto	u2240
  1250  00F586  0E01               	movlw	1
  1251  00F588  D001               	goto	u2250
  1252  00F58A                     u2240:
  1253  00F58A  0E00               	movlw	0
  1254  00F58C                     u2250:
  1255  00F58C  0100               	movlb	0	; () banked
  1256  00F58E  6F85               	movwf	_Sw_Right& (0+255),b
  1257  00F590  0100               	movlb	0	; () banked
  1258  00F592  5185               	movf	_Sw_Right& (0+255),w,b
  1259  00F594  B4D8               	btfsc	status,2,c
  1260  00F596  D00A               	goto	l2929
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 194: Lcd_Out(3, 0, "RIGHT             ");
  1264  00F598  0E00               	movlw	0
  1265  00F59A  6E40               	movwf	Lcd_Out@x,c
  1266  00F59C  0E93               	movlw	low STR_3
  1267  00F59E  6E41               	movwf	Lcd_Out@buffer,c
  1268  00F5A0  0EFF               	movlw	high STR_3
  1269  00F5A2  6E42               	movwf	Lcd_Out@buffer+1,c
  1270  00F5A4  0E03               	movlw	3
  1271  00F5A6  EC6C  F074         	call	_Lcd_Out
  1272  00F5AA  D000               	goto	l2929
  1273  00F5AC                     l2929:
  1274                           
  1275                           ;main.c: 195: }
  1276                           ;main.c: 197: if(Sw_Up = PORTAbits.RA3 == 0){
  1277  00F5AC  B680               	btfsc	3968,3,c	;volatile
  1278  00F5AE  D002               	goto	u2270
  1279  00F5B0  0E01               	movlw	1
  1280  00F5B2  D001               	goto	u2280
  1281  00F5B4                     u2270:
  1282  00F5B4  0E00               	movlw	0
  1283  00F5B6                     u2280:
  1284  00F5B6  0100               	movlb	0	; () banked
  1285  00F5B8  6F86               	movwf	_Sw_Up& (0+255),b
  1286  00F5BA  0100               	movlb	0	; () banked
  1287  00F5BC  5186               	movf	_Sw_Up& (0+255),w,b
  1288  00F5BE  B4D8               	btfsc	status,2,c
  1289  00F5C0  D00A               	goto	l2933
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;main.c: 198: Lcd_Out(4, 0, "UP               ");
  1293  00F5C2  0E00               	movlw	0
  1294  00F5C4  6E40               	movwf	Lcd_Out@x,c
  1295  00F5C6  0EA6               	movlw	low STR_4
  1296  00F5C8  6E41               	movwf	Lcd_Out@buffer,c
  1297  00F5CA  0EFF               	movlw	high STR_4
  1298  00F5CC  6E42               	movwf	Lcd_Out@buffer+1,c
  1299  00F5CE  0E04               	movlw	4
  1300  00F5D0  EC6C  F074         	call	_Lcd_Out
  1301  00F5D4  D000               	goto	l2933
  1302  00F5D6                     l2933:
  1303                           
  1304                           ;main.c: 199: }
  1305                           ;main.c: 201: if(Sw_Center = PORTAbits.RA5 == 0){
  1306  00F5D6  BA80               	btfsc	3968,5,c	;volatile
  1307  00F5D8  D002               	goto	u2300
  1308  00F5DA  0E01               	movlw	1
  1309  00F5DC  D001               	goto	u2310
  1310  00F5DE                     u2300:
  1311  00F5DE  0E00               	movlw	0
  1312  00F5E0                     u2310:
  1313  00F5E0  0100               	movlb	0	; () banked
  1314  00F5E2  6F82               	movwf	_Sw_Center& (0+255),b
  1315  00F5E4  0100               	movlb	0	; () banked
  1316  00F5E6  5182               	movf	_Sw_Center& (0+255),w,b
  1317  00F5E8  B4D8               	btfsc	status,2,c
  1318  00F5EA  D00D               	goto	l2939
  1319                           
  1320                           ; BSR set to: 0
  1321                           ;main.c: 202: Lcd_Cmd(1);
  1322  00F5EC  0E01               	movlw	1
  1323  00F5EE  EC02  F077         	call	_Lcd_Cmd
  1324                           
  1325                           ;main.c: 203: Lcd_Out(2, 0, "CENTER             ");
  1326  00F5F2  0E00               	movlw	0
  1327  00F5F4  6E40               	movwf	Lcd_Out@x,c
  1328  00F5F6  0E7F               	movlw	low STR_5
  1329  00F5F8  6E41               	movwf	Lcd_Out@buffer,c
  1330  00F5FA  0EFF               	movlw	high STR_5
  1331  00F5FC  6E42               	movwf	Lcd_Out@buffer+1,c
  1332  00F5FE  0E02               	movlw	2
  1333  00F600  EC6C  F074         	call	_Lcd_Out
  1334  00F604  D000               	goto	l2939
  1335  00F606                     l2939:
  1336                           
  1337                           ;main.c: 204: }
  1338                           ;main.c: 206: LATBbits.LATB7 = 1;
  1339  00F606  8E8A               	bsf	3978,7,c	;volatile
  1340                           
  1341                           ;main.c: 207: LATBbits.LATB6 = 1;
  1342  00F608  8C8A               	bsf	3978,6,c	;volatile
  1343                           
  1344                           ;main.c: 208: LATAbits.LA1 = 1;
  1345  00F60A  8289               	bsf	3977,1,c	;volatile
  1346                           
  1347                           ;main.c: 209: _delay((unsigned long)((10)*(8000000/4000.0)));
  1348  00F60C  0E1A               	movlw	26
  1349  00F60E  6E4F               	movwf	??_main& (0+255),c
  1350  00F610  0EF8               	movlw	248
  1351  00F612                     u2417:
  1352  00F612  2EE8               	decfsz	wreg,f,c
  1353  00F614  D7FE               	goto	u2417
  1354  00F616  2E4F               	decfsz	??_main& (0+255),f,c
  1355  00F618  D7FC               	goto	u2417
  1356  00F61A  D000               	nop2	
  1357                           
  1358                           ;main.c: 210: LATBbits.LATB7 = 0;
  1359  00F61C  9E8A               	bcf	3978,7,c	;volatile
  1360                           
  1361                           ;main.c: 211: LATBbits.LATB6 = 0;
  1362  00F61E  9C8A               	bcf	3978,6,c	;volatile
  1363                           
  1364                           ;main.c: 212: LATAbits.LA1 = 0;
  1365  00F620  9289               	bcf	3977,1,c	;volatile
  1366                           
  1367                           ;main.c: 213: _delay((unsigned long)((10)*(8000000/4000.0)));
  1368  00F622  0E1A               	movlw	26
  1369  00F624  6E4F               	movwf	??_main& (0+255),c
  1370  00F626  0EF8               	movlw	248
  1371  00F628                     u2427:
  1372  00F628  2EE8               	decfsz	wreg,f,c
  1373  00F62A  D7FE               	goto	u2427
  1374  00F62C  2E4F               	decfsz	??_main& (0+255),f,c
  1375  00F62E  D7FC               	goto	u2427
  1376  00F630  D000               	nop2	
  1377  00F632  D76C               	goto	l2911
  1378  00F634  EF00  F000         	goto	start
  1379  00F638                     __end_of_main:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           postinc0	equ	0xFEE
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           status	equ	0xFD8
  1390                           
  1391 ;; *************** function _V_Principal *****************
  1392 ;; Defined at:
  1393 ;;		line 221 in file "../main.c"
  1394 ;; Parameters:    Size  Location     Type
  1395 ;;		None
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  cte             2   68[COMRAM] PTR unsigned char 
  1398 ;;		 -> Convert_diasem@buffer_dia(20), 
  1399 ;; Return value:  Size  Location     Type
  1400 ;;		None               void
  1401 ;; Registers used:
  1402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: 0/0
  1407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1409 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1411 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1412 ;;Total ram usage:        2 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    3
  1415 ;; This function calls:
  1416 ;;		_Convert_diasem
  1417 ;;		_Lcd_Out
  1418 ;;		_Read_RTC
  1419 ;;		_lee_temperatura
  1420 ;;		_sprintf
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text1
  1427  00EA02                     __ptext1:
  1428                           	opt stack 0
  1429  00EA02                     _V_Principal:
  1430                           	opt stack 27
  1431                           
  1432                           ;main.c: 223: Read_RTC();
  1433                           
  1434                           ;incstack = 0
  1435  00EA02  EC92  F077         	call	_Read_RTC	;wreg free
  1436                           
  1437                           ;main.c: 224: lee_temperatura();
  1438  00EA06  EC23  F073         	call	_lee_temperatura	;wreg free
  1439                           
  1440                           ;main.c: 225: Lcd_Out(1, 0, "                    ");
  1441  00EA0A  0E00               	movlw	0
  1442  00EA0C  6E40               	movwf	Lcd_Out@x,c
  1443  00EA0E  0ED7               	movlw	low STR_6
  1444  00EA10  6E41               	movwf	Lcd_Out@buffer,c
  1445  00EA12  0EFE               	movlw	high STR_6
  1446  00EA14  6E42               	movwf	Lcd_Out@buffer+1,c
  1447  00EA16  0E01               	movlw	1
  1448  00EA18  EC6C  F074         	call	_Lcd_Out
  1449                           
  1450                           ;main.c: 226: char* cte = Convert_diasem(diasem);
  1451  00EA1C  C05C  F028         	movff	_diasem,Convert_diasem@dia
  1452  00EA20  C05D  F029         	movff	_diasem+1,Convert_diasem@dia+1
  1453  00EA24  EC73  F076         	call	_Convert_diasem	;wreg free
  1454  00EA28  C028  F045         	movff	?_Convert_diasem,V_Principal@cte
  1455  00EA2C  C029  F046         	movff	?_Convert_diasem+1,V_Principal@cte+1
  1456                           
  1457                           ;main.c: 228: Lcd_Out(2, 0, cte);
  1458  00EA30  0E00               	movlw	0
  1459  00EA32  6E40               	movwf	Lcd_Out@x,c
  1460  00EA34  C045  F041         	movff	V_Principal@cte,Lcd_Out@buffer
  1461  00EA38  C046  F042         	movff	V_Principal@cte+1,Lcd_Out@buffer+1
  1462  00EA3C  0E02               	movlw	2
  1463  00EA3E  EC6C  F074         	call	_Lcd_Out
  1464                           
  1465                           ;main.c: 231: sprintf(buffer1,"%02u/%02u/%02u",dia,mes,anio);
  1466  00EA42  0E88               	movlw	low _buffer1
  1467  00EA44  6E0D               	movwf	sprintf@sp,c
  1468  00EA46  0E00               	movlw	high _buffer1
  1469  00EA48  6E0E               	movwf	sprintf@sp+1,c
  1470  00EA4A  0ECA               	movlw	low STR_7
  1471  00EA4C  6E0F               	movwf	sprintf@f,c
  1472  00EA4E  0EFF               	movlw	high STR_7
  1473  00EA50  6E10               	movwf	sprintf@f+1,c
  1474  00EA52  C05A  F011         	movff	_dia,?_sprintf+4
  1475  00EA56  C05B  F012         	movff	_dia+1,?_sprintf+5
  1476  00EA5A  C05E  F013         	movff	_mes,?_sprintf+6
  1477  00EA5E  C05F  F014         	movff	_mes+1,?_sprintf+7
  1478  00EA62  C058  F015         	movff	_anio,?_sprintf+8
  1479  00EA66  C059  F016         	movff	_anio+1,?_sprintf+9
  1480  00EA6A  EC1C  F07B         	call	_sprintf	;wreg free
  1481                           
  1482                           ;main.c: 232: Lcd_Out(3,0,buffer1);
  1483  00EA6E  0E00               	movlw	0
  1484  00EA70  6E40               	movwf	Lcd_Out@x,c
  1485  00EA72  0E88               	movlw	low _buffer1
  1486  00EA74  6E41               	movwf	Lcd_Out@buffer,c
  1487  00EA76  0E00               	movlw	high _buffer1
  1488  00EA78  6E42               	movwf	Lcd_Out@buffer+1,c
  1489  00EA7A  0E03               	movlw	3
  1490  00EA7C  EC6C  F074         	call	_Lcd_Out
  1491                           
  1492                           ;main.c: 233: sprintf(buffer1,"%02u:%02u:%02u",hora,minuto,segundo);
  1493  00EA80  0E88               	movlw	low _buffer1
  1494  00EA82  6E0D               	movwf	sprintf@sp,c
  1495  00EA84  0E00               	movlw	high _buffer1
  1496  00EA86  6E0E               	movwf	sprintf@sp+1,c
  1497  00EA88  0ED9               	movlw	low STR_8
  1498  00EA8A  6E0F               	movwf	sprintf@f,c
  1499  00EA8C  0EFF               	movlw	high STR_8
  1500  00EA8E  6E10               	movwf	sprintf@f+1,c
  1501  00EA90  C0BA  F011         	movff	_hora,?_sprintf+4
  1502  00EA94  C0BB  F012         	movff	_hora+1,?_sprintf+5
  1503  00EA98  C0BC  F013         	movff	_minuto,?_sprintf+6
  1504  00EA9C  C0BD  F014         	movff	_minuto+1,?_sprintf+7
  1505  00EAA0  C07E  F015         	movff	_segundo,?_sprintf+8
  1506  00EAA4  C07F  F016         	movff	_segundo+1,?_sprintf+9
  1507  00EAA8  EC1C  F07B         	call	_sprintf	;wreg free
  1508                           
  1509                           ;main.c: 234: Lcd_Out(4,0,buffer1);
  1510  00EAAC  0E00               	movlw	0
  1511  00EAAE  6E40               	movwf	Lcd_Out@x,c
  1512  00EAB0  0E88               	movlw	low _buffer1
  1513  00EAB2  6E41               	movwf	Lcd_Out@buffer,c
  1514  00EAB4  0E00               	movlw	high _buffer1
  1515  00EAB6  6E42               	movwf	Lcd_Out@buffer+1,c
  1516  00EAB8  0E04               	movlw	4
  1517  00EABA  EC6C  F074         	call	_Lcd_Out
  1518  00EABE  0012               	return		;funcret
  1519  00EAC0                     __end_of_V_Principal:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1l	equ	0xFE1
  1529                           status	equ	0xFD8
  1530                           
  1531 ;; *************** function _lee_temperatura *****************
  1532 ;; Defined at:
  1533 ;;		line 325 in file "../main.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;		None               void
  1540 ;; Registers used:
  1541 ;;		wreg
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1549 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1550 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1551 ;;Total ram usage:        1 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_V_Principal
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text2
  1561  00E646                     __ptext2:
  1562                           	opt stack 0
  1563  00E646                     _lee_temperatura:
  1564                           	opt stack 29
  1565                           
  1566                           ;main.c: 327: ADCON0bits.ADON = 1;
  1567                           
  1568                           ;incstack = 0
  1569  00E646  80C2               	bsf	4034,0,c	;volatile
  1570                           
  1571                           ;main.c: 328: ADCON0bits.GO = 1;
  1572  00E648  82C2               	bsf	4034,1,c	;volatile
  1573                           
  1574                           ;main.c: 329: while(ADCON0bits.GO);
  1575  00E64A  D000               	goto	l209
  1576  00E64C                     l209:
  1577  00E64C  B2C2               	btfsc	4034,1,c	;volatile
  1578  00E64E  D7FE               	goto	l209
  1579                           
  1580                           ;main.c: 330: _delay((unsigned long)((1)*(8000000/4000.0)));
  1581  00E650  0E03               	movlw	3
  1582  00E652  6E01               	movwf	??_lee_temperatura& (0+255),c
  1583  00E654  0E98               	movlw	152
  1584  00E656                     u2437:
  1585  00E656  2EE8               	decfsz	wreg,f,c
  1586  00E658  D7FE               	goto	u2437
  1587  00E65A  2E01               	decfsz	??_lee_temperatura& (0+255),f,c
  1588  00E65C  D7FC               	goto	u2437
  1589                           
  1590                           ;main.c: 331: lectura = ADRESH;
  1591  00E65E  CFC4 F087          	movff	4036,_lectura	;volatile
  1592                           
  1593                           ;main.c: 332: ADCON0bits.ADON = 0;
  1594  00E662  90C2               	bcf	4034,0,c	;volatile
  1595  00E664  0012               	return		;funcret
  1596  00E666                     __end_of_lee_temperatura:
  1597                           	opt stack 0
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           postinc0	equ	0xFEE
  1603                           wreg	equ	0xFE8
  1604                           postdec1	equ	0xFE5
  1605                           fsr1l	equ	0xFE1
  1606                           status	equ	0xFD8
  1607                           
  1608 ;; *************** function _Read_RTC *****************
  1609 ;; Defined at:
  1610 ;;		line 292 in file "../main.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;		None               void
  1617 ;; Registers used:
  1618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1628 ;;Total ram usage:        0 bytes
  1629 ;; Hardware stack levels used:    1
  1630 ;; Hardware stack levels required when called:    1
  1631 ;; This function calls:
  1632 ;;		_RtccReadDate
  1633 ;;		_RtccReadTime
  1634 ;; This function is called by:
  1635 ;;		_V_Principal
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text3
  1640  00EF24                     __ptext3:
  1641                           	opt stack 0
  1642  00EF24                     _Read_RTC:
  1643                           	opt stack 28
  1644                           
  1645                           ;main.c: 295: RtccReadTime(&RtccTime);
  1646                           
  1647                           ;incstack = 0
  1648  00EF24  0E54               	movlw	low _RtccTime
  1649  00EF26  6E01               	movwf	RtccReadTime@pTm,c
  1650  00EF28  0E00               	movlw	high _RtccTime
  1651  00EF2A  6E02               	movwf	RtccReadTime@pTm+1,c
  1652  00EF2C  ECEE  F073         	call	_RtccReadTime	;wreg free
  1653                           
  1654                           ;main.c: 296: segundo_u=(RtccTime.f.sec & 0x0F);
  1655  00EF30  5055               	movf	_RtccTime+1,w,c
  1656  00EF32  0B0F               	andlw	15
  1657  00EF34  0100               	movlb	0	; () banked
  1658  00EF36  6FCA               	movwf	_segundo_u& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 297: segundo_d=((RtccTime.f.sec & 0xF0)>>4);
  1662  00EF38  3855               	swapf	_RtccTime+1,w,c
  1663  00EF3A  0B0F               	andlw	15
  1664  00EF3C  0B0F               	andlw	15
  1665  00EF3E  0100               	movlb	0	; () banked
  1666  00EF40  6FC9               	movwf	_segundo_d& (0+255),b
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 298: minuto_u=(RtccTime.f.min & 0x0F);
  1670  00EF42  5056               	movf	_RtccTime+2,w,c
  1671  00EF44  0B0F               	andlw	15
  1672  00EF46  0100               	movlb	0	; () banked
  1673  00EF48  6FC8               	movwf	_minuto_u& (0+255),b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;main.c: 299: minuto_d=((RtccTime.f.min & 0xF0)>>4);
  1677  00EF4A  3856               	swapf	_RtccTime+2,w,c
  1678  00EF4C  0B0F               	andlw	15
  1679  00EF4E  0B0F               	andlw	15
  1680  00EF50  0100               	movlb	0	; () banked
  1681  00EF52  6FC7               	movwf	_minuto_d& (0+255),b
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 300: hora_u=(RtccTime.f.hour & 0x0F);
  1685  00EF54  5057               	movf	_RtccTime+3,w,c
  1686  00EF56  0B0F               	andlw	15
  1687  00EF58  0100               	movlb	0	; () banked
  1688  00EF5A  6FC4               	movwf	_hora_u& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 301: hora_d=((RtccTime.f.hour & 0xF0)>>4);
  1692  00EF5C  3857               	swapf	_RtccTime+3,w,c
  1693  00EF5E  0B0F               	andlw	15
  1694  00EF60  0B0F               	andlw	15
  1695  00EF62  0100               	movlb	0	; () banked
  1696  00EF64  6FC3               	movwf	_hora_d& (0+255),b
  1697                           
  1698                           ;main.c: 302: RtccReadDate(&RtccDate);
  1699  00EF66  0E50               	movlw	low _RtccDate
  1700  00EF68  6E01               	movwf	RtccReadDate@pDt,c
  1701  00EF6A  0E00               	movlw	high _RtccDate
  1702  00EF6C  6E02               	movwf	RtccReadDate@pDt+1,c
  1703  00EF6E  EC25  F074         	call	_RtccReadDate	;wreg free
  1704                           
  1705                           ;main.c: 303: fecha_u=(RtccDate.f.mday & 0x0F);
  1706  00EF72  5051               	movf	_RtccDate+1,w,c
  1707  00EF74  0B0F               	andlw	15
  1708  00EF76  0100               	movlb	0	; () banked
  1709  00EF78  6FC2               	movwf	_fecha_u& (0+255),b
  1710                           
  1711                           ; BSR set to: 0
  1712                           ;main.c: 304: fecha_d=((RtccDate.f.mday & 0xF0)>>4);
  1713  00EF7A  3851               	swapf	_RtccDate+1,w,c
  1714  00EF7C  0B0F               	andlw	15
  1715  00EF7E  0B0F               	andlw	15
  1716  00EF80  0100               	movlb	0	; () banked
  1717  00EF82  6FC1               	movwf	_fecha_d& (0+255),b
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 305: mes_u=(RtccDate.f.mon & 0x0F);
  1721  00EF84  5052               	movf	_RtccDate+2,w,c
  1722  00EF86  0B0F               	andlw	15
  1723  00EF88  0100               	movlb	0	; () banked
  1724  00EF8A  6FC6               	movwf	_mes_u& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;main.c: 306: mes_d=((RtccDate.f.mon & 0xF0)>>4);
  1728  00EF8C  3852               	swapf	_RtccDate+2,w,c
  1729  00EF8E  0B0F               	andlw	15
  1730  00EF90  0B0F               	andlw	15
  1731  00EF92  0100               	movlb	0	; () banked
  1732  00EF94  6FC5               	movwf	_mes_d& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;main.c: 307: dia_semana=RtccDate.f.wday;
  1736  00EF96  C050  F0C0         	movff	_RtccDate,_dia_semana
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 308: anio_u=(RtccDate.f.year & 0x0F);
  1740  00EF9A  5053               	movf	_RtccDate+3,w,c
  1741  00EF9C  0B0F               	andlw	15
  1742  00EF9E  0100               	movlb	0	; () banked
  1743  00EFA0  6FBF               	movwf	_anio_u& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 309: anio_d=((RtccDate.f.year & 0xF0)>>4);
  1747  00EFA2  3853               	swapf	_RtccDate+3,w,c
  1748  00EFA4  0B0F               	andlw	15
  1749  00EFA6  0B0F               	andlw	15
  1750  00EFA8  0100               	movlb	0	; () banked
  1751  00EFAA  6FBE               	movwf	_anio_d& (0+255),b
  1752                           
  1753                           ; BSR set to: 0
  1754                           ;main.c: 310: segundo=segundo_d*10+segundo_u;
  1755  00EFAC  0100               	movlb	0	; () banked
  1756  00EFAE  51C9               	movf	_segundo_d& (0+255),w,b
  1757  00EFB0  0D0A               	mullw	10
  1758  00EFB2  0100               	movlb	0	; () banked
  1759  00EFB4  51CA               	movf	_segundo_u& (0+255),w,b
  1760  00EFB6  24F3               	addwf	prodl,w,c
  1761  00EFB8  0100               	movlb	0	; () banked
  1762  00EFBA  6F7E               	movwf	_segundo& (0+255),b
  1763  00EFBC  0100               	movlb	0	; () banked
  1764  00EFBE  0E00               	movlw	0
  1765  00EFC0  20F4               	addwfc	prodh,w,c
  1766  00EFC2  0100               	movlb	0	; () banked
  1767  00EFC4  6F7F               	movwf	(_segundo+1)& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;main.c: 311: minuto=minuto_d*10+minuto_u;
  1771  00EFC6  0100               	movlb	0	; () banked
  1772  00EFC8  51C7               	movf	_minuto_d& (0+255),w,b
  1773  00EFCA  0D0A               	mullw	10
  1774  00EFCC  0100               	movlb	0	; () banked
  1775  00EFCE  51C8               	movf	_minuto_u& (0+255),w,b
  1776  00EFD0  24F3               	addwf	prodl,w,c
  1777  00EFD2  0100               	movlb	0	; () banked
  1778  00EFD4  6FBC               	movwf	_minuto& (0+255),b
  1779  00EFD6  0100               	movlb	0	; () banked
  1780  00EFD8  0E00               	movlw	0
  1781  00EFDA  20F4               	addwfc	prodh,w,c
  1782  00EFDC  0100               	movlb	0	; () banked
  1783  00EFDE  6FBD               	movwf	(_minuto+1)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 312: hora=hora_d*10+hora_u;
  1787  00EFE0  0100               	movlb	0	; () banked
  1788  00EFE2  51C3               	movf	_hora_d& (0+255),w,b
  1789  00EFE4  0D0A               	mullw	10
  1790  00EFE6  0100               	movlb	0	; () banked
  1791  00EFE8  51C4               	movf	_hora_u& (0+255),w,b
  1792  00EFEA  24F3               	addwf	prodl,w,c
  1793  00EFEC  0100               	movlb	0	; () banked
  1794  00EFEE  6FBA               	movwf	_hora& (0+255),b
  1795  00EFF0  0100               	movlb	0	; () banked
  1796  00EFF2  0E00               	movlw	0
  1797  00EFF4  20F4               	addwfc	prodh,w,c
  1798  00EFF6  0100               	movlb	0	; () banked
  1799  00EFF8  6FBB               	movwf	(_hora+1)& (0+255),b
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;main.c: 313: dia=fecha_d*10+fecha_u;
  1803  00EFFA  0100               	movlb	0	; () banked
  1804  00EFFC  51C1               	movf	_fecha_d& (0+255),w,b
  1805  00EFFE  0D0A               	mullw	10
  1806  00F000  0100               	movlb	0	; () banked
  1807  00F002  51C2               	movf	_fecha_u& (0+255),w,b
  1808  00F004  24F3               	addwf	prodl,w,c
  1809  00F006  6E5A               	movwf	_dia,c
  1810  00F008  0100               	movlb	0	; () banked
  1811  00F00A  0E00               	movlw	0
  1812  00F00C  20F4               	addwfc	prodh,w,c
  1813  00F00E  6E5B               	movwf	_dia+1,c
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 314: diasem=dia_semana;
  1817  00F010  C0C0  F05C         	movff	_dia_semana,_diasem
  1818  00F014  6A5D               	clrf	_diasem+1,c
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 315: mes=mes_d*10+mes_u;
  1822  00F016  0100               	movlb	0	; () banked
  1823  00F018  51C5               	movf	_mes_d& (0+255),w,b
  1824  00F01A  0D0A               	mullw	10
  1825  00F01C  0100               	movlb	0	; () banked
  1826  00F01E  51C6               	movf	_mes_u& (0+255),w,b
  1827  00F020  24F3               	addwf	prodl,w,c
  1828  00F022  6E5E               	movwf	_mes,c
  1829  00F024  0100               	movlb	0	; () banked
  1830  00F026  0E00               	movlw	0
  1831  00F028  20F4               	addwfc	prodh,w,c
  1832  00F02A  6E5F               	movwf	_mes+1,c
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 316: anio=anio_d*10+anio_u;
  1836  00F02C  0100               	movlb	0	; () banked
  1837  00F02E  51BE               	movf	_anio_d& (0+255),w,b
  1838  00F030  0D0A               	mullw	10
  1839  00F032  0100               	movlb	0	; () banked
  1840  00F034  51BF               	movf	_anio_u& (0+255),w,b
  1841  00F036  24F3               	addwf	prodl,w,c
  1842  00F038  6E58               	movwf	_anio,c
  1843  00F03A  0100               	movlb	0	; () banked
  1844  00F03C  0E00               	movlw	0
  1845  00F03E  20F4               	addwfc	prodh,w,c
  1846  00F040  6E59               	movwf	_anio+1,c
  1847                           
  1848                           ; BSR set to: 0
  1849  00F042  0012               	return		;funcret
  1850  00F044                     __end_of_Read_RTC:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           prodh	equ	0xFF4
  1857                           prodl	equ	0xFF3
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postdec1	equ	0xFE5
  1861                           fsr1l	equ	0xFE1
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _RtccReadTime *****************
  1865 ;; Defined at:
  1866 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadTime.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  pTm             2    0[COMRAM] PTR struct .
  1869 ;;		 -> RtccTime(4), 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;  rTD0            8   10[COMRAM] struct .
  1872 ;;  rTD1            8    2[COMRAM] struct .
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1882 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1885 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1886 ;;Total ram usage:       18 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; This function calls:
  1889 ;;		Nothing
  1890 ;; This function is called by:
  1891 ;;		_Read_RTC
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text4
  1896  00E7DC                     __ptext4:
  1897                           	opt stack 0
  1898  00E7DC                     _RtccReadTime:
  1899                           	opt stack 28
  1900  00E7DC  0EFC               	movlw	252
  1901  00E7DE  010F               	movlb	15	; () banked
  1902  00E7E0  173F               	andwf	63,f,b	;volatile
  1903                           
  1904                           ; BSR set to: 15
  1905  00E7E2  010F               	movlb	15	; () banked
  1906  00E7E4  813F               	bsf	63,0,b	;volatile
  1907                           
  1908                           ; BSR set to: 15
  1909  00E7E6  CF98 F00F          	movff	3992,RtccReadTime@rTD0+4	;volatile
  1910                           
  1911                           ; BSR set to: 15
  1912  00E7EA  CF99 F010          	movff	3993,RtccReadTime@rTD0+5	;volatile
  1913                           
  1914                           ; BSR set to: 15
  1915  00E7EE  CF98 F011          	movff	3992,RtccReadTime@rTD0+6	;volatile
  1916                           
  1917                           ; BSR set to: 15
  1918  00E7F2  CF99 F012          	movff	3993,RtccReadTime@rTD0+7	;volatile
  1919                           
  1920                           ; BSR set to: 15
  1921  00E7F6  0EFC               	movlw	252
  1922  00E7F8  010F               	movlb	15	; () banked
  1923  00E7FA  173F               	andwf	63,f,b	;volatile
  1924  00E7FC  010F               	movlb	15	; () banked
  1925  00E7FE  813F               	bsf	63,0,b	;volatile
  1926                           
  1927                           ; BSR set to: 15
  1928  00E800  CF98 F007          	movff	3992,RtccReadTime@rTD1+4	;volatile
  1929                           
  1930                           ; BSR set to: 15
  1931  00E804  CF99 F008          	movff	3993,RtccReadTime@rTD1+5	;volatile
  1932                           
  1933                           ; BSR set to: 15
  1934  00E808  CF98 F009          	movff	3992,RtccReadTime@rTD1+6	;volatile
  1935                           
  1936                           ; BSR set to: 15
  1937  00E80C  CF99 F00A          	movff	3993,RtccReadTime@rTD1+7	;volatile
  1938                           
  1939                           ; BSR set to: 15
  1940  00E810  5009               	movf	RtccReadTime@rTD1+6,w,c
  1941  00E812  1811               	xorwf	RtccReadTime@rTD0+6,w,c
  1942  00E814  A4D8               	btfss	status,2,c
  1943  00E816  D7E2               	goto	l2361
  1944                           
  1945                           ; BSR set to: 15
  1946                           
  1947                           ; BSR set to: 15
  1948  00E818  EE20 F003          	lfsr	2,3
  1949  00E81C  5001               	movf	RtccReadTime@pTm,w,c
  1950  00E81E  26D9               	addwf	fsr2l,f,c
  1951  00E820  5002               	movf	RtccReadTime@pTm+1,w,c
  1952  00E822  22DA               	addwfc	fsr2h,f,c
  1953  00E824  C00F  FFDF         	movff	RtccReadTime@rTD0+4,indf2
  1954  00E828  EE20 F002          	lfsr	2,2
  1955  00E82C  5001               	movf	RtccReadTime@pTm,w,c
  1956  00E82E  26D9               	addwf	fsr2l,f,c
  1957  00E830  5002               	movf	RtccReadTime@pTm+1,w,c
  1958  00E832  22DA               	addwfc	fsr2h,f,c
  1959  00E834  C012  FFDF         	movff	RtccReadTime@rTD0+7,indf2
  1960  00E838  EE20 F001          	lfsr	2,1
  1961  00E83C  5001               	movf	RtccReadTime@pTm,w,c
  1962  00E83E  26D9               	addwf	fsr2l,f,c
  1963  00E840  5002               	movf	RtccReadTime@pTm+1,w,c
  1964  00E842  22DA               	addwfc	fsr2h,f,c
  1965  00E844  C011  FFDF         	movff	RtccReadTime@rTD0+6,indf2
  1966                           
  1967                           ; BSR set to: 15
  1968  00E848  0012               	return		;funcret
  1969  00E84A                     __end_of_RtccReadTime:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           prodh	equ	0xFF4
  1976                           prodl	equ	0xFF3
  1977                           postinc0	equ	0xFEE
  1978                           wreg	equ	0xFE8
  1979                           postdec1	equ	0xFE5
  1980                           fsr1l	equ	0xFE1
  1981                           indf2	equ	0xFDF
  1982                           fsr2h	equ	0xFDA
  1983                           fsr2l	equ	0xFD9
  1984                           status	equ	0xFD8
  1985                           
  1986 ;; *************** function _RtccReadDate *****************
  1987 ;; Defined at:
  1988 ;;		line 23 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccReadDate.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  pDt             2    0[COMRAM] PTR struct .
  1991 ;;		 -> RtccDate(4), 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  rTD0            8   10[COMRAM] struct .
  1994 ;;  rTD1            8    2[COMRAM] struct .
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1999 ;; Tracked objects:
  2000 ;;		On entry : 0/0
  2001 ;;		On exit  : 0/0
  2002 ;;		Unchanged: 0/0
  2003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2004 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2005 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2007 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2008 ;;Total ram usage:       18 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_Read_RTC
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text5
  2018  00E84A                     __ptext5:
  2019                           	opt stack 0
  2020  00E84A                     _RtccReadDate:
  2021                           	opt stack 28
  2022  00E84A  0EFC               	movlw	252
  2023  00E84C  010F               	movlb	15	; () banked
  2024  00E84E  173F               	andwf	63,f,b	;volatile
  2025  00E850  0E03               	movlw	3
  2026  00E852  010F               	movlb	15	; () banked
  2027  00E854  133F               	iorwf	63,f,b	;volatile
  2028                           
  2029                           ; BSR set to: 15
  2030  00E856  CF98 F00B          	movff	3992,RtccReadDate@rTD0	;volatile
  2031                           
  2032                           ; BSR set to: 15
  2033  00E85A  CF99 F00C          	movff	3993,RtccReadDate@rTD0+1	;volatile
  2034                           
  2035                           ; BSR set to: 15
  2036  00E85E  CF98 F00D          	movff	3992,RtccReadDate@rTD0+2	;volatile
  2037                           
  2038                           ; BSR set to: 15
  2039  00E862  CF99 F00E          	movff	3993,RtccReadDate@rTD0+3	;volatile
  2040                           
  2041                           ; BSR set to: 15
  2042  00E866  CF98 F00F          	movff	3992,RtccReadDate@rTD0+4	;volatile
  2043                           
  2044                           ; BSR set to: 15
  2045  00E86A  CF99 F010          	movff	3993,RtccReadDate@rTD0+5	;volatile
  2046  00E86E  0EFC               	movlw	252
  2047  00E870  010F               	movlb	15	; () banked
  2048  00E872  173F               	andwf	63,f,b	;volatile
  2049  00E874  0E03               	movlw	3
  2050  00E876  010F               	movlb	15	; () banked
  2051  00E878  133F               	iorwf	63,f,b	;volatile
  2052                           
  2053                           ; BSR set to: 15
  2054  00E87A  CF98 F003          	movff	3992,RtccReadDate@rTD1	;volatile
  2055                           
  2056                           ; BSR set to: 15
  2057  00E87E  CF99 F004          	movff	3993,RtccReadDate@rTD1+1	;volatile
  2058                           
  2059                           ; BSR set to: 15
  2060  00E882  CF98 F005          	movff	3992,RtccReadDate@rTD1+2	;volatile
  2061                           
  2062                           ; BSR set to: 15
  2063  00E886  CF99 F006          	movff	3993,RtccReadDate@rTD1+3	;volatile
  2064                           
  2065                           ; BSR set to: 15
  2066  00E88A  CF98 F007          	movff	3992,RtccReadDate@rTD1+4	;volatile
  2067                           
  2068                           ; BSR set to: 15
  2069  00E88E  CF99 F008          	movff	3993,RtccReadDate@rTD1+5	;volatile
  2070  00E892  5005               	movf	RtccReadDate@rTD1+2,w,c
  2071  00E894  180D               	xorwf	RtccReadDate@rTD0+2,w,c
  2072  00E896  A4D8               	btfss	status,2,c
  2073  00E898  D7D8               	goto	l2387
  2074                           
  2075                           ; BSR set to: 15
  2076                           
  2077                           ; BSR set to: 15
  2078  00E89A  EE20 F001          	lfsr	2,1
  2079  00E89E  5001               	movf	RtccReadDate@pDt,w,c
  2080  00E8A0  26D9               	addwf	fsr2l,f,c
  2081  00E8A2  5002               	movf	RtccReadDate@pDt+1,w,c
  2082  00E8A4  22DA               	addwfc	fsr2h,f,c
  2083  00E8A6  C00D  FFDF         	movff	RtccReadDate@rTD0+2,indf2
  2084  00E8AA  EE20 F002          	lfsr	2,2
  2085  00E8AE  5001               	movf	RtccReadDate@pDt,w,c
  2086  00E8B0  26D9               	addwf	fsr2l,f,c
  2087  00E8B2  5002               	movf	RtccReadDate@pDt+1,w,c
  2088  00E8B4  22DA               	addwfc	fsr2h,f,c
  2089  00E8B6  C00E  FFDF         	movff	RtccReadDate@rTD0+3,indf2
  2090                           
  2091                           ; BSR set to: 15
  2092  00E8BA  C001  FFD9         	movff	RtccReadDate@pDt,fsr2l
  2093  00E8BE  C002  FFDA         	movff	RtccReadDate@pDt+1,fsr2h
  2094  00E8C2  C010  FFDF         	movff	RtccReadDate@rTD0+5,indf2
  2095                           
  2096                           ; BSR set to: 15
  2097  00E8C6  EE20 F003          	lfsr	2,3
  2098  00E8CA  5001               	movf	RtccReadDate@pDt,w,c
  2099  00E8CC  26D9               	addwf	fsr2l,f,c
  2100  00E8CE  5002               	movf	RtccReadDate@pDt+1,w,c
  2101  00E8D0  22DA               	addwfc	fsr2h,f,c
  2102  00E8D2  C00B  FFDF         	movff	RtccReadDate@rTD0,indf2
  2103                           
  2104                           ; BSR set to: 15
  2105  00E8D6  0012               	return		;funcret
  2106  00E8D8                     __end_of_RtccReadDate:
  2107                           	opt stack 0
  2108                           tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           prodh	equ	0xFF4
  2113                           prodl	equ	0xFF3
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           fsr2h	equ	0xFDA
  2120                           fsr2l	equ	0xFD9
  2121                           status	equ	0xFD8
  2122                           
  2123 ;; *************** function _ManejaMovimientos *****************
  2124 ;; Defined at:
  2125 ;;		line 372 in file "../main.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  posicion        2   76[COMRAM] int 
  2130 ;;  minuto_tr       1   75[COMRAM] unsigned char 
  2131 ;;  hora_tr         1   74[COMRAM] unsigned char 
  2132 ;;  anio_tr         1   73[COMRAM] unsigned char 
  2133 ;;  mes_tr          1   72[COMRAM] unsigned char 
  2134 ;;  dia_tr          1   71[COMRAM] unsigned char 
  2135 ;;  diasem_tr       1   70[COMRAM] unsigned char 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;		None               void
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2146 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2147 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2148 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2149 ;;Total ram usage:       10 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    3
  2152 ;; This function calls:
  2153 ;;		_Convert_diasem
  2154 ;;		_Lcd_Cmd
  2155 ;;		_Lcd_Out
  2156 ;;		_Write_RTC
  2157 ;;		_sprintf
  2158 ;; This function is called by:
  2159 ;;		_main
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162                           
  2163                           	psect	text6
  2164  00F972                     __ptext6:
  2165                           	opt stack 0
  2166  00F972                     _ManejaMovimientos:
  2167                           	opt stack 27
  2168                           
  2169                           ;main.c: 374: char diasem_tr = diasem;
  2170                           
  2171                           ; BSR set to: 15
  2172                           ;incstack = 0
  2173  00F972  C05C  F047         	movff	_diasem,ManejaMovimientos@diasem_tr
  2174                           
  2175                           ;main.c: 375: char dia_tr = dia;
  2176  00F976  C05A  F048         	movff	_dia,ManejaMovimientos@dia_tr
  2177                           
  2178                           ;main.c: 376: char mes_tr = mes;
  2179  00F97A  C05E  F049         	movff	_mes,ManejaMovimientos@mes_tr
  2180                           
  2181                           ;main.c: 377: char anio_tr = anio;
  2182  00F97E  C058  F04A         	movff	_anio,ManejaMovimientos@anio_tr
  2183                           
  2184                           ;main.c: 378: char hora_tr = hora;
  2185  00F982  C0BA  F04B         	movff	_hora,ManejaMovimientos@hora_tr
  2186                           
  2187                           ;main.c: 379: char minuto_tr = minuto;
  2188  00F986  C0BC  F04C         	movff	_minuto,ManejaMovimientos@minuto_tr
  2189                           
  2190                           ;main.c: 380: int posicion = 0;
  2191  00F98A  0E00               	movlw	0
  2192  00F98C  6E4E               	movwf	ManejaMovimientos@posicion+1,c
  2193  00F98E  0E00               	movlw	0
  2194  00F990  6E4D               	movwf	ManejaMovimientos@posicion,c
  2195                           
  2196                           ;main.c: 381: Lcd_Cmd(14);
  2197  00F992  0E0E               	movlw	14
  2198  00F994  EC02  F077         	call	_Lcd_Cmd
  2199                           
  2200                           ;main.c: 382: Lcd_Out(2, 0, "" );
  2201  00F998  0E00               	movlw	0
  2202  00F99A  6E40               	movwf	Lcd_Out@x,c
  2203  00F99C  0EEB               	movlw	low (STR_6+20)
  2204  00F99E  6E41               	movwf	Lcd_Out@buffer,c
  2205  00F9A0  0EFE               	movlw	high (STR_6+20)
  2206  00F9A2  6E42               	movwf	Lcd_Out@buffer+1,c
  2207  00F9A4  0E02               	movlw	2
  2208  00F9A6  EC6C  F074         	call	_Lcd_Out
  2209                           
  2210                           ;main.c: 385: for(i=0 ;i<30;i++){
  2211  00F9AA  0E00               	movlw	0
  2212  00F9AC  0100               	movlb	0	; () banked
  2213  00F9AE  6F7D               	movwf	(_i+1)& (0+255),b
  2214  00F9B0  0E00               	movlw	0
  2215  00F9B2  6F7C               	movwf	_i& (0+255),b
  2216                           
  2217                           ; BSR set to: 0
  2218  00F9B4  0100               	movlb	0	; () banked
  2219  00F9B6  BF7D               	btfsc	(_i+1)& (0+255),7,b
  2220  00F9B8  D00A               	goto	l2701
  2221  00F9BA  0100               	movlb	0	; () banked
  2222  00F9BC  517D               	movf	(_i+1)& (0+255),w,b
  2223  00F9BE  E106               	bnz	u1880
  2224  00F9C0  0E1E               	movlw	30
  2225  00F9C2  0100               	movlb	0	; () banked
  2226  00F9C4  5D7C               	subwf	_i& (0+255),w,b
  2227  00F9C6  B0D8               	btfsc	status,0,c
  2228  00F9C8  D27D               	goto	l2853
  2229  00F9CA  D001               	goto	l2701
  2230  00F9CC                     u1880:
  2231                           
  2232                           ; BSR set to: 0
  2233  00F9CC  D27B               	goto	l2853
  2234  00F9CE                     l2701:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;main.c: 387: _delay((unsigned long)((90)*(8000000/4000.0)));
  2238  00F9CE  0EEA               	movlw	234
  2239  00F9D0  6E45               	movwf	??_ManejaMovimientos& (0+255),c
  2240  00F9D2  0EC3               	movlw	195
  2241  00F9D4                     u2447:
  2242  00F9D4  2EE8               	decfsz	wreg,f,c
  2243  00F9D6  D7FE               	goto	u2447
  2244  00F9D8  2E45               	decfsz	??_ManejaMovimientos& (0+255),f,c
  2245  00F9DA  D7FC               	goto	u2447
  2246  00F9DC  F000               	nop	
  2247                           
  2248                           ;main.c: 389: if(Sw_Up = PORTAbits.RA3 == 0){
  2249  00F9DE  B680               	btfsc	3968,3,c	;volatile
  2250  00F9E0  D002               	goto	u1890
  2251  00F9E2  0E01               	movlw	1
  2252  00F9E4  D001               	goto	u1900
  2253  00F9E6                     u1890:
  2254  00F9E6  0E00               	movlw	0
  2255  00F9E8                     u1900:
  2256  00F9E8  0100               	movlb	0	; () banked
  2257  00F9EA  6F86               	movwf	_Sw_Up& (0+255),b
  2258  00F9EC  0100               	movlb	0	; () banked
  2259  00F9EE  5186               	movf	_Sw_Up& (0+255),w,b
  2260  00F9F0  B4D8               	btfsc	status,2,c
  2261  00F9F2  D0E0               	goto	l2765
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;main.c: 391: i=0;
  2265  00F9F4  0E00               	movlw	0
  2266  00F9F6  0100               	movlb	0	; () banked
  2267  00F9F8  6F7D               	movwf	(_i+1)& (0+255),b
  2268  00F9FA  0E00               	movlw	0
  2269  00F9FC  6F7C               	movwf	_i& (0+255),b
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;main.c: 392: if(posicion == 0){
  2273  00F9FE  504D               	movf	ManejaMovimientos@posicion,w,c
  2274  00FA00  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2275  00FA02  A4D8               	btfss	status,2,c
  2276  00FA04  D019               	goto	l2715
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 393: diasem_tr++;
  2280  00FA06  2A47               	incf	ManejaMovimientos@diasem_tr,f,c
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;main.c: 394: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2284  00FA08  0E00               	movlw	0
  2285  00FA0A  6E40               	movwf	Lcd_Out@x,c
  2286  00FA0C  C047  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2287  00FA10  6A29               	clrf	Convert_diasem@dia+1,c
  2288  00FA12  EC73  F076         	call	_Convert_diasem	;wreg free
  2289  00FA16  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2290  00FA1A  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2291  00FA1E  0E02               	movlw	2
  2292  00FA20  EC6C  F074         	call	_Lcd_Out
  2293                           
  2294                           ;main.c: 395: Lcd_Out(2, 0, "" );
  2295  00FA24  0E00               	movlw	0
  2296  00FA26  6E40               	movwf	Lcd_Out@x,c
  2297  00FA28  0EEB               	movlw	low (STR_6+20)
  2298  00FA2A  6E41               	movwf	Lcd_Out@buffer,c
  2299  00FA2C  0EFE               	movlw	high (STR_6+20)
  2300  00FA2E  6E42               	movwf	Lcd_Out@buffer+1,c
  2301  00FA30  0E02               	movlw	2
  2302  00FA32  EC6C  F074         	call	_Lcd_Out
  2303                           
  2304                           ;main.c: 396: }else if(posicion == 2){
  2305  00FA36  D0BE               	goto	l2765
  2306  00FA38                     l2715:
  2307  00FA38  0E02               	movlw	2
  2308  00FA3A  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2309  00FA3C  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2310  00FA3E  A4D8               	btfss	status,2,c
  2311  00FA40  D021               	goto	l2725
  2312                           
  2313                           ;main.c: 397: dia_tr++;
  2314  00FA42  2A48               	incf	ManejaMovimientos@dia_tr,f,c
  2315                           
  2316                           ;main.c: 398: sprintf(buffer1,"%02u",dia_tr);
  2317  00FA44  0E88               	movlw	low _buffer1
  2318  00FA46  6E0D               	movwf	sprintf@sp,c
  2319  00FA48  0E00               	movlw	high _buffer1
  2320  00FA4A  6E0E               	movwf	sprintf@sp+1,c
  2321  00FA4C  0ED4               	movlw	low (STR_7+10)
  2322  00FA4E  6E0F               	movwf	sprintf@f,c
  2323  00FA50  0EFF               	movlw	high (STR_7+10)
  2324  00FA52  6E10               	movwf	sprintf@f+1,c
  2325  00FA54  C048  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2326  00FA58  6A12               	clrf	?_sprintf+5,c
  2327  00FA5A  EC1C  F07B         	call	_sprintf	;wreg free
  2328                           
  2329                           ;main.c: 399: Lcd_Out(3, 0, buffer1);
  2330  00FA5E  0E00               	movlw	0
  2331  00FA60  6E40               	movwf	Lcd_Out@x,c
  2332  00FA62  0E88               	movlw	low _buffer1
  2333  00FA64  6E41               	movwf	Lcd_Out@buffer,c
  2334  00FA66  0E00               	movlw	high _buffer1
  2335  00FA68  6E42               	movwf	Lcd_Out@buffer+1,c
  2336  00FA6A  0E03               	movlw	3
  2337  00FA6C  EC6C  F074         	call	_Lcd_Out
  2338                           
  2339                           ;main.c: 400: Lcd_Out(3, 0, "" );
  2340  00FA70  0E00               	movlw	0
  2341  00FA72  6E40               	movwf	Lcd_Out@x,c
  2342  00FA74  0EEB               	movlw	low (STR_6+20)
  2343  00FA76  6E41               	movwf	Lcd_Out@buffer,c
  2344  00FA78  0EFE               	movlw	high (STR_6+20)
  2345  00FA7A  6E42               	movwf	Lcd_Out@buffer+1,c
  2346  00FA7C  0E03               	movlw	3
  2347  00FA7E  EC6C  F074         	call	_Lcd_Out
  2348                           
  2349                           ;main.c: 401: }else if(posicion == 4){
  2350  00FA82  D098               	goto	l2765
  2351  00FA84                     l2725:
  2352  00FA84  0E04               	movlw	4
  2353  00FA86  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2354  00FA88  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2355  00FA8A  A4D8               	btfss	status,2,c
  2356  00FA8C  D021               	goto	l2735
  2357                           
  2358                           ;main.c: 402: mes_tr++;
  2359  00FA8E  2A49               	incf	ManejaMovimientos@mes_tr,f,c
  2360                           
  2361                           ;main.c: 403: sprintf(buffer1,"%02u",mes_tr);
  2362  00FA90  0E88               	movlw	low _buffer1
  2363  00FA92  6E0D               	movwf	sprintf@sp,c
  2364  00FA94  0E00               	movlw	high _buffer1
  2365  00FA96  6E0E               	movwf	sprintf@sp+1,c
  2366  00FA98  0ED4               	movlw	low (STR_7+10)
  2367  00FA9A  6E0F               	movwf	sprintf@f,c
  2368  00FA9C  0EFF               	movlw	high (STR_7+10)
  2369  00FA9E  6E10               	movwf	sprintf@f+1,c
  2370  00FAA0  C049  F011         	movff	ManejaMovimientos@mes_tr,?_sprintf+4
  2371  00FAA4  6A12               	clrf	?_sprintf+5,c
  2372  00FAA6  EC1C  F07B         	call	_sprintf	;wreg free
  2373                           
  2374                           ;main.c: 404: Lcd_Out(3, 3, buffer1);
  2375  00FAAA  0E03               	movlw	3
  2376  00FAAC  6E40               	movwf	Lcd_Out@x,c
  2377  00FAAE  0E88               	movlw	low _buffer1
  2378  00FAB0  6E41               	movwf	Lcd_Out@buffer,c
  2379  00FAB2  0E00               	movlw	high _buffer1
  2380  00FAB4  6E42               	movwf	Lcd_Out@buffer+1,c
  2381  00FAB6  0E03               	movlw	3
  2382  00FAB8  EC6C  F074         	call	_Lcd_Out
  2383                           
  2384                           ;main.c: 405: Lcd_Out(3, 3, "" );
  2385  00FABC  0E03               	movlw	3
  2386  00FABE  6E40               	movwf	Lcd_Out@x,c
  2387  00FAC0  0EEB               	movlw	low (STR_6+20)
  2388  00FAC2  6E41               	movwf	Lcd_Out@buffer,c
  2389  00FAC4  0EFE               	movlw	high (STR_6+20)
  2390  00FAC6  6E42               	movwf	Lcd_Out@buffer+1,c
  2391  00FAC8  0E03               	movlw	3
  2392  00FACA  EC6C  F074         	call	_Lcd_Out
  2393                           
  2394                           ;main.c: 406: }else if(posicion == 6){
  2395  00FACE  D072               	goto	l2765
  2396  00FAD0                     l2735:
  2397  00FAD0  0E06               	movlw	6
  2398  00FAD2  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2399  00FAD4  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2400  00FAD6  A4D8               	btfss	status,2,c
  2401  00FAD8  D021               	goto	l2745
  2402                           
  2403                           ;main.c: 407: anio_tr++;
  2404  00FADA  2A4A               	incf	ManejaMovimientos@anio_tr,f,c
  2405                           
  2406                           ;main.c: 408: sprintf(buffer1,"%02u",anio_tr);
  2407  00FADC  0E88               	movlw	low _buffer1
  2408  00FADE  6E0D               	movwf	sprintf@sp,c
  2409  00FAE0  0E00               	movlw	high _buffer1
  2410  00FAE2  6E0E               	movwf	sprintf@sp+1,c
  2411  00FAE4  0ED4               	movlw	low (STR_7+10)
  2412  00FAE6  6E0F               	movwf	sprintf@f,c
  2413  00FAE8  0EFF               	movlw	high (STR_7+10)
  2414  00FAEA  6E10               	movwf	sprintf@f+1,c
  2415  00FAEC  C04A  F011         	movff	ManejaMovimientos@anio_tr,?_sprintf+4
  2416  00FAF0  6A12               	clrf	?_sprintf+5,c
  2417  00FAF2  EC1C  F07B         	call	_sprintf	;wreg free
  2418                           
  2419                           ;main.c: 409: Lcd_Out(3, 6, buffer1);
  2420  00FAF6  0E06               	movlw	6
  2421  00FAF8  6E40               	movwf	Lcd_Out@x,c
  2422  00FAFA  0E88               	movlw	low _buffer1
  2423  00FAFC  6E41               	movwf	Lcd_Out@buffer,c
  2424  00FAFE  0E00               	movlw	high _buffer1
  2425  00FB00  6E42               	movwf	Lcd_Out@buffer+1,c
  2426  00FB02  0E03               	movlw	3
  2427  00FB04  EC6C  F074         	call	_Lcd_Out
  2428                           
  2429                           ;main.c: 410: Lcd_Out(3, 6, "" );
  2430  00FB08  0E06               	movlw	6
  2431  00FB0A  6E40               	movwf	Lcd_Out@x,c
  2432  00FB0C  0EEB               	movlw	low (STR_6+20)
  2433  00FB0E  6E41               	movwf	Lcd_Out@buffer,c
  2434  00FB10  0EFE               	movlw	high (STR_6+20)
  2435  00FB12  6E42               	movwf	Lcd_Out@buffer+1,c
  2436  00FB14  0E03               	movlw	3
  2437  00FB16  EC6C  F074         	call	_Lcd_Out
  2438                           
  2439                           ;main.c: 411: }else if(posicion == 8){
  2440  00FB1A  D04C               	goto	l2765
  2441  00FB1C                     l2745:
  2442  00FB1C  0E08               	movlw	8
  2443  00FB1E  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2444  00FB20  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2445  00FB22  A4D8               	btfss	status,2,c
  2446  00FB24  D021               	goto	l2755
  2447                           
  2448                           ;main.c: 412: hora_tr++;
  2449  00FB26  2A4B               	incf	ManejaMovimientos@hora_tr,f,c
  2450                           
  2451                           ;main.c: 413: sprintf(buffer1,"%02u",hora_tr);
  2452  00FB28  0E88               	movlw	low _buffer1
  2453  00FB2A  6E0D               	movwf	sprintf@sp,c
  2454  00FB2C  0E00               	movlw	high _buffer1
  2455  00FB2E  6E0E               	movwf	sprintf@sp+1,c
  2456  00FB30  0ED4               	movlw	low (STR_7+10)
  2457  00FB32  6E0F               	movwf	sprintf@f,c
  2458  00FB34  0EFF               	movlw	high (STR_7+10)
  2459  00FB36  6E10               	movwf	sprintf@f+1,c
  2460  00FB38  C04B  F011         	movff	ManejaMovimientos@hora_tr,?_sprintf+4
  2461  00FB3C  6A12               	clrf	?_sprintf+5,c
  2462  00FB3E  EC1C  F07B         	call	_sprintf	;wreg free
  2463                           
  2464                           ;main.c: 414: Lcd_Out(4, 0, buffer1);
  2465  00FB42  0E00               	movlw	0
  2466  00FB44  6E40               	movwf	Lcd_Out@x,c
  2467  00FB46  0E88               	movlw	low _buffer1
  2468  00FB48  6E41               	movwf	Lcd_Out@buffer,c
  2469  00FB4A  0E00               	movlw	high _buffer1
  2470  00FB4C  6E42               	movwf	Lcd_Out@buffer+1,c
  2471  00FB4E  0E04               	movlw	4
  2472  00FB50  EC6C  F074         	call	_Lcd_Out
  2473                           
  2474                           ;main.c: 415: Lcd_Out(4, 0, "" );
  2475  00FB54  0E00               	movlw	0
  2476  00FB56  6E40               	movwf	Lcd_Out@x,c
  2477  00FB58  0EEB               	movlw	low (STR_6+20)
  2478  00FB5A  6E41               	movwf	Lcd_Out@buffer,c
  2479  00FB5C  0EFE               	movlw	high (STR_6+20)
  2480  00FB5E  6E42               	movwf	Lcd_Out@buffer+1,c
  2481  00FB60  0E04               	movlw	4
  2482  00FB62  EC6C  F074         	call	_Lcd_Out
  2483                           
  2484                           ;main.c: 416: }else if(posicion == 10){
  2485  00FB66  D026               	goto	l2765
  2486  00FB68                     l2755:
  2487  00FB68  0E0A               	movlw	10
  2488  00FB6A  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2489  00FB6C  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2490  00FB6E  A4D8               	btfss	status,2,c
  2491  00FB70  D021               	goto	l2765
  2492                           
  2493                           ;main.c: 417: minuto_tr++;
  2494  00FB72  2A4C               	incf	ManejaMovimientos@minuto_tr,f,c
  2495                           
  2496                           ;main.c: 418: sprintf(buffer1,"%02u",minuto_tr);
  2497  00FB74  0E88               	movlw	low _buffer1
  2498  00FB76  6E0D               	movwf	sprintf@sp,c
  2499  00FB78  0E00               	movlw	high _buffer1
  2500  00FB7A  6E0E               	movwf	sprintf@sp+1,c
  2501  00FB7C  0ED4               	movlw	low (STR_7+10)
  2502  00FB7E  6E0F               	movwf	sprintf@f,c
  2503  00FB80  0EFF               	movlw	high (STR_7+10)
  2504  00FB82  6E10               	movwf	sprintf@f+1,c
  2505  00FB84  C04C  F011         	movff	ManejaMovimientos@minuto_tr,?_sprintf+4
  2506  00FB88  6A12               	clrf	?_sprintf+5,c
  2507  00FB8A  EC1C  F07B         	call	_sprintf	;wreg free
  2508                           
  2509                           ;main.c: 419: Lcd_Out(4, 3, buffer1);
  2510  00FB8E  0E03               	movlw	3
  2511  00FB90  6E40               	movwf	Lcd_Out@x,c
  2512  00FB92  0E88               	movlw	low _buffer1
  2513  00FB94  6E41               	movwf	Lcd_Out@buffer,c
  2514  00FB96  0E00               	movlw	high _buffer1
  2515  00FB98  6E42               	movwf	Lcd_Out@buffer+1,c
  2516  00FB9A  0E04               	movlw	4
  2517  00FB9C  EC6C  F074         	call	_Lcd_Out
  2518                           
  2519                           ;main.c: 420: Lcd_Out(4, 3, "" );
  2520  00FBA0  0E03               	movlw	3
  2521  00FBA2  6E40               	movwf	Lcd_Out@x,c
  2522  00FBA4  0EEB               	movlw	low (STR_6+20)
  2523  00FBA6  6E41               	movwf	Lcd_Out@buffer,c
  2524  00FBA8  0EFE               	movlw	high (STR_6+20)
  2525  00FBAA  6E42               	movwf	Lcd_Out@buffer+1,c
  2526  00FBAC  0E04               	movlw	4
  2527  00FBAE  EC6C  F074         	call	_Lcd_Out
  2528  00FBB2  D000               	goto	l2765
  2529  00FBB4                     l2765:
  2530                           
  2531                           ;main.c: 421: }
  2532                           ;main.c: 423: }
  2533                           ;main.c: 424: if(Sw_Right = PORTAbits.RA2 == 0){
  2534  00FBB4  B480               	btfsc	3968,2,c	;volatile
  2535  00FBB6  D002               	goto	u1980
  2536  00FBB8  0E01               	movlw	1
  2537  00FBBA  D001               	goto	u1990
  2538  00FBBC                     u1980:
  2539  00FBBC  0E00               	movlw	0
  2540  00FBBE                     u1990:
  2541  00FBBE  0100               	movlb	0	; () banked
  2542  00FBC0  6F85               	movwf	_Sw_Right& (0+255),b
  2543  00FBC2  0100               	movlb	0	; () banked
  2544  00FBC4  5185               	movf	_Sw_Right& (0+255),w,b
  2545  00FBC6  B4D8               	btfsc	status,2,c
  2546  00FBC8  D02D               	goto	l2773
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 426: posicion+=2;
  2550  00FBCA  0E02               	movlw	2
  2551  00FBCC  264D               	addwf	ManejaMovimientos@posicion,f,c
  2552  00FBCE  0E00               	movlw	0
  2553  00FBD0  224E               	addwfc	ManejaMovimientos@posicion+1,f,c
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 427: i=0;
  2557  00FBD2  0E00               	movlw	0
  2558  00FBD4  0100               	movlb	0	; () banked
  2559  00FBD6  6F7D               	movwf	(_i+1)& (0+255),b
  2560  00FBD8  0E00               	movlw	0
  2561  00FBDA  6F7C               	movwf	_i& (0+255),b
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 428: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion+1], "" );
  2565  00FBDC  C04D  F045         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2566  00FBE0  C04E  F046         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2567  00FBE4  90D8               	bcf	status,0,c
  2568  00FBE6  3645               	rlcf	??_ManejaMovimientos,f,c
  2569  00FBE8  3646               	rlcf	??_ManejaMovimientos+1,f,c
  2570  00FBEA  0E02               	movlw	2
  2571  00FBEC  2645               	addwf	??_ManejaMovimientos,f,c
  2572  00FBEE  0E00               	movlw	0
  2573  00FBF0  2246               	addwfc	??_ManejaMovimientos+1,f,c
  2574  00FBF2  0E9C               	movlw	low _posicionesLeft
  2575  00FBF4  2445               	addwf	??_ManejaMovimientos,w,c
  2576  00FBF6  6ED9               	movwf	fsr2l,c
  2577  00FBF8  0E00               	movlw	high _posicionesLeft
  2578  00FBFA  2046               	addwfc	??_ManejaMovimientos+1,w,c
  2579  00FBFC  6EDA               	movwf	fsr2h,c
  2580  00FBFE  50DF               	movf	indf2,w,c
  2581  00FC00  6E40               	movwf	Lcd_Out@x,c
  2582  00FC02  0EEB               	movlw	low (STR_6+20)
  2583  00FC04  6E41               	movwf	Lcd_Out@buffer,c
  2584  00FC06  0EFE               	movlw	high (STR_6+20)
  2585  00FC08  6E42               	movwf	Lcd_Out@buffer+1,c
  2586  00FC0A  90D8               	bcf	status,0,c
  2587  00FC0C  344D               	rlcf	ManejaMovimientos@posicion,w,c
  2588  00FC0E  6ED9               	movwf	fsr2l,c
  2589  00FC10  344E               	rlcf	ManejaMovimientos@posicion+1,w,c
  2590  00FC12  6EDA               	movwf	fsr2h,c
  2591  00FC14  0E9C               	movlw	low _posicionesLeft
  2592  00FC16  26D9               	addwf	fsr2l,f,c
  2593  00FC18  0E00               	movlw	high _posicionesLeft
  2594  00FC1A  22DA               	addwfc	fsr2h,f,c
  2595  00FC1C  50DF               	movf	indf2,w,c
  2596  00FC1E  EC6C  F074         	call	_Lcd_Out
  2597  00FC22  D000               	goto	l2773
  2598  00FC24                     l2773:
  2599                           
  2600                           ;main.c: 430: }
  2601                           ;main.c: 432: if(Sw_Left = PORTAbits.RA0 == 0){
  2602  00FC24  B080               	btfsc	3968,0,c	;volatile
  2603  00FC26  D002               	goto	u2010
  2604  00FC28  0E01               	movlw	1
  2605  00FC2A  D001               	goto	u2020
  2606  00FC2C                     u2010:
  2607  00FC2C  0E00               	movlw	0
  2608  00FC2E                     u2020:
  2609  00FC2E  0100               	movlb	0	; () banked
  2610  00FC30  6F84               	movwf	_Sw_Left& (0+255),b
  2611  00FC32  0100               	movlb	0	; () banked
  2612  00FC34  5184               	movf	_Sw_Left& (0+255),w,b
  2613  00FC36  B4D8               	btfsc	status,2,c
  2614  00FC38  D02D               	goto	l2781
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 434: posicion-=2;
  2618  00FC3A  0EFE               	movlw	254
  2619  00FC3C  264D               	addwf	ManejaMovimientos@posicion,f,c
  2620  00FC3E  0EFF               	movlw	255
  2621  00FC40  224E               	addwfc	ManejaMovimientos@posicion+1,f,c
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 435: i=0;
  2625  00FC42  0E00               	movlw	0
  2626  00FC44  0100               	movlb	0	; () banked
  2627  00FC46  6F7D               	movwf	(_i+1)& (0+255),b
  2628  00FC48  0E00               	movlw	0
  2629  00FC4A  6F7C               	movwf	_i& (0+255),b
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 436: Lcd_Out(posicionesLeft[posicion], posicionesLeft[posicion+1], "" );
  2633  00FC4C  C04D  F045         	movff	ManejaMovimientos@posicion,??_ManejaMovimientos
  2634  00FC50  C04E  F046         	movff	ManejaMovimientos@posicion+1,??_ManejaMovimientos+1
  2635  00FC54  90D8               	bcf	status,0,c
  2636  00FC56  3645               	rlcf	??_ManejaMovimientos,f,c
  2637  00FC58  3646               	rlcf	??_ManejaMovimientos+1,f,c
  2638  00FC5A  0E02               	movlw	2
  2639  00FC5C  2645               	addwf	??_ManejaMovimientos,f,c
  2640  00FC5E  0E00               	movlw	0
  2641  00FC60  2246               	addwfc	??_ManejaMovimientos+1,f,c
  2642  00FC62  0E9C               	movlw	low _posicionesLeft
  2643  00FC64  2445               	addwf	??_ManejaMovimientos,w,c
  2644  00FC66  6ED9               	movwf	fsr2l,c
  2645  00FC68  0E00               	movlw	high _posicionesLeft
  2646  00FC6A  2046               	addwfc	??_ManejaMovimientos+1,w,c
  2647  00FC6C  6EDA               	movwf	fsr2h,c
  2648  00FC6E  50DF               	movf	indf2,w,c
  2649  00FC70  6E40               	movwf	Lcd_Out@x,c
  2650  00FC72  0EEB               	movlw	low (STR_6+20)
  2651  00FC74  6E41               	movwf	Lcd_Out@buffer,c
  2652  00FC76  0EFE               	movlw	high (STR_6+20)
  2653  00FC78  6E42               	movwf	Lcd_Out@buffer+1,c
  2654  00FC7A  90D8               	bcf	status,0,c
  2655  00FC7C  344D               	rlcf	ManejaMovimientos@posicion,w,c
  2656  00FC7E  6ED9               	movwf	fsr2l,c
  2657  00FC80  344E               	rlcf	ManejaMovimientos@posicion+1,w,c
  2658  00FC82  6EDA               	movwf	fsr2h,c
  2659  00FC84  0E9C               	movlw	low _posicionesLeft
  2660  00FC86  26D9               	addwf	fsr2l,f,c
  2661  00FC88  0E00               	movlw	high _posicionesLeft
  2662  00FC8A  22DA               	addwfc	fsr2h,f,c
  2663  00FC8C  50DF               	movf	indf2,w,c
  2664  00FC8E  EC6C  F074         	call	_Lcd_Out
  2665  00FC92  D000               	goto	l2781
  2666  00FC94                     l2781:
  2667                           
  2668                           ;main.c: 438: }
  2669                           ;main.c: 440: if(Sw_Down = PORTCbits.RC4 == 0){
  2670  00FC94  B882               	btfsc	3970,4,c	;volatile
  2671  00FC96  D002               	goto	u2040
  2672  00FC98  0E01               	movlw	1
  2673  00FC9A  D001               	goto	u2050
  2674  00FC9C                     u2040:
  2675  00FC9C  0E00               	movlw	0
  2676  00FC9E                     u2050:
  2677  00FC9E  0100               	movlb	0	; () banked
  2678  00FCA0  6F83               	movwf	_Sw_Down& (0+255),b
  2679  00FCA2  0100               	movlb	0	; () banked
  2680  00FCA4  5183               	movf	_Sw_Down& (0+255),w,b
  2681  00FCA6  B4D8               	btfsc	status,2,c
  2682  00FCA8  D0E0               	goto	l2843
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;main.c: 442: i=0;
  2686  00FCAA  0E00               	movlw	0
  2687  00FCAC  0100               	movlb	0	; () banked
  2688  00FCAE  6F7D               	movwf	(_i+1)& (0+255),b
  2689  00FCB0  0E00               	movlw	0
  2690  00FCB2  6F7C               	movwf	_i& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;main.c: 443: if(posicion == 0){
  2694  00FCB4  504D               	movf	ManejaMovimientos@posicion,w,c
  2695  00FCB6  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2696  00FCB8  A4D8               	btfss	status,2,c
  2697  00FCBA  D019               	goto	l2793
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 444: diasem_tr--;
  2701  00FCBC  0647               	decf	ManejaMovimientos@diasem_tr,f,c
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;main.c: 445: Lcd_Out(2, 0, Convert_diasem(diasem_tr) );
  2705  00FCBE  0E00               	movlw	0
  2706  00FCC0  6E40               	movwf	Lcd_Out@x,c
  2707  00FCC2  C047  F028         	movff	ManejaMovimientos@diasem_tr,Convert_diasem@dia
  2708  00FCC6  6A29               	clrf	Convert_diasem@dia+1,c
  2709  00FCC8  EC73  F076         	call	_Convert_diasem	;wreg free
  2710  00FCCC  C028  F041         	movff	?_Convert_diasem,Lcd_Out@buffer
  2711  00FCD0  C029  F042         	movff	?_Convert_diasem+1,Lcd_Out@buffer+1
  2712  00FCD4  0E02               	movlw	2
  2713  00FCD6  EC6C  F074         	call	_Lcd_Out
  2714                           
  2715                           ;main.c: 446: Lcd_Out(2, 0, "" );
  2716  00FCDA  0E00               	movlw	0
  2717  00FCDC  6E40               	movwf	Lcd_Out@x,c
  2718  00FCDE  0EEB               	movlw	low (STR_6+20)
  2719  00FCE0  6E41               	movwf	Lcd_Out@buffer,c
  2720  00FCE2  0EFE               	movlw	high (STR_6+20)
  2721  00FCE4  6E42               	movwf	Lcd_Out@buffer+1,c
  2722  00FCE6  0E02               	movlw	2
  2723  00FCE8  EC6C  F074         	call	_Lcd_Out
  2724                           
  2725                           ;main.c: 447: }else if(posicion == 2){
  2726  00FCEC  D0BE               	goto	l2843
  2727  00FCEE                     l2793:
  2728  00FCEE  0E02               	movlw	2
  2729  00FCF0  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2730  00FCF2  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2731  00FCF4  A4D8               	btfss	status,2,c
  2732  00FCF6  D021               	goto	l2803
  2733                           
  2734                           ;main.c: 448: dia_tr--;
  2735  00FCF8  0648               	decf	ManejaMovimientos@dia_tr,f,c
  2736                           
  2737                           ;main.c: 449: sprintf(buffer1,"%02u",dia_tr);
  2738  00FCFA  0E88               	movlw	low _buffer1
  2739  00FCFC  6E0D               	movwf	sprintf@sp,c
  2740  00FCFE  0E00               	movlw	high _buffer1
  2741  00FD00  6E0E               	movwf	sprintf@sp+1,c
  2742  00FD02  0ED4               	movlw	low (STR_7+10)
  2743  00FD04  6E0F               	movwf	sprintf@f,c
  2744  00FD06  0EFF               	movlw	high (STR_7+10)
  2745  00FD08  6E10               	movwf	sprintf@f+1,c
  2746  00FD0A  C048  F011         	movff	ManejaMovimientos@dia_tr,?_sprintf+4
  2747  00FD0E  6A12               	clrf	?_sprintf+5,c
  2748  00FD10  EC1C  F07B         	call	_sprintf	;wreg free
  2749                           
  2750                           ;main.c: 450: Lcd_Out(3, 0, buffer1);
  2751  00FD14  0E00               	movlw	0
  2752  00FD16  6E40               	movwf	Lcd_Out@x,c
  2753  00FD18  0E88               	movlw	low _buffer1
  2754  00FD1A  6E41               	movwf	Lcd_Out@buffer,c
  2755  00FD1C  0E00               	movlw	high _buffer1
  2756  00FD1E  6E42               	movwf	Lcd_Out@buffer+1,c
  2757  00FD20  0E03               	movlw	3
  2758  00FD22  EC6C  F074         	call	_Lcd_Out
  2759                           
  2760                           ;main.c: 451: Lcd_Out(3, 0, "" );
  2761  00FD26  0E00               	movlw	0
  2762  00FD28  6E40               	movwf	Lcd_Out@x,c
  2763  00FD2A  0EEB               	movlw	low (STR_6+20)
  2764  00FD2C  6E41               	movwf	Lcd_Out@buffer,c
  2765  00FD2E  0EFE               	movlw	high (STR_6+20)
  2766  00FD30  6E42               	movwf	Lcd_Out@buffer+1,c
  2767  00FD32  0E03               	movlw	3
  2768  00FD34  EC6C  F074         	call	_Lcd_Out
  2769                           
  2770                           ;main.c: 452: }else if(posicion == 4){
  2771  00FD38  D098               	goto	l2843
  2772  00FD3A                     l2803:
  2773  00FD3A  0E04               	movlw	4
  2774  00FD3C  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2775  00FD3E  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2776  00FD40  A4D8               	btfss	status,2,c
  2777  00FD42  D021               	goto	l2813
  2778                           
  2779                           ;main.c: 453: mes_tr--;
  2780  00FD44  0649               	decf	ManejaMovimientos@mes_tr,f,c
  2781                           
  2782                           ;main.c: 454: sprintf(buffer1,"%02u",mes_tr);
  2783  00FD46  0E88               	movlw	low _buffer1
  2784  00FD48  6E0D               	movwf	sprintf@sp,c
  2785  00FD4A  0E00               	movlw	high _buffer1
  2786  00FD4C  6E0E               	movwf	sprintf@sp+1,c
  2787  00FD4E  0ED4               	movlw	low (STR_7+10)
  2788  00FD50  6E0F               	movwf	sprintf@f,c
  2789  00FD52  0EFF               	movlw	high (STR_7+10)
  2790  00FD54  6E10               	movwf	sprintf@f+1,c
  2791  00FD56  C049  F011         	movff	ManejaMovimientos@mes_tr,?_sprintf+4
  2792  00FD5A  6A12               	clrf	?_sprintf+5,c
  2793  00FD5C  EC1C  F07B         	call	_sprintf	;wreg free
  2794                           
  2795                           ;main.c: 455: Lcd_Out(3, 3, buffer1);
  2796  00FD60  0E03               	movlw	3
  2797  00FD62  6E40               	movwf	Lcd_Out@x,c
  2798  00FD64  0E88               	movlw	low _buffer1
  2799  00FD66  6E41               	movwf	Lcd_Out@buffer,c
  2800  00FD68  0E00               	movlw	high _buffer1
  2801  00FD6A  6E42               	movwf	Lcd_Out@buffer+1,c
  2802  00FD6C  0E03               	movlw	3
  2803  00FD6E  EC6C  F074         	call	_Lcd_Out
  2804                           
  2805                           ;main.c: 456: Lcd_Out(3, 3, "" );
  2806  00FD72  0E03               	movlw	3
  2807  00FD74  6E40               	movwf	Lcd_Out@x,c
  2808  00FD76  0EEB               	movlw	low (STR_6+20)
  2809  00FD78  6E41               	movwf	Lcd_Out@buffer,c
  2810  00FD7A  0EFE               	movlw	high (STR_6+20)
  2811  00FD7C  6E42               	movwf	Lcd_Out@buffer+1,c
  2812  00FD7E  0E03               	movlw	3
  2813  00FD80  EC6C  F074         	call	_Lcd_Out
  2814                           
  2815                           ;main.c: 457: }else if(posicion == 6){
  2816  00FD84  D072               	goto	l2843
  2817  00FD86                     l2813:
  2818  00FD86  0E06               	movlw	6
  2819  00FD88  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2820  00FD8A  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2821  00FD8C  A4D8               	btfss	status,2,c
  2822  00FD8E  D021               	goto	l2823
  2823                           
  2824                           ;main.c: 458: anio_tr--;
  2825  00FD90  064A               	decf	ManejaMovimientos@anio_tr,f,c
  2826                           
  2827                           ;main.c: 459: sprintf(buffer1,"%02u",anio_tr);
  2828  00FD92  0E88               	movlw	low _buffer1
  2829  00FD94  6E0D               	movwf	sprintf@sp,c
  2830  00FD96  0E00               	movlw	high _buffer1
  2831  00FD98  6E0E               	movwf	sprintf@sp+1,c
  2832  00FD9A  0ED4               	movlw	low (STR_7+10)
  2833  00FD9C  6E0F               	movwf	sprintf@f,c
  2834  00FD9E  0EFF               	movlw	high (STR_7+10)
  2835  00FDA0  6E10               	movwf	sprintf@f+1,c
  2836  00FDA2  C04A  F011         	movff	ManejaMovimientos@anio_tr,?_sprintf+4
  2837  00FDA6  6A12               	clrf	?_sprintf+5,c
  2838  00FDA8  EC1C  F07B         	call	_sprintf	;wreg free
  2839                           
  2840                           ;main.c: 460: Lcd_Out(3, 6, buffer1);
  2841  00FDAC  0E06               	movlw	6
  2842  00FDAE  6E40               	movwf	Lcd_Out@x,c
  2843  00FDB0  0E88               	movlw	low _buffer1
  2844  00FDB2  6E41               	movwf	Lcd_Out@buffer,c
  2845  00FDB4  0E00               	movlw	high _buffer1
  2846  00FDB6  6E42               	movwf	Lcd_Out@buffer+1,c
  2847  00FDB8  0E03               	movlw	3
  2848  00FDBA  EC6C  F074         	call	_Lcd_Out
  2849                           
  2850                           ;main.c: 461: Lcd_Out(3, 6, "" );
  2851  00FDBE  0E06               	movlw	6
  2852  00FDC0  6E40               	movwf	Lcd_Out@x,c
  2853  00FDC2  0EEB               	movlw	low (STR_6+20)
  2854  00FDC4  6E41               	movwf	Lcd_Out@buffer,c
  2855  00FDC6  0EFE               	movlw	high (STR_6+20)
  2856  00FDC8  6E42               	movwf	Lcd_Out@buffer+1,c
  2857  00FDCA  0E03               	movlw	3
  2858  00FDCC  EC6C  F074         	call	_Lcd_Out
  2859                           
  2860                           ;main.c: 462: }else if(posicion == 8){
  2861  00FDD0  D04C               	goto	l2843
  2862  00FDD2                     l2823:
  2863  00FDD2  0E08               	movlw	8
  2864  00FDD4  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2865  00FDD6  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2866  00FDD8  A4D8               	btfss	status,2,c
  2867  00FDDA  D021               	goto	l2833
  2868                           
  2869                           ;main.c: 463: hora_tr--;
  2870  00FDDC  064B               	decf	ManejaMovimientos@hora_tr,f,c
  2871                           
  2872                           ;main.c: 464: sprintf(buffer1,"%02u",hora_tr);
  2873  00FDDE  0E88               	movlw	low _buffer1
  2874  00FDE0  6E0D               	movwf	sprintf@sp,c
  2875  00FDE2  0E00               	movlw	high _buffer1
  2876  00FDE4  6E0E               	movwf	sprintf@sp+1,c
  2877  00FDE6  0ED4               	movlw	low (STR_7+10)
  2878  00FDE8  6E0F               	movwf	sprintf@f,c
  2879  00FDEA  0EFF               	movlw	high (STR_7+10)
  2880  00FDEC  6E10               	movwf	sprintf@f+1,c
  2881  00FDEE  C04B  F011         	movff	ManejaMovimientos@hora_tr,?_sprintf+4
  2882  00FDF2  6A12               	clrf	?_sprintf+5,c
  2883  00FDF4  EC1C  F07B         	call	_sprintf	;wreg free
  2884                           
  2885                           ;main.c: 465: Lcd_Out(4, 0, buffer1);
  2886  00FDF8  0E00               	movlw	0
  2887  00FDFA  6E40               	movwf	Lcd_Out@x,c
  2888  00FDFC  0E88               	movlw	low _buffer1
  2889  00FDFE  6E41               	movwf	Lcd_Out@buffer,c
  2890  00FE00  0E00               	movlw	high _buffer1
  2891  00FE02  6E42               	movwf	Lcd_Out@buffer+1,c
  2892  00FE04  0E04               	movlw	4
  2893  00FE06  EC6C  F074         	call	_Lcd_Out
  2894                           
  2895                           ;main.c: 466: Lcd_Out(4, 0, "" );
  2896  00FE0A  0E00               	movlw	0
  2897  00FE0C  6E40               	movwf	Lcd_Out@x,c
  2898  00FE0E  0EEB               	movlw	low (STR_6+20)
  2899  00FE10  6E41               	movwf	Lcd_Out@buffer,c
  2900  00FE12  0EFE               	movlw	high (STR_6+20)
  2901  00FE14  6E42               	movwf	Lcd_Out@buffer+1,c
  2902  00FE16  0E04               	movlw	4
  2903  00FE18  EC6C  F074         	call	_Lcd_Out
  2904                           
  2905                           ;main.c: 467: }else if(posicion == 10){
  2906  00FE1C  D026               	goto	l2843
  2907  00FE1E                     l2833:
  2908  00FE1E  0E0A               	movlw	10
  2909  00FE20  184D               	xorwf	ManejaMovimientos@posicion,w,c
  2910  00FE22  104E               	iorwf	ManejaMovimientos@posicion+1,w,c
  2911  00FE24  A4D8               	btfss	status,2,c
  2912  00FE26  D021               	goto	l2843
  2913                           
  2914                           ;main.c: 468: minuto_tr--;
  2915  00FE28  064C               	decf	ManejaMovimientos@minuto_tr,f,c
  2916                           
  2917                           ;main.c: 469: sprintf(buffer1,"%02u",minuto_tr);
  2918  00FE2A  0E88               	movlw	low _buffer1
  2919  00FE2C  6E0D               	movwf	sprintf@sp,c
  2920  00FE2E  0E00               	movlw	high _buffer1
  2921  00FE30  6E0E               	movwf	sprintf@sp+1,c
  2922  00FE32  0ED4               	movlw	low (STR_7+10)
  2923  00FE34  6E0F               	movwf	sprintf@f,c
  2924  00FE36  0EFF               	movlw	high (STR_7+10)
  2925  00FE38  6E10               	movwf	sprintf@f+1,c
  2926  00FE3A  C04C  F011         	movff	ManejaMovimientos@minuto_tr,?_sprintf+4
  2927  00FE3E  6A12               	clrf	?_sprintf+5,c
  2928  00FE40  EC1C  F07B         	call	_sprintf	;wreg free
  2929                           
  2930                           ;main.c: 470: Lcd_Out(4, 3, buffer1);
  2931  00FE44  0E03               	movlw	3
  2932  00FE46  6E40               	movwf	Lcd_Out@x,c
  2933  00FE48  0E88               	movlw	low _buffer1
  2934  00FE4A  6E41               	movwf	Lcd_Out@buffer,c
  2935  00FE4C  0E00               	movlw	high _buffer1
  2936  00FE4E  6E42               	movwf	Lcd_Out@buffer+1,c
  2937  00FE50  0E04               	movlw	4
  2938  00FE52  EC6C  F074         	call	_Lcd_Out
  2939                           
  2940                           ;main.c: 471: Lcd_Out(4, 3, "" );
  2941  00FE56  0E03               	movlw	3
  2942  00FE58  6E40               	movwf	Lcd_Out@x,c
  2943  00FE5A  0EEB               	movlw	low (STR_6+20)
  2944  00FE5C  6E41               	movwf	Lcd_Out@buffer,c
  2945  00FE5E  0EFE               	movlw	high (STR_6+20)
  2946  00FE60  6E42               	movwf	Lcd_Out@buffer+1,c
  2947  00FE62  0E04               	movlw	4
  2948  00FE64  EC6C  F074         	call	_Lcd_Out
  2949  00FE68  D000               	goto	l2843
  2950  00FE6A                     l2843:
  2951                           
  2952                           ;main.c: 472: }
  2953                           ;main.c: 473: }
  2954                           ;main.c: 475: if(Sw_Center = PORTAbits.RA5 == 0){
  2955  00FE6A  BA80               	btfsc	3968,5,c	;volatile
  2956  00FE6C  D002               	goto	u2130
  2957  00FE6E  0E01               	movlw	1
  2958  00FE70  D001               	goto	u2140
  2959  00FE72                     u2130:
  2960  00FE72  0E00               	movlw	0
  2961  00FE74                     u2140:
  2962  00FE74  0100               	movlb	0	; () banked
  2963  00FE76  6F82               	movwf	_Sw_Center& (0+255),b
  2964  00FE78  0100               	movlb	0	; () banked
  2965  00FE7A  5182               	movf	_Sw_Center& (0+255),w,b
  2966  00FE7C  B4D8               	btfsc	status,2,c
  2967  00FE7E  D017               	goto	l2849
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;main.c: 476: diasem = diasem_tr;
  2971  00FE80  C047  F05C         	movff	ManejaMovimientos@diasem_tr,_diasem
  2972  00FE84  6A5D               	clrf	_diasem+1,c
  2973                           
  2974                           ;main.c: 477: dia = dia_tr;
  2975  00FE86  C048  F05A         	movff	ManejaMovimientos@dia_tr,_dia
  2976  00FE8A  6A5B               	clrf	_dia+1,c
  2977                           
  2978                           ;main.c: 478: mes = mes_tr;
  2979  00FE8C  C049  F05E         	movff	ManejaMovimientos@mes_tr,_mes
  2980  00FE90  6A5F               	clrf	_mes+1,c
  2981                           
  2982                           ;main.c: 479: anio = anio_tr;
  2983  00FE92  C04A  F058         	movff	ManejaMovimientos@anio_tr,_anio
  2984  00FE96  6A59               	clrf	_anio+1,c
  2985                           
  2986                           ;main.c: 480: hora = hora_tr;
  2987  00FE98  C04B  F0BA         	movff	ManejaMovimientos@hora_tr,_hora
  2988  00FE9C  0100               	movlb	0	; () banked
  2989  00FE9E  6BBB               	clrf	(_hora+1)& (0+255),b
  2990                           
  2991                           ;main.c: 481: minuto = minuto_tr;
  2992  00FEA0  C04C  F0BC         	movff	ManejaMovimientos@minuto_tr,_minuto
  2993  00FEA4  0100               	movlb	0	; () banked
  2994  00FEA6  6BBD               	clrf	(_minuto+1)& (0+255),b
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;main.c: 482: Write_RTC();
  2998  00FEA8  EC59  F079         	call	_Write_RTC	;wreg free
  2999                           
  3000                           ;main.c: 484: break;
  3001  00FEAC  D00B               	goto	l2853
  3002  00FEAE                     l2849:
  3003  00FEAE  0100               	movlb	0	; () banked
  3004  00FEB0  4B7C               	infsnz	_i& (0+255),f,b
  3005  00FEB2  2B7D               	incf	(_i+1)& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008  00FEB4  0100               	movlb	0	; () banked
  3009  00FEB6  BF7D               	btfsc	(_i+1)& (0+255),7,b
  3010  00FEB8  D58A               	goto	l2701
  3011  00FEBA  0100               	movlb	0	; () banked
  3012  00FEBC  517D               	movf	(_i+1)& (0+255),w,b
  3013  00FEBE  E102               	bnz	l2853
  3014  00FEC0  D57F               	goto	L1
  3015  00FEC2  D000               	goto	l2853
  3016  00FEC4                     l2853:
  3017                           
  3018                           ;main.c: 485: }
  3019                           ;main.c: 486: }
  3020                           ;main.c: 488: Lcd_Cmd(12);
  3021  00FEC4  0E0C               	movlw	12
  3022  00FEC6  EC02  F077         	call	_Lcd_Cmd
  3023  00FECA  0012               	return		;funcret
  3024  00FECC                     __end_of_ManejaMovimientos:
  3025                           	opt stack 0
  3026                           tblptru	equ	0xFF8
  3027                           tblptrh	equ	0xFF7
  3028                           tblptrl	equ	0xFF6
  3029                           tablat	equ	0xFF5
  3030                           prodh	equ	0xFF4
  3031                           prodl	equ	0xFF3
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _Write_RTC *****************
  3042 ;; Defined at:
  3043 ;;		line 254 in file "../main.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;		None               void
  3050 ;; Registers used:
  3051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3061 ;;Total ram usage:        0 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; Hardware stack levels required when called:    2
  3064 ;; This function calls:
  3065 ;;		_RtccWrOn
  3066 ;;		_RtccWriteDate
  3067 ;;		_RtccWriteTime
  3068 ;;		___awdiv
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;;		_ManejaMovimientos
  3072 ;; This function uses a non-reentrant model
  3073 ;;
  3074                           
  3075                           	psect	text7
  3076  00F2B2                     __ptext7:
  3077                           	opt stack 0
  3078  00F2B2                     _Write_RTC:
  3079                           	opt stack 28
  3080                           
  3081                           ;main.c: 256: RtccWrOn();
  3082                           
  3083                           ;incstack = 0
  3084  00F2B2  EC1A  F073         	call	_RtccWrOn	;wreg free
  3085                           
  3086                           ;main.c: 258: PIE3bits.RTCCIE=1;
  3087  00F2B6  80A3               	bsf	4003,0,c	;volatile
  3088                           
  3089                           ;main.c: 259: segundo_d=segundo/10;
  3090  00F2B8  C07E  F001         	movff	_segundo,___awdiv@dividend
  3091  00F2BC  C07F  F002         	movff	_segundo+1,___awdiv@dividend+1
  3092  00F2C0  0E00               	movlw	0
  3093  00F2C2  6E04               	movwf	___awdiv@divisor+1,c
  3094  00F2C4  0E0A               	movlw	10
  3095  00F2C6  6E03               	movwf	___awdiv@divisor,c
  3096  00F2C8  ECB6  F074         	call	___awdiv	;wreg free
  3097  00F2CC  5001               	movf	?___awdiv,w,c
  3098  00F2CE  0100               	movlb	0	; () banked
  3099  00F2D0  6FC9               	movwf	_segundo_d& (0+255),b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;main.c: 260: segundo_u=segundo-segundo_d*10;
  3103  00F2D2  0100               	movlb	0	; () banked
  3104  00F2D4  51C9               	movf	_segundo_d& (0+255),w,b
  3105  00F2D6  0D0A               	mullw	10
  3106  00F2D8  50F3               	movf	prodl,w,c
  3107  00F2DA  0800               	sublw	0
  3108  00F2DC  0100               	movlb	0	; () banked
  3109  00F2DE  257E               	addwf	_segundo& (0+255),w,b
  3110  00F2E0  0100               	movlb	0	; () banked
  3111  00F2E2  6FCA               	movwf	_segundo_u& (0+255),b
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;main.c: 261: RtccTime.f.sec =segundo_d*16+segundo_u;
  3115  00F2E4  0100               	movlb	0	; () banked
  3116  00F2E6  51C9               	movf	_segundo_d& (0+255),w,b
  3117  00F2E8  0D10               	mullw	16
  3118  00F2EA  50F3               	movf	prodl,w,c
  3119  00F2EC  0100               	movlb	0	; () banked
  3120  00F2EE  25CA               	addwf	_segundo_u& (0+255),w,b
  3121  00F2F0  6E55               	movwf	_RtccTime+1,c
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;main.c: 262: minuto_d=minuto/10;
  3125  00F2F2  C0BC  F001         	movff	_minuto,___awdiv@dividend
  3126  00F2F6  C0BD  F002         	movff	_minuto+1,___awdiv@dividend+1
  3127  00F2FA  0E00               	movlw	0
  3128  00F2FC  6E04               	movwf	___awdiv@divisor+1,c
  3129  00F2FE  0E0A               	movlw	10
  3130  00F300  6E03               	movwf	___awdiv@divisor,c
  3131  00F302  ECB6  F074         	call	___awdiv	;wreg free
  3132  00F306  5001               	movf	?___awdiv,w,c
  3133  00F308  0100               	movlb	0	; () banked
  3134  00F30A  6FC7               	movwf	_minuto_d& (0+255),b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 263: minuto_u=minuto-minuto_d*10;
  3138  00F30C  0100               	movlb	0	; () banked
  3139  00F30E  51C7               	movf	_minuto_d& (0+255),w,b
  3140  00F310  0D0A               	mullw	10
  3141  00F312  50F3               	movf	prodl,w,c
  3142  00F314  0800               	sublw	0
  3143  00F316  0100               	movlb	0	; () banked
  3144  00F318  25BC               	addwf	_minuto& (0+255),w,b
  3145  00F31A  0100               	movlb	0	; () banked
  3146  00F31C  6FC8               	movwf	_minuto_u& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;main.c: 264: RtccTime.f.min =minuto_d*16+minuto_u;
  3150  00F31E  0100               	movlb	0	; () banked
  3151  00F320  51C7               	movf	_minuto_d& (0+255),w,b
  3152  00F322  0D10               	mullw	16
  3153  00F324  50F3               	movf	prodl,w,c
  3154  00F326  0100               	movlb	0	; () banked
  3155  00F328  25C8               	addwf	_minuto_u& (0+255),w,b
  3156  00F32A  6E56               	movwf	_RtccTime+2,c
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;main.c: 265: hora_d=hora/10;
  3160  00F32C  C0BA  F001         	movff	_hora,___awdiv@dividend
  3161  00F330  C0BB  F002         	movff	_hora+1,___awdiv@dividend+1
  3162  00F334  0E00               	movlw	0
  3163  00F336  6E04               	movwf	___awdiv@divisor+1,c
  3164  00F338  0E0A               	movlw	10
  3165  00F33A  6E03               	movwf	___awdiv@divisor,c
  3166  00F33C  ECB6  F074         	call	___awdiv	;wreg free
  3167  00F340  5001               	movf	?___awdiv,w,c
  3168  00F342  0100               	movlb	0	; () banked
  3169  00F344  6FC3               	movwf	_hora_d& (0+255),b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 266: hora_u=hora-hora_d*10;
  3173  00F346  0100               	movlb	0	; () banked
  3174  00F348  51C3               	movf	_hora_d& (0+255),w,b
  3175  00F34A  0D0A               	mullw	10
  3176  00F34C  50F3               	movf	prodl,w,c
  3177  00F34E  0800               	sublw	0
  3178  00F350  0100               	movlb	0	; () banked
  3179  00F352  25BA               	addwf	_hora& (0+255),w,b
  3180  00F354  0100               	movlb	0	; () banked
  3181  00F356  6FC4               	movwf	_hora_u& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;main.c: 267: RtccTime.f.hour=hora_d*16+hora_u;
  3185  00F358  0100               	movlb	0	; () banked
  3186  00F35A  51C3               	movf	_hora_d& (0+255),w,b
  3187  00F35C  0D10               	mullw	16
  3188  00F35E  50F3               	movf	prodl,w,c
  3189  00F360  0100               	movlb	0	; () banked
  3190  00F362  25C4               	addwf	_hora_u& (0+255),w,b
  3191  00F364  6E57               	movwf	_RtccTime+3,c
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;main.c: 268: anio_d=anio/10;
  3195  00F366  C058  F001         	movff	_anio,___awdiv@dividend
  3196  00F36A  C059  F002         	movff	_anio+1,___awdiv@dividend+1
  3197  00F36E  0E00               	movlw	0
  3198  00F370  6E04               	movwf	___awdiv@divisor+1,c
  3199  00F372  0E0A               	movlw	10
  3200  00F374  6E03               	movwf	___awdiv@divisor,c
  3201  00F376  ECB6  F074         	call	___awdiv	;wreg free
  3202  00F37A  5001               	movf	?___awdiv,w,c
  3203  00F37C  0100               	movlb	0	; () banked
  3204  00F37E  6FBE               	movwf	_anio_d& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 269: anio_u=anio-anio_d*10;
  3208  00F380  0100               	movlb	0	; () banked
  3209  00F382  51BE               	movf	_anio_d& (0+255),w,b
  3210  00F384  0D0A               	mullw	10
  3211  00F386  50F3               	movf	prodl,w,c
  3212  00F388  0800               	sublw	0
  3213  00F38A  2458               	addwf	_anio,w,c
  3214  00F38C  0100               	movlb	0	; () banked
  3215  00F38E  6FBF               	movwf	_anio_u& (0+255),b
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;main.c: 270: RtccDate.f.year=anio_d*16+anio_u;
  3219  00F390  0100               	movlb	0	; () banked
  3220  00F392  51BE               	movf	_anio_d& (0+255),w,b
  3221  00F394  0D10               	mullw	16
  3222  00F396  50F3               	movf	prodl,w,c
  3223  00F398  0100               	movlb	0	; () banked
  3224  00F39A  25BF               	addwf	_anio_u& (0+255),w,b
  3225  00F39C  6E53               	movwf	_RtccDate+3,c
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;main.c: 271: mes_d=mes/10;
  3229  00F39E  C05E  F001         	movff	_mes,___awdiv@dividend
  3230  00F3A2  C05F  F002         	movff	_mes+1,___awdiv@dividend+1
  3231  00F3A6  0E00               	movlw	0
  3232  00F3A8  6E04               	movwf	___awdiv@divisor+1,c
  3233  00F3AA  0E0A               	movlw	10
  3234  00F3AC  6E03               	movwf	___awdiv@divisor,c
  3235  00F3AE  ECB6  F074         	call	___awdiv	;wreg free
  3236  00F3B2  5001               	movf	?___awdiv,w,c
  3237  00F3B4  0100               	movlb	0	; () banked
  3238  00F3B6  6FC5               	movwf	_mes_d& (0+255),b
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;main.c: 272: mes_u=mes-mes_d*10;
  3242  00F3B8  0100               	movlb	0	; () banked
  3243  00F3BA  51C5               	movf	_mes_d& (0+255),w,b
  3244  00F3BC  0D0A               	mullw	10
  3245  00F3BE  50F3               	movf	prodl,w,c
  3246  00F3C0  0800               	sublw	0
  3247  00F3C2  245E               	addwf	_mes,w,c
  3248  00F3C4  0100               	movlb	0	; () banked
  3249  00F3C6  6FC6               	movwf	_mes_u& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;main.c: 273: RtccDate.f.mon=mes_d*16+mes_u;
  3253  00F3C8  0100               	movlb	0	; () banked
  3254  00F3CA  51C5               	movf	_mes_d& (0+255),w,b
  3255  00F3CC  0D10               	mullw	16
  3256  00F3CE  50F3               	movf	prodl,w,c
  3257  00F3D0  0100               	movlb	0	; () banked
  3258  00F3D2  25C6               	addwf	_mes_u& (0+255),w,b
  3259  00F3D4  6E52               	movwf	_RtccDate+2,c
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;main.c: 274: fecha_d=dia/10;
  3263  00F3D6  C05A  F001         	movff	_dia,___awdiv@dividend
  3264  00F3DA  C05B  F002         	movff	_dia+1,___awdiv@dividend+1
  3265  00F3DE  0E00               	movlw	0
  3266  00F3E0  6E04               	movwf	___awdiv@divisor+1,c
  3267  00F3E2  0E0A               	movlw	10
  3268  00F3E4  6E03               	movwf	___awdiv@divisor,c
  3269  00F3E6  ECB6  F074         	call	___awdiv	;wreg free
  3270  00F3EA  5001               	movf	?___awdiv,w,c
  3271  00F3EC  0100               	movlb	0	; () banked
  3272  00F3EE  6FC1               	movwf	_fecha_d& (0+255),b
  3273                           
  3274                           ; BSR set to: 0
  3275                           ;main.c: 275: fecha_u=dia-fecha_d*10;
  3276  00F3F0  0100               	movlb	0	; () banked
  3277  00F3F2  51C1               	movf	_fecha_d& (0+255),w,b
  3278  00F3F4  0D0A               	mullw	10
  3279  00F3F6  50F3               	movf	prodl,w,c
  3280  00F3F8  0800               	sublw	0
  3281  00F3FA  245A               	addwf	_dia,w,c
  3282  00F3FC  0100               	movlb	0	; () banked
  3283  00F3FE  6FC2               	movwf	_fecha_u& (0+255),b
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;main.c: 276: RtccDate.f.mday=fecha_d*16+fecha_u;
  3287  00F400  0100               	movlb	0	; () banked
  3288  00F402  51C1               	movf	_fecha_d& (0+255),w,b
  3289  00F404  0D10               	mullw	16
  3290  00F406  50F3               	movf	prodl,w,c
  3291  00F408  0100               	movlb	0	; () banked
  3292  00F40A  25C2               	addwf	_fecha_u& (0+255),w,b
  3293  00F40C  6E51               	movwf	_RtccDate+1,c
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;main.c: 277: dia_semana=diasem;
  3297  00F40E  C05C  F0C0         	movff	_diasem,_dia_semana
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;main.c: 278: RtccDate.f.wday =diasem;
  3301  00F412  C05C  F050         	movff	_diasem,_RtccDate
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;main.c: 280: RtccWriteTime(&RtccTime,1);
  3305  00F416  0E54               	movlw	low _RtccTime
  3306  00F418  6E01               	movwf	RtccWriteTime@pTm,c
  3307  00F41A  0E00               	movlw	high _RtccTime
  3308  00F41C  6E02               	movwf	RtccWriteTime@pTm+1,c
  3309  00F41E  0E01               	movlw	1
  3310  00F420  6E03               	movwf	RtccWriteTime@di,c
  3311  00F422  EC60  F075         	call	_RtccWriteTime	;wreg free
  3312                           
  3313                           ;main.c: 281: RtccWriteDate(&RtccDate,1);
  3314  00F426  0E50               	movlw	low _RtccDate
  3315  00F428  6E01               	movwf	RtccWriteDate@pDt,c
  3316  00F42A  0E00               	movlw	high _RtccDate
  3317  00F42C  6E02               	movwf	RtccWriteDate@pDt+1,c
  3318  00F42E  0E01               	movlw	1
  3319  00F430  6E03               	movwf	RtccWriteDate@di,c
  3320  00F432  ECB6  F078         	call	_RtccWriteDate	;wreg free
  3321                           
  3322                           ;main.c: 282: (RTCCFGbits.RTCEN=1);
  3323  00F436  010F               	movlb	15	; () banked
  3324  00F438  8F3F               	bsf	63,7,b	;volatile
  3325                           
  3326                           ; BSR set to: 15
  3327  00F43A  0012               	return		;funcret
  3328  00F43C                     __end_of_Write_RTC:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           postdec1	equ	0xFE5
  3339                           fsr1l	equ	0xFE1
  3340                           indf2	equ	0xFDF
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function ___awdiv *****************
  3346 ;; Defined at:
  3347 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  dividend        2    0[COMRAM] int 
  3350 ;;  divisor         2    2[COMRAM] int 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  quotient        2    6[COMRAM] int 
  3353 ;;  sign            1    5[COMRAM] unsigned char 
  3354 ;;  counter         1    4[COMRAM] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  2    0[COMRAM] int 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3364 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3367 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3368 ;;Total ram usage:        8 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; This function calls:
  3371 ;;		Nothing
  3372 ;; This function is called by:
  3373 ;;		_Write_RTC
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text8
  3378  00E96C                     __ptext8:
  3379                           	opt stack 0
  3380  00E96C                     ___awdiv:
  3381                           	opt stack 29
  3382                           
  3383                           ; BSR set to: 15
  3384                           ;incstack = 0
  3385  00E96C  0E00               	movlw	0
  3386  00E96E  6E06               	movwf	___awdiv@sign,c
  3387  00E970  AE04               	btfss	___awdiv@divisor+1,7,c
  3388  00E972  D007               	goto	l2427
  3389  00E974  6C03               	negf	___awdiv@divisor,c
  3390  00E976  1E04               	comf	___awdiv@divisor+1,f,c
  3391  00E978  B0D8               	btfsc	status,0,c
  3392  00E97A  2A04               	incf	___awdiv@divisor+1,f,c
  3393  00E97C  0E01               	movlw	1
  3394  00E97E  6E06               	movwf	___awdiv@sign,c
  3395  00E980  D000               	goto	l2427
  3396  00E982                     l2427:
  3397  00E982  AE02               	btfss	___awdiv@dividend+1,7,c
  3398  00E984  D007               	goto	l2433
  3399  00E986  6C01               	negf	___awdiv@dividend,c
  3400  00E988  1E02               	comf	___awdiv@dividend+1,f,c
  3401  00E98A  B0D8               	btfsc	status,0,c
  3402  00E98C  2A02               	incf	___awdiv@dividend+1,f,c
  3403  00E98E  0E01               	movlw	1
  3404  00E990  1A06               	xorwf	___awdiv@sign,f,c
  3405  00E992  D000               	goto	l2433
  3406  00E994                     l2433:
  3407  00E994  0E00               	movlw	0
  3408  00E996  6E08               	movwf	___awdiv@quotient+1,c
  3409  00E998  0E00               	movlw	0
  3410  00E99A  6E07               	movwf	___awdiv@quotient,c
  3411  00E99C  5003               	movf	___awdiv@divisor,w,c
  3412  00E99E  1004               	iorwf	___awdiv@divisor+1,w,c
  3413  00E9A0  B4D8               	btfsc	status,2,c
  3414  00E9A2  D021               	goto	l2455
  3415  00E9A4  0E01               	movlw	1
  3416  00E9A6  6E05               	movwf	___awdiv@counter,c
  3417  00E9A8  D005               	goto	l2441
  3418  00E9AA                     l2439:
  3419  00E9AA  90D8               	bcf	status,0,c
  3420  00E9AC  3603               	rlcf	___awdiv@divisor,f,c
  3421  00E9AE  3604               	rlcf	___awdiv@divisor+1,f,c
  3422  00E9B0  2A05               	incf	___awdiv@counter,f,c
  3423  00E9B2  D000               	goto	l2441
  3424  00E9B4                     l2441:
  3425  00E9B4  BE04               	btfsc	___awdiv@divisor+1,7,c
  3426  00E9B6  D002               	goto	l2443
  3427  00E9B8  D7F8               	goto	l2439
  3428  00E9BA  D000               	goto	l2443
  3429  00E9BC                     l2443:
  3430  00E9BC  90D8               	bcf	status,0,c
  3431  00E9BE  3607               	rlcf	___awdiv@quotient,f,c
  3432  00E9C0  3608               	rlcf	___awdiv@quotient+1,f,c
  3433  00E9C2  5003               	movf	___awdiv@divisor,w,c
  3434  00E9C4  5C01               	subwf	___awdiv@dividend,w,c
  3435  00E9C6  5004               	movf	___awdiv@divisor+1,w,c
  3436  00E9C8  5802               	subwfb	___awdiv@dividend+1,w,c
  3437  00E9CA  A0D8               	btfss	status,0,c
  3438  00E9CC  D006               	goto	l2451
  3439  00E9CE  5003               	movf	___awdiv@divisor,w,c
  3440  00E9D0  5E01               	subwf	___awdiv@dividend,f,c
  3441  00E9D2  5004               	movf	___awdiv@divisor+1,w,c
  3442  00E9D4  5A02               	subwfb	___awdiv@dividend+1,f,c
  3443  00E9D6  8007               	bsf	___awdiv@quotient,0,c
  3444  00E9D8  D000               	goto	l2451
  3445  00E9DA                     l2451:
  3446  00E9DA  90D8               	bcf	status,0,c
  3447  00E9DC  3204               	rrcf	___awdiv@divisor+1,f,c
  3448  00E9DE  3203               	rrcf	___awdiv@divisor,f,c
  3449  00E9E0  2E05               	decfsz	___awdiv@counter,f,c
  3450  00E9E2  D7EC               	goto	l2443
  3451  00E9E4  D000               	goto	l2455
  3452  00E9E6                     l2455:
  3453  00E9E6  5006               	movf	___awdiv@sign,w,c
  3454  00E9E8  B4D8               	btfsc	status,2,c
  3455  00E9EA  D005               	goto	l2459
  3456  00E9EC  6C07               	negf	___awdiv@quotient,c
  3457  00E9EE  1E08               	comf	___awdiv@quotient+1,f,c
  3458  00E9F0  B0D8               	btfsc	status,0,c
  3459  00E9F2  2A08               	incf	___awdiv@quotient+1,f,c
  3460  00E9F4  D000               	goto	l2459
  3461  00E9F6                     l2459:
  3462  00E9F6  C007  F001         	movff	___awdiv@quotient,?___awdiv
  3463  00E9FA  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  3464  00E9FE  0012               	return	
  3465  00EA00  0012               	return		;funcret
  3466  00EA02                     __end_of___awdiv:
  3467                           	opt stack 0
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           postdec1	equ	0xFE5
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function _RtccWriteTime *****************
  3484 ;; Defined at:
  3485 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteTime.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  pTm             2    0[COMRAM] PTR const struct .
  3488 ;;		 -> RtccTime(4), 
  3489 ;;  di              1    2[COMRAM] enum E7121
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  tempHourWDay    2    9[COMRAM] struct .
  3492 ;;  tempMinSec      2    7[COMRAM] struct .
  3493 ;;  wasWrEn         1    6[COMRAM] enum E7121
  3494 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3495 ;;  wasOn           1    4[COMRAM] enum E7121
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      enum E7337
  3498 ;; Registers used:
  3499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3505 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3506 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3508 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3509 ;;Total ram usage:       11 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; Hardware stack levels required when called:    1
  3512 ;; This function calls:
  3513 ;;		_RtccWrOn
  3514 ;; This function is called by:
  3515 ;;		_Write_RTC
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text9
  3520  00EAC0                     __ptext9:
  3521                           	opt stack 0
  3522  00EAC0                     _RtccWriteTime:
  3523                           	opt stack 28
  3524                           
  3525                           ;incstack = 0
  3526  00EAC0  0E00               	movlw	0
  3527  00EAC2  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3528  00EAC4  EE20 F002          	lfsr	2,2
  3529  00EAC8  5001               	movf	RtccWriteTime@pTm,w,c
  3530  00EACA  26D9               	addwf	fsr2l,f,c
  3531  00EACC  5002               	movf	RtccWriteTime@pTm+1,w,c
  3532  00EACE  22DA               	addwfc	fsr2h,f,c
  3533  00EAD0  0E5A               	movlw	90
  3534  00EAD2  60DF               	cpfslt	indf2,c
  3535  00EAD4  0012               	return	
  3536  00EAD6  EE20 F001          	lfsr	2,1
  3537  00EADA  5001               	movf	RtccWriteTime@pTm,w,c
  3538  00EADC  26D9               	addwf	fsr2l,f,c
  3539  00EADE  5002               	movf	RtccWriteTime@pTm+1,w,c
  3540  00EAE0  22DA               	addwfc	fsr2h,f,c
  3541  00EAE2  0E5A               	movlw	90
  3542  00EAE4  60DF               	cpfslt	indf2,c
  3543  00EAE6  0012               	return	
  3544  00EAE8  EE20 F003          	lfsr	2,3
  3545  00EAEC  5001               	movf	RtccWriteTime@pTm,w,c
  3546  00EAEE  26D9               	addwf	fsr2l,f,c
  3547  00EAF0  5002               	movf	RtccWriteTime@pTm+1,w,c
  3548  00EAF2  22DA               	addwfc	fsr2h,f,c
  3549  00EAF4  0E24               	movlw	36
  3550  00EAF6  64DF               	cpfsgt	indf2,c
  3551  00EAF8  D002               	goto	l2233
  3552  00EAFA  0012               	return	
  3553                           
  3554                           ;	Return value of _RtccWriteTime is never used
  3555  00EAFC  0012               	return	
  3556  00EAFE                     l2233:
  3557  00EAFE  EE20 F002          	lfsr	2,2
  3558  00EB02  5001               	movf	RtccWriteTime@pTm,w,c
  3559  00EB04  26D9               	addwf	fsr2l,f,c
  3560  00EB06  5002               	movf	RtccWriteTime@pTm+1,w,c
  3561  00EB08  22DA               	addwfc	fsr2h,f,c
  3562  00EB0A  50DF               	movf	indf2,w,c
  3563  00EB0C  6E09               	movwf	RtccWriteTime@tempMinSec+1,c
  3564  00EB0E  EE20 F001          	lfsr	2,1
  3565  00EB12  5001               	movf	RtccWriteTime@pTm,w,c
  3566  00EB14  26D9               	addwf	fsr2l,f,c
  3567  00EB16  5002               	movf	RtccWriteTime@pTm+1,w,c
  3568  00EB18  22DA               	addwfc	fsr2h,f,c
  3569  00EB1A  50DF               	movf	indf2,w,c
  3570  00EB1C  6E08               	movwf	RtccWriteTime@tempMinSec,c
  3571  00EB1E  5003               	movf	RtccWriteTime@di,w,c
  3572  00EB20  B4D8               	btfsc	status,2,c
  3573  00EB22  D002               	goto	l2239
  3574  00EB24  9CF2               	bcf	intcon,6,c	;volatile
  3575  00EB26  D000               	goto	l2239
  3576  00EB28                     l2239:
  3577  00EB28  0E00               	movlw	0
  3578  00EB2A  BB3F               	btfsc	63,5,b	;volatile
  3579  00EB2C  0E01               	movlw	1
  3580  00EB2E  6E07               	movwf	RtccWriteTime@wasWrEn,c
  3581  00EB30  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3582  00EB32  A4D8               	btfss	status,2,c
  3583  00EB34  D003               	goto	l2243
  3584  00EB36  EC1A  F073         	call	_RtccWrOn	;wreg free
  3585  00EB3A  D000               	goto	l2243
  3586  00EB3C                     l2243:
  3587  00EB3C  0E00               	movlw	0
  3588  00EB3E  BF3F               	btfsc	63,7,b	;volatile
  3589  00EB40  0E01               	movlw	1
  3590  00EB42  6E05               	movwf	RtccWriteTime@wasOn,c
  3591  00EB44  5005               	movf	RtccWriteTime@wasOn,w,c
  3592  00EB46  B4D8               	btfsc	status,2,c
  3593  00EB48  D007               	goto	l2249
  3594  00EB4A  0E00               	movlw	0
  3595  00EB4C  BE91               	btfsc	3985,7,c	;volatile
  3596  00EB4E  0E01               	movlw	1
  3597  00EB50  6E06               	movwf	RtccWriteTime@wasAlrm,c
  3598  00EB52  010F               	movlb	15	; () banked
  3599  00EB54  9F3F               	bcf	63,7,b	;volatile
  3600  00EB56  D000               	goto	l2249
  3601  00EB58                     l2249:
  3602  00EB58  0EFC               	movlw	252
  3603  00EB5A  010F               	movlb	15	; () banked
  3604  00EB5C  173F               	andwf	63,f,b	;volatile
  3605  00EB5E  010F               	movlb	15	; () banked
  3606  00EB60  813F               	bsf	63,0,b	;volatile
  3607                           
  3608                           ; BSR set to: 15
  3609  00EB62  CF98 F00A          	movff	3992,RtccWriteTime@tempHourWDay	;volatile
  3610                           
  3611                           ; BSR set to: 15
  3612  00EB66  CF99 F00B          	movff	3993,RtccWriteTime@tempHourWDay+1	;volatile
  3613                           
  3614                           ; BSR set to: 15
  3615  00EB6A  EE20 F003          	lfsr	2,3
  3616  00EB6E  5001               	movf	RtccWriteTime@pTm,w,c
  3617  00EB70  26D9               	addwf	fsr2l,f,c
  3618  00EB72  5002               	movf	RtccWriteTime@pTm+1,w,c
  3619  00EB74  22DA               	addwfc	fsr2h,f,c
  3620  00EB76  50DF               	movf	indf2,w,c
  3621  00EB78  6E0A               	movwf	RtccWriteTime@tempHourWDay,c
  3622                           
  3623                           ; BSR set to: 15
  3624  00EB7A  0EFC               	movlw	252
  3625  00EB7C  010F               	movlb	15	; () banked
  3626  00EB7E  173F               	andwf	63,f,b	;volatile
  3627                           
  3628                           ; BSR set to: 15
  3629  00EB80  010F               	movlb	15	; () banked
  3630  00EB82  813F               	bsf	63,0,b	;volatile
  3631                           
  3632                           ; BSR set to: 15
  3633  00EB84  C00A  FF98         	movff	RtccWriteTime@tempHourWDay,3992	;volatile
  3634                           
  3635                           ; BSR set to: 15
  3636  00EB88  C00B  FF99         	movff	RtccWriteTime@tempHourWDay+1,3993	;volatile
  3637                           
  3638                           ; BSR set to: 15
  3639  00EB8C  C008  FF98         	movff	RtccWriteTime@tempMinSec,3992	;volatile
  3640                           
  3641                           ; BSR set to: 15
  3642  00EB90  C009  FF99         	movff	RtccWriteTime@tempMinSec+1,3993	;volatile
  3643                           
  3644                           ; BSR set to: 15
  3645  00EB94  5005               	movf	RtccWriteTime@wasOn,w,c
  3646  00EB96  B4D8               	btfsc	status,2,c
  3647  00EB98  D00D               	goto	l2281
  3648                           
  3649                           ; BSR set to: 15
  3650  00EB9A  010F               	movlb	15	; () banked
  3651  00EB9C  8F3F               	bsf	63,7,b	;volatile
  3652                           
  3653                           ; BSR set to: 15
  3654  00EB9E  5006               	movf	RtccWriteTime@wasAlrm,w,c
  3655  00EBA0  B4D8               	btfsc	status,2,c
  3656  00EBA2  D002               	goto	l2277
  3657                           
  3658                           ; BSR set to: 15
  3659  00EBA4  8E91               	bsf	3985,7,c	;volatile
  3660  00EBA6  D000               	goto	l2277
  3661  00EBA8                     l2277:
  3662                           
  3663                           ; BSR set to: 15
  3664  00EBA8  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3665  00EBAA  B4D8               	btfsc	status,2,c
  3666  00EBAC  D009               	goto	l2285
  3667                           
  3668                           ; BSR set to: 15
  3669  00EBAE  EC1A  F073         	call	_RtccWrOn	;wreg free
  3670  00EBB2  D006               	goto	l2285
  3671  00EBB4                     l2281:
  3672  00EBB4  5007               	movf	RtccWriteTime@wasWrEn,w,c
  3673  00EBB6  A4D8               	btfss	status,2,c
  3674  00EBB8  D003               	goto	l2285
  3675  00EBBA  010F               	movlb	15	; () banked
  3676  00EBBC  9B3F               	bcf	63,5,b	;volatile
  3677                           
  3678                           ; BSR set to: 15
  3679  00EBBE  D000               	goto	l2285
  3680  00EBC0                     l2285:
  3681  00EBC0  5003               	movf	RtccWriteTime@di,w,c
  3682  00EBC2  B4D8               	btfsc	status,2,c
  3683  00EBC4  0012               	return	
  3684  00EBC6  8CF2               	bsf	intcon,6,c	;volatile
  3685  00EBC8  0012               	return	
  3686                           
  3687                           ;	Return value of _RtccWriteTime is never used
  3688  00EBCA  0012               	return		;funcret
  3689  00EBCC                     __end_of_RtccWriteTime:
  3690                           	opt stack 0
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           intcon	equ	0xFF2
  3698                           postinc0	equ	0xFEE
  3699                           wreg	equ	0xFE8
  3700                           postdec1	equ	0xFE5
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function _RtccWriteDate *****************
  3708 ;; Defined at:
  3709 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWriteDate.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  pDt             2    0[COMRAM] PTR const struct .
  3712 ;;		 -> RtccDate(4), 
  3713 ;;  di              1    2[COMRAM] enum E7121
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  tempHourWDay    2   11[COMRAM] struct .
  3716 ;;  tempDayMonth    2    9[COMRAM] struct .
  3717 ;;  tempYear        2    6[COMRAM] struct .
  3718 ;;  wasWrEn         1    8[COMRAM] enum E7121
  3719 ;;  wasAlrm         1    5[COMRAM] enum E7121
  3720 ;;  wasOn           1    4[COMRAM] enum E7121
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      enum E7337
  3723 ;; Registers used:
  3724 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3730 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3731 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3732 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3733 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;Total ram usage:       13 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    1
  3737 ;; This function calls:
  3738 ;;		_RtccWrOn
  3739 ;; This function is called by:
  3740 ;;		_Write_RTC
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text10
  3745  00F16C                     __ptext10:
  3746                           	opt stack 0
  3747  00F16C                     _RtccWriteDate:
  3748                           	opt stack 28
  3749                           
  3750                           ;incstack = 0
  3751  00F16C  0E00               	movlw	0
  3752  00F16E  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3753  00F170  EE20 F002          	lfsr	2,2
  3754  00F174  5001               	movf	RtccWriteDate@pDt,w,c
  3755  00F176  26D9               	addwf	fsr2l,f,c
  3756  00F178  5002               	movf	RtccWriteDate@pDt+1,w,c
  3757  00F17A  22DA               	addwfc	fsr2h,f,c
  3758  00F17C  0E13               	movlw	19
  3759  00F17E  60DF               	cpfslt	indf2,c
  3760  00F180  0012               	return	
  3761  00F182  EE20 F002          	lfsr	2,2
  3762  00F186  5001               	movf	RtccWriteDate@pDt,w,c
  3763  00F188  26D9               	addwf	fsr2l,f,c
  3764  00F18A  5002               	movf	RtccWriteDate@pDt+1,w,c
  3765  00F18C  22DA               	addwfc	fsr2h,f,c
  3766  00F18E  50DF               	movf	indf2,w,c
  3767  00F190  B4D8               	btfsc	status,2,c
  3768  00F192  0012               	return	
  3769  00F194  EE20 F001          	lfsr	2,1
  3770  00F198  5001               	movf	RtccWriteDate@pDt,w,c
  3771  00F19A  26D9               	addwf	fsr2l,f,c
  3772  00F19C  5002               	movf	RtccWriteDate@pDt+1,w,c
  3773  00F19E  22DA               	addwfc	fsr2h,f,c
  3774  00F1A0  0E32               	movlw	50
  3775  00F1A2  60DF               	cpfslt	indf2,c
  3776  00F1A4  0012               	return	
  3777  00F1A6  EE20 F001          	lfsr	2,1
  3778  00F1AA  5001               	movf	RtccWriteDate@pDt,w,c
  3779  00F1AC  26D9               	addwf	fsr2l,f,c
  3780  00F1AE  5002               	movf	RtccWriteDate@pDt+1,w,c
  3781  00F1B0  22DA               	addwfc	fsr2h,f,c
  3782  00F1B2  50DF               	movf	indf2,w,c
  3783  00F1B4  B4D8               	btfsc	status,2,c
  3784  00F1B6  0012               	return	
  3785  00F1B8  EE20 F003          	lfsr	2,3
  3786  00F1BC  5001               	movf	RtccWriteDate@pDt,w,c
  3787  00F1BE  26D9               	addwf	fsr2l,f,c
  3788  00F1C0  5002               	movf	RtccWriteDate@pDt+1,w,c
  3789  00F1C2  22DA               	addwfc	fsr2h,f,c
  3790  00F1C4  0E99               	movlw	153
  3791  00F1C6  64DF               	cpfsgt	indf2,c
  3792  00F1C8  D002               	goto	l2301
  3793  00F1CA  0012               	return	
  3794                           
  3795                           ;	Return value of _RtccWriteDate is never used
  3796  00F1CC  0012               	return	
  3797  00F1CE                     l2301:
  3798  00F1CE  EE20 F003          	lfsr	2,3
  3799  00F1D2  5001               	movf	RtccWriteDate@pDt,w,c
  3800  00F1D4  26D9               	addwf	fsr2l,f,c
  3801  00F1D6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3802  00F1D8  22DA               	addwfc	fsr2h,f,c
  3803  00F1DA  50DF               	movf	indf2,w,c
  3804  00F1DC  6E07               	movwf	RtccWriteDate@tempYear,c
  3805  00F1DE  EE20 F001          	lfsr	2,1
  3806  00F1E2  5001               	movf	RtccWriteDate@pDt,w,c
  3807  00F1E4  26D9               	addwf	fsr2l,f,c
  3808  00F1E6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3809  00F1E8  22DA               	addwfc	fsr2h,f,c
  3810  00F1EA  50DF               	movf	indf2,w,c
  3811  00F1EC  6E0A               	movwf	RtccWriteDate@tempDayMonth,c
  3812  00F1EE  EE20 F002          	lfsr	2,2
  3813  00F1F2  5001               	movf	RtccWriteDate@pDt,w,c
  3814  00F1F4  26D9               	addwf	fsr2l,f,c
  3815  00F1F6  5002               	movf	RtccWriteDate@pDt+1,w,c
  3816  00F1F8  22DA               	addwfc	fsr2h,f,c
  3817  00F1FA  50DF               	movf	indf2,w,c
  3818  00F1FC  6E0B               	movwf	RtccWriteDate@tempDayMonth+1,c
  3819  00F1FE  5003               	movf	RtccWriteDate@di,w,c
  3820  00F200  B4D8               	btfsc	status,2,c
  3821  00F202  D002               	goto	l2307
  3822  00F204  9CF2               	bcf	intcon,6,c	;volatile
  3823  00F206  D000               	goto	l2307
  3824  00F208                     l2307:
  3825  00F208  0E00               	movlw	0
  3826  00F20A  BB3F               	btfsc	63,5,b	;volatile
  3827  00F20C  0E01               	movlw	1
  3828  00F20E  6E09               	movwf	RtccWriteDate@wasWrEn,c
  3829  00F210  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3830  00F212  A4D8               	btfss	status,2,c
  3831  00F214  D003               	goto	l2311
  3832  00F216  EC1A  F073         	call	_RtccWrOn	;wreg free
  3833  00F21A  D000               	goto	l2311
  3834  00F21C                     l2311:
  3835  00F21C  0E00               	movlw	0
  3836  00F21E  BF3F               	btfsc	63,7,b	;volatile
  3837  00F220  0E01               	movlw	1
  3838  00F222  6E05               	movwf	RtccWriteDate@wasOn,c
  3839  00F224  5005               	movf	RtccWriteDate@wasOn,w,c
  3840  00F226  B4D8               	btfsc	status,2,c
  3841  00F228  D007               	goto	l2317
  3842  00F22A  0E00               	movlw	0
  3843  00F22C  BE91               	btfsc	3985,7,c	;volatile
  3844  00F22E  0E01               	movlw	1
  3845  00F230  6E06               	movwf	RtccWriteDate@wasAlrm,c
  3846  00F232  010F               	movlb	15	; () banked
  3847  00F234  9F3F               	bcf	63,7,b	;volatile
  3848  00F236  D000               	goto	l2317
  3849  00F238                     l2317:
  3850  00F238  0EFC               	movlw	252
  3851  00F23A  010F               	movlb	15	; () banked
  3852  00F23C  173F               	andwf	63,f,b	;volatile
  3853  00F23E  010F               	movlb	15	; () banked
  3854  00F240  813F               	bsf	63,0,b	;volatile
  3855                           
  3856                           ; BSR set to: 15
  3857  00F242  CF98 F00C          	movff	3992,RtccWriteDate@tempHourWDay	;volatile
  3858                           
  3859                           ; BSR set to: 15
  3860  00F246  CF99 F00D          	movff	3993,RtccWriteDate@tempHourWDay+1	;volatile
  3861                           
  3862                           ; BSR set to: 15
  3863  00F24A  C001  FFD9         	movff	RtccWriteDate@pDt,fsr2l
  3864  00F24E  C002  FFDA         	movff	RtccWriteDate@pDt+1,fsr2h
  3865  00F252  50DF               	movf	indf2,w,c
  3866  00F254  6E0D               	movwf	RtccWriteDate@tempHourWDay+1,c
  3867                           
  3868                           ; BSR set to: 15
  3869  00F256  0EFC               	movlw	252
  3870  00F258  010F               	movlb	15	; () banked
  3871  00F25A  173F               	andwf	63,f,b	;volatile
  3872                           
  3873                           ; BSR set to: 15
  3874  00F25C  0E03               	movlw	3
  3875  00F25E  010F               	movlb	15	; () banked
  3876  00F260  133F               	iorwf	63,f,b	;volatile
  3877                           
  3878                           ; BSR set to: 15
  3879  00F262  C007  FF98         	movff	RtccWriteDate@tempYear,3992	;volatile
  3880                           
  3881                           ; BSR set to: 15
  3882  00F266  C008  FF99         	movff	RtccWriteDate@tempYear+1,3993	;volatile
  3883                           
  3884                           ; BSR set to: 15
  3885  00F26A  C00A  FF98         	movff	RtccWriteDate@tempDayMonth,3992	;volatile
  3886                           
  3887                           ; BSR set to: 15
  3888  00F26E  C00B  FF99         	movff	RtccWriteDate@tempDayMonth+1,3993	;volatile
  3889                           
  3890                           ; BSR set to: 15
  3891  00F272  C00C  FF98         	movff	RtccWriteDate@tempHourWDay,3992	;volatile
  3892                           
  3893                           ; BSR set to: 15
  3894  00F276  C00D  FF99         	movff	RtccWriteDate@tempHourWDay+1,3993	;volatile
  3895                           
  3896                           ; BSR set to: 15
  3897  00F27A  5005               	movf	RtccWriteDate@wasOn,w,c
  3898  00F27C  B4D8               	btfsc	status,2,c
  3899  00F27E  D00D               	goto	l2353
  3900                           
  3901                           ; BSR set to: 15
  3902  00F280  010F               	movlb	15	; () banked
  3903  00F282  8F3F               	bsf	63,7,b	;volatile
  3904                           
  3905                           ; BSR set to: 15
  3906  00F284  5006               	movf	RtccWriteDate@wasAlrm,w,c
  3907  00F286  B4D8               	btfsc	status,2,c
  3908  00F288  D002               	goto	l2349
  3909                           
  3910                           ; BSR set to: 15
  3911  00F28A  8E91               	bsf	3985,7,c	;volatile
  3912  00F28C  D000               	goto	l2349
  3913  00F28E                     l2349:
  3914                           
  3915                           ; BSR set to: 15
  3916  00F28E  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3917  00F290  B4D8               	btfsc	status,2,c
  3918  00F292  D009               	goto	l2357
  3919                           
  3920                           ; BSR set to: 15
  3921  00F294  EC1A  F073         	call	_RtccWrOn	;wreg free
  3922  00F298  D006               	goto	l2357
  3923  00F29A                     l2353:
  3924  00F29A  5009               	movf	RtccWriteDate@wasWrEn,w,c
  3925  00F29C  A4D8               	btfss	status,2,c
  3926  00F29E  D003               	goto	l2357
  3927  00F2A0  010F               	movlb	15	; () banked
  3928  00F2A2  9B3F               	bcf	63,5,b	;volatile
  3929                           
  3930                           ; BSR set to: 15
  3931  00F2A4  D000               	goto	l2357
  3932  00F2A6                     l2357:
  3933  00F2A6  5003               	movf	RtccWriteDate@di,w,c
  3934  00F2A8  B4D8               	btfsc	status,2,c
  3935  00F2AA  0012               	return	
  3936  00F2AC  9CF2               	bcf	intcon,6,c	;volatile
  3937  00F2AE  0012               	return	
  3938                           
  3939                           ;	Return value of _RtccWriteDate is never used
  3940  00F2B0  0012               	return		;funcret
  3941  00F2B2                     __end_of_RtccWriteDate:
  3942                           	opt stack 0
  3943                           tblptru	equ	0xFF8
  3944                           tblptrh	equ	0xFF7
  3945                           tblptrl	equ	0xFF6
  3946                           tablat	equ	0xFF5
  3947                           prodh	equ	0xFF4
  3948                           prodl	equ	0xFF3
  3949                           intcon	equ	0xFF2
  3950                           postinc0	equ	0xFEE
  3951                           wreg	equ	0xFE8
  3952                           postdec1	equ	0xFE5
  3953                           fsr1l	equ	0xFE1
  3954                           indf2	equ	0xFDF
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _RtccWrOn *****************
  3960 ;; Defined at:
  3961 ;;		line 21 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\rtcc\RtccWrOn.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  data            2    0        unsigned int 
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, status,2
  3970 ;; Tracked objects:
  3971 ;;		On entry : 0/0
  3972 ;;		On exit  : 0/0
  3973 ;;		Unchanged: 0/0
  3974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3979 ;;Total ram usage:        0 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; This function calls:
  3982 ;;		Nothing
  3983 ;; This function is called by:
  3984 ;;		_Write_RTC
  3985 ;;		_RtccWriteDate
  3986 ;;		_RtccWriteTime
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text11
  3991  00E634                     __ptext11:
  3992                           	opt stack 0
  3993  00E634                     _RtccWrOn:
  3994                           	opt stack 28
  3995                           
  3996                           ;incstack = 0
  3997  00E634  9CF2               	bcf	intcon,6,c	;volatile
  3998  00E636  0E55               	movlw	85
  3999  00E638  6EA7               	movwf	4007,c	;volatile
  4000  00E63A  0EAA               	movlw	170
  4001  00E63C  6EA7               	movwf	4007,c	;volatile
  4002  00E63E  010F               	movlb	15	; () banked
  4003  00E640  8B3F               	bsf	63,5,b	;volatile
  4004                           
  4005                           ; BSR set to: 15
  4006  00E642  8CF2               	bsf	intcon,6,c	;volatile
  4007                           
  4008                           ; BSR set to: 15
  4009  00E644  0012               	return		;funcret
  4010  00E646                     __end_of_RtccWrOn:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           intcon	equ	0xFF2
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           fsr1l	equ	0xFE1
  4023                           indf2	equ	0xFDF
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _Lcd_Out *****************
  4029 ;; Defined at:
  4030 ;;		line 84 in file "../lcd.h"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  y               1    wreg     unsigned char 
  4033 ;;  x               1   63[COMRAM] unsigned char 
  4034 ;;  buffer          2   64[COMRAM] PTR const unsigned char 
  4035 ;;		 -> STR_47(1), STR_45(1), STR_43(1), STR_41(1), 
  4036 ;;		 -> STR_39(1), STR_37(1), STR_36(1), STR_35(1), 
  4037 ;;		 -> STR_34(1), STR_32(1), STR_30(1), STR_28(1), 
  4038 ;;		 -> STR_26(1), STR_24(1), STR_23(1), Convert_diasem@buffer_dia(20), 
  4039 ;;		 -> STR_6(21), STR_5(20), STR_4(18), STR_3(19), 
  4040 ;;		 -> buffer1(20), STR_1(18), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  y               1   66[COMRAM] unsigned char 
  4043 ;;  data            1   67[COMRAM] unsigned char 
  4044 ;; Return value:  Size  Location     Type
  4045 ;;		None               void
  4046 ;; Registers used:
  4047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4053 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4054 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4056 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4057 ;;Total ram usage:        5 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    1
  4060 ;; This function calls:
  4061 ;;		_Lcd_Chr_CP
  4062 ;;		_Lcd_Cmd
  4063 ;; This function is called by:
  4064 ;;		_main
  4065 ;;		_V_Principal
  4066 ;;		_ManejaMovimientos
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text12
  4071  00E8D8                     __ptext12:
  4072                           	opt stack 0
  4073  00E8D8                     _Lcd_Out:
  4074                           	opt stack 28
  4075                           
  4076                           ; BSR set to: 15
  4077                           ;incstack = 0
  4078                           ;Lcd_Out@y stored from wreg
  4079  00E8D8  6E43               	movwf	Lcd_Out@y,c
  4080                           
  4081                           ;lcd.h: 86: unsigned char data;
  4082                           ;lcd.h: 87: switch (y)
  4083  00E8DA  D00D               	goto	l2475
  4084  00E8DC                     l2465:
  4085  00E8DC  5040               	movf	Lcd_Out@x,w,c
  4086  00E8DE  0F80               	addlw	128
  4087  00E8E0  D008               	goto	L4
  4088  00E8E2                     l2467:
  4089  00E8E2  5040               	movf	Lcd_Out@x,w,c
  4090  00E8E4  0FC0               	addlw	192
  4091  00E8E6  D005               	goto	L4
  4092  00E8E8                     l2469:
  4093  00E8E8  5040               	movf	Lcd_Out@x,w,c
  4094  00E8EA  0F94               	addlw	148
  4095  00E8EC  D002               	goto	L4
  4096  00E8EE                     l2471:
  4097  00E8EE  5040               	movf	Lcd_Out@x,w,c
  4098  00E8F0  0FD4               	addlw	212
  4099  00E8F2                     L4:
  4100  00E8F2  6E44               	movwf	Lcd_Out@data,c
  4101                           
  4102                           ;lcd.h: 94: }
  4103                           
  4104                           ;lcd.h: 93: default: break;
  4105  00E8F4  D00E               	goto	l2477
  4106  00E8F6                     l2475:
  4107  00E8F6  5043               	movf	Lcd_Out@y,w,c
  4108                           
  4109                           ; Switch size 1, requested type "space"
  4110                           ; Number of cases is 4, Range of values is 1 to 4
  4111                           ; switch strategies available:
  4112                           ; Name         Instructions Cycles
  4113                           ; simple_byte           13     7 (average)
  4114                           ;	Chosen strategy is simple_byte
  4115  00E8F8  0A01               	xorlw	1	; case 1
  4116  00E8FA  B4D8               	btfsc	status,2,c
  4117  00E8FC  D7EF               	goto	l2465
  4118  00E8FE  0A03               	xorlw	3	; case 2
  4119  00E900  B4D8               	btfsc	status,2,c
  4120  00E902  D7EF               	goto	l2467
  4121  00E904  0A01               	xorlw	1	; case 3
  4122  00E906  B4D8               	btfsc	status,2,c
  4123  00E908  D7EF               	goto	l2469
  4124  00E90A  0A07               	xorlw	7	; case 4
  4125  00E90C  B4D8               	btfsc	status,2,c
  4126  00E90E  D7EF               	goto	l2471
  4127  00E910  D000               	goto	l2477
  4128  00E912                     l2477:
  4129                           
  4130                           ;lcd.h: 95: Lcd_Cmd(data);
  4131  00E912  5044               	movf	Lcd_Out@data,w,c
  4132  00E914  EC02  F077         	call	_Lcd_Cmd
  4133                           
  4134                           ;lcd.h: 96: while(*buffer)
  4135  00E918  D015               	goto	l2483
  4136  00E91A                     l2479:
  4137                           
  4138                           ;lcd.h: 97: {
  4139                           ;lcd.h: 98: Lcd_Chr_CP(*buffer);
  4140  00E91A  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4141  00E91E  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4142  00E922  6AF8               	clrf	tblptru,c
  4143  00E924  0E0E               	movlw	(high __ramtop+-1)
  4144  00E926  64F7               	cpfsgt	tblptrh,c
  4145  00E928  D003               	bra	u1827
  4146  00E92A  0008               	tblrd		*
  4147  00E92C  50F5               	movf	tablat,w,c
  4148  00E92E  D005               	bra	u1820
  4149  00E930                     u1827:
  4150  00E930  CFF6 FFD9          	movff	tblptrl,fsr2l
  4151  00E934  CFF7 FFDA          	movff	tblptrh,fsr2h
  4152  00E938  50DF               	movf	indf2,w,c
  4153  00E93A                     u1820:
  4154  00E93A  EC22  F078         	call	_Lcd_Chr_CP
  4155                           
  4156                           ;lcd.h: 99: buffer++;
  4157  00E93E  4A41               	infsnz	Lcd_Out@buffer,f,c
  4158  00E940  2A42               	incf	Lcd_Out@buffer+1,f,c
  4159  00E942  D000               	goto	l2483
  4160  00E944                     l2483:
  4161  00E944  C041  FFF6         	movff	Lcd_Out@buffer,tblptrl
  4162  00E948  C042  FFF7         	movff	Lcd_Out@buffer+1,tblptrh
  4163  00E94C  6AF8               	clrf	tblptru,c
  4164  00E94E  0E0E               	movlw	(high __ramtop+-1)
  4165  00E950  64F7               	cpfsgt	tblptrh,c
  4166  00E952  D003               	bra	u1837
  4167  00E954  0008               	tblrd		*
  4168  00E956  50F5               	movf	tablat,w,c
  4169  00E958  D005               	bra	u1830
  4170  00E95A                     u1837:
  4171  00E95A  CFF6 FFD9          	movff	tblptrl,fsr2l
  4172  00E95E  CFF7 FFDA          	movff	tblptrh,fsr2h
  4173  00E962  50DF               	movf	indf2,w,c
  4174  00E964                     u1830:
  4175  00E964  0900               	iorlw	0
  4176  00E966  A4D8               	btfss	status,2,c
  4177  00E968  D7D8               	goto	l2479
  4178                           
  4179                           ;lcd.h: 100: }
  4180                           ;lcd.h: 101: return;
  4181  00E96A  0012               	return		;funcret
  4182  00E96C                     __end_of_Lcd_Out:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           intcon	equ	0xFF2
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           postdec1	equ	0xFE5
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _Lcd_Chr_CP *****************
  4201 ;; Defined at:
  4202 ;;		line 126 in file "../lcd.h"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  data            1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  data            1    2[COMRAM] unsigned char 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;		None               void
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4218 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;Total ram usage:        3 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_Lcd_Out
  4226 ;;		_Lcd_Out2
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text13
  4231  00F044                     __ptext13:
  4232                           	opt stack 0
  4233  00F044                     _Lcd_Chr_CP:
  4234                           	opt stack 28
  4235                           
  4236                           ;incstack = 0
  4237                           ;Lcd_Chr_CP@data stored from wreg
  4238  00F044  6E03               	movwf	Lcd_Chr_CP@data,c
  4239                           
  4240                           ;lcd.h: 127: LATBbits.LATB4 = 0; LATBbits.LATB5 = 1;
  4241  00F046  988A               	bcf	3978,4,c	;volatile
  4242  00F048  8A8A               	bsf	3978,5,c	;volatile
  4243                           
  4244                           ;lcd.h: 128: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  4245  00F04A  6A01               	clrf	??_Lcd_Chr_CP& (0+255),c
  4246  00F04C  AE03               	btfss	Lcd_Chr_CP@data,7,c
  4247  00F04E  D001               	bra	u1285
  4248  00F050  2A01               	incf	??_Lcd_Chr_CP& (0+255),f,c
  4249  00F052                     u1285:
  4250  00F052  0E01               	movlw	1
  4251  00F054  1601               	andwf	??_Lcd_Chr_CP,f,c
  4252  00F056  508A               	movf	3978,w,c	;volatile
  4253  00F058  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4254  00F05A  0BFE               	andlw	-2
  4255  00F05C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4256  00F05E  6E8A               	movwf	3978,c	;volatile
  4257  00F060  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4258  00F064  0E06               	movlw	6
  4259  00F066  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  4260  00F068                     u1295:
  4261  00F068  90D8               	bcf	status,0,c
  4262  00F06A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4263  00F06C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  4264  00F06E  D7FC               	goto	u1295
  4265  00F070  0E01               	movlw	1
  4266  00F072  1601               	andwf	??_Lcd_Chr_CP,f,c
  4267  00F074  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4268  00F076  508A               	movf	3978,w,c	;volatile
  4269  00F078  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4270  00F07A  0BFD               	andlw	-3
  4271  00F07C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4272  00F07E  6E8A               	movwf	3978,c	;volatile
  4273                           
  4274                           ;lcd.h: 129: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  4275  00F080  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4276  00F084  0E05               	movlw	5
  4277  00F086  6E02               	movwf	(??_Lcd_Chr_CP+1)& (0+255),c
  4278  00F088                     u1305:
  4279  00F088  90D8               	bcf	status,0,c
  4280  00F08A  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4281  00F08C  2E02               	decfsz	(??_Lcd_Chr_CP+1)& (0+255),f,c
  4282  00F08E  D7FC               	goto	u1305
  4283  00F090  0E01               	movlw	1
  4284  00F092  1601               	andwf	??_Lcd_Chr_CP,f,c
  4285  00F094  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4286  00F096  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4287  00F098  508A               	movf	3978,w,c	;volatile
  4288  00F09A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4289  00F09C  0BFB               	andlw	-5
  4290  00F09E  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4291  00F0A0  6E8A               	movwf	3978,c	;volatile
  4292  00F0A2  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4293  00F0A6  3A01               	swapf	??_Lcd_Chr_CP,f,c
  4294  00F0A8  0E0F               	movlw	15
  4295  00F0AA  1601               	andwf	??_Lcd_Chr_CP,f,c
  4296  00F0AC  0E01               	movlw	1
  4297  00F0AE  1601               	andwf	??_Lcd_Chr_CP,f,c
  4298  00F0B0  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4299  00F0B2  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4300  00F0B4  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4301  00F0B6  508A               	movf	3978,w,c	;volatile
  4302  00F0B8  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4303  00F0BA  0BF7               	andlw	-9
  4304  00F0BC  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4305  00F0BE  6E8A               	movwf	3978,c	;volatile
  4306                           
  4307                           ;lcd.h: 130: _delay(10);
  4308  00F0C0  0E03               	movlw	3
  4309  00F0C2                     u2457:
  4310  00F0C2  2EE8               	decfsz	wreg,f,c
  4311  00F0C4  D7FE               	goto	u2457
  4312  00F0C6  F000               	nop	
  4313                           
  4314                           ;lcd.h: 131: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  4315  00F0C8  888A               	bsf	3978,4,c	;volatile
  4316  00F0CA  0E03               	movlw	3
  4317  00F0CC                     u2467:
  4318  00F0CC  2EE8               	decfsz	wreg,f,c
  4319  00F0CE  D7FE               	goto	u2467
  4320  00F0D0  F000               	nop	
  4321  00F0D2  988A               	bcf	3978,4,c	;volatile
  4322                           
  4323                           ;lcd.h: 132: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  4324  00F0D4  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4325  00F0D8  90D8               	bcf	status,0,c
  4326  00F0DA  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4327  00F0DC  90D8               	bcf	status,0,c
  4328  00F0DE  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4329  00F0E0  90D8               	bcf	status,0,c
  4330  00F0E2  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4331  00F0E4  0E01               	movlw	1
  4332  00F0E6  1601               	andwf	??_Lcd_Chr_CP,f,c
  4333  00F0E8  508A               	movf	3978,w,c	;volatile
  4334  00F0EA  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4335  00F0EC  0BFE               	andlw	-2
  4336  00F0EE  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4337  00F0F0  6E8A               	movwf	3978,c	;volatile
  4338  00F0F2  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4339  00F0F6  90D8               	bcf	status,0,c
  4340  00F0F8  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4341  00F0FA  90D8               	bcf	status,0,c
  4342  00F0FC  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4343  00F0FE  0E01               	movlw	1
  4344  00F100  1601               	andwf	??_Lcd_Chr_CP,f,c
  4345  00F102  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4346  00F104  508A               	movf	3978,w,c	;volatile
  4347  00F106  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4348  00F108  0BFD               	andlw	-3
  4349  00F10A  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4350  00F10C  6E8A               	movwf	3978,c	;volatile
  4351                           
  4352                           ;lcd.h: 133: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  4353  00F10E  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4354  00F112  90D8               	bcf	status,0,c
  4355  00F114  3201               	rrcf	??_Lcd_Chr_CP,f,c
  4356  00F116  0E01               	movlw	1
  4357  00F118  1601               	andwf	??_Lcd_Chr_CP,f,c
  4358  00F11A  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4359  00F11C  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4360  00F11E  508A               	movf	3978,w,c	;volatile
  4361  00F120  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4362  00F122  0BFB               	andlw	-5
  4363  00F124  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4364  00F126  6E8A               	movwf	3978,c	;volatile
  4365  00F128  C003  F001         	movff	Lcd_Chr_CP@data,??_Lcd_Chr_CP
  4366  00F12C  0E01               	movlw	1
  4367  00F12E  1601               	andwf	??_Lcd_Chr_CP,f,c
  4368  00F130  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4369  00F132  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4370  00F134  4601               	rlncf	??_Lcd_Chr_CP,f,c
  4371  00F136  508A               	movf	3978,w,c	;volatile
  4372  00F138  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4373  00F13A  0BF7               	andlw	-9
  4374  00F13C  1801               	xorwf	??_Lcd_Chr_CP,w,c
  4375  00F13E  6E8A               	movwf	3978,c	;volatile
  4376                           
  4377                           ;lcd.h: 134: _delay(10);
  4378  00F140  0E03               	movlw	3
  4379  00F142                     u2477:
  4380  00F142  2EE8               	decfsz	wreg,f,c
  4381  00F144  D7FE               	goto	u2477
  4382  00F146  F000               	nop	
  4383                           
  4384                           ;lcd.h: 135: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  4385  00F148  888A               	bsf	3978,4,c	;volatile
  4386  00F14A  0E03               	movlw	3
  4387  00F14C                     u2487:
  4388  00F14C  2EE8               	decfsz	wreg,f,c
  4389  00F14E  D7FE               	goto	u2487
  4390  00F150  F000               	nop	
  4391  00F152  988A               	bcf	3978,4,c	;volatile
  4392                           
  4393                           ;lcd.h: 136: _delay((unsigned long)((5)*(8000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(8000000/4000000.0)));
  4394  00F154  0E03               	movlw	3
  4395  00F156                     u2497:
  4396  00F156  2EE8               	decfsz	wreg,f,c
  4397  00F158  D7FE               	goto	u2497
  4398  00F15A  F000               	nop	
  4399  00F15C  0E0F               	movlw	15
  4400  00F15E  6E01               	movwf	??_Lcd_Chr_CP& (0+255),c
  4401  00F160  0E48               	movlw	72
  4402  00F162                     u2507:
  4403  00F162  2EE8               	decfsz	wreg,f,c
  4404  00F164  D7FE               	goto	u2507
  4405  00F166  2E01               	decfsz	??_Lcd_Chr_CP& (0+255),f,c
  4406  00F168  D7FC               	goto	u2507
  4407  00F16A  0012               	return		;funcret
  4408  00F16C                     __end_of_Lcd_Chr_CP:
  4409                           	opt stack 0
  4410                           tblptru	equ	0xFF8
  4411                           tblptrh	equ	0xFF7
  4412                           tblptrl	equ	0xFF6
  4413                           tablat	equ	0xFF5
  4414                           prodh	equ	0xFF4
  4415                           prodl	equ	0xFF3
  4416                           intcon	equ	0xFF2
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           postdec1	equ	0xFE5
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function _Convert_diasem *****************
  4427 ;; Defined at:
  4428 ;;		line 335 in file "../main.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  dia             2   39[COMRAM] int 
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;  buffer_dia     20   43[COMRAM] unsigned char [20]
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  2   39[COMRAM] PTR unsigned char 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4443 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4445 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4446 ;;Total ram usage:       24 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    2
  4449 ;; This function calls:
  4450 ;;		_sprintf
  4451 ;; This function is called by:
  4452 ;;		_V_Principal
  4453 ;;		_ManejaMovimientos
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text14
  4458  00ECE6                     __ptext14:
  4459                           	opt stack 0
  4460  00ECE6                     _Convert_diasem:
  4461                           	opt stack 27
  4462                           
  4463                           ;main.c: 337: unsigned char buffer_dia[20];
  4464                           ;main.c: 339: switch(dia){
  4465                           
  4466                           ;incstack = 0
  4467  00ECE6  D069               	goto	l2603
  4468  00ECE8                     l2587:
  4469                           
  4470                           ;main.c: 341: sprintf(buffer_dia,"%s", "Domingo             ");
  4471  00ECE8  0E2C               	movlw	low Convert_diasem@buffer_dia
  4472  00ECEA  6E0D               	movwf	sprintf@sp,c
  4473  00ECEC  0E00               	movlw	high Convert_diasem@buffer_dia
  4474  00ECEE  6E0E               	movwf	sprintf@sp+1,c
  4475  00ECF0  0EF4               	movlw	low STR_9
  4476  00ECF2  6E0F               	movwf	sprintf@f,c
  4477  00ECF4  0EFF               	movlw	high STR_9
  4478  00ECF6  6E10               	movwf	sprintf@f+1,c
  4479  00ECF8  0E40               	movlw	low STR_10
  4480  00ECFA  6E11               	movwf	?_sprintf+4,c
  4481  00ECFC  0EFF               	movlw	high STR_10
  4482  00ECFE  6E12               	movwf	?_sprintf+5,c
  4483  00ED00  EC1C  F07B         	call	_sprintf	;wreg free
  4484                           
  4485                           ;main.c: 342: break;
  4486  00ED04  D079               	goto	l2605
  4487  00ED06                     l2589:
  4488                           
  4489                           ;main.c: 345: sprintf(buffer_dia,"%s", "Lunes               ");
  4490  00ED06  0E2C               	movlw	low Convert_diasem@buffer_dia
  4491  00ED08  6E0D               	movwf	sprintf@sp,c
  4492  00ED0A  0E00               	movlw	high Convert_diasem@buffer_dia
  4493  00ED0C  6E0E               	movwf	sprintf@sp+1,c
  4494  00ED0E  0EF4               	movlw	low STR_9
  4495  00ED10  6E0F               	movwf	sprintf@f,c
  4496  00ED12  0EFF               	movlw	high STR_9
  4497  00ED14  6E10               	movwf	sprintf@f+1,c
  4498  00ED16  0EEC               	movlw	low STR_12
  4499  00ED18  6E11               	movwf	?_sprintf+4,c
  4500  00ED1A  0EFE               	movlw	high STR_12
  4501  00ED1C  6E12               	movwf	?_sprintf+5,c
  4502  00ED1E  EC1C  F07B         	call	_sprintf	;wreg free
  4503                           
  4504                           ;main.c: 346: break;
  4505  00ED22  D06A               	goto	l2605
  4506  00ED24                     l2591:
  4507                           
  4508                           ;main.c: 349: sprintf(buffer_dia,"%s", "Martes              ");
  4509  00ED24  0E2C               	movlw	low Convert_diasem@buffer_dia
  4510  00ED26  6E0D               	movwf	sprintf@sp,c
  4511  00ED28  0E00               	movlw	high Convert_diasem@buffer_dia
  4512  00ED2A  6E0E               	movwf	sprintf@sp+1,c
  4513  00ED2C  0EF4               	movlw	low STR_9
  4514  00ED2E  6E0F               	movwf	sprintf@f,c
  4515  00ED30  0EFF               	movlw	high STR_9
  4516  00ED32  6E10               	movwf	sprintf@f+1,c
  4517  00ED34  0E16               	movlw	low STR_14
  4518  00ED36  6E11               	movwf	?_sprintf+4,c
  4519  00ED38  0EFF               	movlw	high STR_14
  4520  00ED3A  6E12               	movwf	?_sprintf+5,c
  4521  00ED3C  EC1C  F07B         	call	_sprintf	;wreg free
  4522                           
  4523                           ;main.c: 350: break;
  4524  00ED40  D05B               	goto	l2605
  4525  00ED42                     l2593:
  4526                           
  4527                           ;main.c: 353: sprintf(buffer_dia,"%s", "Miercoles           ");
  4528  00ED42  0E2C               	movlw	low Convert_diasem@buffer_dia
  4529  00ED44  6E0D               	movwf	sprintf@sp,c
  4530  00ED46  0E00               	movlw	high Convert_diasem@buffer_dia
  4531  00ED48  6E0E               	movwf	sprintf@sp+1,c
  4532  00ED4A  0EF4               	movlw	low STR_9
  4533  00ED4C  6E0F               	movwf	sprintf@f,c
  4534  00ED4E  0EFF               	movlw	high STR_9
  4535  00ED50  6E10               	movwf	sprintf@f+1,c
  4536  00ED52  0E6A               	movlw	low STR_16
  4537  00ED54  6E11               	movwf	?_sprintf+4,c
  4538  00ED56  0EFF               	movlw	high STR_16
  4539  00ED58  6E12               	movwf	?_sprintf+5,c
  4540  00ED5A  EC1C  F07B         	call	_sprintf	;wreg free
  4541                           
  4542                           ;main.c: 354: break;
  4543  00ED5E  D04C               	goto	l2605
  4544  00ED60                     l2595:
  4545                           
  4546                           ;main.c: 357: sprintf(buffer_dia,"%s", "Jueves              ");
  4547  00ED60  0E2C               	movlw	low Convert_diasem@buffer_dia
  4548  00ED62  6E0D               	movwf	sprintf@sp,c
  4549  00ED64  0E00               	movlw	high Convert_diasem@buffer_dia
  4550  00ED66  6E0E               	movwf	sprintf@sp+1,c
  4551  00ED68  0EF4               	movlw	low STR_9
  4552  00ED6A  6E0F               	movwf	sprintf@f,c
  4553  00ED6C  0EFF               	movlw	high STR_9
  4554  00ED6E  6E10               	movwf	sprintf@f+1,c
  4555  00ED70  0E2B               	movlw	low STR_18
  4556  00ED72  6E11               	movwf	?_sprintf+4,c
  4557  00ED74  0EFF               	movlw	high STR_18
  4558  00ED76  6E12               	movwf	?_sprintf+5,c
  4559  00ED78  EC1C  F07B         	call	_sprintf	;wreg free
  4560                           
  4561                           ;main.c: 358: break;
  4562  00ED7C  D03D               	goto	l2605
  4563  00ED7E                     l2597:
  4564                           
  4565                           ;main.c: 361: sprintf(buffer_dia,"%s", "Viernes             ");
  4566  00ED7E  0E2C               	movlw	low Convert_diasem@buffer_dia
  4567  00ED80  6E0D               	movwf	sprintf@sp,c
  4568  00ED82  0E00               	movlw	high Convert_diasem@buffer_dia
  4569  00ED84  6E0E               	movwf	sprintf@sp+1,c
  4570  00ED86  0EF4               	movlw	low STR_9
  4571  00ED88  6E0F               	movwf	sprintf@f,c
  4572  00ED8A  0EFF               	movlw	high STR_9
  4573  00ED8C  6E10               	movwf	sprintf@f+1,c
  4574  00ED8E  0E55               	movlw	low STR_20
  4575  00ED90  6E11               	movwf	?_sprintf+4,c
  4576  00ED92  0EFF               	movlw	high STR_20
  4577  00ED94  6E12               	movwf	?_sprintf+5,c
  4578  00ED96  EC1C  F07B         	call	_sprintf	;wreg free
  4579                           
  4580                           ;main.c: 362: break;
  4581  00ED9A  D02E               	goto	l2605
  4582  00ED9C                     l2599:
  4583                           
  4584                           ;main.c: 365: sprintf(buffer_dia,"%s", "Sabado              ");
  4585  00ED9C  0E2C               	movlw	low Convert_diasem@buffer_dia
  4586  00ED9E  6E0D               	movwf	sprintf@sp,c
  4587  00EDA0  0E00               	movlw	high Convert_diasem@buffer_dia
  4588  00EDA2  6E0E               	movwf	sprintf@sp+1,c
  4589  00EDA4  0EF4               	movlw	low STR_9
  4590  00EDA6  6E0F               	movwf	sprintf@f,c
  4591  00EDA8  0EFF               	movlw	high STR_9
  4592  00EDAA  6E10               	movwf	sprintf@f+1,c
  4593  00EDAC  0E01               	movlw	low STR_22
  4594  00EDAE  6E11               	movwf	?_sprintf+4,c
  4595  00EDB0  0EFF               	movlw	high STR_22
  4596  00EDB2  6E12               	movwf	?_sprintf+5,c
  4597  00EDB4  EC1C  F07B         	call	_sprintf	;wreg free
  4598                           
  4599                           ;main.c: 367: }
  4600                           ;main.c: 368: }
  4601                           
  4602                           ;main.c: 366: break;
  4603  00EDB8  D01F               	goto	l2605
  4604  00EDBA                     l2603:
  4605  00EDBA  C028  F02A         	movff	Convert_diasem@dia,??_Convert_diasem
  4606  00EDBE  C029  F02B         	movff	Convert_diasem@dia+1,??_Convert_diasem+1
  4607                           
  4608                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4609                           ; Switch size 1, requested type "space"
  4610                           ; Number of cases is 1, Range of values is 0 to 0
  4611                           ; switch strategies available:
  4612                           ; Name         Instructions Cycles
  4613                           ; simple_byte            4     3 (average)
  4614                           ;	Chosen strategy is simple_byte
  4615  00EDC2  502B               	movf	??_Convert_diasem+1,w,c
  4616  00EDC4  0A00               	xorlw	0	; case 0
  4617  00EDC6  A4D8               	btfss	status,2,c
  4618  00EDC8  D017               	goto	l2605
  4619                           
  4620                           ; Switch size 1, requested type "space"
  4621                           ; Number of cases is 7, Range of values is 0 to 6
  4622                           ; switch strategies available:
  4623                           ; Name         Instructions Cycles
  4624                           ; simple_byte           22    12 (average)
  4625                           ;	Chosen strategy is simple_byte
  4626  00EDCA  502A               	movf	??_Convert_diasem,w,c
  4627  00EDCC  0A00               	xorlw	0	; case 0
  4628  00EDCE  B4D8               	btfsc	status,2,c
  4629  00EDD0  D78B               	goto	l2587
  4630  00EDD2  0A01               	xorlw	1	; case 1
  4631  00EDD4  B4D8               	btfsc	status,2,c
  4632  00EDD6  D797               	goto	l2589
  4633  00EDD8  0A03               	xorlw	3	; case 2
  4634  00EDDA  B4D8               	btfsc	status,2,c
  4635  00EDDC  D7A3               	goto	l2591
  4636  00EDDE  0A01               	xorlw	1	; case 3
  4637  00EDE0  B4D8               	btfsc	status,2,c
  4638  00EDE2  D7AF               	goto	l2593
  4639  00EDE4  0A07               	xorlw	7	; case 4
  4640  00EDE6  B4D8               	btfsc	status,2,c
  4641  00EDE8  D7BB               	goto	l2595
  4642  00EDEA  0A01               	xorlw	1	; case 5
  4643  00EDEC  B4D8               	btfsc	status,2,c
  4644  00EDEE  D7C7               	goto	l2597
  4645  00EDF0  0A03               	xorlw	3	; case 6
  4646  00EDF2  B4D8               	btfsc	status,2,c
  4647  00EDF4  D7D3               	goto	l2599
  4648  00EDF6  D000               	goto	l2605
  4649  00EDF8                     l2605:
  4650                           
  4651                           ;main.c: 369: return buffer_dia;
  4652  00EDF8  0E2C               	movlw	low Convert_diasem@buffer_dia
  4653  00EDFA  6E28               	movwf	?_Convert_diasem,c
  4654  00EDFC  0E00               	movlw	high Convert_diasem@buffer_dia
  4655  00EDFE  6E29               	movwf	?_Convert_diasem+1,c
  4656  00EE00  0012               	return	
  4657  00EE02  0012               	return		;funcret
  4658  00EE04                     __end_of_Convert_diasem:
  4659                           	opt stack 0
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           postdec1	equ	0xFE5
  4670                           fsr1l	equ	0xFE1
  4671                           indf2	equ	0xFDF
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _sprintf *****************
  4677 ;; Defined at:
  4678 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;  sp              2   12[COMRAM] PTR unsigned char 
  4681 ;;		 -> Convert_diasem@buffer_dia(20), buffer1(20), 
  4682 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4683 ;;		 -> STR_46(5), STR_44(5), STR_42(5), STR_40(5), 
  4684 ;;		 -> STR_38(5), STR_33(5), STR_31(5), STR_29(5), 
  4685 ;;		 -> STR_27(5), STR_25(5), STR_21(3), STR_19(3), 
  4686 ;;		 -> STR_17(3), STR_15(3), STR_13(3), STR_11(3), 
  4687 ;;		 -> STR_9(3), STR_8(15), STR_7(15), STR_2(5), 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  tmpval          4    0        struct .
  4690 ;;  width           2   36[COMRAM] int 
  4691 ;;  len             2   34[COMRAM] unsigned int 
  4692 ;;  cp              2   32[COMRAM] PTR const unsigned char 
  4693 ;;		 -> STR_48(7), STR_22(21), STR_20(21), STR_18(21), 
  4694 ;;		 -> STR_16(21), STR_14(21), STR_12(21), STR_10(21), 
  4695 ;;  ap              2   30[COMRAM] PTR void [1]
  4696 ;;		 -> ?_sprintf(2), 
  4697 ;;  val             2   27[COMRAM] unsigned int 
  4698 ;;  c               1   38[COMRAM] char 
  4699 ;;  prec            1   29[COMRAM] char 
  4700 ;;  flag            1   26[COMRAM] unsigned char 
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  2   12[COMRAM] int 
  4703 ;; Registers used:
  4704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4710 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4711 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4712 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4713 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4714 ;;Total ram usage:       27 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    1
  4717 ;; This function calls:
  4718 ;;		___lwdiv
  4719 ;;		___lwmod
  4720 ;;		___wmul
  4721 ;;		_isdigit
  4722 ;; This function is called by:
  4723 ;;		_main
  4724 ;;		_V_Principal
  4725 ;;		_Convert_diasem
  4726 ;;		_ManejaMovimientos
  4727 ;; This function uses a non-reentrant model
  4728 ;;
  4729                           
  4730                           	psect	text15
  4731  00F638                     __ptext15:
  4732                           	opt stack 0
  4733  00F638                     _sprintf:
  4734                           	opt stack 29
  4735                           
  4736                           ;doprnt.c: 494: va_list ap;
  4737                           ;doprnt.c: 499: signed char c;
  4738                           ;doprnt.c: 501: int width;
  4739                           ;doprnt.c: 506: signed char prec;
  4740                           ;doprnt.c: 508: unsigned char flag;
  4741                           ;doprnt.c: 523: union {
  4742                           ;doprnt.c: 524: unsigned long vd;
  4743                           ;doprnt.c: 525: double integ;
  4744                           ;doprnt.c: 526: } tmpval;
  4745                           ;doprnt.c: 528: unsigned int val;
  4746                           ;doprnt.c: 529: unsigned len;
  4747                           ;doprnt.c: 530: const char * cp;
  4748                           ;doprnt.c: 533: *ap = __va_start();
  4749                           
  4750                           ;incstack = 0
  4751  00F638  0E11               	movlw	low (?_sprintf+4)
  4752  00F63A  6E1F               	movwf	sprintf@ap,c
  4753  00F63C  0E00               	movlw	high (?_sprintf+4)
  4754  00F63E  6E20               	movwf	sprintf@ap+1,c
  4755                           
  4756                           ;doprnt.c: 536: while(c = *f++) {
  4757  00F640  D182               	goto	l2219
  4758  00F642                     l2103:
  4759                           
  4760                           ;doprnt.c: 538: if(c != '%')
  4761  00F642  0E25               	movlw	37
  4762  00F644  1827               	xorwf	sprintf@c,w,c
  4763  00F646  B4D8               	btfsc	status,2,c
  4764  00F648  D009               	goto	l2109
  4765                           
  4766                           ;doprnt.c: 540: {
  4767                           ;doprnt.c: 541: ((*sp++ = (c)));
  4768  00F64A  C00D  FFD9         	movff	sprintf@sp,fsr2l
  4769  00F64E  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  4770  00F652  C027  FFDF         	movff	sprintf@c,indf2
  4771  00F656  4A0D               	infsnz	sprintf@sp,f,c
  4772  00F658  2A0E               	incf	sprintf@sp+1,f,c
  4773                           
  4774                           ;doprnt.c: 542: continue;
  4775  00F65A  D175               	goto	l2219
  4776  00F65C                     l2109:
  4777                           
  4778                           ;doprnt.c: 543: }
  4779                           ;doprnt.c: 546: width = 0;
  4780  00F65C  0E00               	movlw	0
  4781  00F65E  6E26               	movwf	sprintf@width+1,c
  4782  00F660  0E00               	movlw	0
  4783  00F662  6E25               	movwf	sprintf@width,c
  4784                           
  4785                           ;doprnt.c: 548: flag = 0;
  4786  00F664  0E00               	movlw	0
  4787  00F666  6E1B               	movwf	sprintf@flag,c
  4788                           
  4789                           ;doprnt.c: 551: switch(*f) {
  4790                           
  4791                           ;doprnt.c: 550: for(;;) {
  4792  00F668  D005               	goto	l2115
  4793  00F66A                     l2111:
  4794                           
  4795                           ;doprnt.c: 580: flag |= 0x04;
  4796  00F66A  841B               	bsf	sprintf@flag,2,c
  4797                           
  4798                           ;doprnt.c: 581: f++;
  4799  00F66C  4A0F               	infsnz	sprintf@f,f,c
  4800  00F66E  2A10               	incf	sprintf@f+1,f,c
  4801                           
  4802                           ;doprnt.c: 582: continue;
  4803  00F670  D001               	goto	l2115
  4804                           
  4805                           ;doprnt.c: 584: }
  4806  00F672  D00B               	goto	l2117
  4807  00F674                     l2115:
  4808  00F674  C00F  FFF6         	movff	sprintf@f,tblptrl
  4809  00F678  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4810  00F67C                     	if	0	;tblptru may be non-zero
  4811  00F67C                     	endif
  4812  00F67C                     	if	0	;tblptru may be non-zero
  4813  00F67C                     	endif
  4814  00F67C  0008               	tblrd		*
  4815  00F67E  50F5               	movf	tablat,w,c
  4816                           
  4817                           ; Switch size 1, requested type "space"
  4818                           ; Number of cases is 1, Range of values is 48 to 48
  4819                           ; switch strategies available:
  4820                           ; Name         Instructions Cycles
  4821                           ; simple_byte            4     3 (average)
  4822                           ;	Chosen strategy is simple_byte
  4823  00F680  0A30               	xorlw	48	; case 48
  4824  00F682  B4D8               	btfsc	status,2,c
  4825  00F684  D7F2               	goto	l2111
  4826                           
  4827                           ;doprnt.c: 585: break;
  4828  00F686  D001               	goto	l2117
  4829                           
  4830                           ;doprnt.c: 586: }
  4831  00F688  D7F5               	goto	l2115
  4832  00F68A                     l2117:
  4833                           
  4834                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4835  00F68A  C00F  FFF6         	movff	sprintf@f,tblptrl
  4836  00F68E  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4837  00F692                     	if	0	;tblptru may be non-zero
  4838  00F692                     	endif
  4839  00F692                     	if	0	;tblptru may be non-zero
  4840  00F692                     	endif
  4841  00F692  0008               	tblrd		*
  4842  00F694  50F5               	movf	tablat,w,c
  4843  00F696  EC33  F073         	call	_isdigit
  4844  00F69A  A0D8               	btfss	status,0,c
  4845  00F69C  D0A2               	goto	l2167
  4846                           
  4847                           ;doprnt.c: 598: width = 0;
  4848  00F69E  0E00               	movlw	0
  4849  00F6A0  6E26               	movwf	sprintf@width+1,c
  4850  00F6A2  0E00               	movlw	0
  4851  00F6A4  6E25               	movwf	sprintf@width,c
  4852  00F6A6  D000               	goto	l2121
  4853  00F6A8                     l2121:
  4854                           
  4855                           ;doprnt.c: 600: width *= 10;
  4856  00F6A8  C025  F001         	movff	sprintf@width,___wmul@multiplier
  4857  00F6AC  C026  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  4858  00F6B0  0E00               	movlw	0
  4859  00F6B2  6E04               	movwf	___wmul@multiplicand+1,c
  4860  00F6B4  0E0A               	movlw	10
  4861  00F6B6  6E03               	movwf	___wmul@multiplicand,c
  4862  00F6B8  EC55  F073         	call	___wmul	;wreg free
  4863  00F6BC  C001  F025         	movff	?___wmul,sprintf@width
  4864  00F6C0  C002  F026         	movff	?___wmul+1,sprintf@width+1
  4865                           
  4866                           ;doprnt.c: 601: width += *f++ - '0';
  4867  00F6C4  0ED0               	movlw	208
  4868  00F6C6  6E17               	movwf	??_sprintf& (0+255),c
  4869  00F6C8  0EFF               	movlw	255
  4870  00F6CA  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4871  00F6CC  C00F  FFF6         	movff	sprintf@f,tblptrl
  4872  00F6D0  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4873  00F6D4                     	if	0	;tblptru may be non-zero
  4874  00F6D4                     	endif
  4875  00F6D4                     	if	0	;tblptru may be non-zero
  4876  00F6D4                     	endif
  4877  00F6D4  0008               	tblrd		*
  4878  00F6D6  50F5               	movf	tablat,w,c
  4879  00F6D8  6E19               	movwf	(??_sprintf+2)& (0+255),c
  4880  00F6DA  6A1A               	clrf	(??_sprintf+3)& (0+255),c
  4881  00F6DC  5017               	movf	??_sprintf,w,c
  4882  00F6DE  2619               	addwf	??_sprintf+2,f,c
  4883  00F6E0  5018               	movf	??_sprintf+1,w,c
  4884  00F6E2  221A               	addwfc	??_sprintf+3,f,c
  4885  00F6E4  5019               	movf	??_sprintf+2,w,c
  4886  00F6E6  2625               	addwf	sprintf@width,f,c
  4887  00F6E8  501A               	movf	??_sprintf+3,w,c
  4888  00F6EA  2226               	addwfc	sprintf@width+1,f,c
  4889  00F6EC  4A0F               	infsnz	sprintf@f,f,c
  4890  00F6EE  2A10               	incf	sprintf@f+1,f,c
  4891                           
  4892                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4893  00F6F0  C00F  FFF6         	movff	sprintf@f,tblptrl
  4894  00F6F4  C010  FFF7         	movff	sprintf@f+1,tblptrh
  4895  00F6F8                     	if	0	;tblptru may be non-zero
  4896  00F6F8                     	endif
  4897  00F6F8                     	if	0	;tblptru may be non-zero
  4898  00F6F8                     	endif
  4899  00F6F8  0008               	tblrd		*
  4900  00F6FA  50F5               	movf	tablat,w,c
  4901  00F6FC  EC33  F073         	call	_isdigit
  4902  00F700  A0D8               	btfss	status,0,c
  4903  00F702  D06F               	goto	l2167
  4904  00F704  D7D1               	goto	l2121
  4905                           
  4906                           ;doprnt.c: 608: }
  4907                           ;doprnt.c: 635: switch(c = *f++) {
  4908  00F706  D06D               	goto	l2167
  4909                           
  4910                           ;doprnt.c: 638: goto alldone;
  4911                           
  4912                           ;doprnt.c: 637: case 0:
  4913  00F708  D12C               	goto	l2221
  4914  00F70A                     l2129:
  4915                           
  4916                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4917  00F70A  C01F  FFD9         	movff	sprintf@ap,fsr2l
  4918  00F70E  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  4919  00F712  CFDE F021          	movff	postinc2,sprintf@cp
  4920  00F716  CFDD F022          	movff	postdec2,sprintf@cp+1
  4921  00F71A  0E02               	movlw	2
  4922  00F71C  261F               	addwf	sprintf@ap,f,c
  4923  00F71E  0E00               	movlw	0
  4924  00F720  2220               	addwfc	sprintf@ap+1,f,c
  4925                           
  4926                           ;doprnt.c: 740: if(!cp)
  4927  00F722  5021               	movf	sprintf@cp,w,c
  4928  00F724  1022               	iorwf	sprintf@cp+1,w,c
  4929  00F726  A4D8               	btfss	status,2,c
  4930  00F728  D005               	goto	l2137
  4931                           
  4932                           ;doprnt.c: 741: cp = "(null)";
  4933  00F72A  0EE8               	movlw	low STR_48
  4934  00F72C  6E21               	movwf	sprintf@cp,c
  4935  00F72E  0EFF               	movlw	high STR_48
  4936  00F730  6E22               	movwf	sprintf@cp+1,c
  4937  00F732  D000               	goto	l2137
  4938  00F734                     l2137:
  4939                           
  4940                           ;doprnt.c: 745: len = 0;
  4941  00F734  0E00               	movlw	0
  4942  00F736  6E24               	movwf	sprintf@len+1,c
  4943  00F738  0E00               	movlw	0
  4944  00F73A  6E23               	movwf	sprintf@len,c
  4945                           
  4946                           ;doprnt.c: 746: while(cp[len])
  4947  00F73C  D003               	goto	l2141
  4948  00F73E                     l2139:
  4949                           
  4950                           ;doprnt.c: 747: len++;
  4951  00F73E  4A23               	infsnz	sprintf@len,f,c
  4952  00F740  2A24               	incf	sprintf@len+1,f,c
  4953  00F742  D000               	goto	l2141
  4954  00F744                     l2141:
  4955  00F744  5023               	movf	sprintf@len,w,c
  4956  00F746  2421               	addwf	sprintf@cp,w,c
  4957  00F748  6E17               	movwf	??_sprintf& (0+255),c
  4958  00F74A  5024               	movf	sprintf@len+1,w,c
  4959  00F74C  2022               	addwfc	sprintf@cp+1,w,c
  4960  00F74E  6E18               	movwf	(??_sprintf+1)& (0+255),c
  4961  00F750  C017  FFF6         	movff	??_sprintf,tblptrl
  4962  00F754  C018  FFF7         	movff	??_sprintf+1,tblptrh
  4963  00F758                     	if	0	;tblptru may be non-zero
  4964  00F758                     	endif
  4965  00F758                     	if	0	;tblptru may be non-zero
  4966  00F758                     	endif
  4967  00F758  0008               	tblrd		*
  4968  00F75A  50F5               	movf	tablat,w,c
  4969  00F75C  0900               	iorlw	0
  4970  00F75E  A4D8               	btfss	status,2,c
  4971  00F760  D7EE               	goto	l2139
  4972                           
  4973                           ;doprnt.c: 757: if(width > len)
  4974  00F762  5025               	movf	sprintf@width,w,c
  4975  00F764  5C23               	subwf	sprintf@len,w,c
  4976  00F766  5026               	movf	sprintf@width+1,w,c
  4977  00F768  5824               	subwfb	sprintf@len+1,w,c
  4978  00F76A  B0D8               	btfsc	status,0,c
  4979  00F76C  D005               	goto	l2147
  4980                           
  4981                           ;doprnt.c: 758: width -= len;
  4982  00F76E  5023               	movf	sprintf@len,w,c
  4983  00F770  5E25               	subwf	sprintf@width,f,c
  4984  00F772  5024               	movf	sprintf@len+1,w,c
  4985  00F774  5A26               	subwfb	sprintf@width+1,f,c
  4986  00F776  D00E               	goto	l2153
  4987  00F778                     l2147:
  4988                           
  4989                           ;doprnt.c: 759: else
  4990                           ;doprnt.c: 760: width = 0;
  4991  00F778  0E00               	movlw	0
  4992  00F77A  6E26               	movwf	sprintf@width+1,c
  4993  00F77C  0E00               	movlw	0
  4994  00F77E  6E25               	movwf	sprintf@width,c
  4995                           
  4996                           ;doprnt.c: 764: while(width--)
  4997  00F780  D009               	goto	l2153
  4998  00F782                     l2149:
  4999                           
  5000                           ;doprnt.c: 765: ((*sp++ = (' ')));
  5001  00F782  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5002  00F786  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5003  00F78A  0E20               	movlw	32
  5004  00F78C  6EDF               	movwf	indf2,c
  5005  00F78E  4A0D               	infsnz	sprintf@sp,f,c
  5006  00F790  2A0E               	incf	sprintf@sp+1,f,c
  5007  00F792  D000               	goto	l2153
  5008  00F794                     l2153:
  5009  00F794  0625               	decf	sprintf@width,f,c
  5010  00F796  A0D8               	btfss	status,0,c
  5011  00F798  0626               	decf	sprintf@width+1,f,c
  5012  00F79A  2825               	incf	sprintf@width,w,c
  5013  00F79C  E1F2               	bnz	l2149
  5014  00F79E  2826               	incf	sprintf@width+1,w,c
  5015  00F7A0  B4D8               	btfsc	status,2,c
  5016  00F7A2  D012               	goto	l2161
  5017  00F7A4  D7EE               	goto	l2149
  5018                           
  5019                           ;doprnt.c: 767: while(len--)
  5020  00F7A6  D010               	goto	l2161
  5021  00F7A8                     l2155:
  5022                           
  5023                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  5024  00F7A8  C021  FFF6         	movff	sprintf@cp,tblptrl
  5025  00F7AC  C022  FFF7         	movff	sprintf@cp+1,tblptrh
  5026  00F7B0                     	if	0	;tblptru may be non-zero
  5027  00F7B0                     	endif
  5028  00F7B0                     	if	0	;tblptru may be non-zero
  5029  00F7B0                     	endif
  5030  00F7B0  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5031  00F7B4  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5032  00F7B8  0008               	tblrd		*
  5033  00F7BA  CFF5 FFDF          	movff	tablat,indf2
  5034  00F7BE  4A21               	infsnz	sprintf@cp,f,c
  5035  00F7C0  2A22               	incf	sprintf@cp+1,f,c
  5036  00F7C2  4A0D               	infsnz	sprintf@sp,f,c
  5037  00F7C4  2A0E               	incf	sprintf@sp+1,f,c
  5038  00F7C6  D000               	goto	l2161
  5039  00F7C8                     l2161:
  5040  00F7C8  0623               	decf	sprintf@len,f,c
  5041  00F7CA  A0D8               	btfss	status,0,c
  5042  00F7CC  0624               	decf	sprintf@len+1,f,c
  5043  00F7CE  2823               	incf	sprintf@len,w,c
  5044  00F7D0  E1EB               	bnz	l2155
  5045  00F7D2  2824               	incf	sprintf@len+1,w,c
  5046  00F7D4  B4D8               	btfsc	status,2,c
  5047  00F7D6  D0B7               	goto	l2219
  5048  00F7D8  D7E7               	goto	l2155
  5049                           
  5050                           ;doprnt.c: 813: continue;
  5051                           
  5052                           ;doprnt.c: 802: default:
  5053                           
  5054                           ;doprnt.c: 774: continue;
  5055  00F7DA  D0B5               	goto	l2219
  5056  00F7DC                     l2163:
  5057                           
  5058                           ;doprnt.c: 818: flag |= 0xC0;
  5059  00F7DC  0EC0               	movlw	192
  5060  00F7DE  121B               	iorwf	sprintf@flag,f,c
  5061                           
  5062                           ;doprnt.c: 822: }
  5063                           
  5064                           ;doprnt.c: 819: break;
  5065  00F7E0  D014               	goto	l2169
  5066  00F7E2                     l2167:
  5067  00F7E2  C00F  FFF6         	movff	sprintf@f,tblptrl
  5068  00F7E6  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5069  00F7EA  4A0F               	infsnz	sprintf@f,f,c
  5070  00F7EC  2A10               	incf	sprintf@f+1,f,c
  5071  00F7EE                     	if	0	;tblptru may be non-zero
  5072  00F7EE                     	endif
  5073  00F7EE                     	if	0	;tblptru may be non-zero
  5074  00F7EE                     	endif
  5075  00F7EE  0008               	tblrd		*
  5076  00F7F0  CFF5 F027          	movff	tablat,sprintf@c
  5077  00F7F4  5027               	movf	sprintf@c,w,c
  5078                           
  5079                           ; Switch size 1, requested type "space"
  5080                           ; Number of cases is 3, Range of values is 0 to 117
  5081                           ; switch strategies available:
  5082                           ; Name         Instructions Cycles
  5083                           ; simple_byte           10     6 (average)
  5084                           ;	Chosen strategy is simple_byte
  5085  00F7F6  0A00               	xorlw	0	; case 0
  5086  00F7F8  B4D8               	btfsc	status,2,c
  5087  00F7FA  D0B3               	goto	l2221
  5088  00F7FC  0A73               	xorlw	115	; case 115
  5089  00F7FE  B4D8               	btfsc	status,2,c
  5090  00F800  D784               	goto	l2129
  5091  00F802  0A06               	xorlw	6	; case 117
  5092  00F804  B4D8               	btfsc	status,2,c
  5093  00F806  D7EA               	goto	l2163
  5094  00F808  D09E               	goto	l2219
  5095  00F80A                     l2169:
  5096                           
  5097                           ;doprnt.c: 1273: {
  5098                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5099  00F80A  C01F  FFD9         	movff	sprintf@ap,fsr2l
  5100  00F80E  C020  FFDA         	movff	sprintf@ap+1,fsr2h
  5101  00F812  CFDE F01C          	movff	postinc2,sprintf@val
  5102  00F816  CFDD F01D          	movff	postdec2,sprintf@val+1
  5103  00F81A  0E02               	movlw	2
  5104  00F81C  261F               	addwf	sprintf@ap,f,c
  5105  00F81E  0E00               	movlw	0
  5106  00F820  2220               	addwfc	sprintf@ap+1,f,c
  5107                           
  5108                           ;doprnt.c: 1287: }
  5109                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5110  00F822  0E01               	movlw	1
  5111  00F824  6E27               	movwf	sprintf@c,c
  5112  00F826                     l2175:
  5113  00F826  0E05               	movlw	5
  5114  00F828  1827               	xorwf	sprintf@c,w,c
  5115  00F82A  B4D8               	btfsc	status,2,c
  5116  00F82C  D016               	goto	l2187
  5117  00F82E  D001               	goto	l2179
  5118  00F830  D014               	goto	l2187
  5119  00F832                     l2179:
  5120                           
  5121                           ;doprnt.c: 1306: if(val < dpowers[c])
  5122  00F832  5027               	movf	sprintf@c,w,c
  5123  00F834  0D02               	mullw	2
  5124  00F836  0ECD               	movlw	low _dpowers
  5125  00F838  24F3               	addwf	prodl,w,c
  5126  00F83A  6EF6               	movwf	tblptrl,c
  5127  00F83C  0EFE               	movlw	high _dpowers
  5128  00F83E  20F4               	addwfc	prodh,w,c
  5129  00F840  6EF7               	movwf	tblptrh,c
  5130  00F842                     	if	0	;There are less than 3 active tblptr bytes
  5131  00F842                     	endif
  5132  00F842  0009               	tblrd		*+
  5133  00F844  50F5               	movf	tablat,w,c
  5134  00F846  5C1C               	subwf	sprintf@val,w,c
  5135  00F848  0009               	tblrd		*+
  5136  00F84A  50F5               	movf	tablat,w,c
  5137  00F84C  581D               	subwfb	sprintf@val+1,w,c
  5138  00F84E  A0D8               	btfss	status,0,c
  5139  00F850  D004               	goto	l2187
  5140  00F852  D001               	goto	l2183
  5141                           
  5142                           ;doprnt.c: 1307: break;
  5143  00F854  D002               	goto	l2187
  5144  00F856                     l2183:
  5145  00F856  2A27               	incf	sprintf@c,f,c
  5146  00F858  D7E6               	goto	l2175
  5147  00F85A                     l2187:
  5148                           
  5149                           ;doprnt.c: 1381: if(width > c)
  5150  00F85A  0E80               	movlw	128
  5151  00F85C  BE27               	btfsc	sprintf@c,7,c
  5152  00F85E  0E7F               	movlw	127
  5153  00F860  6E17               	movwf	??_sprintf& (0+255),c
  5154  00F862  5025               	movf	sprintf@width,w,c
  5155  00F864  5C27               	subwf	sprintf@c,w,c
  5156  00F866  5026               	movf	sprintf@width+1,w,c
  5157  00F868  0A80               	xorlw	128
  5158  00F86A  5817               	subwfb	??_sprintf& (0+255),w,c
  5159  00F86C  B0D8               	btfsc	status,0,c
  5160  00F86E  D007               	goto	l2191
  5161                           
  5162                           ;doprnt.c: 1382: width -= c;
  5163  00F870  5027               	movf	sprintf@c,w,c
  5164  00F872  5E25               	subwf	sprintf@width,f,c
  5165  00F874  0E00               	movlw	0
  5166  00F876  BE27               	btfsc	sprintf@c,7,c
  5167  00F878  0EFF               	movlw	255
  5168  00F87A  5A26               	subwfb	sprintf@width+1,f,c
  5169  00F87C  D005               	goto	l2193
  5170  00F87E                     l2191:
  5171                           
  5172                           ;doprnt.c: 1383: else
  5173                           ;doprnt.c: 1384: width = 0;
  5174  00F87E  0E00               	movlw	0
  5175  00F880  6E26               	movwf	sprintf@width+1,c
  5176  00F882  0E00               	movlw	0
  5177  00F884  6E25               	movwf	sprintf@width,c
  5178  00F886  D000               	goto	l2193
  5179  00F888                     l2193:
  5180                           
  5181                           ;doprnt.c: 1387: if(flag & 0x04) {
  5182  00F888  A41B               	btfss	sprintf@flag,2,c
  5183  00F88A  D015               	goto	l2203
  5184                           
  5185                           ;doprnt.c: 1415: if(width)
  5186  00F88C  5025               	movf	sprintf@width,w,c
  5187  00F88E  1026               	iorwf	sprintf@width+1,w,c
  5188  00F890  B4D8               	btfsc	status,2,c
  5189  00F892  D026               	goto	l307
  5190  00F894                     l2197:
  5191                           
  5192                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  5193  00F894  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5194  00F898  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5195  00F89C  0E30               	movlw	48
  5196  00F89E  6EDF               	movwf	indf2,c
  5197  00F8A0  4A0D               	infsnz	sprintf@sp,f,c
  5198  00F8A2  2A0E               	incf	sprintf@sp+1,f,c
  5199                           
  5200                           ;doprnt.c: 1418: while(--width);
  5201  00F8A4  0625               	decf	sprintf@width,f,c
  5202  00F8A6  A0D8               	btfss	status,0,c
  5203  00F8A8  0626               	decf	sprintf@width+1,f,c
  5204  00F8AA  5025               	movf	sprintf@width,w,c
  5205  00F8AC  1026               	iorwf	sprintf@width+1,w,c
  5206  00F8AE  B4D8               	btfsc	status,2,c
  5207  00F8B0  D017               	goto	l307
  5208  00F8B2  D7F0               	goto	l2197
  5209                           
  5210                           ;doprnt.c: 1420: } else
  5211  00F8B4  D015               	goto	l307
  5212  00F8B6                     l2203:
  5213                           
  5214                           ;doprnt.c: 1422: {
  5215                           ;doprnt.c: 1424: if(width
  5216                           ;doprnt.c: 1428: )
  5217  00F8B6  5025               	movf	sprintf@width,w,c
  5218  00F8B8  1026               	iorwf	sprintf@width+1,w,c
  5219  00F8BA  B4D8               	btfsc	status,2,c
  5220  00F8BC  D011               	goto	l307
  5221  00F8BE                     l2205:
  5222                           
  5223                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  5224  00F8BE  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5225  00F8C2  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5226  00F8C6  0E20               	movlw	32
  5227  00F8C8  6EDF               	movwf	indf2,c
  5228  00F8CA  4A0D               	infsnz	sprintf@sp,f,c
  5229  00F8CC  2A0E               	incf	sprintf@sp+1,f,c
  5230                           
  5231                           ;doprnt.c: 1431: while(--width);
  5232  00F8CE  0625               	decf	sprintf@width,f,c
  5233  00F8D0  A0D8               	btfss	status,0,c
  5234  00F8D2  0626               	decf	sprintf@width+1,f,c
  5235  00F8D4  5025               	movf	sprintf@width,w,c
  5236  00F8D6  1026               	iorwf	sprintf@width+1,w,c
  5237  00F8D8  B4D8               	btfsc	status,2,c
  5238  00F8DA  D002               	goto	l307
  5239  00F8DC  D7F0               	goto	l2205
  5240  00F8DE  D000               	goto	l307
  5241  00F8E0                     l307:
  5242                           
  5243                           ;doprnt.c: 1469: }
  5244                           ;doprnt.c: 1472: prec = c;
  5245  00F8E0  C027  F01E         	movff	sprintf@c,sprintf@prec
  5246                           
  5247                           ;doprnt.c: 1474: while(prec--) {
  5248  00F8E4  D02A               	goto	l2217
  5249  00F8E6                     l2211:
  5250                           
  5251                           ;doprnt.c: 1478: {
  5252                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5253  00F8E6  501E               	movf	sprintf@prec,w,c
  5254  00F8E8  0D02               	mullw	2
  5255  00F8EA  0ECD               	movlw	low _dpowers
  5256  00F8EC  24F3               	addwf	prodl,w,c
  5257  00F8EE  6EF6               	movwf	tblptrl,c
  5258  00F8F0  0EFE               	movlw	high _dpowers
  5259  00F8F2  20F4               	addwfc	prodh,w,c
  5260  00F8F4  6EF7               	movwf	tblptrh,c
  5261  00F8F6                     	if	0	;There are less than 3 active tblptr bytes
  5262  00F8F6                     	endif
  5263  00F8F6  0009               	tblrd		*+
  5264  00F8F8  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5265  00F8FC  000A               	tblrd		*-
  5266  00F8FE  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5267  00F902  C01C  F001         	movff	sprintf@val,___lwdiv@dividend
  5268  00F906  C01D  F002         	movff	sprintf@val+1,___lwdiv@dividend+1
  5269  00F90A  EC8F  F073         	call	___lwdiv	;wreg free
  5270  00F90E  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5271  00F912  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5272  00F916  0E00               	movlw	0
  5273  00F918  6E0B               	movwf	___lwmod@divisor+1,c
  5274  00F91A  0E0A               	movlw	10
  5275  00F91C  6E0A               	movwf	___lwmod@divisor,c
  5276  00F91E  EC69  F073         	call	___lwmod	;wreg free
  5277  00F922  5008               	movf	?___lwmod,w,c
  5278  00F924  0F30               	addlw	48
  5279  00F926  6E27               	movwf	sprintf@c,c
  5280                           
  5281                           ;doprnt.c: 1523: }
  5282                           ;doprnt.c: 1524: ((*sp++ = (c)));
  5283  00F928  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5284  00F92C  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5285  00F930  C027  FFDF         	movff	sprintf@c,indf2
  5286  00F934  4A0D               	infsnz	sprintf@sp,f,c
  5287  00F936  2A0E               	incf	sprintf@sp+1,f,c
  5288  00F938  D000               	goto	l2217
  5289  00F93A                     l2217:
  5290  00F93A  061E               	decf	sprintf@prec,f,c
  5291  00F93C  281E               	incf	sprintf@prec,w,c
  5292  00F93E  B4D8               	btfsc	status,2,c
  5293  00F940  D002               	goto	l2219
  5294  00F942  D7D1               	goto	l2211
  5295  00F944  D000               	goto	l2219
  5296  00F946                     l2219:
  5297  00F946  C00F  FFF6         	movff	sprintf@f,tblptrl
  5298  00F94A  C010  FFF7         	movff	sprintf@f+1,tblptrh
  5299  00F94E  4A0F               	infsnz	sprintf@f,f,c
  5300  00F950  2A10               	incf	sprintf@f+1,f,c
  5301  00F952                     	if	0	;tblptru may be non-zero
  5302  00F952                     	endif
  5303  00F952                     	if	0	;tblptru may be non-zero
  5304  00F952                     	endif
  5305  00F952  0008               	tblrd		*
  5306  00F954  CFF5 F027          	movff	tablat,sprintf@c
  5307  00F958  5027               	movf	sprintf@c,w,c
  5308  00F95A  B4D8               	btfsc	status,2,c
  5309  00F95C  D002               	goto	l2221
  5310  00F95E  D671               	goto	l2103
  5311  00F960  D000               	goto	l2221
  5312  00F962                     l2221:
  5313                           
  5314                           ;doprnt.c: 1538: *sp = 0;
  5315  00F962  C00D  FFD9         	movff	sprintf@sp,fsr2l
  5316  00F966  C00E  FFDA         	movff	sprintf@sp+1,fsr2h
  5317  00F96A  0E00               	movlw	0
  5318  00F96C  6EDF               	movwf	indf2,c
  5319  00F96E  0012               	return	
  5320                           
  5321                           ;doprnt.c: 1540: return 0;
  5322                           ;	Return value of _sprintf is never used
  5323  00F970  0012               	return		;funcret
  5324  00F972                     __end_of_sprintf:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           prodh	equ	0xFF4
  5331                           prodl	equ	0xFF3
  5332                           intcon	equ	0xFF2
  5333                           postinc0	equ	0xFEE
  5334                           wreg	equ	0xFE8
  5335                           postdec1	equ	0xFE5
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           fsr2h	equ	0xFDA
  5341                           fsr2l	equ	0xFD9
  5342                           status	equ	0xFD8
  5343                           
  5344 ;; *************** function _isdigit *****************
  5345 ;; Defined at:
  5346 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  c               1    wreg     unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  c               1    2[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;		None               void
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5361 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5362 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5363 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; This function calls:
  5367 ;;		Nothing
  5368 ;; This function is called by:
  5369 ;;		_sprintf
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           	psect	text16
  5374  00E666                     __ptext16:
  5375                           	opt stack 0
  5376  00E666                     _isdigit:
  5377                           	opt stack 29
  5378                           
  5379                           ;incstack = 0
  5380                           ;isdigit@c stored from wreg
  5381  00E666  6E03               	movwf	isdigit@c,c
  5382  00E668  0E00               	movlw	0
  5383  00E66A  6E02               	movwf	_isdigit$2097,c
  5384  00E66C  0E3A               	movlw	58
  5385  00E66E  6003               	cpfslt	isdigit@c,c
  5386  00E670  D006               	goto	l2007
  5387  00E672  0E2F               	movlw	47
  5388  00E674  6403               	cpfsgt	isdigit@c,c
  5389  00E676  D003               	goto	l2007
  5390  00E678  0E01               	movlw	1
  5391  00E67A  6E02               	movwf	_isdigit$2097,c
  5392  00E67C  D000               	goto	l2007
  5393  00E67E                     l2007:
  5394  00E67E  C002  F001         	movff	_isdigit$2097,??_isdigit
  5395  00E682  3001               	rrcf	??_isdigit,w,c
  5396  00E684  0012               	return	
  5397  00E686  0012               	return		;funcret
  5398  00E688                     __end_of_isdigit:
  5399                           	opt stack 0
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           intcon	equ	0xFF2
  5407                           postinc0	equ	0xFEE
  5408                           wreg	equ	0xFE8
  5409                           postdec1	equ	0xFE5
  5410                           fsr1l	equ	0xFE1
  5411                           indf2	equ	0xFDF
  5412                           postinc2	equ	0xFDE
  5413                           postdec2	equ	0xFDD
  5414                           fsr2h	equ	0xFDA
  5415                           fsr2l	equ	0xFD9
  5416                           status	equ	0xFD8
  5417                           
  5418 ;; *************** function ___wmul *****************
  5419 ;; Defined at:
  5420 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5421 ;; Parameters:    Size  Location     Type
  5422 ;;  multiplier      2    0[COMRAM] unsigned int 
  5423 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  product         2    4[COMRAM] unsigned int 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  2    0[COMRAM] unsigned int 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0, prodl, prodh
  5430 ;; Tracked objects:
  5431 ;;		On entry : 0/0
  5432 ;;		On exit  : 0/0
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5438 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5439 ;;Total ram usage:        6 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_sprintf
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text17
  5449  00E6AA                     __ptext17:
  5450                           	opt stack 0
  5451  00E6AA                     ___wmul:
  5452                           	opt stack 29
  5453                           
  5454                           ;incstack = 0
  5455  00E6AA  5001               	movf	___wmul@multiplier,w,c
  5456  00E6AC  0203               	mulwf	___wmul@multiplicand,c
  5457  00E6AE  CFF3 F005          	movff	prodl,___wmul@product
  5458  00E6B2  CFF4 F006          	movff	prodh,___wmul@product+1
  5459  00E6B6  5001               	movf	___wmul@multiplier,w,c
  5460  00E6B8  0204               	mulwf	___wmul@multiplicand+1,c
  5461  00E6BA  50F3               	movf	prodl,w,c
  5462  00E6BC  2606               	addwf	___wmul@product+1,f,c
  5463  00E6BE  5002               	movf	___wmul@multiplier+1,w,c
  5464  00E6C0  0203               	mulwf	___wmul@multiplicand,c
  5465  00E6C2  50F3               	movf	prodl,w,c
  5466  00E6C4  2606               	addwf	___wmul@product+1,f,c
  5467  00E6C6  C005  F001         	movff	___wmul@product,?___wmul
  5468  00E6CA  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5469  00E6CE  0012               	return	
  5470  00E6D0  0012               	return		;funcret
  5471  00E6D2                     __end_of___wmul:
  5472                           	opt stack 0
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           fsr2h	equ	0xFDA
  5488                           fsr2l	equ	0xFD9
  5489                           status	equ	0xFD8
  5490                           
  5491 ;; *************** function ___lwmod *****************
  5492 ;; Defined at:
  5493 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  5494 ;; Parameters:    Size  Location     Type
  5495 ;;  dividend        2    7[COMRAM] unsigned int 
  5496 ;;  divisor         2    9[COMRAM] unsigned int 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  counter         1   11[COMRAM] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  2    7[COMRAM] unsigned int 
  5501 ;; Registers used:
  5502 ;;		wreg, status,2, status,0
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5511 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5512 ;;Total ram usage:        5 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_sprintf
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text18
  5522  00E6D2                     __ptext18:
  5523                           	opt stack 0
  5524  00E6D2                     ___lwmod:
  5525                           	opt stack 29
  5526                           
  5527                           ;incstack = 0
  5528  00E6D2  500A               	movf	___lwmod@divisor,w,c
  5529  00E6D4  100B               	iorwf	___lwmod@divisor+1,w,c
  5530  00E6D6  B4D8               	btfsc	status,2,c
  5531  00E6D8  D01D               	goto	l940
  5532  00E6DA  0E01               	movlw	1
  5533  00E6DC  6E0C               	movwf	___lwmod@counter,c
  5534  00E6DE  D005               	goto	l2045
  5535  00E6E0                     l2043:
  5536  00E6E0  90D8               	bcf	status,0,c
  5537  00E6E2  360A               	rlcf	___lwmod@divisor,f,c
  5538  00E6E4  360B               	rlcf	___lwmod@divisor+1,f,c
  5539  00E6E6  2A0C               	incf	___lwmod@counter,f,c
  5540  00E6E8  D000               	goto	l2045
  5541  00E6EA                     l2045:
  5542  00E6EA  BE0B               	btfsc	___lwmod@divisor+1,7,c
  5543  00E6EC  D002               	goto	l2047
  5544  00E6EE  D7F8               	goto	l2043
  5545  00E6F0  D000               	goto	l2047
  5546  00E6F2                     l2047:
  5547  00E6F2  500A               	movf	___lwmod@divisor,w,c
  5548  00E6F4  5C08               	subwf	___lwmod@dividend,w,c
  5549  00E6F6  500B               	movf	___lwmod@divisor+1,w,c
  5550  00E6F8  5809               	subwfb	___lwmod@dividend+1,w,c
  5551  00E6FA  A0D8               	btfss	status,0,c
  5552  00E6FC  D005               	goto	l2051
  5553  00E6FE  500A               	movf	___lwmod@divisor,w,c
  5554  00E700  5E08               	subwf	___lwmod@dividend,f,c
  5555  00E702  500B               	movf	___lwmod@divisor+1,w,c
  5556  00E704  5A09               	subwfb	___lwmod@dividend+1,f,c
  5557  00E706  D000               	goto	l2051
  5558  00E708                     l2051:
  5559  00E708  90D8               	bcf	status,0,c
  5560  00E70A  320B               	rrcf	___lwmod@divisor+1,f,c
  5561  00E70C  320A               	rrcf	___lwmod@divisor,f,c
  5562  00E70E  2E0C               	decfsz	___lwmod@counter,f,c
  5563  00E710  D7F0               	goto	l2047
  5564  00E712  D000               	goto	l940
  5565  00E714                     l940:
  5566  00E714  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5567  00E718  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5568  00E71C  0012               	return		;funcret
  5569  00E71E                     __end_of___lwmod:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           intcon	equ	0xFF2
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           postdec1	equ	0xFE5
  5581                           fsr1l	equ	0xFE1
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function ___lwdiv *****************
  5590 ;; Defined at:
  5591 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;  dividend        2    0[COMRAM] unsigned int 
  5594 ;;  divisor         2    2[COMRAM] unsigned int 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  quotient        2    4[COMRAM] unsigned int 
  5597 ;;  counter         1    6[COMRAM] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  2    0[COMRAM] unsigned int 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5607 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5608 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5610 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5611 ;;Total ram usage:        7 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_sprintf
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text19
  5621  00E71E                     __ptext19:
  5622                           	opt stack 0
  5623  00E71E                     ___lwdiv:
  5624                           	opt stack 29
  5625                           
  5626                           ;incstack = 0
  5627  00E71E  0E00               	movlw	0
  5628  00E720  6E06               	movwf	___lwdiv@quotient+1,c
  5629  00E722  0E00               	movlw	0
  5630  00E724  6E05               	movwf	___lwdiv@quotient,c
  5631  00E726  5003               	movf	___lwdiv@divisor,w,c
  5632  00E728  1004               	iorwf	___lwdiv@divisor+1,w,c
  5633  00E72A  B4D8               	btfsc	status,2,c
  5634  00E72C  D021               	goto	l930
  5635  00E72E  0E01               	movlw	1
  5636  00E730  6E07               	movwf	___lwdiv@counter,c
  5637  00E732  D005               	goto	l2025
  5638  00E734                     l2023:
  5639  00E734  90D8               	bcf	status,0,c
  5640  00E736  3603               	rlcf	___lwdiv@divisor,f,c
  5641  00E738  3604               	rlcf	___lwdiv@divisor+1,f,c
  5642  00E73A  2A07               	incf	___lwdiv@counter,f,c
  5643  00E73C  D000               	goto	l2025
  5644  00E73E                     l2025:
  5645  00E73E  BE04               	btfsc	___lwdiv@divisor+1,7,c
  5646  00E740  D002               	goto	l2027
  5647  00E742  D7F8               	goto	l2023
  5648  00E744  D000               	goto	l2027
  5649  00E746                     l2027:
  5650  00E746  90D8               	bcf	status,0,c
  5651  00E748  3605               	rlcf	___lwdiv@quotient,f,c
  5652  00E74A  3606               	rlcf	___lwdiv@quotient+1,f,c
  5653  00E74C  5003               	movf	___lwdiv@divisor,w,c
  5654  00E74E  5C01               	subwf	___lwdiv@dividend,w,c
  5655  00E750  5004               	movf	___lwdiv@divisor+1,w,c
  5656  00E752  5802               	subwfb	___lwdiv@dividend+1,w,c
  5657  00E754  A0D8               	btfss	status,0,c
  5658  00E756  D006               	goto	l2035
  5659  00E758  5003               	movf	___lwdiv@divisor,w,c
  5660  00E75A  5E01               	subwf	___lwdiv@dividend,f,c
  5661  00E75C  5004               	movf	___lwdiv@divisor+1,w,c
  5662  00E75E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5663  00E760  8005               	bsf	___lwdiv@quotient,0,c
  5664  00E762  D000               	goto	l2035
  5665  00E764                     l2035:
  5666  00E764  90D8               	bcf	status,0,c
  5667  00E766  3204               	rrcf	___lwdiv@divisor+1,f,c
  5668  00E768  3203               	rrcf	___lwdiv@divisor,f,c
  5669  00E76A  2E07               	decfsz	___lwdiv@counter,f,c
  5670  00E76C  D7EC               	goto	l2027
  5671  00E76E  D000               	goto	l930
  5672  00E770                     l930:
  5673  00E770  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5674  00E774  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5675  00E778  0012               	return		;funcret
  5676  00E77A                     __end_of___lwdiv:
  5677                           	opt stack 0
  5678                           tblptru	equ	0xFF8
  5679                           tblptrh	equ	0xFF7
  5680                           tblptrl	equ	0xFF6
  5681                           tablat	equ	0xFF5
  5682                           prodh	equ	0xFF4
  5683                           prodl	equ	0xFF3
  5684                           intcon	equ	0xFF2
  5685                           postinc0	equ	0xFEE
  5686                           wreg	equ	0xFE8
  5687                           postdec1	equ	0xFE5
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           fsr2h	equ	0xFDA
  5693                           fsr2l	equ	0xFD9
  5694                           status	equ	0xFD8
  5695                           
  5696 ;; *************** function _Lcd_Init *****************
  5697 ;; Defined at:
  5698 ;;		line 42 in file "../lcd.h"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;  data            1    4[COMRAM] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;		None               void
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5713 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5716 ;;Total ram usage:        2 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:    1
  5719 ;; This function calls:
  5720 ;;		_Lcd_Cmd
  5721 ;; This function is called by:
  5722 ;;		_main
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text20
  5727  00EBCC                     __ptext20:
  5728                           	opt stack 0
  5729  00EBCC                     _Lcd_Init:
  5730                           	opt stack 29
  5731                           
  5732                           ;lcd.h: 43: unsigned char data;
  5733                           ;lcd.h: 44: TRISBbits.TRISB0 = 0;
  5734                           
  5735                           ;incstack = 0
  5736  00EBCC  9093               	bcf	3987,0,c	;volatile
  5737                           
  5738                           ;lcd.h: 45: TRISBbits.TRISB1 = 0;
  5739  00EBCE  9293               	bcf	3987,1,c	;volatile
  5740                           
  5741                           ;lcd.h: 46: TRISBbits.TRISB2 = 0;
  5742  00EBD0  9493               	bcf	3987,2,c	;volatile
  5743                           
  5744                           ;lcd.h: 47: TRISBbits.TRISB3 = 0;
  5745  00EBD2  9693               	bcf	3987,3,c	;volatile
  5746                           
  5747                           ;lcd.h: 48: TRISBbits.TRISB4 = 0;
  5748  00EBD4  9893               	bcf	3987,4,c	;volatile
  5749                           
  5750                           ;lcd.h: 49: TRISBbits.TRISB5 = 0;
  5751  00EBD6  9A93               	bcf	3987,5,c	;volatile
  5752                           
  5753                           ;lcd.h: 50: LATBbits.LATB0 = 0;
  5754  00EBD8  908A               	bcf	3978,0,c	;volatile
  5755                           
  5756                           ;lcd.h: 51: LATBbits.LATB1 = 0;
  5757  00EBDA  928A               	bcf	3978,1,c	;volatile
  5758                           
  5759                           ;lcd.h: 52: LATBbits.LATB2 = 0;
  5760  00EBDC  948A               	bcf	3978,2,c	;volatile
  5761                           
  5762                           ;lcd.h: 53: LATBbits.LATB3 = 0;
  5763  00EBDE  968A               	bcf	3978,3,c	;volatile
  5764                           
  5765                           ;lcd.h: 54: LATBbits.LATB4 = 0;
  5766  00EBE0  988A               	bcf	3978,4,c	;volatile
  5767                           
  5768                           ;lcd.h: 55: LATBbits.LATB5 = 0;
  5769  00EBE2  9A8A               	bcf	3978,5,c	;volatile
  5770                           
  5771                           ;lcd.h: 56: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5772  00EBE4  0E0F               	movlw	15
  5773  00EBE6  6E04               	movwf	??_Lcd_Init& (0+255),c
  5774  00EBE8  0E48               	movlw	72
  5775  00EBEA                     u2517:
  5776  00EBEA  2EE8               	decfsz	wreg,f,c
  5777  00EBEC  D7FE               	goto	u2517
  5778  00EBEE  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5779  00EBF0  D7FC               	goto	u2517
  5780                           
  5781                           ;lcd.h: 57: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5782  00EBF2  0E0F               	movlw	15
  5783  00EBF4  6E04               	movwf	??_Lcd_Init& (0+255),c
  5784  00EBF6  0E48               	movlw	72
  5785  00EBF8                     u2527:
  5786  00EBF8  2EE8               	decfsz	wreg,f,c
  5787  00EBFA  D7FE               	goto	u2527
  5788  00EBFC  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5789  00EBFE  D7FC               	goto	u2527
  5790                           
  5791                           ;lcd.h: 58: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5792  00EC00  0E0F               	movlw	15
  5793  00EC02  6E04               	movwf	??_Lcd_Init& (0+255),c
  5794  00EC04  0E48               	movlw	72
  5795  00EC06                     u2537:
  5796  00EC06  2EE8               	decfsz	wreg,f,c
  5797  00EC08  D7FE               	goto	u2537
  5798  00EC0A  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5799  00EC0C  D7FC               	goto	u2537
  5800                           
  5801                           ;lcd.h: 59: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5802  00EC0E  0E0F               	movlw	15
  5803  00EC10  6E04               	movwf	??_Lcd_Init& (0+255),c
  5804  00EC12  0E48               	movlw	72
  5805  00EC14                     u2547:
  5806  00EC14  2EE8               	decfsz	wreg,f,c
  5807  00EC16  D7FE               	goto	u2547
  5808  00EC18  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5809  00EC1A  D7FC               	goto	u2547
  5810                           
  5811                           ;lcd.h: 60: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5812  00EC1C  0E0F               	movlw	15
  5813  00EC1E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5814  00EC20  0E48               	movlw	72
  5815  00EC22                     u2557:
  5816  00EC22  2EE8               	decfsz	wreg,f,c
  5817  00EC24  D7FE               	goto	u2557
  5818  00EC26  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5819  00EC28  D7FC               	goto	u2557
  5820                           
  5821                           ;lcd.h: 61: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5822  00EC2A  0E0F               	movlw	15
  5823  00EC2C  6E04               	movwf	??_Lcd_Init& (0+255),c
  5824  00EC2E  0E48               	movlw	72
  5825  00EC30                     u2567:
  5826  00EC30  2EE8               	decfsz	wreg,f,c
  5827  00EC32  D7FE               	goto	u2567
  5828  00EC34  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5829  00EC36  D7FC               	goto	u2567
  5830                           
  5831                           ;lcd.h: 62: for(data = 1; data < 4; data ++)
  5832  00EC38  0E01               	movlw	1
  5833  00EC3A  6E05               	movwf	Lcd_Init@data,c
  5834  00EC3C  D01F               	goto	L5
  5835  00EC3E  D021               	goto	l72
  5836  00EC40                     l71:
  5837                           
  5838                           ;lcd.h: 63: {
  5839                           ;lcd.h: 64: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5840  00EC40  908A               	bcf	3978,0,c	;volatile
  5841  00EC42  928A               	bcf	3978,1,c	;volatile
  5842  00EC44  848A               	bsf	3978,2,c	;volatile
  5843  00EC46  868A               	bsf	3978,3,c	;volatile
  5844  00EC48  988A               	bcf	3978,4,c	;volatile
  5845                           
  5846                           ;lcd.h: 65: LATBbits.LATB5 = 0; LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 =
      +                           1; LATBbits.LATB3 = 1;
  5847  00EC4A  9A8A               	bcf	3978,5,c	;volatile
  5848  00EC4C  908A               	bcf	3978,0,c	;volatile
  5849  00EC4E  928A               	bcf	3978,1,c	;volatile
  5850  00EC50  848A               	bsf	3978,2,c	;volatile
  5851  00EC52  868A               	bsf	3978,3,c	;volatile
  5852                           
  5853                           ;lcd.h: 66: LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5854  00EC54  888A               	bsf	3978,4,c	;volatile
  5855  00EC56  9A8A               	bcf	3978,5,c	;volatile
  5856                           
  5857                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5858  00EC58  0E03               	movlw	3
  5859  00EC5A                     u2577:
  5860  00EC5A  2EE8               	decfsz	wreg,f,c
  5861  00EC5C  D7FE               	goto	u2577
  5862  00EC5E  F000               	nop	
  5863                           
  5864                           ;lcd.h: 68: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           1; LATBbits.LATB4 = 0;
  5865  00EC60  908A               	bcf	3978,0,c	;volatile
  5866  00EC62  928A               	bcf	3978,1,c	;volatile
  5867  00EC64  848A               	bsf	3978,2,c	;volatile
  5868  00EC66  868A               	bsf	3978,3,c	;volatile
  5869  00EC68  988A               	bcf	3978,4,c	;volatile
  5870                           
  5871                           ;lcd.h: 69: LATBbits.LATB5 = 0;
  5872  00EC6A  9A8A               	bcf	3978,5,c	;volatile
  5873                           
  5874                           ;lcd.h: 70: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5875  00EC6C  0E0F               	movlw	15
  5876  00EC6E  6E04               	movwf	??_Lcd_Init& (0+255),c
  5877  00EC70  0E48               	movlw	72
  5878  00EC72                     u2587:
  5879  00EC72  2EE8               	decfsz	wreg,f,c
  5880  00EC74  D7FE               	goto	u2587
  5881  00EC76  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5882  00EC78  D7FC               	goto	u2587
  5883  00EC7A  2A05               	incf	Lcd_Init@data,f,c
  5884  00EC7C                     L5:
  5885  00EC7C  0E03               	movlw	3
  5886  00EC7E  6405               	cpfsgt	Lcd_Init@data,c
  5887  00EC80  D7DF               	goto	l71
  5888  00EC82                     l72:
  5889                           
  5890                           ;lcd.h: 71: }
  5891                           ;lcd.h: 72: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5892  00EC82  908A               	bcf	3978,0,c	;volatile
  5893  00EC84  928A               	bcf	3978,1,c	;volatile
  5894  00EC86  848A               	bsf	3978,2,c	;volatile
  5895  00EC88  968A               	bcf	3978,3,c	;volatile
  5896  00EC8A  988A               	bcf	3978,4,c	;volatile
  5897  00EC8C  9A8A               	bcf	3978,5,c	;volatile
  5898                           
  5899                           ;lcd.h: 73: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 1; LATBbits.LATB5 = 0;
  5900  00EC8E  908A               	bcf	3978,0,c	;volatile
  5901  00EC90  928A               	bcf	3978,1,c	;volatile
  5902  00EC92  848A               	bsf	3978,2,c	;volatile
  5903  00EC94  968A               	bcf	3978,3,c	;volatile
  5904  00EC96  888A               	bsf	3978,4,c	;volatile
  5905  00EC98  9A8A               	bcf	3978,5,c	;volatile
  5906                           
  5907                           ;lcd.h: 74: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5908  00EC9A  0E03               	movlw	3
  5909  00EC9C                     u2597:
  5910  00EC9C  2EE8               	decfsz	wreg,f,c
  5911  00EC9E  D7FE               	goto	u2597
  5912  00ECA0  F000               	nop	
  5913                           
  5914                           ;lcd.h: 75: LATBbits.LATB0 = 0; LATBbits.LATB1 = 0; LATBbits.LATB2 = 1; LATBbits.LATB3 =
      +                           0; LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  5915  00ECA2  908A               	bcf	3978,0,c	;volatile
  5916  00ECA4  928A               	bcf	3978,1,c	;volatile
  5917  00ECA6  848A               	bsf	3978,2,c	;volatile
  5918  00ECA8  968A               	bcf	3978,3,c	;volatile
  5919  00ECAA  988A               	bcf	3978,4,c	;volatile
  5920  00ECAC  9A8A               	bcf	3978,5,c	;volatile
  5921                           
  5922                           ;lcd.h: 76: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  5923  00ECAE  0E0F               	movlw	15
  5924  00ECB0  6E04               	movwf	??_Lcd_Init& (0+255),c
  5925  00ECB2  0E48               	movlw	72
  5926  00ECB4                     u2607:
  5927  00ECB4  2EE8               	decfsz	wreg,f,c
  5928  00ECB6  D7FE               	goto	u2607
  5929  00ECB8  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  5930  00ECBA  D7FC               	goto	u2607
  5931                           
  5932                           ;lcd.h: 77: data = 40; Lcd_Cmd(data);
  5933  00ECBC  0E28               	movlw	40
  5934  00ECBE  6E05               	movwf	Lcd_Init@data,c
  5935  00ECC0  5005               	movf	Lcd_Init@data,w,c
  5936  00ECC2  EC02  F077         	call	_Lcd_Cmd
  5937                           
  5938                           ;lcd.h: 78: data = 16; Lcd_Cmd(data);
  5939  00ECC6  0E10               	movlw	16
  5940  00ECC8  6E05               	movwf	Lcd_Init@data,c
  5941  00ECCA  5005               	movf	Lcd_Init@data,w,c
  5942  00ECCC  EC02  F077         	call	_Lcd_Cmd
  5943                           
  5944                           ;lcd.h: 79: data = 1; Lcd_Cmd(data);
  5945  00ECD0  0E01               	movlw	1
  5946  00ECD2  6E05               	movwf	Lcd_Init@data,c
  5947  00ECD4  5005               	movf	Lcd_Init@data,w,c
  5948  00ECD6  EC02  F077         	call	_Lcd_Cmd
  5949                           
  5950                           ;lcd.h: 80: data = 15; Lcd_Cmd(data);
  5951  00ECDA  0E0F               	movlw	15
  5952  00ECDC  6E05               	movwf	Lcd_Init@data,c
  5953  00ECDE  5005               	movf	Lcd_Init@data,w,c
  5954  00ECE0  EC02  F077         	call	_Lcd_Cmd
  5955  00ECE4  0012               	return		;funcret
  5956  00ECE6                     __end_of_Lcd_Init:
  5957                           	opt stack 0
  5958                           tblptru	equ	0xFF8
  5959                           tblptrh	equ	0xFF7
  5960                           tblptrl	equ	0xFF6
  5961                           tablat	equ	0xFF5
  5962                           prodh	equ	0xFF4
  5963                           prodl	equ	0xFF3
  5964                           intcon	equ	0xFF2
  5965                           postinc0	equ	0xFEE
  5966                           wreg	equ	0xFE8
  5967                           postdec1	equ	0xFE5
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _Lcd_Cmd *****************
  5977 ;; Defined at:
  5978 ;;		line 140 in file "../lcd.h"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  data            1    wreg     unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;  data            1    2[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;		None               void
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5995 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5996 ;;Total ram usage:        3 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; This function calls:
  5999 ;;		Nothing
  6000 ;; This function is called by:
  6001 ;;		_Lcd_Init
  6002 ;;		_Lcd_Out
  6003 ;;		_main
  6004 ;;		_ManejaMovimientos
  6005 ;;		_Lcd_Out2
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           	psect	text21
  6010  00EE04                     __ptext21:
  6011                           	opt stack 0
  6012  00EE04                     _Lcd_Cmd:
  6013                           	opt stack 28
  6014                           
  6015                           ;incstack = 0
  6016                           ;Lcd_Cmd@data stored from wreg
  6017  00EE04  6E03               	movwf	Lcd_Cmd@data,c
  6018                           
  6019                           ;lcd.h: 141: LATBbits.LATB4 = 0; LATBbits.LATB5 = 0;
  6020  00EE06  988A               	bcf	3978,4,c	;volatile
  6021  00EE08  9A8A               	bcf	3978,5,c	;volatile
  6022                           
  6023                           ;lcd.h: 142: LATBbits.LATB0 = (data & 0b10000000)>>7; LATBbits.LATB1 = (data & 0b0100000
      +                          0)>>6;
  6024  00EE0A  6A01               	clrf	??_Lcd_Cmd& (0+255),c
  6025  00EE0C  AE03               	btfss	Lcd_Cmd@data,7,c
  6026  00EE0E  D001               	bra	u1255
  6027  00EE10  2A01               	incf	??_Lcd_Cmd& (0+255),f,c
  6028  00EE12                     u1255:
  6029  00EE12  0E01               	movlw	1
  6030  00EE14  1601               	andwf	??_Lcd_Cmd,f,c
  6031  00EE16  508A               	movf	3978,w,c	;volatile
  6032  00EE18  1801               	xorwf	??_Lcd_Cmd,w,c
  6033  00EE1A  0BFE               	andlw	-2
  6034  00EE1C  1801               	xorwf	??_Lcd_Cmd,w,c
  6035  00EE1E  6E8A               	movwf	3978,c	;volatile
  6036  00EE20  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6037  00EE24  0E06               	movlw	6
  6038  00EE26  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6039  00EE28                     u1265:
  6040  00EE28  90D8               	bcf	status,0,c
  6041  00EE2A  3201               	rrcf	??_Lcd_Cmd,f,c
  6042  00EE2C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6043  00EE2E  D7FC               	goto	u1265
  6044  00EE30  0E01               	movlw	1
  6045  00EE32  1601               	andwf	??_Lcd_Cmd,f,c
  6046  00EE34  4601               	rlncf	??_Lcd_Cmd,f,c
  6047  00EE36  508A               	movf	3978,w,c	;volatile
  6048  00EE38  1801               	xorwf	??_Lcd_Cmd,w,c
  6049  00EE3A  0BFD               	andlw	-3
  6050  00EE3C  1801               	xorwf	??_Lcd_Cmd,w,c
  6051  00EE3E  6E8A               	movwf	3978,c	;volatile
  6052                           
  6053                           ;lcd.h: 143: LATBbits.LATB2 = (data & 0b00100000)>>5; LATBbits.LATB3 = (data & 0b0001000
      +                          0)>>4;
  6054  00EE40  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6055  00EE44  0E05               	movlw	5
  6056  00EE46  6E02               	movwf	(??_Lcd_Cmd+1)& (0+255),c
  6057  00EE48                     u1275:
  6058  00EE48  90D8               	bcf	status,0,c
  6059  00EE4A  3201               	rrcf	??_Lcd_Cmd,f,c
  6060  00EE4C  2E02               	decfsz	(??_Lcd_Cmd+1)& (0+255),f,c
  6061  00EE4E  D7FC               	goto	u1275
  6062  00EE50  0E01               	movlw	1
  6063  00EE52  1601               	andwf	??_Lcd_Cmd,f,c
  6064  00EE54  4601               	rlncf	??_Lcd_Cmd,f,c
  6065  00EE56  4601               	rlncf	??_Lcd_Cmd,f,c
  6066  00EE58  508A               	movf	3978,w,c	;volatile
  6067  00EE5A  1801               	xorwf	??_Lcd_Cmd,w,c
  6068  00EE5C  0BFB               	andlw	-5
  6069  00EE5E  1801               	xorwf	??_Lcd_Cmd,w,c
  6070  00EE60  6E8A               	movwf	3978,c	;volatile
  6071  00EE62  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6072  00EE66  3A01               	swapf	??_Lcd_Cmd,f,c
  6073  00EE68  0E0F               	movlw	15
  6074  00EE6A  1601               	andwf	??_Lcd_Cmd,f,c
  6075  00EE6C  0E01               	movlw	1
  6076  00EE6E  1601               	andwf	??_Lcd_Cmd,f,c
  6077  00EE70  4601               	rlncf	??_Lcd_Cmd,f,c
  6078  00EE72  4601               	rlncf	??_Lcd_Cmd,f,c
  6079  00EE74  4601               	rlncf	??_Lcd_Cmd,f,c
  6080  00EE76  508A               	movf	3978,w,c	;volatile
  6081  00EE78  1801               	xorwf	??_Lcd_Cmd,w,c
  6082  00EE7A  0BF7               	andlw	-9
  6083  00EE7C  1801               	xorwf	??_Lcd_Cmd,w,c
  6084  00EE7E  6E8A               	movwf	3978,c	;volatile
  6085                           
  6086                           ;lcd.h: 144: _delay(10);
  6087  00EE80  0E03               	movlw	3
  6088  00EE82                     u2617:
  6089  00EE82  2EE8               	decfsz	wreg,f,c
  6090  00EE84  D7FE               	goto	u2617
  6091  00EE86  F000               	nop	
  6092                           
  6093                           ;lcd.h: 145: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6094  00EE88  888A               	bsf	3978,4,c	;volatile
  6095  00EE8A  0E03               	movlw	3
  6096  00EE8C                     u2627:
  6097  00EE8C  2EE8               	decfsz	wreg,f,c
  6098  00EE8E  D7FE               	goto	u2627
  6099  00EE90  F000               	nop	
  6100  00EE92  988A               	bcf	3978,4,c	;volatile
  6101                           
  6102                           ;lcd.h: 146: LATBbits.LATB0 = (data & 0b00001000)>>3; LATBbits.LATB1 = (data & 0b0000010
      +                          0)>>2;
  6103  00EE94  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6104  00EE98  90D8               	bcf	status,0,c
  6105  00EE9A  3201               	rrcf	??_Lcd_Cmd,f,c
  6106  00EE9C  90D8               	bcf	status,0,c
  6107  00EE9E  3201               	rrcf	??_Lcd_Cmd,f,c
  6108  00EEA0  90D8               	bcf	status,0,c
  6109  00EEA2  3201               	rrcf	??_Lcd_Cmd,f,c
  6110  00EEA4  0E01               	movlw	1
  6111  00EEA6  1601               	andwf	??_Lcd_Cmd,f,c
  6112  00EEA8  508A               	movf	3978,w,c	;volatile
  6113  00EEAA  1801               	xorwf	??_Lcd_Cmd,w,c
  6114  00EEAC  0BFE               	andlw	-2
  6115  00EEAE  1801               	xorwf	??_Lcd_Cmd,w,c
  6116  00EEB0  6E8A               	movwf	3978,c	;volatile
  6117  00EEB2  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6118  00EEB6  90D8               	bcf	status,0,c
  6119  00EEB8  3201               	rrcf	??_Lcd_Cmd,f,c
  6120  00EEBA  90D8               	bcf	status,0,c
  6121  00EEBC  3201               	rrcf	??_Lcd_Cmd,f,c
  6122  00EEBE  0E01               	movlw	1
  6123  00EEC0  1601               	andwf	??_Lcd_Cmd,f,c
  6124  00EEC2  4601               	rlncf	??_Lcd_Cmd,f,c
  6125  00EEC4  508A               	movf	3978,w,c	;volatile
  6126  00EEC6  1801               	xorwf	??_Lcd_Cmd,w,c
  6127  00EEC8  0BFD               	andlw	-3
  6128  00EECA  1801               	xorwf	??_Lcd_Cmd,w,c
  6129  00EECC  6E8A               	movwf	3978,c	;volatile
  6130                           
  6131                           ;lcd.h: 147: LATBbits.LATB2 = (data & 0b00000010)>>1; LATBbits.LATB3 = (data & 0b0000000
      +                          1);
  6132  00EECE  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6133  00EED2  90D8               	bcf	status,0,c
  6134  00EED4  3201               	rrcf	??_Lcd_Cmd,f,c
  6135  00EED6  0E01               	movlw	1
  6136  00EED8  1601               	andwf	??_Lcd_Cmd,f,c
  6137  00EEDA  4601               	rlncf	??_Lcd_Cmd,f,c
  6138  00EEDC  4601               	rlncf	??_Lcd_Cmd,f,c
  6139  00EEDE  508A               	movf	3978,w,c	;volatile
  6140  00EEE0  1801               	xorwf	??_Lcd_Cmd,w,c
  6141  00EEE2  0BFB               	andlw	-5
  6142  00EEE4  1801               	xorwf	??_Lcd_Cmd,w,c
  6143  00EEE6  6E8A               	movwf	3978,c	;volatile
  6144  00EEE8  C003  F001         	movff	Lcd_Cmd@data,??_Lcd_Cmd
  6145  00EEEC  0E01               	movlw	1
  6146  00EEEE  1601               	andwf	??_Lcd_Cmd,f,c
  6147  00EEF0  4601               	rlncf	??_Lcd_Cmd,f,c
  6148  00EEF2  4601               	rlncf	??_Lcd_Cmd,f,c
  6149  00EEF4  4601               	rlncf	??_Lcd_Cmd,f,c
  6150  00EEF6  508A               	movf	3978,w,c	;volatile
  6151  00EEF8  1801               	xorwf	??_Lcd_Cmd,w,c
  6152  00EEFA  0BF7               	andlw	-9
  6153  00EEFC  1801               	xorwf	??_Lcd_Cmd,w,c
  6154  00EEFE  6E8A               	movwf	3978,c	;volatile
  6155                           
  6156                           ;lcd.h: 148: _delay(10);
  6157  00EF00  0E03               	movlw	3
  6158  00EF02                     u2637:
  6159  00EF02  2EE8               	decfsz	wreg,f,c
  6160  00EF04  D7FE               	goto	u2637
  6161  00EF06  F000               	nop	
  6162                           
  6163                           ;lcd.h: 149: LATBbits.LATB4 = 1; _delay((unsigned long)((5)*(8000000/4000000.0))); LATBb
      +                          its.LATB4 = 0;
  6164  00EF08  888A               	bsf	3978,4,c	;volatile
  6165  00EF0A  0E03               	movlw	3
  6166  00EF0C                     u2647:
  6167  00EF0C  2EE8               	decfsz	wreg,f,c
  6168  00EF0E  D7FE               	goto	u2647
  6169  00EF10  F000               	nop	
  6170  00EF12  988A               	bcf	3978,4,c	;volatile
  6171                           
  6172                           ;lcd.h: 150: _delay((unsigned long)((5500)*(8000000/4000000.0)));
  6173  00EF14  0E0F               	movlw	15
  6174  00EF16  6E01               	movwf	??_Lcd_Cmd& (0+255),c
  6175  00EF18  0E48               	movlw	72
  6176  00EF1A                     u2657:
  6177  00EF1A  2EE8               	decfsz	wreg,f,c
  6178  00EF1C  D7FE               	goto	u2657
  6179  00EF1E  2E01               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6180  00EF20  D7FC               	goto	u2657
  6181  00EF22  0012               	return		;funcret
  6182  00EF24                     __end_of_Lcd_Cmd:
  6183                           	opt stack 0
  6184                           tblptru	equ	0xFF8
  6185                           tblptrh	equ	0xFF7
  6186                           tblptrl	equ	0xFF6
  6187                           tablat	equ	0xFF5
  6188                           prodh	equ	0xFF4
  6189                           prodl	equ	0xFF3
  6190                           intcon	equ	0xFF2
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1l	equ	0xFE1
  6195                           indf2	equ	0xFDF
  6196                           postinc2	equ	0xFDE
  6197                           postdec2	equ	0xFDD
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           postinc0	equ	0xFEE
  6209                           wreg	equ	0xFE8
  6210                           postdec1	equ	0xFE5
  6211                           fsr1l	equ	0xFE1
  6212                           indf2	equ	0xFDF
  6213                           postinc2	equ	0xFDE
  6214                           postdec2	equ	0xFDD
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219                           	psect	rparam
  6220  0000                     tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           postinc0	equ	0xFEE
  6228                           wreg	equ	0xFE8
  6229                           postdec1	equ	0xFE5
  6230                           fsr1l	equ	0xFE1
  6231                           indf2	equ	0xFDF
  6232                           postinc2	equ	0xFDE
  6233                           postdec2	equ	0xFDD
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    10
    Data        42
    BSS         68
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      95
    BANK0           160      0     107
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          192      0       0

Pointer List with Targets:

    RtccWriteTime@pTm	PTR const struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccWriteDate@pDt	PTR const struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    RtccReadTime@pTm	PTR struct . size(2) Largest target is 4
		 -> RtccTime(COMRAM[4]), 

    RtccReadDate@pDt	PTR struct . size(2) Largest target is 4
		 -> RtccDate(COMRAM[4]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_48(CODE[7]), STR_22(CODE[21]), STR_20(CODE[21]), STR_18(CODE[21]), 
		 -> STR_16(CODE[21]), STR_14(CODE[21]), STR_12(CODE[21]), STR_10(CODE[21]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_46(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), STR_40(CODE[5]), 
		 -> STR_38(CODE[5]), STR_33(CODE[5]), STR_31(CODE[5]), STR_29(CODE[5]), 
		 -> STR_27(CODE[5]), STR_25(CODE[5]), STR_21(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[3]), STR_15(CODE[3]), STR_13(CODE[3]), STR_11(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[15]), STR_7(CODE[15]), STR_2(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), buffer1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__Convert_diasem	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    V_Principal@cte	PTR unsigned char  size(2) Largest target is 20
		 -> Convert_diasem@buffer_dia(COMRAM[20]), 

    Lcd_Out@buffer	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_47(CODE[1]), STR_45(CODE[1]), STR_43(CODE[1]), STR_41(CODE[1]), 
		 -> STR_39(CODE[1]), STR_37(CODE[1]), STR_36(CODE[1]), STR_35(CODE[1]), 
		 -> STR_34(CODE[1]), STR_32(CODE[1]), STR_30(CODE[1]), STR_28(CODE[1]), 
		 -> STR_26(CODE[1]), STR_24(CODE[1]), STR_23(CODE[1]), Convert_diasem@buffer_dia(COMRAM[20]), 
		 -> STR_6(CODE[21]), STR_5(CODE[20]), STR_4(CODE[18]), STR_3(CODE[19]), 
		 -> buffer1(BANK0[20]), STR_1(CODE[18]), 


Critical Paths under _main in COMRAM

    _main->_ManejaMovimientos
    _V_Principal->_Lcd_Out
    _Read_RTC->_RtccReadDate
    _Read_RTC->_RtccReadTime
    _ManejaMovimientos->_Lcd_Out
    _Write_RTC->_RtccWriteDate
    _Lcd_Out->_Convert_diasem
    _Convert_diasem->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   45685
                                             78 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Init
                            _Lcd_Out
                  _ManejaMovimientos
                        _V_Principal
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _V_Principal                                          2     2      0   15526
                                             68 COMRAM     2     2      0
                     _Convert_diasem
                            _Lcd_Out
                           _Read_RTC
                    _lee_temperatura
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _lee_temperatura                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_RTC                                             0     0      0     968
                       _RtccReadDate
                       _RtccReadTime
 ---------------------------------------------------------------------------------
 (3) _RtccReadTime                                        18    16      2     437
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (3) _RtccReadDate                                        18    16      2     531
                                              0 COMRAM    18    16      2
 ---------------------------------------------------------------------------------
 (1) _ManejaMovimientos                                   10    10      0   17757
                                             68 COMRAM    10    10      0
                     _Convert_diasem
                            _Lcd_Cmd
                            _Lcd_Out
                          _Write_RTC
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Write_RTC                                            0     0      0    2277
                           _RtccWrOn
                      _RtccWriteDate
                      _RtccWriteTime
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1068
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _RtccWriteTime                                       11     8      3     537
                                              0 COMRAM    11     8      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (2) _RtccWriteDate                                       13    10      3     672
                                              0 COMRAM    13    10      3
                           _RtccWrOn
 ---------------------------------------------------------------------------------
 (3) _RtccWrOn                                             2     2      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Out                                              5     2      3    5141
                                             63 COMRAM     5     2      3
                     _Convert_diasem (ARG)
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Convert_diasem                                      24    22      2    4900
                                             39 COMRAM    24    22      2
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             31    21     10    4494
                                             12 COMRAM    27    17     10
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     314
                                              3 COMRAM     2     2      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     176
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out
     _Convert_diasem (ARG)
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Chr_CP (ARG)
     _Lcd_Cmd (ARG)
   _ManejaMovimientos
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Cmd
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Write_RTC
       _RtccWrOn
       _RtccWriteDate
         _RtccWrOn
       _RtccWriteTime
         _RtccWrOn
       ___awdiv
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _V_Principal
     _Convert_diasem
       _sprintf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
     _Lcd_Out
       _Convert_diasem (ARG)
         _sprintf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
       _Lcd_Chr_CP (ARG)
       _Lcd_Cmd (ARG)
     _Read_RTC
       _RtccReadDate
       _RtccReadTime
     _lee_temperatura
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
   _Write_RTC
     _RtccWrOn
     _RtccWriteDate
       _RtccWrOn
     _RtccWriteTime
       _RtccWrOn
     ___awdiv
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EBF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           C0      0       0      33        0.0%
BANK14              C0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6B       5       66.9%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5F       1      100.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CA       6        0.0%
DATA                 0      0      CA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Nov 26 00:11:39 2020

            V_Principal@cte 0045                           _i 007C                          l71 EC40  
                        l72 EC82                ___awdiv@sign 0006         ___wmul@multiplicand 0003  
              __CFG_CP0$OFF 000000                         l209 E64C                         l307 F8E0  
                       l930 E770                         l940 E714   ManejaMovimientos@posicion 004D  
ManejaMovimientos@minuto_tr 004C                         _dia 005A                         _mes 005E  
                       wreg 000FE8             RtccReadDate@pDt 0001                        l2023 E734  
                      l2007 E67E                        l2111 F66A                        l2103 F642  
                      l2025 E73E                        l2121 F6A8                        l2035 E764  
                      l2027 E746                        l2051 E708                        l2043 E6E0  
                      l2211 F8E6                        l2203 F8B6                        l2115 F674  
                      l2045 E6EA                        l2205 F8BE                        l2141 F744  
                      l2221 F962                        l2117 F68A                        l2109 F65C  
                      l2301 F1CE                        l2047 E6F2                        l2311 F21C  
                      l2217 F93A                        l2161 F7C8                        l2153 F794  
                      l2137 F734                        l2129 F70A                        l2233 EAFE  
                      l2163 F7DC                        l2155 F7A8                        l2147 F778  
                      l2139 F73E                        l2219 F946                        l2307 F208  
                      l2243 EB3C                        l2149 F782                        l2317 F238  
                      l2191 F87E                        l2183 F856                        l2175 F826  
                      l2167 F7E2                        l2239 EB28                        l2193 F888  
                      l2169 F80A                        l2353 F29A                        l2281 EBB4  
                      l2249 EB58                        l2441 E9B4                        l2433 E994  
                      l2361 E7DC                        l2187 F85A                        l2179 F832  
                      l2603 EDBA                        l2451 E9DA                        l2443 E9BC  
                      l2427 E982                        l2197 F894                        l2605 EDF8  
                      l2357 F2A6                        l2349 F28E                        l2285 EBC0  
                      l2277 EBA8                        l2701 F9CE                        l2471 E8EE  
                      l2439 E9AA                        l2455 E9E6                        l2465 E8DC  
                      l2483 E944                        l2467 E8E2                        l2475 E8F6  
                      l2459 E9F6                        l2803 FD3A                        l2715 FA38  
                      l2387 E84A                        l2469 E8E8                        l2477 E912  
                      l2813 FD86                        l2725 FA84                        l2591 ED24  
                      l2479 E91A                        l2823 FDD2                        l2735 FAD0  
                      l2911 F50C                        l2593 ED42                        l2833 FE1E  
                      l2745 FB1C                        l2595 ED60                        l2587 ECE8  
                      l2843 FE6A                        l2755 FB68                        l2597 ED7E  
                      l2589 ED06                        l2781 FC94                        l2773 FC24  
                      l2765 FBB4                        l2853 FEC4                        l2933 F5D6  
                      l2925 F582                        l2599 ED9C                        l2919 F53E  
                      l2849 FEAE                        l2793 FCEE                        l2929 F5AC  
                      l2939 F606                        STR_1 FFB8                        STR_2 FFEF  
                      STR_3 FF93                        STR_4 FFA6                        STR_5 FF7F  
                      STR_6 FED7                        STR_7 FFCA                        STR_8 FFD9  
                      STR_9 FFF4                        u2010 FC2C                        u2020 FC2E  
                      u2040 FC9C                        u1305 F088                        u2130 FE72  
                      u2050 FC9E                        u2210 F546                        u2140 FE74  
                      u2300 F5DE                        u2220 F548                        u2310 F5E0  
                      u1255 EE12                        u2240 F58A                        u1265 EE28  
                      u2250 F58C                        u1275 EE48                        u2180 F518  
                      u1285 F052                        u2270 F5B4                        u2190 F51A  
                      u1295 F068                        u2407 F4FA                        u2280 F5B6  
                      u2417 F612                        u2337 F48A                        u2507 F162  
                      u2427 F628                        u2347 F49A                        u1820 E93A  
                      u1900 F9E8                        u2517 EBEA                        u2437 E656  
                      u2357 F4AA                        u1830 E964                        u2607 ECB4  
                      u2527 EBF8                        u2447 F9D4                        u2367 F4BA  
                      u2617 EE82                        u2537 EC06                        u2457 F0C2  
                      u2377 F4CA                        u2627 EE8C                        u2547 EC14  
                      u2467 F0CC                        u1827 E930                        u2387 F4DA  
                      u2637 EF02                        u2557 EC22                        u2477 F142  
                      u1837 E95A                        u2397 F4EA                        u2647 EF0C  
                      u2567 EC30                        u2487 F14C                        u1880 F9CC  
                      u2657 EF1A                        u2577 EC5A                        u2497 F156  
                      u1890 F9E6                        u2587 EC72                        u1980 FBBC  
                      u2597 EC9C                        u1990 FBBE                        _anio 0058  
                      _main F43C                        _hora 00BA                        fsr2h 000FDA  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
             __CFG_T1DIG$ON 000000                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000            RtccReadDate@rTD0 000B  
          RtccReadDate@rTD1 0003             __end_of_Lcd_Cmd EF24             __end_of_Lcd_Out E96C  
              ___param_bank 000010             RtccReadTime@pTm 0001                  _Lcd_Chr_CP F044  
             ??_V_Principal 0045               __CFG_PLLDIV$1 000000                       ?_main 0001  
           __end_of___awdiv EA02                       STR_10 FF40                       STR_11 FFF4  
                     STR_20 FF55                       STR_12 FEEC                       STR_21 FFF4  
                     STR_13 FFF4                       STR_30 FEEB                       STR_14 FF16  
                     STR_22 FF01                       STR_23 FEEB                       STR_15 FFF4  
                     STR_31 FFD4                       STR_32 FEEB                       STR_24 FEEB  
                     STR_40 FFD4                       STR_16 FF6A                       STR_41 FEEB  
                     STR_17 FFF4                       STR_33 FFD4                       STR_25 FFD4  
                     STR_34 FEEB                       STR_26 FEEB                       STR_42 FFD4  
                     STR_18 FF2B                       STR_43 FEEB                       STR_35 FEEB  
                     STR_19 FFF4                       STR_27 FFD4                       STR_36 FEEB  
                     STR_28 FEEB                       STR_44 FFD4                       STR_45 FEEB  
                     STR_37 FEEB                       STR_29 FFD4                       STR_46 FFD4  
                     STR_38 FFD4                       STR_47 FEEB                       STR_39 FEEB  
                     STR_48 FFE8             ___awdiv@divisor 0003             __end_of___lwdiv E77A  
           __end_of___lwmod E71E             ___awdiv@counter 0005                       _TRISA 000F92  
                     _TRISB 000F93                       _TRISC 000F94              __CFG_FCMEN$OFF 000000  
                     _Sw_Up 0086             __end_of_dpowers FED7                       _mes_d 00C5  
                     _mes_u 00C6             __end_of_isdigit E688                       tablat 000FF5  
                _CuentamSeg 0080  __size_of_ManejaMovimientos 055A                       status 000FD8  
           __end_of_sprintf F972            __end_of_Lcd_Init ECE6     __CFG_DSWDTOSC$INTOSCREF 000000  
           __initialization E77A                __end_of_main F638            RtccReadTime@rTD0 000B  
          RtccReadTime@rTD1 0003            __end_of_Read_RTC F044                      ??_main 004F  
             __activetblptr 000002         __end_of_V_Principal EAC0            __end_of_RtccWrOn E646  
                    _ADCON0 000FC2                      _ADCON1 000FC1                      _ADRESH 000FC4  
                    _EECON2 000FA7                      _ANCON0 000F48                      _ANCON1 000F49  
          ___awdiv@dividend 0001              __CFG_WDTEN$OFF 000000             _lee_temperatura E646  
                 ??_Lcd_Cmd 0001            RtccWriteDate@pDt 0001                      _RTCCFG 000F3F  
                 ??_Lcd_Out 0043              __CFG_WPCFG$OFF 000000                      _Flag_1 0081  
            __CFG_WPDIS$OFF 000000                      _Grados 00B4              __CFG_XINST$OFF 000000  
               ?_Lcd_Chr_CP 0001                      ___wmul E6AA                   ??___awdiv 0005  
            __CFG_STVREN$ON 000000                      _diasem 005C                      _anio_d 00BE  
                    _anio_u 00BF            ??_Convert_diasem 002A                   ??___lwdiv 0005  
                 ??___lwmod 000C                      _hora_d 00C3                      _hora_u 00C4  
                    clear_0 E780                      clear_1 E78C            ___awdiv@quotient 0007  
                    _minuto 00BC       __end_of_RtccWriteDate F2B2       __end_of_RtccWriteTime EBCC  
          RtccWriteTime@pTm 0001                __pdataCOMRAM 0058                   ??_isdigit 0001  
              __mediumconst FECC                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_sprintf 0017                  __accesstop 0060  
   __end_of__initialization E7D2          __size_of_Write_RTC 018A               ___rparam_used 000001  
            __pcstackCOMRAM 0001                __pidataBANK0 E688                 _V_Principal EA02  
           __CFG_DSWDTPS$G2 000000             __CFG_OSC$INTOSC 000000     __end_of_lee_temperatura E666  
                 ?_Lcd_Init 0001                sprintf@width 0025         __size_of_Lcd_Chr_CP 0128  
                __pbssBANK0 0060                   ?_Read_RTC 0001                  _dia_semana 00C0  
 RtccWriteTime@tempHourWDay 000A                   ?_RtccWrOn 0001                     ?___wmul 0001  
             ?_RtccReadDate 0001               ?_RtccReadTime 0001           __end_of_Write_RTC F43C  
                ??_Lcd_Init 0004                     _RTCVALH 000F99                     _RTCVALL 000F98  
                ??_Read_RTC 0013                     _Lcd_Cmd EE04                     _Lcd_Out E8D8  
                   __Hparam 0000                     __Lparam 0000                     _Sw_Left 0084  
                   _Sw_Down 0083                  ??_RtccWrOn 0001              ??_RtccReadDate 0003  
            ??_RtccReadTime 0003                     ___awdiv E96C             __size_of___wmul 0028  
                   ___lwdiv E71E                     ___lwmod E6D2                 _RtccTimeVal 0078  
                   __pcinit E77A                     _fecha_d 00C1                     _fecha_u 00C2  
                   __ramtop 0F00                     __ptext0 F43C                     __ptext1 EA02  
                   __ptext2 E646                     __ptext3 EF24                     __ptext4 E7DC  
                   __ptext5 E84A                     __ptext6 F972                     __ptext7 F2B2  
                   __ptext8 E96C                     __ptext9 EAC0                     _buffer1 0088  
                 _T1CONbits 000FCD                     _lectura 0087                     _dpowers FECD  
                   _isdigit E666                     _segundo 007E            ?_lee_temperatura 0001  
                   _sprintf F638        end_of_initialization E7D2               __Lmediumconst FECC  
              ??_Lcd_Chr_CP 0001                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE                   _PORTAbits 000F80  
                 _PORTCbits 000F82            __CFG_DSBOREN$OFF 000000            __CFG_CPUDIV$OSC1 000000  
                 _TRISBbits 000F93          __end_of_Lcd_Chr_CP F16C            __CFG_IOL1WAY$OFF 000000  
 RtccWriteDate@tempDayMonth 000A         __CFG_MSSP7B_EN$MSK7 000000                ?_V_Principal 0001  
            __end_of___wmul E6D2               __pidataCOMRAM E62C   RtccWriteDate@tempHourWDay 000C  
          __CFG_DSWDTEN$OFF 000000         start_initialization E77A        __end_of_RtccReadDate E8D8  
             Lcd_Out@buffer 0041        __end_of_RtccReadTime E84A           __size_of_Lcd_Init 011A  
      RtccWriteTime@wasAlrm 0006        RtccWriteTime@wasWrEn 0007      __size_of_RtccWriteDate 0146  
           RtccWriteDate@di 0003      __size_of_RtccWriteTime 010C           __size_of_Read_RTC 0120  
                 _Sw_Center 0082                   _Temp_prog 00B7                    ??___wmul 0005  
               __pdataBANK0 009C           __size_of_RtccWrOn 0012             RtccWriteTime@di 0003  
          __CFG_LPT1OSC$OFF 000000           Convert_diasem@dia 0028                 _ALRMCFGbits 000F91  
               __pbssCOMRAM 0050     __size_of_Convert_diasem 011E                   _Write_RTC F2B2  
              _isdigit$2097 0002                    ?_Lcd_Cmd 0001                 sprintf@flag 001B  
                  ?_Lcd_Out 0040                 sprintf@prec 001E                   __pnvBANK0 00BE  
          ___lwdiv@dividend 0001               __pmediumconst FECC                    ?___awdiv 0001  
                  ?___lwdiv 0001                    ?___lwmod 0008     RtccWriteTime@tempMinSec 0008  
             _RtccWriteDate F16C               _RtccWriteTime EAC0                    ?_isdigit 0001  
      __CFG_RTCOSC$T1OSCREF 000000    ManejaMovimientos@anio_tr 004A    Convert_diasem@buffer_dia 002C  
                ?_Write_RTC 0001            ___lwdiv@quotient 0005    ManejaMovimientos@hora_tr 004B  
                  ?_sprintf 000D            _RtccAlrmTimeDate 0060              ___wmul@product 0005  
                  _LATAbits 000F89                    _LATBbits 000F8A                    _PIE3bits 000FA3  
                 _segundo_d 00C9                   _segundo_u 00CA                    Lcd_Out@x 0040  
          __CFG_WDTPS$32768 000000                    Lcd_Out@y 0043          RtccWriteDate@wasOn 0005  
        _Rtcc_read_TimeDate 0070                Lcd_Init@data 0005              ?_RtccWriteDate 0001  
                _ADCON0bits 000FC2           ___wmul@multiplier 0001        __size_of_V_Principal 00BE  
            ?_RtccWriteTime 0001       __size_of_RtccReadDate 008E       __size_of_RtccReadTime 006E  
                  _Lcd_Init EBCC                   copy_data0 E7A6                   copy_data1 E7C6  
                  _Read_RTC EF24    __size_of_lee_temperatura 0020            __size_of_Lcd_Cmd 0120  
          __size_of_Lcd_Out 0094                    __Hrparam 0000                    _RtccDate 0050  
                  __Lrparam 0000                    _RtccTime 0054                    _RtccWrOn E634  
                  _Sw_Right 0085                _RtccReadDate E84A            __size_of___awdiv 0096  
              _RtccReadTime E7DC            __size_of___lwdiv 005C            __size_of___lwmod 004C  
            _posicionesLeft 009C                _RtccTimeDate 0068                  sprintf@len 0023  
                sprintf@val 001C              _Convert_diasem ECE6            __size_of_isdigit 0022  
            Lcd_Chr_CP@data 0003             ___lwdiv@divisor 0003                 ??_Write_RTC 000E  
           ___lwdiv@counter 0007                    __ptext10 F16C                    __ptext11 E634  
                  __ptext20 EBCC                    __ptext12 E8D8                    __ptext21 EE04  
                  __ptext13 F044                    __ptext14 ECE6                    __ptext15 F638  
                  __ptext16 E666                    __ptext17 E6AA                    __ptext18 E6D2  
                  __ptext19 E71E            __size_of_sprintf 033A     ManejaMovimientos@dia_tr 0048  
               Lcd_Cmd@data 0003               __size_of_main 01FC     ManejaMovimientos@mes_tr 0049  
                  _minuto_d 00C7                    _minuto_u 00C8             ??_RtccWriteDate 0004  
           ??_RtccWriteTime 0004      __end_of_Convert_diasem EE04                 Lcd_Out@data 0044  
               _OSCTUNEbits 000F9B                  _INTCONbits 000FF2          RtccWriteTime@wasOn 0005  
                  isdigit@c 0003                   sprintf@ap 001F                   sprintf@cp 0021  
                 sprintf@sp 000D            ___lwmod@dividend 0008           _ManejaMovimientos F972  
                _OSCCONbits 000FD3          ?_ManejaMovimientos 0001       RtccWriteDate@tempYear 0007  
         ??_lee_temperatura 0001         ??_ManejaMovimientos 0045                  _RTCCFGbits 000F3F  
                  sprintf@c 0027                    sprintf@f 000F             ?_Convert_diasem 0028  
           ___lwmod@divisor 000A             ___lwmod@counter 000C        RtccWriteDate@wasAlrm 0006  
      RtccWriteDate@wasWrEn 0009  ManejaMovimientos@diasem_tr 0047   __end_of_ManejaMovimientos FECC  
